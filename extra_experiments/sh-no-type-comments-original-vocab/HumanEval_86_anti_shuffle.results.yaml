language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local len=0\n\
    \    local len_str=${#str}\n    local len_word=0\n    local len_char=0\n    local\
    \ len_new_str=0\n    local len_new_word=0\n    local len_new_char=0\n    local\
    \ ascii_char=0\n    local ascii_new_char=0\n    local ascii_char_arr=()\n    local\
    \ ascii_new_char_arr=()\n    local ascii_char_arr_len=0\n    local ascii_new_char_arr_len=0\n\
    \    local ascii_char_arr_index=0\n    local ascii_new_char_arr_index=0\n    local\
    \ ascii_char_arr_index_len=0\n    local ascii_new_char_arr_index_len=0\n    local\
    \ ascii_char_arr_index_len_new=0\n    local ascii_new_char_arr_index_len_new=0\n\
    \    local ascii_char_arr_index_len_new_char=0\n    local ascii_new_char_arr_index_len_new_char=0\n\
    \    local ascii_char_arr_index_len_new_char_ascii=0\n    local ascii_new_char_arr_index_len_new_char_ascii=0\n\
    \    local ascii_char_arr_index_len_new_char_ascii_new=0\n    local ascii_new_char_arr_index_len_new_char_ascii_new=0\n\
    \    local ascii_char_arr_index_len_new_char_ascii_new_char=0\n    local ascii_new_char_arr_index_len_new_char_ascii_new_char=0\n\
    \    local ascii_char_arr_index_len_new_char\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo -n $word | grep -o . | sort -n | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local ret\n    for word in $str; do\n\
    \        ret=\"$ret $(echo $word | grep -o . | sort -u | tr -d '\\n')\"\n    done\n\
    \    echo \"$ret\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local words=($(echo \"$str\" | tr ' ' '\\n'))\n    local\
    \ result=\"\"\n    for word in \"${words[@]}\"; do\n        local sorted_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        result=\"$result$sorted_word\
    \ \"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n      \
    \  else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"$word\"\
    \n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            i=$((i+1))\n        else\n\
    \            for ((j=i+1; j<len; j++)); do\n                if [[ ${new_str:$j:1}\
    \ == \" \" ]]; then\n                    break\n                fi\n         \
    \   done\n            for ((k=i; k<j; k++)); do\n                for ((l=k+1;\
    \ l<j; l++)); do\n                    if [[ ${new_str:$k:1} > ${new_str:$l:1}\
    \ ]]; then\n                        char=${new_str:$k:1}\n                   \
    \     new_str=\"${new_str:0:$k}${new_str:$l:1}${new_str:$((k+1)):$((l-k-1))}$char${new_str:$((l+1)):$((len-l-1))}\"\
    \n                    fi\n                done\n            done\n           \
    \ i=$((j-1))\n        fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n        if\
    \ [[ $char == \" \" ]]; then\n            result+=\"$word \"\n            word=\"\
    \"\n        else\n            word+=$(printf \"%s\" \"$char\" | sort)\n      \
    \  fi\n    done\n    result+=\"$word\"\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    for ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n    \
    \    if [[ \"$char\" == \" \" ]]; then\n            new_str+=\" \"\n        else\n\
    \            word+=\"$char\"\n        fi\n        if [[ \"$char\" == \" \" ||\
    \ \"$i\" == \"$((len-1))\" ]]; then\n            len_word=${#word}\n         \
    \   for ((j=0; j<len_word; j++)); do\n                for ((k=j+1; k<len_word;\
    \ k++)); do\n                    if [[ \"${word:$j:1}\" > \"${word:$k:1}\" ]];\
    \ then\n                        char=${word:$j:1}\n                        word=${word:0:$j}${word:$k:1}${word:$((j+1)):$((k-j-1))}${char}${word:$((k+1))}\n\
    \                    fi\n                done\n            done\n            new_str+=\"\
    $word\"\n            word=\"\"\n        fi\n    done\n    echo \"$new_str\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    for word in $str; do\n        local\
    \ sorted_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            sorted_word+=\"\
    ${word:$i:1}\"\n        done\n        sorted_word=$(echo -e \"$sorted_word\" |\
    \ sort)\n        result+=\"$sorted_word \"\n    done\n    echo \"$result\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n      \
    \  else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"$word\"\
    \n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$len}\"\n            i=$((i+1))\n        else\n    \
    \        for ((j=i+1; j<len; j++)); do\n                if [[ ${new_str:$j:1}\
    \ == \" \" ]]; then\n                    break\n                fi\n         \
    \       if [[ $(ord \"${new_str:$j:1}\") -lt $(ord \"$char\") ]]; then\n     \
    \               new_str=\"${new_str:0:$i}${new_str:$j:1}${new_str:$((i+1)):$((j-i))}${new_str:$i:1}${new_str:$((j+1)):$len}\"\
    \n                    char=${new_str:$i:1}\n                fi\n            done\n\
    \        fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh:
    line 44: ord: command not found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not
    found\n/tmp/tmpfx9ns5dl.sh: line 44: ord: command not found\n'''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=0\n  local len_word=0\n\
    \  local len_char=0\n  local ascii_char=0\n  local ascii_char_min=0\n  local ascii_char_min_index=0\n\
    \  local ascii_char_min_index_tmp=0\n  local ascii_char_min_tmp=0\n  local ascii_char_min_tmp_index=0\n\
    \  local ascii_char_min_tmp_index_tmp=0\n  local ascii_char_min_tmp_tmp=0\n  local\
    \ ascii_char_min_tmp_tmp_index=0\n  local ascii_char_min_tmp_tmp_index_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_index=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \  local ascii_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local word\n  local new_word\n  local new_str=\"\"\n  for word\
    \ in $str; do\n    new_word=$(echo \"$word\" | grep -o . | sort | tr -d '\\n')\n\
    \    new_str=\"$new_str $new_word\"\n  done\n  echo \"$new_str\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\n    done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    for word in $str; do\n        local\
    \ sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n        result=\"\
    $result$sorted_word\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local word\n  for word in $str; do\n    echo -n \"$(echo -n \"\
    $word\" | grep -o . | sort | tr -d '\\n')\"\n  done\n  echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local input=\"$1\"\n    local output=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a chars\n    local -a words\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n\
    \    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n    local\
    \ -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n\
    \    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n    local\
    \ -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n\
    \    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n    local\
    \ -i Y=0\n    local -i Z=0\n    local -i space=0\n    local -i exclamation=0\n\
    \    local -i question=0\n    local -i comma=0\n    local -i period=0\n    local\
    \ -i colon=0\n    local -i semicolon=0\n    local -i apostrophe=0\n    local -i\
    \ hyphen=0\n    local -i underscore=0\n    local -i plus=0\n    local -i equals=0\n\
    \    local -i left_paren=0\n    local -i right_paren=0\n    local -\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_list=\"\"\n    local char_list_sorted=\"\"\n    for word in\
    \ $str; do\n        char_list=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n\
    \            char_list=\"$char_list ${word:$i:1}\"\n        done\n        char_list_sorted=$(echo\
    \ $char_list | tr ' ' '\\n' | sort | tr '\\n' ' ')\n        for char in $char_list_sorted;\
    \ do\n            new_str=\"$new_str$char\"\n        done\n        new_str=\"\
    $new_str \"\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            new_str+=$(echo $char | sort -n)\n        done\n        new_str+=\"\
    \ \"\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=${str:$i:1}\n        if [[ $char == \" \" ]]; then\n      \
    \      new_str+=\" \"\n            word=\"\"\n        else\n            word+=$char\n\
    \            for ((j=0; j<${#word}; j++)); do\n                for ((k=j+1; k<${#word};\
    \ k++)); do\n                    if [[ ${word:$j:1} > ${word:$k:1} ]]; then\n\
    \                        char=${word:$j:1}\n                        word=${word:0:$j}${word:$k:1}${word:$j+1:$k-$j-1}${char}${word:$k+1}\n\
    \                    fi\n                done\n            done\n            new_str+=$word\n\
    \        fi\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo -n $word | fold -w1 | sort | tr -d '\\n')\"\n \
    \   done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local new_word=\"\
    \"\n    local char=\"\"\n    local ascii=\"\"\n    local char_ascii=\"\"\n   \
    \ local char_ascii_list=\"\"\n    local char_ascii_list_sorted=\"\"\n    local\
    \ char_ascii_list_sorted_arr=()\n    local char_ascii_list_sorted_arr_len=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local\
    \ c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n    local\
    \ C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n\
    \    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n \
    \   local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n  \
    \  local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=\"${str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            new_str+=\"$word \"\n          \
    \  word=\"\"\n        else\n            word+=\"$char\"\n        fi\n    done\n\
    \    new_str+=\"$word\"\n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n\
    \        char=\"${new_str:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            echo -n \" \"\n        else\n            for ((j=i+1; j<len; j++));\
    \ do\n                if [[ \"${new_str:$j:1}\" == \" \" ]]; then\n          \
    \          break\n                fi\n            done\n            for ((k=i;\
    \ k<j; k++)); do\n                for ((l=k+1; l<j; l++)); do\n              \
    \      if [[ \"${new_str:$k:1}\" > \"${new_str:$l:1}\" ]]; then\n            \
    \            char=\"${new_str:$k:1}\"\n                        new_str=\"${new_str:0:$k}${new_str:$l:1}${new_str:$k+1:$l-$k-1}${char}${new_str:$l+1:$len-$l-1}\"\
    \n                    fi\n                done\n            done\n           \
    \ echo -n \"${new_str:$i:$j-$i}\"\n            i=$j-1\n        fi\n    done\n\
    \    echo\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local words=()\n  local word\n  local i\n  local j\n  local c\n\
    \  local char\n  local new_word\n  local new_str\n  local len\n  local space\n\
    \  local new_space\n  local new_str_len\n  local new_str_len_prev\n  local new_str_len_diff\n\
    \  local new_str_len_diff_prev\n  local new_str_len_diff_max\n  local new_str_len_diff_max_index\n\
    \  local new_str_len_diff_max_index_prev\n  local new_str_len_diff_max_index_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev\n  local new_str_len_diff_max_index_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev_prev\n  local new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local new_str_len_diff_max_index_prev_prev_prev_prev\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    for word in $str; do\n        local\
    \ sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n        result=\"\
    $result$sorted_word\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local i=0\n\
    \    local j=0\n    local len=${#str}\n    local char=\"\"\n    local char_ascii=0\n\
    \    local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_min_tmp=0\n    local char_ascii_min_tmp_index=0\n    local\
    \ char_ascii_min_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp=0\n    local\
    \ char_ascii_min_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            new_str+=\"$word \"\n            word=\"\"\n        else\n      \
    \      word+=\"$char\"\n        fi\n    done\n    new_str+=\"$word\"\n    for\
    \ ((i=0; i<${#new_str}; i++)); do\n        char=\"${new_str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            echo -n \"$char\"\n        else\n\
    \            word=\"\"\n            for ((j=i; j<${#new_str}; j++)); do\n    \
    \            char=\"${new_str:$j:1}\"\n                if [[ \"$char\" == \" \"\
    \ ]]; then\n                    break\n                else\n                \
    \    word+=\"$char\"\n                fi\n            done\n            for ((k=0;\
    \ k<${#word}; k++)); do\n                char=\"${word:$k:1}\"\n             \
    \   for ((j=k+1; j<${#word}; j++)); do\n                    if [[ \"${word:$j:1}\"\
    \ < \"$char\" ]]; then\n                        char=\"${word:$j:1}\"\n      \
    \                  word=\"${word:0:$j}${word:$k:1}${word:$j+1}\"\n           \
    \             word=\"${word:0:$k}$char${word:$k+1}\"\n                    fi\n\
    \                done\n            done\n            echo -n \"$word\"\n     \
    \       i=$j-1\n        fi\n    done\n    echo\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=20>
  stdout: <_io.BufferedReader name=3>
  timestamp: 1660344590
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            result+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo -n \"\
    ${str:$i:1}\" | sort -n)\"\n        fi\n    done\n    result+=\"$word\"\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    while [ $i -lt $len ]; do\n        if [ \"${str:$i:1}\" ==\
    \ \" \" ]; then\n            res=\"$res $word\"\n            word=\"\"\n     \
    \   else\n            word=\"$word${str:$i:1}\"\n        fi\n        i=$((i+1))\n\
    \    done\n    res=\"$res $word\"\n    echo \"$res\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n      \
    \  else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"$word\"\
    \n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            len=$((len+1))\n      \
    \      i=$((i+1))\n        else\n            for ((j=i+1; j<len; j++)); do\n \
    \               if [[ ${new_str:$j:1} == \" \" ]]; then\n                    break\n\
    \                fi\n            done\n            for ((k=i; k<j; k++)); do\n\
    \                for ((l=k+1; l<j; l++)); do\n                    if [[ ${new_str:$k:1}\
    \ > ${new_str:$l:1} ]]; then\n                        char=${new_str:$k:1}\n \
    \                       new_str=\"${new_str:0:$k}${new_str:$l:1}${new_str:$((k+1)):$((l-k-1))}$char${new_str:$((l+1)):$((len-l-1))}\"\
    \n                    fi\n                done\n            done\n           \
    \ i=$((j-1))\n        fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    local len_word=0\n    local len_res=0\n    local len_char=0\n    local ascii_char=0\n\
    \    local ascii_char_min=0\n    local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n\
    \    local ascii_char_min_tmp=0\n    local ascii_char_min_tmp_index=0\n    local\
    \ ascii_char_min_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp=0\n    local\
    \ ascii_char_min_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=\"${str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            result+=\"$word \"\n           \
    \ word=\"\"\n        else\n            len=${#word}\n            for ((j=0; j<len;\
    \ j++)); do\n                if [[ \"${word:$j:1}\" > \"$char\" ]]; then\n   \
    \                 word=\"${word:0:$j}$char${word:$j}\"\n                    break\n\
    \                fi\n            done\n            if [[ $j -eq $len ]]; then\n\
    \                word+=\"$char\"\n            fi\n        fi\n    done\n    result+=\"\
    $word\"\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local input=$1\n    local output=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local char_list=\"\
    \"\n    local char_list_sorted=\"\"\n    local char_list_sorted_len=\"\"\n   \
    \ local i=0\n    local j=0\n    for word in $input; do\n        char_list=\"\"\
    \n        char_ascii_list=\"\"\n        for ((i=0; i<${#word}; i++)); do\n   \
    \         char=${word:$i:1}\n            char_ascii=$(printf \"%d\" \"'$char\"\
    )\n            char_list=\"$char_list $char\"\n            char_ascii_list=\"\
    $char_ascii_list $char_ascii\"\n        done\n        char_list_sorted=$(echo\
    \ \"$char_ascii_list\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \")\n    \
    \    char_list_sorted_len=$(echo \"$char_list_sorted\" | wc -w)\n        for ((j=0;\
    \ j<$char_list_sorted_len; j++)); do\n            char_ascii=$(echo \"$char_list_sorted\"\
    \ | cut -d \" \" -f $((j+1)))\n            char=$(printf \\\\$(printf '%03o' $char_ascii))\n\
    \            output=\"$output$char\"\n        done\n        output=\"$output \"\
    \n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpp52ri3e4.sh: line 39: warning: command substitution: ignored
    null byte in input\n'''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local new_str=\"\"\n    local i=0\n    for\
    \ word in $str; do\n        if [[ $i -gt 0 ]]; then\n            new_str+=\" \"\
    \n        fi\n        new_str+=$(echo $word | grep -o . | sort | tr -d '\\n')\n\
    \        i=$((i+1))\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local i=0\n\
    \    local j=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n       \
    \ if [ \"${str:$i:1}\" == \" \" ]; then\n            res+=\"$word \"\n       \
    \     word=\"\"\n        else\n            word+=\"$(echo \"${str:$i:1}\" | sort)\"\
    \n        fi\n        i=$((i+1))\n    done\n    res+=\"$word\"\n    echo \"$res\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n\t\
    local string=\"$1\"\n\tlocal word\n\tlocal new_string=\"\"\n\tfor word in $string;\
    \ do\n\t\tlocal new_word=\"\"\n\t\tlocal char\n\t\tfor char in $(echo \"$word\"\
    \ | fold -w1); do\n\t\t\tnew_word=\"$new_word$(echo \"$char\" | fold -w1 | sort\
    \ | tr -d '\\n')\"\n\t\tdone\n\t\tnew_string=\"$new_string $new_word\"\n\tdone\n\
    \techo \"$new_string\" | sed 's/^ //'\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    for word in $str; do\n        local\
    \ sorted_word=\"\"\n        for ((i=0; i<${#word}; i++)); do\n            local\
    \ char=${word:$i:1}\n            local sorted_word=$sorted_word$(echo -e \"$char\\\
    n$sorted_word\" | sort -n | tr -d '\\n')\n        done\n        result=\"$result\
    \ $sorted_word\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a chars=()\n    for word in $str; do\n        chars=()\n      \
    \  for char in $(echo $word | grep -o .); do\n            chars+=($char)\n   \
    \     done\n        chars=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n     \
    \   new_str+=\"${chars[@]} \"\n    done\n    echo $new_str\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len2=0\n\
    \    local len3=0\n    local len4=0\n    local len5=0\n    local len6=0\n    local\
    \ len7=0\n    local len8=0\n    local len9=0\n    local len10=0\n    local len11=0\n\
    \    local len12=0\n    local len13=0\n    local len14=0\n    local len15=0\n\
    \    local len16=0\n    local len17=0\n    local len18=0\n    local len19=0\n\
    \    local len20=0\n    local len21=0\n    local len22=0\n    local len23=0\n\
    \    local len24=0\n    local len25=0\n    local len26=0\n    local len27=0\n\
    \    local len28=0\n    local len29=0\n    local len30=0\n    local len31=0\n\
    \    local len32=0\n    local len33=0\n    local len34=0\n    local len35=0\n\
    \    local len36=0\n    local len37=0\n    local len38=0\n    local len39=0\n\
    \    local len40=0\n    local len41=0\n    local len42=0\n    local len43=0\n\
    \    local len44=0\n    local len45=0\n    local len46=0\n    local len47=0\n\
    \    local len48=0\n    local len49=0\n    local len50=0\n    local len51=0\n\
    \    local len52=0\n    local len53=0\n    local len54=0\n    local len55=0\n\
    \    local len56=0\n    local len57=0\n    local len58=0\n    local len59=0\n\
    \    local len60=0\n    local len61=0\n    local len62=0\n    local len63=0\n\
    \    local len64=0\n    local len65=0\n    local len66=0\n    local len67=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local -a words\n    local -a sorted_words\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i space=0\n    local\
    \ -i exclamation=0\n    local -i question=0\n    local -i comma=0\n    local -i\
    \ period=0\n    local -i colon=0\n    local -i semicolon=0\n    local -i apostrophe=0\n\
    \    local -i dash=0\n    local -i double_quote=0\n    local -i left_paren=0\n\
    \    local -i right_paren=0\n    local -i left_bracket=0\n    local -i right_bracket=0\n\
    \    local -i left_brace=0\n    local -i right_brace=0\n    local -i backslash=0\n\
    \    local -i forward_slash=0\n    local -i less_than=0\n    local -i greater_than=0\n\
    \    local -i at=0\n    local -i hash=0\n    local -i dollar=0\n    local -i percent=0\n\
    \    local -i caret=0\n    local -i ampersand=0\n    local -i asterisk=0\n   \
    \ local -i plus=0\n    local -i equals=0\n    local -i tilde=0\n    local -i backtick=0\n\
    \    local -i underscore=0\n    local -i bar=0\n    local -i colon=0\n    local\
    \ -i semicolon=0\n    local -i apostrophe=0\n    local -i dash=0\n    local -i\
    \ double_quote=0\n    local -i left_paren=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    local len_char=0\n    local ascii_char=0\n    local ascii_char_min=0\n\
    \    local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n    local\
    \ ascii_char_min_tmp=0\n    local ascii_char_min_tmp_index=0\n    local ascii_char_min_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local char_list=\"\
    \"\n    local char_ascii_list_sorted=\"\"\n    local char_list_sorted=\"\"\n \
    \   local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n  \
    \  local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n   \
    \ local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local\
    \ x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n\
    \    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n \
    \   local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n  \
    \  local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n   \
    \ local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local\
    \ x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n\
    \    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n \
    \   local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n  \
    \  local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n   \
    \ local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n    local\
    \ X=0\n    local Y=0\n    local Z=0\n    local space=0\n    local exclamation=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a arr\n    local -a new_arr\n    local -a word_arr\n    local -a\
    \ char_arr\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i\
    \ l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local\
    \ -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n\
    \    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local\
    \ -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n\
    \    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local\
    \ -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n\
    \    local -i space=0\n    local -i exclamation=0\n    local -i question=0\n \
    \   local -i comma=0\n    local -i period=0\n    local -i colon=0\n    local -i\
    \ semicolon=0\n    local -i apostrophe=0\n    local -i dash=0\n    local -i underscore=0\n\
    \    local -i plus=0\n    local -i equal=0\n    local -i left_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=${str:$i:1}\n        if [[ $char == \" \" ]]; then\n      \
    \      new_str+=\" \"\n            continue\n        fi\n        for ((j=0; j<${#word};\
    \ j++)); do\n            if [[ ${word:$j:1} > $char ]]; then\n               \
    \ word=${word:0:$j}$char${word:$j}\n                break\n            fi\n  \
    \      done\n        if [[ $j -eq ${#word} ]]; then\n            word+=$char\n\
    \        fi\n        new_str+=$word\n        word=\"\"\n    done\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local result=\"\"\n    local word=\"\"\n    for ((i=0;\
    \ i<${#string}; i++)); do\n        if [[ ${string:$i:1} == \" \" ]]; then\n  \
    \          result+=\"$word \"\n            word=\"\"\n        else\n         \
    \   word+=\"$(echo -n \"${string:$i:1}\" | sort -n)\"\n        fi\n    done\n\
    \    result+=\"$word\"\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result\n    for word in $str; do\n\
    \        result+=\"$(echo $word | grep -o . | sort | tr -d '\\n')\"\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a new_words\n    local -a new_str\n\
    \    local i=0\n    local j=0\n    local k=0\n    local word\n    local new_word\n\
    \    local char\n    local new_char\n    local -i char_ascii\n    local -i new_char_ascii\n\
    \    local -i min_ascii\n    local -i min_index\n    local -i len\n    local -i\
    \ len_new_str\n    local -i len_new_word\n    local -i len_word\n    local -i\
    \ len_char\n    local -i len_new_char\n    local -i len_new_words\n    local -i\
    \ len_words\n    local -i len_new_str\n    local -i len_str\n    local -i len_new_char\n\
    \    local -i len_char\n    local -i len_new_word\n    local -i len_word\n   \
    \ local -i len_new_words\n    local -i len_words\n    local -i len_new_str\n \
    \   local -i len_str\n    local -i len_new_char\n    local -i len_char\n    local\
    \ -i len_new_word\n    local -i len_word\n    local -i len_new_words\n    local\
    \ -i len_words\n    local -i len_new_str\n    local -i len_str\n    local -i len_new_char\n\
    \    local -i len_char\n    local -i len_new_word\n    local -i len_word\n   \
    \ local -i len_new_words\n    local -i len_words\n    local -i len_new_str\n \
    \   local -i len_str\n    local -i len_new_char\n    local -i len_char\n    local\
    \ -i len_new_word\n    local -i len_word\n    local -i len_new_words\n    local\
    \ -i len_words\n    local -i len_new_str\n    local -i len_str\n    local -i len_new_char\n\
    \    local -i len_char\n    local -i len_new_word\n   \n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local char_ascii_list_sorted=\"\
    \"\n    local char_ascii_list_sorted_arr=\"\"\n    local char_ascii_list_sorted_arr_len=\"\
    \"\n    local char_ascii_list_sorted_arr_idx=\"\"\n    local char_ascii_list_sorted_arr_val=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char=\"\"\n    local char_ascii_list_sorted_arr_val_char_ascii=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list=\"\"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr=\"\"\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_len=\"\"\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_idx=\"\"\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val=\"\"\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_char=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_char_ascii=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_char_ascii_list=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_char_asci\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for char in $(echo \"$str\" | fold -w1); do\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            result=\"$result $word\"\n            word=\"\"\n\
    \        else\n            word=\"$word$char\"\n        fi\n    done\n    result=\"\
    $result $word\"\n    result=$(echo \"$result\" | sed 's/  */ /g')\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local words=()\n  local word\n  local i\n  local j\n  local char\n\
    \  local chars=()\n  local sorted_chars\n  local sorted_word\n  local sorted_str\n\
    \n  # Split string into words\n  while read -r word; do\n    words+=(\"$word\"\
    )\n  done < <(echo \"$str\" | tr ' ' '\\n')\n\n  # Sort characters in each word\n\
    \  for ((i=0; i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\n    chars=()\n\
    \    for ((j=0; j<${#word}; j++)); do\n      char=\"${word:$j:1}\"\n      chars+=(\"\
    $char\")\n    done\n    sorted_chars=$(printf '%s\\n' \"${chars[@]}\" | sort)\n\
    \    sorted_word=$(printf '%s' \"$sorted_chars\")\n    words[$i]=\"$sorted_word\"\
    \n  done\n\n  # Join words back into a string\n  sorted_str=$(printf '%s ' \"\
    ${words[@]}\")\n  echo \"$sorted_str\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo -n $word | fold -w1 | sort | tr -d '\\n')\"\n \
    \   done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local len=${#str}\n    local char=\"\"\n  \
    \  local char_arr=()\n    local char_arr_len=0\n    local char_arr_index=0\n \
    \   local char_arr_index_min=0\n    local char_arr_index_min_val=0\n    local\
    \ char_arr_index_min_val_ascii=0\n    local char_arr_index_min_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index=0\n    local char_arr_index_min_val_ascii_min_index_val=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii=0\n    local char_arr_index_min_val_ascii_min_index_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index=0\n    local\
    \ char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val=0\n    local\
    \ char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii=0\n   \
    \ local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min_index=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min_index_val=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n        if [[\
    \ $char == \" \" ]]; then\n            res+=\"$word \"\n            word=\"\"\n\
    \        else\n            word+=$(echo $char | fold -w1 | sort | tr -d '\\n')\n\
    \        fi\n    done\n    res+=\"$word\"\n    echo $res\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=()\n    local word=''\n    local char=''\n  \
    \  local i=0\n    local j=0\n    local k=0\n    local str_len=${#str}\n    for\
    \ ((i=0; i<str_len; i++)); do\n        char=${str:i:1}\n        if [[ $char ==\
    \ ' ' ]]; then\n            words[$j]=$word\n            word=''\n           \
    \ j=$((j+1))\n        else\n            word=$word$char\n        fi\n    done\n\
    \    words[$j]=$word\n    local words_len=${#words[@]}\n    local sorted_word=''\n\
    \    local sorted_words=()\n    for ((i=0; i<words_len; i++)); do\n        word=${words[$i]}\n\
    \        local word_len=${#word}\n        local chars=()\n        for ((j=0; j<word_len;\
    \ j++)); do\n            chars[$j]=${word:j:1}\n        done\n        chars=($(echo\
    \ ${chars[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n        sorted_word=''\n\
    \        for ((j=0; j<word_len; j++)); do\n            sorted_word=$sorted_word${chars[$j]}\n\
    \        done\n        sorted_words[$i]=$sorted_word\n    done\n    sorted_word=''\n\
    \    for ((i=0; i<words_len; i++)); do\n        sorted_word=$sorted_word${sorted_words[$i]}\n\
    \        if [[ $i -lt $((words_len-1)) ]]; then\n            sorted_word=$sorted_word'\
    \ '\n        fi\n    done\n    echo $sorted_word\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    for ((i=0; i<${#string}; i++));\
    \ do\n        char=${string:$i:1}\n        if [[ $char == \" \" ]]; then\n   \
    \         new_string+=\"$word \"\n            word=\"\"\n        else\n      \
    \      word+=$char\n        fi\n    done\n    new_string+=\"$word\"\n    echo\
    \ $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a chars=()\n    local -a words=()\n    local -a new_words=()\n\
    \    local -a new_chars=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i len=0\n    local -i len_str=0\n    local\
    \ -i len_word=0\n    local -i len_char=0\n    local -i len_chars=0\n    local\
    \ -i len_words=0\n    local -i len_new_words=0\n    local -i len_new_chars=0\n\
    \    local -i len_new_str=0\n    local -i len_new_word=0\n    local -i len_new_char=0\n\
    \    local -i len_new_chars=0\n    local -i len_new_words=0\n    local -i len_new_str=0\n\
    \    local -i len_new_word=0\n    local -i len_new_char=0\n    local -i len_new_chars=0\n\
    \    local -i len_new_words=0\n    local -i len_new_str=0\n    local -i len_new_word=0\n\
    \    local -i len_new_char=0\n    local -i len_new_chars=0\n    local -i len_new_words=0\n\
    \    local -i len_new_str=0\n    local -i len_new_word=0\n    local -i len_new_char=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ string=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n \
    \ local -a chars=()\n  for word in $string; do\n    for ((i=0; i<${#word}; i++));\
    \ do\n      chars[i]=${word:$i:1}\n    done\n    chars=($(printf \"%s\\n\" \"\
    ${chars[@]}\" | sort))\n    for char in \"${chars[@]}\"; do\n      result+=\"\
    $char\"\n    done\n    result+=\" \"\n  done\n  echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local i=0\n \
    \   local j=0\n    local k=0\n    local len=${#str}\n    local len_word=0\n  \
    \  local char=\"\"\n    local char_ascii=0\n    local char_ascii_min=0\n    local\
    \ char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n\
    \    local char_ascii_tmp=0\n    local char_tmp=\"\"\n    local char_tmp_index=0\n\
    \    local char_tmp_index_tmp=0\n    local char_tmp_tmp=\"\"\n    local char_tmp_tmp_index=0\n\
    \    local char_tmp_tmp_index_tmp=0\n    local char_tmp_tmp_tmp=\"\"\n    local\
    \ char_tmp_tmp_tmp_index=0\n    local char_tmp_tmp_tmp_index_tmp=0\n    local\
    \ char_tmp_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_tmp_index=0\n    local\
    \ char_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_tmp_tmp_tmp_tmp_tmp=\"\"\n\
    \    local char_tmp_tmp_tmp_tmp_tmp_index=0\n    local char_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_tmp_tmp_tmp_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_tmp_tmp_tmp_tmp_tmp_tmp_tmp=\"\
    \"\n    local char_tmp_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n    local char_tmp_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n      \
    \  else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"$word\"\
    \n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            i=$((i+1))\n        else\n\
    \            for ((j=i+1; j<len; j++)); do\n                if [[ ${new_str:$j:1}\
    \ == \" \" ]]; then\n                    break\n                fi\n         \
    \   done\n            for ((k=i; k<j; k++)); do\n                for ((l=k+1;\
    \ l<j; l++)); do\n                    if [[ ${new_str:$k:1} > ${new_str:$l:1}\
    \ ]]; then\n                        char=${new_str:$k:1}\n                   \
    \     new_str=\"${new_str:0:$k}${new_str:$l:1}${new_str:$((k+1)):$((l-k-1))}$char${new_str:$((l+1)):$((len-l-1))}\"\
    \n                    fi\n                done\n            done\n           \
    \ i=$((j-1))\n        fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local char_ascii_list_sorted=\"\
    \"\n    local char_ascii_list_sorted_arr=()\n    local char_ascii_list_sorted_arr_len=0\n\
    \    local char_ascii_list_sorted_arr_idx=0\n    local char_ascii_list_sorted_arr_val=\"\
    \"\n    local char_ascii_list_sorted_arr_val_len=0\n    local char_ascii_list_sorted_arr_val_idx=0\n\
    \    local char_ascii_list_sorted_arr_val_char=\"\"\n    local char_ascii_list_sorted_arr_val_char_ascii=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list=\"\"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted=\"\
    \"\n    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr=()\n \
    \   local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_len=0\n  \
    \  local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_idx=0\n   \
    \ local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val=\"\"\n \
    \   local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_len=0\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr_val_idx=0\n\
    \    local char_ascii_list_sorted_arr_val_char_ascii_list_sorted_arr\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} != \" \" ]]; then\n            word+=${str:$i:1}\n\
    \        else\n            result+=\"$(echo -n \"$word\" | sort -n | tr -d '\\\
    n') \"\n            word=\"\"\n        fi\n    done\n    result+=\"$(echo -n \"\
    $word\" | sort -n | tr -d '\\n')\"\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            result+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo ${str:$i:1}\
    \ | fold -w1 | sort -n | tr -d '\\n')\"\n        fi\n    done\n    echo \"$result$word\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    local len_char=0\n    local char_arr=()\n    local char_arr_len=0\n\
    \    local char_arr_index=0\n    local char_arr_index_min=0\n    local char_arr_index_min_val=0\n\
    \    local char_arr_index_min_val_ascii=0\n    local char_arr_index_min_val_ascii_min=0\n\
    \    for ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char\
    \ == \" \" ]]; then\n            result+=\" \"\n            word=\"\"\n      \
    \  else\n            word+=$char\n            len_word=${#word}\n            char_arr=()\n\
    \            char_arr_len=0\n            for ((j=0; j<len_word; j++)); do\n  \
    \              char_arr[$j]=${word:$j:1}\n                char_arr_len=$((char_arr_len+1))\n\
    \            done\n            for ((j=0; j<char_arr_len; j++)); do\n        \
    \        char_arr_index_min_val=${char_arr[$j]}\n                char_arr_index_min_val_ascii_min=$(printf\
    \ \"%d\" \"'$char_arr_index_min_val\")\n                char_arr_index_min=$j\n\
    \                for ((k=j; k<char_arr_len; k++)); do\n                    char_arr_index_min_val=${char_arr[$k]}\n\
    \                    char_arr_index_min_val_ascii=$(printf \"%d\" \"'$char_arr_index_min_val\"\
    )\n                    if [[ $char_arr_index_min_val_ascii -lt $char_arr_index_min_val_ascii_min\
    \ ]]; then\n                        char_arr_index_min_val_ascii_min=$\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphvigunjz.sh: line 55: syntax error near unexpected token `}''\n/tmp/tmphvigunjz.sh:
    line 55: `}''\n"'
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -u | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local arr=()\n    local word=\"\"\n    local char=\"\"\
    \n    local i=0\n    local j=0\n    local k=0\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            arr+=(\"$word\")\n            word=\"\"\n        else\n         \
    \   word=\"$word$char\"\n        fi\n    done\n    arr+=(\"$word\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        word=\"${arr[$i]}\"\n        for ((j=0; j<${#word};\
    \ j++)); do\n            for ((k=j+1; k<${#word}; k++)); do\n                if\
    \ [[ \"${word:$j:1}\" > \"${word:$k:1}\" ]]; then\n                    char=\"\
    ${word:$j:1}\"\n                    word=\"${word:0:$j}${word:$k:1}${word:$((j+1)):$((k-j-1))}$char${word:$((k+1))}\"\
    \n                fi\n            done\n        done\n        arr[$i]=\"$word\"\
    \n    done\n    echo \"${arr[@]}\" | tr -d ' '\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a arr\n    local -a arr2\n    local -a arr3\n    local\
    \ -a arr4\n    local -a arr5\n    local -a arr6\n    local -a arr7\n    local\
    \ -a arr8\n    local -a arr9\n    local -a arr10\n    local -a arr11\n    local\
    \ -a arr12\n    local -a arr13\n    local -a arr14\n    local -a arr15\n    local\
    \ -a arr16\n    local -a arr17\n    local -a arr18\n    local -a arr19\n    local\
    \ -a arr20\n    local -a arr21\n    local -a arr22\n    local -a arr23\n    local\
    \ -a arr24\n    local -a arr25\n    local -a arr26\n    local -a arr27\n    local\
    \ -a arr28\n    local -a arr29\n    local -a arr30\n    local -a arr31\n    local\
    \ -a arr32\n    local -a arr33\n    local -a arr34\n    local -a arr35\n    local\
    \ -a arr36\n    local -a arr37\n    local -a arr38\n    local -a arr39\n    local\
    \ -a arr40\n    local -a arr41\n    local -a arr42\n    local -a arr43\n    local\
    \ -a arr44\n    local -a arr45\n    local -a arr46\n    local -a arr47\n    local\
    \ -a arr48\n    local -a arr49\n    local -a arr50\n    local -a arr51\n    local\
    \ -a arr52\n    local -a arr53\n    local -a arr54\n    local -a arr55\n    local\
    \ -a arr56\n    local -a arr57\n    local -a arr58\n    local -a arr59\n    local\
    \ -a arr60\n    local -a arr61\n    local -a arr62\n    local -a arr63\n    local\
    \ -a arr64\n    local -a arr65\n    local -a arr66\n    local -a arr67\n    local\
    \ -a arr68\n    local -a arr69\n    local -a arr70\n    local -a arr71\n    local\
    \ -a arr72\n    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            result+=$(echo $char | sort -u)\n        done\n        result+=\"\
    \ \"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local ascii=\"\"\n    local -A ascii_map\n    local -A ascii_map_sorted\n\
    \    local -a ascii_keys\n    local -a ascii_keys_sorted\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local -a ascii_values\n    local ascii_values_str=\"\"\n   \
    \ local ascii_values_str_sorted=\"\"\n    local ascii_values_str_sorted_len=0\n\
    \    local ascii_values_str_sorted_len_minus_1=0\n    local ascii_values_str_sorted_len_minus_2=0\n\
    \    local ascii_values_str_sorted_len_minus_3=0\n    local ascii_values_str_sorted_len_minus_4=0\n\
    \    local ascii_values_str_sorted_len_minus_5=0\n    local ascii_values_str_sorted_len_minus_6=0\n\
    \    local ascii_values_str_sorted_len_minus_7=0\n    local ascii_values_str_sorted_len_minus_8=0\n\
    \    local ascii_values_str_sorted_len_minus_9=0\n    local ascii_values_str_sorted_len_minus_10=0\n\
    \    local ascii_values_str_sorted_len_minus_11=0\n    local ascii_values_str_sorted_len_minus_12=0\n\
    \    local ascii_values_str_sorted_len_minus_13=0\n    local\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo -n $word | grep -o . | sort -u | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=''\n    local word=''\n    local char=''\n\
    \    local i=0\n    local j=0\n    local len=0\n    local len_str=${#str}\n  \
    \  for ((i=0; i<len_str; i++)); do\n        char=${str:$i:1}\n        if [[ $char\
    \ == ' ' ]]; then\n            new_str+=\"$word \"\n            word=''\n    \
    \    else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"\
    $word\"\n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ $char == ' ' ]]; then\n            echo -n \"$char\"\n        else\n\
    \            word=''\n            for ((j=i; j<len; j++)); do\n              \
    \  char=${new_str:$j:1}\n                if [[ $char == ' ' ]]; then\n       \
    \             break\n                else\n                    word+=\"$char\"\
    \n                fi\n            done\n            echo -n \"$(echo -n \"$word\"\
    \ | sort)\"\n            i=$j\n        fi\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=\"${str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            result+=\"$word \"\n           \
    \ word=\"\"\n        else\n            word+=\"$char\"\n        fi\n    done\n\
    \    result+=\"$word\"\n    len=${#result}\n    for ((i=0; i<len; i++)); do\n\
    \        char=\"${result:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            result=\"${result:0:$i} $char${result:$((i+1)):$len}\"\n        else\n\
    \            for ((j=$((i+1)); j<len; j++)); do\n                if [[ \"${result:$j:1}\"\
    \ == \" \" ]]; then\n                    break\n                fi\n         \
    \       if [[ \"${result:$i:1}\" > \"${result:$j:1}\" ]]; then\n             \
    \       char=\"${result:$i:1}\"\n                    result=\"${result:0:$i}${result:$j:1}${result:$((i+1)):$len}\"\
    \n                    result=\"${result:0:$j}$char${result:$((j+1)):$len}\"\n\
    \                fi\n            done\n        fi\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a chars=()\n    local -a words=()\n    local -a sorted_chars=()\n\
    \    local -a sorted_words=()\n    local -a sorted_str=()\n    local -a sorted_str_with_spaces=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation=()\n    local -a sorted_str_with_spaces_and_punctuation_and_caps=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis_and_other=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis_and_other_and_spaces=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis_and_other_and_spaces_and_punctuation=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis_and_other_and_spaces_and_punctuation_and_caps=()\n\
    \    local -a sorted_str_with_spaces_and_punctuation_and_caps_and_numbers_and_symbols_and_emojis_and_other_and_spaces_and_punctuation_and_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=($(echo $str | tr \" \" \"\\n\"))\n    local\
    \ result=\"\"\n    for word in ${words[@]}; do\n        local chars=($(echo $word\
    \ | grep -o .))\n        local sorted_chars=($(for char in ${chars[@]}; do echo\
    \ $char; done | sort))\n        local sorted_word=$(for char in ${sorted_chars[@]};\
    \ do echo -n $char; done)\n        result=\"$result $sorted_word\"\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n   \
    \     else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"\
    $word\"\n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            len=$((len+1))\n      \
    \      i=$((i+1))\n        else\n            for ((j=i+1; j<len; j++)); do\n \
    \               if [[ \"${new_str:$j:1}\" == \" \" ]]; then\n                \
    \    break\n                fi\n            done\n            for ((k=i; k<j;\
    \ k++)); do\n                for ((l=k+1; l<j; l++)); do\n                   \
    \ if [[ \"${new_str:$k:1}\" > \"${new_str:$l:1}\" ]]; then\n                 \
    \       char=${new_str:$k:1}\n                        new_str=\"${new_str:0:$k}${new_str:$l:1}${new_str:$((k+1)):$((l-k-1))}$char${new_str:$((l+1)):$((len-l-1))}\"\
    \n                    fi\n                done\n            done\n           \
    \ i=$((j-1))\n        fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=$(echo $str | tr \" \" \"\\n\")\n    local result=\"\
    \"\n    for word in $words; do\n        local chars=$(echo $word | grep -o .)\n\
    \        local sorted=$(echo $chars | tr \"\\n\" \" \" | sort -n | tr -d \"\\\
    n\")\n        result=\"$result $sorted\"\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local -a words\n    local -a sorted_words\n    local\
    \ -a result\n    local i\n    local j\n    local k\n    local word\n    local\
    \ sorted_word\n    local result_str\n\n    # Split the string into words\n   \
    \ IFS=' ' read -r -a words <<< \"$str\"\n\n    # Sort each word\n    for ((i=0;\
    \ i<${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\n        sorted_word=\"\
    \"\n        for ((j=0; j<${#word}; j++)); do\n            sorted_word+=\"${word:$j:1}\"\
    \n        done\n        sorted_word=$(echo \"$sorted_word\" | fold -w1 | sort\
    \ | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n\n    #\
    \ Combine the sorted words\n    for ((i=0; i<${#words[@]}; i++)); do\n       \
    \ word=\"${words[$i]}\"\n        sorted_word=\"${sorted_words[$i]}\"\n       \
    \ result_str=\"\"\n        for ((j=0; j<${#word}; j++)); do\n            for ((k=0;\
    \ k<${#sorted_word}; k++)); do\n                if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\"\
    \ ]]; then\n                    result_str+=\"${sorted_word:$k:1}\"\n        \
    \            sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\"\
    \n                    break\n                fi\n            done\n        done\n\
    \        result+=(\"$result_str\")\n    done\n\n    # Combine the result\n   \
    \ result_str=\"\"\n    for ((i=0; i<${#result[@]}; i++)); do\n        result_str+=\"\
    ${result[$i]}\"\n        if [[ $i -lt $(( ${#result[@]} - 1 )) ]]; then\n    \
    \        result_str+=\" \"\n        fi\n    done\n\n    echo \"$result_str\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local words=()\n    local i\n    local\
    \ j\n    local c\n    local c2\n    local result=\"\"\n    for word in $str; do\n\
    \        words+=(\"$word\")\n    done\n    for ((i=0; i<${#words[@]}; i++)); do\n\
    \        word=\"${words[$i]}\"\n        for ((j=0; j<${#word}; j++)); do\n   \
    \         c=\"${word:$j:1}\"\n            for ((k=j+1; k<${#word}; k++)); do\n\
    \                c2=\"${word:$k:1}\"\n                if [[ \"$c\" > \"$c2\" ]];\
    \ then\n                    word=\"${word:0:$j}$c2${word:$((j+1)):$((k-j-1))}$c${word:$((k+1))}\"\
    \n                fi\n            done\n        done\n        words[$i]=\"$word\"\
    \n    done\n    for ((i=0; i<${#words[@]}; i++)); do\n        result=\"$result${words[$i]}\
    \ \"\n    done\n    echo \"${result:0:${#result}-1}\"\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        local sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n\
    \        result=\"$result$sorted_word\"\n    done\n    echo \"$result\"\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=$1\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\n  local\
    \ -a chars\n  local -a words\n  local -a new_words\n  local -a new_chars\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i A=0\n  local -i B=0\n  local\
    \ -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n  local\
    \ -i H=0\n  local -i I=0\n  local -i J=0\n  local -i K=0\n  local -i L=0\n  local\
    \ -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n  local -i Q=0\n  local\
    \ -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n  local\
    \ -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i space=0\n\
    \  local -i exclamation=0\n  local -i question=0\n  local -i comma=0\n  local\
    \ -i period=0\n  local -i colon=0\n  local -i semicolon=0\n  local -i apostrophe=0\n\
    \  local -i dash=0\n  local -i underscore=0\n  local -i plus=0\n  local -i equal=0\n\
    \  local -i left_paren\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n   \
    \ local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local\
    \ h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n   \
    \ local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local\
    \ H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n\
    \    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n \
    \   local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n  \
    \  local X=0\n    local Y=0\n    local Z=0\n    local space=0\n    local exclamation=0\n\
    \    local question=0\n    local comma=0\n    local period=0\n    local colon=0\n\
    \    local semicolon=0\n    local dash=0\n    local apostrophe=0\n    local left_parenthesis=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    for ((\
    \ i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \" \" ]]; then\n\
    \            new_string+=\"$word \"\n            word=\"\"\n        else\n   \
    \         word+=$(echo \"${string:$i:1}\" | sort)\n        fi\n    done\n    new_string+=\"\
    $word\"\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local -a words\n    local -a new_words\n    local -a\
    \ new_str\n    local word\n    local new_word\n    local i\n    local j\n    local\
    \ c\n    local -i len\n    local -i len_word\n    local -i len_new_word\n    local\
    \ -i len_new_str\n    local -i len_words\n    local -i len_new_words\n    local\
    \ -i len_new_str\n\n    words=($(echo \"$str\" | tr ' ' '\\n'))\n    len_words=${#words[@]}\n\
    \    for ((i=0; i<len_words; i++)); do\n        word=${words[$i]}\n        len_word=${#word}\n\
    \        new_word=\"\"\n        for ((j=0; j<len_word; j++)); do\n           \
    \ c=${word:$j:1}\n            new_word=\"$new_word$c\"\n        done\n       \
    \ new_words[$i]=$(echo \"$new_word\" | grep -o . | sort | tr -d '\\n')\n    done\n\
    \    len_new_words=${#new_words[@]}\n    for ((i=0; i<len_new_words; i++)); do\n\
    \        new_str[$i]=${new_words[$i]}\n        new_str[$i+1]=\" \"\n    done\n\
    \    len_new_str=${#new_str[@]}\n    new_str[$len_new_str-1]=\"\"\n    echo \"\
    ${new_str[@]}\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n   \
    \ local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local\
    \ h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n   \
    \ local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local\
    \ H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n\
    \    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n \
    \   local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n  \
    \  local X=0\n    local Y=0\n    local Z=0\n    local space=0\n    local excl=0\n\
    \    local dot=0\n    local comma=0\n    local qmark=0\n    local colon=0\n  \
    \  local semicolon=0\n    local lparen=0\n    local rparen=0\n    local lbrack=\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            result+=\"$word \"\n            word=\"\"\n    \
    \    else\n            word+=\"$char\"\n        fi\n    done\n    result+=\"$word\"\
    \n    len=${#result}\n    for ((i=0; i<len; i++)); do\n        char=${result:$i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            result=\"${result:0:$i}\
    \ $char${result:$((i+1)):$((len-i-1))}\"\n        else\n            word=${result:$i:$((len-i))}\n\
    \            for ((j=0; j<${#word}; j++)); do\n                for ((k=0; k<${#word}-1;\
    \ k++)); do\n                    if [[ \"${word:$k:1}\" > \"${word:$((k+1)):1}\"\
    \ ]]; then\n                        word=\"${word:0:$k}${word:$((k+1)):1}${word:$k:1}${word:$((k+2)):$((len-k-2))}\"\
    \n                    fi\n                done\n            done\n           \
    \ result=\"${result:0:$i}$word${result:$((i+${#word})):$((len-i-${#word}))}\"\n\
    \        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=(${str// / })\n    local result=\"\"\n    for\
    \ word in \"${words[@]}\"; do\n        local chars=(${word// / })\n        local\
    \ sorted_chars=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n        local sorted_word=$(printf\
    \ \"%s\" \"${sorted_chars[@]}\")\n        result=\"$result $sorted_word\"\n  \
    \  done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local input=$1\n    local output=\"\"\n    local word=\"\"\n    for ((i=0;\
    \ i<${#input}; i++)); do\n        if [[ ${input:$i:1} == \" \" ]]; then\n    \
    \        output+=\"$word \"\n            word=\"\"\n        else\n           \
    \ word+=\"$(echo -n \"${input:$i:1}\" | sort -u)\"\n        fi\n    done\n   \
    \ echo -n \"$output$word\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_word=0\n\
    \    local len_str=${#str}\n    local ascii_char=0\n    local ascii_char_min=0\n\
    \    local ascii_char_min_index=0\n    for ((i=0; i<len_str; i++)); do\n     \
    \   char=\"${str:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n        \
    \    new_str+=\"$char\"\n        else\n            word+=\"$char\"\n         \
    \   len_word=${#word}\n            if [[ \"${str:$i+1:1}\" == \" \" ]]; then\n\
    \                for ((j=0; j<len_word; j++)); do\n                    ascii_char_min=127\n\
    \                    for ((k=0; k<len_word; k++)); do\n                      \
    \  ascii_char=${word:$k:1}\n                        if [[ \"$ascii_char\" < \"\
    $ascii_char_min\" ]]; then\n                            ascii_char_min=\"$ascii_char\"\
    \n                            ascii_char_min_index=\"$k\"\n                  \
    \      fi\n                    done\n                    new_str+=\"$ascii_char_min\"\
    \n                    word=\"${word:0:$ascii_char_min_index}${word:$ascii_char_min_index+1}\"\
    \n                done\n                word=\"\"\n            fi\n        fi\n\
    \    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local result=\"\"\n    for word in $string; do\n     \
    \   local sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n       \
    \ result=\"$result$sorted_word\"\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local -a words\n    local -a sorted_words\n    local\
    \ -a result\n    local i=0\n    local j=0\n    local k=0\n    local word=\"\"\n\
    \    local sorted_word=\"\"\n    local result_str=\"\"\n    words=($(echo \"$str\"\
    \ | tr \" \" \"\\n\"))\n    for word in \"${words[@]}\"; do\n        sorted_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d \"\\n\")\n        sorted_words[$i]=\"$sorted_word\"\
    \n        ((i++))\n    done\n    for word in \"${words[@]}\"; do\n        for\
    \ sorted_word in \"${sorted_words[@]}\"; do\n            if [[ \"$word\" == \"\
    $sorted_word\" ]]; then\n                result[$j]=\"$sorted_word\"\n       \
    \         ((j++))\n            fi\n        done\n    done\n    for word in \"\
    ${result[@]}\"; do\n        result_str=\"$result_str $word\"\n    done\n    echo\
    \ \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            new_str=\"$new_str$(echo $char | fold -w1 | sort -n | tr -d '\\n')\"\
    \n        done\n        new_str=\"$new_str \"\n    done\n    echo $new_str\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=$1\n  local words=($(echo $str | tr ' ' '\\n'))\n  local result=\"\"\n \
    \ for word in \"${words[@]}\"; do\n    result+=\"$(echo -n $word | fold -w1 |\
    \ sort | tr -d '\\n')\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local -a words\n    local -a chars\n    local -a new_words\n    local -a new_chars\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i\
    \ len2\n    local -i len3\n    local -i len4\n    local -i len5\n    local -i\
    \ len6\n    local -i len7\n    local -i len8\n    local -i len9\n    local -i\
    \ len10\n    local -i len11\n    local -i len12\n    local -i len13\n    local\
    \ -i len14\n    local -i len15\n    local -i len16\n    local -i len17\n    local\
    \ -i len18\n    local -i len19\n    local -i len20\n    local -i len21\n    local\
    \ -i len22\n    local -i len23\n    local -i len24\n    local -i len25\n    local\
    \ -i len26\n    local -i len27\n    local -i len28\n    local -i len29\n    local\
    \ -i len30\n    local -i len31\n    local -i len32\n    local -i len33\n    local\
    \ -i len34\n    local -i len35\n    local -i len36\n    local -i len37\n    local\
    \ -i len38\n    local -i len39\n    local -i len40\n    local -i len41\n    local\
    \ -i len42\n    local -i len43\n    local -i len44\n    local -i len45\n    local\
    \ -i len46\n    local -i len47\n    local -i len48\n    local -i len49\n    local\
    \ -i len50\n    local -i len51\n    local -i len52\n    local -i len53\n    local\
    \ -i len54\n    local -i len55\n    local -i len56\n    local -i len57\n    local\
    \ -i len58\n    local -i len59\n    local -i len60\n    local -i len61\n    local\
    \ -i len62\n    local -i len63\n    local -i len64\n    local -i len65\n    local\
    \ -i len66\n    local -\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for char in $(echo \"$str\" | fold -w1); do\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            result=\"$result $word\"\n            word=\"\"\n\
    \        else\n            word=\"$word$char\"\n        fi\n    done\n    result=\"\
    $result $word\"\n    echo \"$result\" | awk '{\n        for (i = 1; i <= NF; i++)\
    \ {\n            split($i, chars, \"\")\n            asort(chars)\n          \
    \  for (j = 1; j <= length($i); j++) {\n                printf \"%s\", chars[j]\n\
    \            }\n            if (i != NF) {\n                printf \" \"\n   \
    \         }\n        }\n    }'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=$1\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n  local i=0\n\
    \  local j=0\n  local len=0\n  local len2=0\n  local tmp=\"\"\n  for ((i=0; i<${#str};\
    \ i++)); do\n    char=${str:$i:1}\n    if [[ \"$char\" == \" \" ]]; then\n   \
    \   result+=\"$word \"\n      word=\"\"\n    else\n      word+=\"$char\"\n   \
    \ fi\n  done\n  result+=\"$word\"\n  for ((i=0; i<${#result}; i++)); do\n    char=${result:$i:1}\n\
    \    if [[ \"$char\" == \" \" ]]; then\n      result+=\" \"\n    else\n      word=\"\
    \"\n      while [[ \"$char\" != \" \" ]]; do\n        word+=\"$char\"\n      \
    \  ((i++))\n        char=${result:$i:1}\n      done\n      len=${#word}\n    \
    \  for ((j=0; j<len; j++)); do\n        tmp=${word:$j:1}\n        len2=${#word}\n\
    \        for ((k=j+1; k<len2; k++)); do\n          if [[ \"${word:$k:1}\" < \"\
    $tmp\" ]]; then\n            tmp=${word:$k:1}\n            word=${word:0:$k}${word:$j:1}${word:$k+1:$len2-k-1}\n\
    \            word=${word:0:$j}${tmp}${word:$j+1:$len2-j-1}\n          fi\n   \
    \     done\n      done\n      result+=\"$word \"\n    fi\n  done\n  echo \"${result:0:${#result}-1}\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=57>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660344591
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local ret=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            ret=\"$ret$(echo $char | sort -u)\"\n        done\n        ret=\"\
    $ret \"\n    done\n    echo $ret\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  # Write your code here\n    echo $1 | tr \" \" \"\\n\" | while read word; do\n\
    \        echo -n \"$(echo $word | grep -o . | sort | tr -d \"\\n\")\"\n    done\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            new_str+=$(echo $char | sort -n)\n        done\n        new_str+=\"\
    \ \"\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            result+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo \"${str:$i:1}\"\
    \ | sort)\"\n        fi\n    done\n    result+=\"$word\"\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    local i\n    for\
    \ word in $str; do\n        result+=\"$(echo \"$word\" | grep -o . | sort -n |\
    \ tr -d '\\n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local char\n    local char_ascii\n    local\
    \ char_ascii_arr\n    local char_arr\n    local char_arr_len\n    local char_ascii_arr_len\n\
    \    for word in $str; do\n        char_arr=($(echo \"$word\" | grep -o .))\n\
    \        char_arr_len=${#char_arr[@]}\n        for ((i=0; i<$char_arr_len; i++));\
    \ do\n            char_ascii_arr[$i]=$(printf \"%d\" \"'${char_arr[$i]}\")\n \
    \       done\n        for ((i=0; i<$char_arr_len; i++)); do\n            for ((j=i+1;\
    \ j<$char_arr_len; j++)); do\n                if [[ ${char_ascii_arr[$i]} -gt\
    \ ${char_ascii_arr[$j]} ]]; then\n                    tmp=${char_ascii_arr[$i]}\n\
    \                    char_ascii_arr[$i]=${char_ascii_arr[$j]}\n              \
    \      char_ascii_arr[$j]=$tmp\n                fi\n            done\n       \
    \ done\n        for ((i=0; i<$char_arr_len; i++)); do\n            char_arr[$i]=$(printf\
    \ \"\\x$(printf %x ${char_ascii_arr[$i]})\")\n        done\n        result=\"\
    $result${char_arr[@]}\"\n        result=\"$result \"\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    for word in $str; do\n        result+=\"\
    $(echo $word | grep -o . | sort -n | tr -d '\\n')\"\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            result+=$(echo $char | sort -u)\n        done\n        result+=\"\
    \ \"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a sorted_words\n    local -a result\n\
    \    local word\n    local sorted_word\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local str_arr=($(echo $str | tr \" \" \"\\n\"))\n    local\
    \ ret=\"\"\n    for word in ${str_arr[@]}; do\n        local word_arr=($(echo\
    \ $word | tr \"\" \"\\n\"))\n        local sorted_word=\"\"\n        for ((i=0;\
    \ i<${#word_arr[@]}; i++)); do\n            sorted_word+=$(echo ${word_arr[@]}\
    \ | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | cut -d \" \" -f $((i+1)))\n\
    \        done\n        ret+=$sorted_word\n        ret+=\" \"\n    done\n    echo\
    \ $ret\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            res+=$(echo $char | sort -u)\n        done\n        res+=\" \"\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for ((i=0;\
    \ i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \" \" ]];\
    \ then\n            res+=\"$word \"\n            word=\"\"\n        else\n   \
    \         word+=$char\n        fi\n    done\n    res+=\"$word\"\n    echo \"$res\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ -r str=\"$1\"\n  local -r words=($(echo \"$str\" | tr ' ' '\\n'))\n  local -r\
    \ sorted_words=($(echo \"${words[@]}\" | tr ' ' '\\n' | sort))\n  local -r sorted_str=\"\
    $(echo \"${sorted_words[@]}\" | tr '\\n' ' ')\"\n  echo \"$sorted_str\"\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_arr=()\n    local char_arr_len=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local c=0\n    for ((i=0; i<${#str}; i++)); do\n   \
    \     char=${str:$i:1}\n        if [[ \"$char\" != \" \" ]]; then\n          \
    \  word=\"$word$char\"\n        else\n            char_arr=($(echo \"$word\" |\
    \ grep -o .))\n            char_arr_len=${#char_arr[@]}\n            for ((j=0;\
    \ j<$char_arr_len; j++)); do\n                for ((k=0; k<$char_arr_len; k++));\
    \ do\n                    if [[ \"${char_arr[$j]}\" < \"${char_arr[$k]}\" ]];\
    \ then\n                        c=${char_arr[$j]}\n                        char_arr[$j]=${char_arr[$k]}\n\
    \                        char_arr[$k]=$c\n                    fi\n           \
    \     done\n            done\n            word=\"\"\n            for ((j=0; j<$char_arr_len;\
    \ j++)); do\n                word=\"$word${char_arr[$j]}\"\n            done\n\
    \            new_str=\"$new_str$word \"\n            word=\"\"\n        fi\n \
    \   done\n    char_arr=($(echo \"$word\" | grep -o .))\n    char_arr_len=${#char_arr[@]}\n\
    \    for ((j=0; j<$char_arr_len; j++)); do\n        for ((k=0; k<$char_arr_len;\
    \ k++)); do\n            if [[ \"${char_arr[$j]}\" < \"${char_arr[$k]}\" ]]; then\n\
    \                c=${char_arr[$j]}\n                char_arr[$j]=${char_arr[$k]}\n\
    \                char_arr[$k]=$c\n            fi\n        done\n    done\n   \
    \ word=\"\"\n    for ((j=0; j<$char_arr_len\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpa99w0gah.sh: line 61: unexpected EOF while looking for matching
    `)''\n/tmp/tmpa99w0gah.sh: line 80: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n    result=\"\
    $result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local str_len=${#str}\n    local word_start=0\n    local\
    \ word_end=0\n    local word_len=0\n    local word=\"\"\n    local word_sorted=\"\
    \"\n    local result=\"\"\n    for ((i=0; i<str_len; i++)); do\n        if [[\
    \ ${str:$i:1} == \" \" ]]; then\n            word_end=$i\n            word_len=$((word_end\
    \ - word_start))\n            word=${str:$word_start:$word_len}\n            word_sorted=$(echo\
    \ -n $word | grep -o . | sort | tr -d '\\n')\n            result+=$word_sorted\n\
    \            result+=\" \"\n            word_start=$((word_end + 1))\n       \
    \ fi\n    done\n    word_len=$((str_len - word_start))\n    word=${str:$word_start:$word_len}\n\
    \    word_sorted=$(echo -n $word | grep -o . | sort | tr -d '\\n')\n    result+=$word_sorted\n\
    \    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local word\n  local result=''\n  for word in $str; do\n    result+=\"\
    $(echo \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a sorted\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local -i len=0\n    local -i len_sorted=0\n    local\
    \ -i len_words=0\n    local -i len_str=0\n    local -i len_sorted_str=0\n    local\
    \ -i len_words_str=0\n    local -i len_str_str=0\n    local -i len_sorted_str_str=0\n\
    \    local -i len_words_str_str=0\n    local -i len_str_str_str=0\n    local -i\
    \ len_sorted_str_str_str=0\n    local -i len_words_str_str_str=0\n    local -i\
    \ len_str_str_str_str=0\n    local -i len_sorted_str_str_str_str=0\n    local\
    \ -i len_words_str_str_str_str=0\n    local -i len_str_str_str_str_str=0\n   \
    \ local -i len_sorted_str_str_str_str_str=0\n    local -i len_words_str_str_str_str_str=0\n\
    \    local -i len_str_str_str_str_str_str=0\n    local -i len_sorted_str_str_str_str_str_str=0\n\
    \    local -i len_words_str_str_str_str_str_str=0\n    local -i len_str_str_str_str_str_str_str=0\n\
    \    local -i len_sorted_str_str_str_str_str_str_str=0\n    local -i len_words_str_str_str_str_str_str_str=0\n\
    \    local -i len_str_str_str_str_str_str_str_str=0\n    local -i len_sorted_str_str_str_str_str_str_str_str=0\n\
    \    local -i len_words_str_str_str_str_str_str_str_str=\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            new_str+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=$(echo \"${str:$i:1}\"\
    \ | fold -w1 | sort | tr -d '\\n')\n        fi\n    done\n    new_str+=\"$word\"\
    \n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_arr=()\n    local i=0\n    local j=0\n    for ((i=0; i<${#str};\
    \ i++)); do\n        char=${str:$i:1}\n        if [[ $char == \" \" ]]; then\n\
    \            for ((j=0; j<${#char_arr[@]}; j++)); do\n                new_str+=\"\
    ${char_arr[$j]}\"\n            done\n            new_str+=\" \"\n            char_arr=()\n\
    \        else\n            char_arr+=(\"$char\")\n        fi\n    done\n    for\
    \ ((j=0; j<${#char_arr[@]}; j++)); do\n        new_str+=\"${char_arr[$j]}\"\n\
    \    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=($(echo $str | tr \" \" \"\\n\"))\n    local\
    \ result=\"\"\n    for word in ${words[@]}; do\n        local chars=($(echo $word\
    \ | tr \"\" \"\\n\"))\n        local sorted_chars=($(echo ${chars[@]} | tr \"\
    \ \" \"\\n\" | sort))\n        local sorted_word=$(echo ${sorted_chars[@]} | tr\
    \ \" \" \"\")\n        result=\"$result$sorted_word \"\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''tr: when not truncating set1, string2 must be non-empty\n'''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    for word in $str; do\n        for char in $(echo \"$word\" | grep -o . |\
    \ sort); do\n            res=\"$res$char\"\n        done\n        res=\"$res \"\
    \n    done\n    echo \"$res\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a sorted_words\n    local -a sorted_str\n\
    \    local -a sorted_chars\n    local word\n    local char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local A\n    local B\n    local C\n    local D\n    local E\n    local\
    \ F\n    local G\n    local H\n    local I\n    local J\n    local K\n    local\
    \ L\n    local M\n    local N\n    local O\n    local P\n    local Q\n    local\
    \ R\n    local S\n    local T\n    local U\n    local V\n    local W\n    local\
    \ X\n    local Y\n    local Z\n    local space\n    local exclamation\n    local\
    \ question\n    local period\n    local comma\n    local colon\n    local semicolon\n\
    \    local apostrophe\n    local hyphen\n    local slash\n    local backslash\n\
    \    local underscore\n    local at\n    local pound\n    local dollar\n    local\
    \ percent\n    local caret\n    local ampersand\n    local asterisk\n    local\
    \ open_paren\n    local close_paren\n    local open_bracket\n    local close_bracket\n\
    \    local open_brace\n    local close_brace\n    local less_than\n    local greater_than\n\
    \    local equal\n    local plus\n    local pipe\n    local tilde\n    local backtick\n\
    \    local double_quote\n    local single_quote\n    local backspace\n    local\
    \ tab\n    local newline\n   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo -n $word | grep -o . | sort -n | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    local i\n    for\
    \ word in $str; do\n        result=\"$result $(echo $word | grep -o . | sort |\
    \ tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local res\n    for word in $str; do\n   \
    \     res+=\"$(echo $word | grep -o . | sort -n | tr -d '\\n')\"\n    done\n \
    \   echo $res\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result\n    for word in $str; do\n\
    \        result+=\"$(echo $word | grep -o . | sort -n | tr -d '\\n')\"\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=$1\n  local new_str=\"\"\n  for word in $str; do\n    local new_word=\"\"\
    \n    for ((i=0; i<${#word}; i++)); do\n      new_word+=\"${word:$i:1}\"\n   \
    \ done\n    new_str+=\"$(echo -e \"$new_word\" | sort -n | tr -d '\\n') \"\n \
    \ done\n  echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    while [ $i -lt $len_str ]; do\n        if [ \"${str:$i:1}\" != \" \" ]; then\n\
    \            word=\"${word}${str:$i:1}\"\n            i=$((i+1))\n        else\n\
    \            len=${#word}\n            while [ $j -lt $len ]; do\n           \
    \     char=${word:$j:1}\n                k=$j\n                while [ $k -gt\
    \ 0 ]; do\n                    if [ \"${word:$((k-1)):1}\" \\> \"$char\" ]; then\n\
    \                        word=\"${word:0:$((k-1))}$char${word:$((k-1)):$((len-k))}\"\
    \n                    fi\n                    k=$((k-1))\n                done\n\
    \                j=$((j+1))\n            done\n            new_str=\"${new_str}${word}\
    \ \"\n            word=\"\"\n            j=0\n            i=$((i+1))\n       \
    \ fi\n    done\n    len=${#word}\n    while [ $j -lt $len ]; do\n        char=${word:$j:1}\n\
    \        k=$j\n        while [ $k -gt 0 ]; do\n            if [ \"${word:$((k-1)):1}\"\
    \ \\> \"$char\" ]; then\n                word=\"${word:0:$((k-1))}$char${word:$((k-1)):$((len-k))}\"\
    \n            fi\n            k=$((k-1))\n        done\n        j=$((j+1))\n \
    \   done\n    new_str=\"${new_str}${word}\"\n    echo \"$new_str\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            new_str+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=$(echo -n \"\
    ${str:$i:1}\" | sort)\n        fi\n    done\n    new_str+=\"$word\"\n    echo\
    \ \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    for word in $str; do\n        echo -n \"\
    $(echo $word | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            result+=\"$word \"\n            word=\"\"\n    \
    \    else\n            word+=\"$char\"\n        fi\n    done\n    result+=\"$word\"\
    \n    len=${#result}\n    for ((i=0; i<len; i++)); do\n        char=${result:$i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            echo -n \"$char\"\n  \
    \      else\n            word=\"\"\n            for ((j=i; j<len; j++)); do\n\
    \                char=${result:$j:1}\n                if [[ \"$char\" == \" \"\
    \ ]]; then\n                    break\n                else\n                \
    \    word+=\"$char\"\n                fi\n            done\n            word=$(echo\
    \ -n \"$word\" | sort)\n            for ((k=0; k<${#word}; k++)); do\n       \
    \         echo -n \"${word:$k:1}\"\n            done\n            i=$j\n     \
    \   fi\n    done\n    echo\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=$1\n  local new_str=\"\"\n  for word in $str; do\n    local new_word=\"\"\
    \n    for (( i=0; i<${#word}; i++ )); do\n      new_word+=\"${word:$i:1}\"\n \
    \   done\n    new_str+=\"$(echo -e \"$new_word\" | sort -n | tr -d \"\\n\") \"\
    \n  done\n  echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_word=0\n\
    \    local len_string=${#string}\n    local ascii_char=0\n    local ascii_char_min=0\n\
    \    local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n    local\
    \ ascii_char_min_tmp=0\n    local ascii_char_min_tmp_index=0\n    local ascii_char_min_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n\
    \    for ((i=0; i<len_string; i++)); do\n        char=${string:$i:1}\n       \
    \ if [[ $char == \" \" ]]; then\n            result+=\" \"\n            word=\"\
    \"\n        else\n            word+=$char\n            len_word=${#word}\n   \
    \         if [[ $i == $((len_string-1)) ]]; then\n                for ((j=0; j<len_word;\
    \ j++)); do\n                    ascii_char_min=127\n                    for ((k=0;\
    \ k<len_word; k++)); do\n                        char=${word:$k:1}\n         \
    \               ascii_char=$(printf \"%d\" \"'$char\")\n                     \
    \   if [[ $ascii_char -lt $ascii_char_min ]]; then\n                         \
    \   ascii_char_min=$ascii_char\n                            ascii_char_min_index=$k\n\
    \                        fi\n                    done\n                    result+=\"\
    ${word:$as\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbklyoxc.sh: line 72: unexpected EOF while looking for matching
    `"\''\n/tmp/tmphbklyoxc.sh: line 76: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=\"${str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            new_str+=\"$word \"\n          \
    \  word=\"\"\n        else\n            len=${#word}\n            for ((j=0; j<len;\
    \ j++)); do\n                if [[ \"$char\" < \"${word:$j:1}\" ]]; then\n   \
    \                 word=\"${word:0:$j}$char${word:$j}\"\n                    break\n\
    \                fi\n            done\n            if [[ \"$j\" == \"$len\" ]];\
    \ then\n                word+=\"$char\"\n            fi\n        fi\n    done\n\
    \    new_str+=\"$word\"\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  # Write your code here\n    echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | grep -o .); do\n\
    \            result+=$(echo $char | sort -u)\n        done\n        result+=\"\
    \ \"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=0\n  local len_word=0\n\
    \  local len_char=0\n  local ascii_char=0\n  local ascii_char_min=0\n  local ascii_char_max=0\n\
    \  local ascii_char_min_index=0\n  local ascii_char_max_index=0\n  local ascii_char_min_index_prev=0\n\
    \  local ascii_char_max_index_prev=0\n  local ascii_char_min_index_next=0\n  local\
    \ ascii_char_max_index_next=0\n  local ascii_char_min_index_prev_prev=0\n  local\
    \ ascii_char_max_index_prev_prev=0\n  local ascii_char_min_index_next_next=0\n\
    \  local ascii_char_max_index_next_next=0\n  local ascii_char_min_index_prev_prev_prev=0\n\
    \  local ascii_char_max_index_prev_prev_prev=0\n  local ascii_char_min_index_next_next_next=0\n\
    \  local ascii_char_max_index_next_next_next=0\n  local ascii_char_min_index_prev_prev_prev_prev=0\n\
    \  local ascii_char_max_index_prev_prev_prev_prev=0\n  local ascii_char_min_index_next_next_next_next=0\n\
    \  local ascii_char_max_index_next_next_next_next=0\n  local ascii_char_min_index_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_max_index_prev_prev_prev_prev_prev=0\n  local ascii_char_min_index_next_next_next_next_next=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local word_sorted\n    local result=\"\
    \"\n    for word in $str; do\n        word_sorted=$(echo $word | grep -o . | sort\
    \ | tr -d '\\n')\n        result=\"$result $word_sorted\"\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=()\n    local word\n    local i\n    for word\
    \ in $str; do\n        words+=(\"$(echo $word | grep -o . | sort | tr -d '\\n')\"\
    )\n    done\n    for i in ${!words[@]}; do\n        str=${str/${words[$i]}/${words[$i]}}\n\
    \    done\n    echo $str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ word_len=0\n    local char_len=0\n    local char_arr=()\n    local char_arr_len=0\n\
    \    local char_arr_index=0\n    local char_arr_index_len=0\n    local char_arr_index_len_len=0\n\
    \    local char_arr_index_len_len_len=0\n    for ((i=0; i<len; i++)); do\n   \
    \     char=${str:i:1}\n        if [[ \"$char\" == \" \" ]]; then\n           \
    \ new_str+=\" \"\n            word=\"\"\n        else\n            word+=$char\n\
    \            if [[ \"$i\" == \"$((len-1))\" ]]; then\n                char_len=${#word}\n\
    \                for ((j=0; j<char_len; j++)); do\n                    char_arr[j]=${word:j:1}\n\
    \                done\n                char_arr_len=${#char_arr[@]}\n        \
    \        for ((j=0; j<char_arr_len; j++)); do\n                    char_arr_index[j]=$j\n\
    \                done\n                char_arr_index_len=${#char_arr_index[@]}\n\
    \                for ((j=0; j<char_arr_index_len; j++)); do\n                \
    \    for ((k=0; k<char_arr_index_len; k++)); do\n                        if [[\
    \ \"${char_arr[${char_arr_index[j]}]}\" \\> \"${char_arr[${char_arr_index[k]}]}\"\
    \ ]]; then\n                            char_arr_index_len_len=${char_arr_index[j]}\n\
    \                            char_arr_index[j]=${char_arr_index[k]}\n        \
    \                    char_arr_index[k]=$char_arr_index_len_len\n             \
    \           fi\n                    done\n                done\n             \
    \   char_arr_index_len_len_len=${#char_arr_index\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcdczt_8a.sh: line 50: conditional binary operator expected\n/tmp/tmpcdczt_8a.sh:
    line 50: syntax error near `\\>\''\n/tmp/tmpcdczt_8a.sh: line 50: `                        if
    [[ "${char_arr[${char_arr_index[j]}]}" \\> "${char_arr[${char_arr_index[k]}]}"
    ]]; then\''\n'''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            new_str+=$(echo $char | sort -u)\n        done\n        new_str+=\"\
    \ \"\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local char=\"\"\n\
    \    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            res=\"$res$(echo -e \"$char\\n$res\" | sort -u | tr -d '\\n')\"\n\
    \        done\n        res=\"$res \"\n    done\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    for word in $str; do\n        local\
    \ new_word=\"\"\n        for ((i=0; i<${#word}; i++)); do\n            new_word+=\"\
    ${word:$i:1}\"\n        done\n        new_str+=\"$(echo -e \"$new_word\" | sort\
    \ -n | tr -d '\\n') \"\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        local chars=$(echo $word | fold -w1)\n        local sorted_chars=$(echo\
    \ $chars | tr ' ' '\\n' | sort | tr '\\n' ' ')\n        result=\"$result$sorted_chars\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\n    done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local words=($(echo \"$str\" | tr ' ' '\\n'))\n    local\
    \ result=\"\"\n    for word in \"${words[@]}\"; do\n        local chars=($(echo\
    \ \"$word\" | tr -d '\\n' | fold -w1))\n        local sorted_chars=($(printf \"\
    %s\\n\" \"${chars[@]}\" | sort))\n        result=\"$result$(printf \"%s\" \"${sorted_chars[@]}\"\
    )\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a chars\n    local -a words\n    local -a sorted_chars\n    local\
    \ -a sorted_words\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i space=0\n    local -i exclamation=0\n    local\
    \ -i question=0\n    local -i comma=0\n    local -i period=0\n    local -i colon=0\n\
    \    local -i semicolon=0\n    local -i apostrophe=0\n    local -i hyphen=0\n\
    \    local -i dash=0\n    local -i underscore=0\n    local -i plus=0\n    local\
    \ -i equal=0\n    local -i left_parenthesis=0\n    local -i right_parenthesis=0\n\
    \    local -i left_bracket=0\n    local -i right_bracket=0\n    local -i left_brace=0\n\
    \    local -i right_brace=0\n    local -i left_angle=0\n    local -i right_angle=0\n\
    \    local -i left_single_quote=0\n    local -i right_single_quote=0\n    local\
    \ -i left_double_quote=0\n    local -i right_double_quote=0\n    local -i backslash=0\n\
    \    local -i forward_slash=0\n    local -i ampersand=0\n    local -i pipe=0\n\
    \    local -i tilde=0\n    local -i at=0\n    local -i pound=0\n    local -i dollar=0\n\
    \    local -i\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words=()\n    local -a sorted_words=()\n    local\
    \ -a sorted_str=()\n    local i=0\n    local j=0\n    local k=0\n    local word=\"\
    \"\n    local sorted_word=\"\"\n    local sorted_char=\"\"\n    local sorted_str=\"\
    \"\n    local char=\"\"\n    local char_ascii=0\n    local sorted_char_ascii=0\n\
    \    local -A char_ascii_map=()\n    local -A sorted_char_ascii_map=()\n    local\
    \ -A char_map=()\n    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n\
    \    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local\
    \ -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n\
    \    local -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n    local\
    \ -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n\
    \    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local\
    \ -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n\
    \    local -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n    local\
    \ -A sorted_char_ascii_map=()\n    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n\
    \    local -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local\
    \ -A sorted_char_map=()\n    local -A sorted_char_ascii_map=()\n    local\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a sorted_words\n    local -a result\n\
    \    local i\n    local j\n    local k\n    local word\n    local sorted_word\n\
    \    local result_str\n    IFS=' ' read -r -a words <<< \"$str\"\n    for ((i=0;\
    \ i<${#words[@]}; i++)); do\n        word=${words[$i]}\n        sorted_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        sorted_words[$i]=$sorted_word\n\
    \    done\n    for ((i=0; i<${#words[@]}; i++)); do\n        word=${words[$i]}\n\
    \        sorted_word=${sorted_words[$i]}\n        for ((j=0; j<${#word}; j++));\
    \ do\n            for ((k=0; k<${#sorted_word}; k++)); do\n                if\
    \ [[ ${word:$j:1} == ${sorted_word:$k:1} ]]; then\n                    result[$i]=\"\
    ${result[$i]}${word:$j:1}\"\n                    sorted_word=${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\n\
    \                    break\n                fi\n            done\n        done\n\
    \    done\n    result_str=$(printf \"%s \" \"${result[@]}\")\n    echo \"${result_str:0:${#result_str}-1}\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    local len_word=0\n    local len_new_str=0\n    local ascii_val=0\n    local\
    \ ascii_val_min=0\n    local ascii_val_min_index=0\n    local ascii_val_min_index_prev=0\n\
    \    local ascii_val_min_index_prev_prev=0\n    local ascii_val_min_index_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev=0\n    local ascii_val_min_index_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev=0\n    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n   \
    \ local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \   local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_val_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    for word in $str; do\n        local\
    \ new_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            local\
    \ char=${word:$i:1}\n            if [[ $new_word == \"\" ]]; then\n          \
    \      new_word=$char\n            else\n                local j=0\n         \
    \       while [[ $j -lt ${#new_word} ]]; do\n                    if [[ $char <\
    \ ${new_word:$j:1} ]]; then\n                        new_word=${new_word:0:$j}$char${new_word:$j}\n\
    \                        break\n                    elif [[ $j -eq $((${#new_word}\
    \ - 1)) ]]; then\n                        new_word=$new_word$char\n          \
    \              break\n                    fi\n                    j=$(($j + 1))\n\
    \                done\n            fi\n        done\n        new_str=$new_str$new_word\n\
    \    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result+=\"$(echo \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=($(echo $str | tr ' ' '\\n'))\n    local result=\"\
    \"\n    for word in ${words[@]}; do\n        local sorted_word=$(echo $word |\
    \ grep -o . | sort | tr -d '\\n')\n        result=\"$result$sorted_word \"\n \
    \   done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  #\
    \ Write your code here\n  # You can use the following command to sort the characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  # You can\
    \ use the following command to sort the characters in a string:\n  # echo \"hello\"\
    \ | grep -o . | sort | tr -d '\\n'\n  # You can use the following command to sort\
    \ the characters in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\\
    n'\n  # You can use the following command to sort the characters in a string:\n\
    \  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  # You can use the following\
    \ command to sort the characters in a string:\n  # echo \"hello\" | grep -o .\
    \ | sort | tr -d '\\n'\n  # You can use the following command to sort the characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  # You can\
    \ use the following command to sort the characters in a string:\n  # echo \"hello\"\
    \ | grep -o . | sort | tr -d '\\n'\n  # You can use the following command to sort\
    \ the characters in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\\
    n'\n  # You can use the following command to sort the characters in a string:\n\
    \  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  # You can use the following\
    \ command to sort the characters in a string:\n  # echo \"hello\" | grep -o .\
    \ | sort | tr -d '\\n'\n  # You can use the following command to sort the characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  # You can\
    \ use the following command to sort the characters in a string:\n  # echo \"hello\"\
    \ | grep -o . | sort | tr -d '\\n'\n  # You can use the following command to sort\
    \ the characters in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpcts65rzj.sh: line 42: syntax error near unexpected token `}''\n/tmp/tmpcts65rzj.sh:
    line 42: `}''\n"'
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n   \
    \     else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"\
    $word\"\n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            i=$((i+1))\n          \
    \  len=$((len+1))\n        else\n            word=${new_str:$i:$((len-i))}\n \
    \           for ((j=0; j<${#word}; j++)); do\n                for ((k=0; k<${#word}-1;\
    \ k++)); do\n                    if [[ \"${word:$k:1}\" > \"${word:$((k+1)):1}\"\
    \ ]]; then\n                        word=\"${word:0:$k}${word:$((k+1)):1}${word:$k:1}${word:$((k+2)):$((len-k-2))}\"\
    \n                    fi\n                done\n            done\n           \
    \ new_str=\"${new_str:0:$i}$word${new_str:$((i+${#word})):$((len-i-${#word}))}\"\
    \n            i=$((i+${#word}-1))\n            len=$((len-${#word}+1))\n     \
    \   fi\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result\n    local char\n    local -a\
    \ chars\n    local -a words\n    local -a sorted_chars\n    local -a sorted_words\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i\
    \ len_chars\n    local -i len_words\n    local -i len_sorted_chars\n    local\
    \ -i len_sorted_words\n    local -i len_result\n    local -i len_char\n    local\
    \ -i len_word\n    local -i len_sorted_char\n    local -i len_sorted_word\n  \
    \  local -i len_result_char\n    local -i len_result_word\n    local -i len_result_sorted_char\n\
    \    local -i len_result_sorted_word\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_words\n \
    \   local -i len_result_sorted_chars\n    local -i len_result_sorted_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            result+=\"$word \"\n            word=\"\"\n       \
    \ else\n            word+=\"$char\"\n        fi\n    done\n    result+=\"$word\"\
    \n    len=${#result}\n    for ((i=0; i<len; i++)); do\n        char=${result:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            result+=\" \"\n        else\n\
    \            word=\"\"\n            for ((j=i; j<len; j++)); do\n            \
    \    char=${result:$j:1}\n                if [[ $char == \" \" ]]; then\n    \
    \                break\n                else\n                    word+=\"$char\"\
    \n                fi\n            done\n            word=$(echo \"$word\" | fold\
    \ -w1 | sort | tr -d \"\\n\")\n            result=${result:0:$i}$word${result:$j}\n\
    \            i=$j\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n    local\
    \ chars=\"\"\n    local char\n    for char in $(echo \"$word\" | grep -o .); do\n\
    \      chars=\"$chars$(echo \"$char\" | sort -n)\"\n    done\n    result=\"$result$chars\
    \ \"\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    local len_word=0\n    local len_char=0\n    local ascii_char=0\n    local\
    \ ascii_char_min=0\n    local ascii_char_min_index=0\n    local ascii_char_min_index_prev=0\n\
    \    local ascii_char_min_index_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  \
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local -a words\n    local -a sorted_words\n    local -a result\n\
    \    local word\n    local i\n    local j\n    local k\n    local len\n    local\
    \ len_word\n    local char\n    local char_ascii\n    local char_ascii_prev\n\
    \    local char_ascii_next\n    local char_ascii_min\n    local char_ascii_max\n\
    \    local char_ascii_min_index\n    local char_ascii_max_index\n    local char_ascii_min_index_prev\n\
    \    local char_ascii_max_index_prev\n    local char_ascii_min_index_next\n  \
    \  local char_ascii_max_index_next\n    local char_ascii_min_index_prev_next\n\
    \    local char_ascii_max_index_prev_next\n    local char_ascii_min_index_prev_next_prev\n\
    \    local char_ascii_max_index_prev_next_prev\n    local char_ascii_min_index_prev_next_prev_next\n\
    \    local char_ascii_max_index_prev_next_prev_next\n    local char_ascii_min_index_prev_next_prev_next_prev\n\
    \    local char_ascii_max_index_prev_next_prev_next_prev\n    local char_ascii_min_index_prev_next_prev_next_prev_next\n\
    \    local char_ascii_max_index_prev_next_prev_next_prev_next\n    local char_ascii_min_index_prev_next_prev_next_prev_next_prev\n\
    \    local char_ascii_max_index_prev_next_prev_next_prev_next_prev\n    local\
    \ char_ascii_min_index_prev_next_prev_next_prev_next_prev_next\n    local char_ascii_max_index_prev_next_prev_next_prev_next_prev_next\n\
    \    local char_ascii_min_index_prev_next_prev_next\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local res=\"\"\n    local word=\"\"\n    local i=0\n    local\
    \ c=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n\
    \        if [ \"$c\" == \" \" ]; then\n            res=\"$res $word\"\n      \
    \      word=\"\"\n        else\n            word=\"$word$c\"\n        fi\n   \
    \     i=$((i+1))\n    done\n    res=\"$res $word\"\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  #\
    \ Write your code here\n  # Use echo to print to stdout\n  # Use read to get input\
    \ from stdin\n  # Use $() to call a function\n  # Use $1 to get the first argument\n\
    \  # Use $2 to get the second argument\n  # Use $# to get the number of arguments\n\
    \  # Use $@ to get all arguments\n  # Use $? to get the return value of the last\
    \ command\n  # Use $! to get the PID of the last command\n  # Use $$ to get the\
    \ PID of the current script\n  # Use $USER to get the current user\n  # Use $HOSTNAME\
    \ to get the current hostname\n  # Use $SECONDS to get the number of seconds since\
    \ the script was started\n  # Use $RANDOM to get a random number\n  # Use $LINENO\
    \ to get the current line number\n  # Use $0 to get the name of the script\n \
    \ # Use $FUNCNAME to get the name of the current function\n  # Use $DIRSTACK to\
    \ get the current directory stack\n  # Use $PIPESTATUS to get the exit status\
    \ of all commands in the last pipe\n  # Use $MACHTYPE to get the system type of\
    \ the machine the script is running on\n  # Use $HOSTTYPE to get the machine type\
    \ on which Bash is executing\n  # Use $BASH_VERSION to get the version of Bash\n\
    \  # Use $BASH_VERSINFO to get version information of Bash\n  # Use $BASH_SOURCE\
    \ to get the name of the file that is currently executing\n  # Use $BASH_SUBSHELL\
    \ to get the current subshell level\n  # Use $BASH_LINENO to get the current line\
    \ number in the Bash script\n  # Use $BASH_ARGC to get the number of arguments\
    \ to the current Bash function\n  # Use $BASH_ARGV to get the arguments to the\
    \ current Bash function\n  # Use $BASH_EXECUTION_STRING to get the string argument\
    \ passed to the -c option\n  # Use $BASH_REMATCH to get the array variable whose\
    \ members are assigned by the\n  #   =~ binary operator to the [[ conditional\
    \ command\n  # Use $BASH_SOURCE to get the name of the file that is currently\
    \ executing\n \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp6dyun5gx.sh: line 49: syntax error near unexpected token `}''\n/tmp/tmp6dyun5gx.sh:
    line 49: `}''\n"'
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local words=()\n    local i=0\n    local word=\"\"\n\
    \    local char=\"\"\n    local chars=()\n    local j=0\n    local result=\"\"\
    \n    local k=0\n    local len=0\n    local len_word=0\n    local len_chars=0\n\
    \    local len_result=0\n    local char_ascii=0\n    local char_ascii_min=0\n\
    \    local char_ascii_min_index=0\n    local char_ascii_tmp=0\n    local char_tmp=\"\
    \"\n    local char_tmp_index=0\n    local char_tmp_ascii=0\n    local char_tmp_ascii_index=0\n\
    \    local char_tmp_ascii_min=0\n    local char_tmp_ascii_min_index=0\n    local\
    \ char_tmp_ascii_min_index_tmp=0\n    local char_tmp_ascii_min_index_tmp_index=0\n\
    \    local char_tmp_ascii_min_index_tmp_index_tmp=0\n    local char_tmp_ascii_min_index_tmp_index_tmp_index=0\n\
    \    local char_tmp_ascii_min_index_tmp_index_tmp_index_tmp=0\n    local char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index=0\n\
    \    local char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index_tmp=0\n    local\
    \ char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index_tmp_index=0\n    local\
    \ char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index_tmp_index_tmp=0\n   \
    \ local char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index_tmp_index_tmp_index=0\n\
    \    local char_tmp_ascii_min_index_tmp_index_tmp_index_tmp_index_tmp_index_tmp_index_tmp=\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    for word in $str; do\n        local\
    \ new_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            new_word+=\"\
    ${word:$i:1}\"\n        done\n        new_str+=\"$(echo -e \"$new_word\" | sort\
    \ -n | tr -d '\\n') \"\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_str=${#str}\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=\"${str:$i:1}\"\n        if\
    \ [[ \"$char\" == \" \" ]]; then\n            result+=\"$word \"\n           \
    \ word=\"\"\n        else\n            len=${#word}\n            for ((j=0; j<len;\
    \ j++)); do\n                if [[ \"${word:$j:1}\" > \"$char\" ]]; then\n   \
    \                 word=\"${word:0:$j}$char${word:$j}\"\n                    break\n\
    \                fi\n            done\n            if [[ \"$j\" == \"$len\" ]];\
    \ then\n                word+=\"$char\"\n            fi\n        fi\n    done\n\
    \    result+=\"$word\"\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local ascii_val=\"\"\n    local ascii_val_list=\"\"\n    local ascii_val_list_sorted=\"\
    \"\n    local ascii_val_list_sorted_arr=()\n    local ascii_val_list_sorted_arr_len=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local space=0\n    local space_count=0\n\
    \    local space_list=\"\"\n    local space_list_arr=()\n    local space_list_arr_len=0\n\
    \    local space_list_arr_len_index=0\n    local space_list_arr_len_index_last=0\n\
    \    local space_list_arr_len_index_last_prev=0\n    local space_list_arr_len_index_last_prev_prev=0\n\
    \    local space_list_arr_len_index_last_prev_prev_prev=0\n    local space_list_arr_len_index_last_prev_prev_prev_prev=0\n\
    \    local space_list_arr_len_index_last_prev_prev_prev_prev_prev=0\n    local\
    \ space_list_arr_len_index_last_prev_prev_prev_prev_prev_prev=0\n    local space_list_arr_len_index_last_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local space_list_arr_len_index_last_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local space_list_arr_len_index_last_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local space\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for ((i=0; i<${#str}; i++)); do\n        char=\"${str:$i:1}\"\n      \
    \  if [[ \"$char\" == \" \" ]]; then\n            res+=\"$word \"\n          \
    \  word=\"\"\n        else\n            word+=\"$(printf \"%s\" \"$char\" | sort\
    \ -u)\"\n        fi\n    done\n    res+=\"$word\"\n    printf \"%s\" \"$res\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $string; do\n        for char in $(echo $word | fold -w1);\
    \ do\n            result+=$(echo $char | sort -u)\n        done\n        result+=\"\
    \ \"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local str_arr=($(echo $str))\n    local str_arr_len=${#str_arr[@]}\n\
    \    local new_str=\"\"\n    for ((i=0; i<$str_arr_len; i++)); do\n        local\
    \ word=${str_arr[$i]}\n        local word_len=${#word}\n        local new_word=\"\
    \"\n        for ((j=0; j<$word_len; j++)); do\n            local char=${word:$j:1}\n\
    \            local char_ascii=$(printf \"%d\" \"'$char\")\n            new_word+=$(printf\
    \ \"\\x$(printf %x $char_ascii)\")\n        done\n        new_str+=$(echo $new_word\
    \ | grep -o . | sort | tr -d '\\n')\n        if [[ $i != $((str_arr_len-1)) ]];\
    \ then\n            new_str+=\" \"\n        fi\n    done\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    for word in $str; do\n        local\
    \ new_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            new_word+=\"\
    ${word:$i:1}\"\n        done\n        new_str+=\"$(echo -e \"$new_word\" | sort\
    \ -n | tr -d '\\n') \"\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local -a words\n    local -a sorted_words\n    local\
    \ -a result\n    local i=0\n    local j=0\n    local k=0\n    local word\n   \
    \ local sorted_word\n    local result_str\n    local -i len=0\n    local -i len_sorted=0\n\
    \    local -i len_result=0\n    local -i len_str=0\n    local -i len_word=0\n\
    \    local -i len_sorted_word=0\n    local -i len_result_str=0\n    local -i len_words=0\n\
    \    local -i len_sorted_words=0\n    local -i len_result=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_result_str=0\n    local -i len_result_str=0\n    local -i len_result_str=0\n\
    \    local -i len_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local words=($string)\n    local result=\"\"\n    for\
    \ word in \"${words[@]}\"; do\n        local chars=($(echo \"$word\" | grep -o\
    \ .))\n        local sorted_chars=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n\
    \        local sorted_word=$(printf \"%s\" \"${sorted_chars[@]}\")\n        result+=\"\
    $sorted_word\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_list=\"\"\n    local char_list_len=0\n    local i=0\n    local\
    \ j=0\n    for word in $str; do\n        char_list=\"\"\n        for ((i=0; i<${#word};\
    \ i++)); do\n            char_list=\"$char_list ${word:$i:1}\"\n        done\n\
    \        char_list_len=${#char_list}\n        for ((i=0; i<char_list_len; i++));\
    \ do\n            char=${char_list:$i:1}\n            for ((j=i+1; j<char_list_len;\
    \ j++)); do\n                if [[ \"${char_list:$j:1}\" < \"$char\" ]]; then\n\
    \                    char_list=\"${char_list:0:$i}${char_list:$j:1}${char_list:$i+1:$j-$i-1}${char_list:$i:1}${char_list:$j+1}\"\
    \n                    char=${char_list:$i:1}\n                fi\n           \
    \ done\n        done\n        new_str=\"$new_str $char_list\"\n    done\n    echo\
    \ \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result\n    for word in $str; do\n\
    \        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n \
    \   done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -a arr=()\n    local -a arr2=()\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            arr+=(\"$word\")\n            word=\"\"\n        else\n         \
    \   word+=\"$char\"\n        fi\n    done\n    arr+=(\"$word\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        word=\"${arr[$i]}\"\n        for ((j=0; j<${#word};\
    \ j++)); do\n            char=\"${word:$j:1}\"\n            arr2+=(\"$char\")\n\
    \        done\n        arr2+=(\" \")\n    done\n    arr2=(\"${arr2[@]::${#arr2[@]}-1}\"\
    )\n    IFS=$'\\n'\n    arr2=($(sort <<<\"${arr2[*]}\"))\n    unset IFS\n    for\
    \ ((i=0; i<${#arr2[@]}; i++)); do\n        res+=\"${arr2[$i]}\"\n    done\n  \
    \  echo \"$res\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=\"$1\"\n    local words=($string)\n    local result=\"\"\n   \
    \ for word in \"${words[@]}\"; do\n        local chars=($(echo \"$word\" | grep\
    \ -o .))\n        local sorted=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n\
    \        result+=\"${sorted[*]}\"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local char_list=\"\
    \"\n    local char_list_len=\"\"\n    local i=\"\"\n    local j=\"\"\n    local\
    \ k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n    local o=\"\
    \"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local s=\"\"\n \
    \   local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\
    \"\n    local c=\"\"\n    local d=\"\"\n    local e=\"\"\n    local f=\"\"\n \
    \   local g=\"\"\n    local h=\"\"\n    local i=\"\"\n    local j=\"\"\n    local\
    \ k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n    local o=\"\
    \"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local s=\"\"\n \
    \   local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\
    \"\n    local c=\"\"\n    local d=\"\"\n    local e=\"\"\n    local f=\"\"\n \
    \   local g=\"\"\n    local h=\"\"\n    local i=\"\"\n    local j=\"\"\n    local\
    \ k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n    local o=\"\
    \"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local s=\"\"\n \
    \   local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\
    \"\n    local c=\"\"\n    local d=\"\"\n    local e=\"\"\n    local f=\"\"\n \
    \   local g=\"\"\n    local h=\"\"\n    local i=\"\"\n    local j=\"\"\n    local\
    \ k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n    local o=\"\
    \"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local s=\"\"\n \
    \   local t=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    while\
    \ [[ $i -lt $len ]]; do\n        char=${str:$i:1}\n        if [[ $char == \" \"\
    \ ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n        else\n\
    \            word+=$char\n        fi\n        ((i++))\n    done\n    new_str+=\"\
    $word\"\n    len=${#new_str}\n    i=0\n    while [[ $i -lt $len ]]; do\n     \
    \   word=\"\"\n        while [[ $i -lt $len ]]; do\n            char=${new_str:$i:1}\n\
    \            if [[ $char == \" \" ]]; then\n                break\n          \
    \  else\n                word+=$char\n            fi\n            ((i++))\n  \
    \      done\n        word=$(echo -n $word | sort -u)\n        new_str=${new_str:0:$j}$word${new_str:$i}\n\
    \        ((j+=$((${#word}+1))))\n        ((i++))\n    done\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result\n    for word in $str; do\n\
    \        result+=\"$(echo \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\n \
    \   done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char != \"\
    \ \" ]]; then\n            word=$word$char\n        else\n            for ((j=0;\
    \ j<${#word}; j++)); do\n                for ((k=j+1; k<${#word}; k++)); do\n\
    \                    if [[ ${word:$j:1} > ${word:$k:1} ]]; then\n            \
    \            char=${word:$j:1}\n                        word=${word:0:$j}${word:$k:1}${word:$j+1:$k-$j-1}${char}${word:$k+1:${#word}-$k-1}\n\
    \                    fi\n                done\n            done\n            new_str=$new_str$word$char\n\
    \            word=\"\"\n        fi\n    done\n    for ((j=0; j<${#word}; j++));\
    \ do\n        for ((k=j+1; k<${#word}; k++)); do\n            if [[ ${word:$j:1}\
    \ > ${word:$k:1} ]]; then\n                char=${word:$j:1}\n               \
    \ word=${word:0:$j}${word:$k:1}${word:$j+1:$k-$j-1}${char}${word:$k+1:${#word}-$k-1}\n\
    \            fi\n        done\n    done\n    new_str=$new_str$word\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local words=()\n    local word=\"\"\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n   \
    \ local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local\
    \ J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n\
    \    local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n \
    \   local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n  \
    \  local Z=0\n    local space=0\n    local exclamation=0\n    local question=0\n\
    \    local comma=0\n    local period=0\n    local colon=0\n    local semicolon=0\n\
    \    local apostrophe=0\n    local dash=0\n    local slash=0\n    local backslash=0\n\
    \    local left_parenthesis=0\n    local right_parenthesis=0\n    local left_bracket=0\n\
    \    local right_bracket=0\n    local left_brace=0\n    local right_brace=0\n\
    \    local left_angle=0\n    local right_angle=0\n    local at=0\n    local hash=0\n\
    \    local dollar=0\n    local percent=0\n    local caret=0\n    local ampersand=0\n\
    \    local asterisk=0\n    local underscore=0\n    local plus=0\n    local equals=0\n\
    \    local less_than=0\n    local greater_than=0\n    local tilde=0\n    local\
    \ bar\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    for (( i=0;\
    \ i<${#str}; i++ )); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n       \
    \     new_str+=\" $word\"\n            word=\"\"\n        else\n            word+=${str:$i:1}\n\
    \        fi\n    done\n    new_str+=\" $word\"\n    echo \"$new_str\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    for ((\
    \ i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \" \" ]]; then\n\
    \            new_string+=\"$word \"\n            word=\"\"\n        else\n   \
    \         word+=$(echo \"${string:$i:1}\" | sort)\n        fi\n    done\n    new_string+=\"\
    $word\"\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local string=\"$1\"\n    local word\n    local new_word\n    local new_string\n\
    \    for word in $string; do\n        new_word=$(echo \"$word\" | grep -o . |\
    \ sort | tr -d '\\n')\n        new_string=\"$new_string $new_word\"\n    done\n\
    \    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local len=${#str}\n    local char=\"\"\n  \
    \  local char_arr=()\n    local char_arr_len=0\n    local char_arr_index=0\n \
    \   local char_arr_index_2=0\n    local char_arr_index_3=0\n    local char_arr_index_4=0\n\
    \    local char_arr_index_5=0\n    local char_arr_index_6=0\n    local char_arr_index_7=0\n\
    \    local char_arr_index_8=0\n    local char_arr_index_9=0\n    local char_arr_index_10=0\n\
    \    local char_arr_index_11=0\n    local char_arr_index_12=0\n    local char_arr_index_13=0\n\
    \    local char_arr_index_14=0\n    local char_arr_index_15=0\n    local char_arr_index_16=0\n\
    \    local char_arr_index_17=0\n    local char_arr_index_18=0\n    local char_arr_index_19=0\n\
    \    local char_arr_index_20=0\n    local char_arr_index_21=0\n    local char_arr_index_22=0\n\
    \    local char_arr_index_23=0\n    local char_arr_index_24=0\n    local char_arr_index_25=0\n\
    \    local char_arr_index_26=0\n    local char_arr_index_27=0\n    local char_arr_index_28=0\n\
    \    local char_arr_index_29=0\n    local char_arr_index_30=0\n    local char_arr_index_31=0\n\
    \    local char_arr_index_32=0\n    local char_arr_index_33=0\n    local char_arr_index_34=0\n\
    \    local char_arr_index_35=0\n    local char_arr_index_36=0\n    local char_arr_index_37=0\n\
    \   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | fold -w1); do\n\
    \            new_str+=$(echo $char | sort -n)\n        done\n        new_str+=\"\
    \ \"\n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local -a words\n    local -a sorted\n    local -a result\n\
    \    local i\n    local j\n    local k\n    local word\n    local sorted_word\n\
    \    local result_str\n\n    # Split string into words\n    IFS=' ' read -r -a\
    \ words <<< \"$str\"\n\n    # Sort each word\n    for ((i=0; i<${#words[@]}; i++));\
    \ do\n        word=\"${words[$i]}\"\n        sorted_word=\"$(printf \"%s\" \"\
    $word\" | fold -w1 | sort | tr -d '\\n')\"\n        sorted+=(\"$sorted_word\"\
    )\n    done\n\n    # Replace words with sorted words\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        word=\"${words[$i]}\"\n        sorted_word=\"${sorted[$i]}\"\
    \n        for ((j=0; j<${#word}; j++)); do\n            if [[ \"${word:$j:1}\"\
    \ == \"${sorted_word:0:1}\" ]]; then\n                result+=(\"${sorted_word:0:1}\"\
    )\n                sorted_word=\"${sorted_word:1}\"\n            else\n      \
    \          result+=(\"${word:$j:1}\")\n            fi\n        done\n    done\n\
    \n    # Build result string\n    result_str=\"\"\n    for ((i=0; i<${#result[@]};\
    \ i++)); do\n        result_str+=\"${result[$i]}\"\n    done\n\n    printf \"\
    %s\" \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ \"${str:$i:1}\" == \" \" ]]; then\n            res+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo \"${str:$i:1}\"\
    \ | sort -u)\"\n        fi\n    done\n    echo \"$res$word\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local result=\"\"\n    local word=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ \"${str:$i:1}\" == \" \" ]]; then\n            result+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo \"${str:$i:1}\"\
    \ | sort -u)\"\n        fi\n    done\n    result+=\"$word\"\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  local\
    \ str=\"$1\"\n  local -a words\n  local -a sorted\n  local -a result\n  local\
    \ i\n  local j\n  local k\n  local word\n  local sorted_word\n  local result_str\n\
    \n  # Split the string into words\n  IFS=' ' read -ra words <<< \"$str\"\n\n \
    \ # Sort each word\n  for ((i=0; i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\
    \n    sorted_word=\"\"\n    for ((j=0; j<${#word}; j++)); do\n      sorted_word+=\"\
    ${word:$j:1}\"\n    done\n    sorted_word=$(echo \"$sorted_word\" | sort)\n  \
    \  sorted+=(\"$sorted_word\")\n  done\n\n  # Reconstruct the string\n  for ((i=0;\
    \ i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\n    sorted_word=\"${sorted[$i]}\"\
    \n    for ((j=0; j<${#word}; j++)); do\n      for ((k=0; k<${#sorted_word}; k++));\
    \ do\n        if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\" ]]; then\n   \
    \       result+=(\"${sorted_word:$k:1}\")\n          sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\"\
    \n          break\n        fi\n      done\n    done\n    result+=(\" \")\n  done\n\
    \n  # Remove the last space\n  unset result[${#result[@]}-1]\n\n  # Convert the\
    \ array to a string\n  result_str=\"${result[@]}\"\n\n  echo \"$result_str\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo -n $word | grep -o . | sort | tr -d '\\\
    n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local input=$1\n    local output=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local sorted=\"\"\n    for word in $input; do\n        sorted=\"\"\n \
    \       for char in $(echo $word | grep -o .); do\n            sorted+=$(echo\
    \ -e \"$char\\n$sorted\" | sort -n | tr -d '\\n')\n        done\n        output+=\"\
    $sorted \"\n    done\n    echo $output\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344585
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\nanti_shuffle() {\n  \
    \  local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            new_str+=\"$word \"\n            word=\"\"\n   \
    \     else\n            word+=\"$char\"\n        fi\n    done\n    new_str+=\"\
    $word\"\n    len=${#new_str}\n    for ((i=0; i<len; i++)); do\n        char=${new_str:$i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            new_str=\"${new_str:0:$i}\
    \ $char${new_str:$((i+1)):$((len-i-1))}\"\n            i=$((i+1))\n          \
    \  len=$((len+1))\n        else\n            for ((j=i+1; j<len; j++)); do\n \
    \               if [[ \"${new_str:$j:1}\" == \" \" ]]; then\n                \
    \    break\n                fi\n            done\n            for ((k=i; k<j;\
    \ k++)); do\n                if [[ \"${new_str:$k:1}\" > \"${new_str:$((k+1)):1}\"\
    \ ]]; then\n                    char=${new_str:$k:1}\n                    new_str=\"\
    ${new_str:0:$k}${new_str:$((k+1)):1}${new_str:$k:1}${new_str:$((k+2)):$((len-k-2))}\"\
    \n                fi\n            done\n        fi\n    done\n    echo \"$new_str\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344586
