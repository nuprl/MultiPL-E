language: sh
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(($decimal % 2))$binary\"\n        decimal=$(($decimal\
    \ / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=''\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$(($decimal % 2))$binary\n        decimal=$(($decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local result=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       result=\"$(($num % 2))$result\"\n        num=$(($num / 2))\n    done\n\
    \    echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local binary=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       binary=\"$((num % 2))$binary\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(($decimal % 2))$binary\"\n        decimal=$(($decimal\
    \ / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=$((number % 2))$binary\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  # Write your code here\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=''\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(( $decimal % 2 ))$binary\"\n        decimal=$(( $decimal\
    \ / 2 ))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # Write your code here\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$(( $decimal % 2 ))\n        decimal=$((\
    \ $decimal / 2 ))\n        binary=\"$remainder$binary\"\n    done\n    echo \"\
    db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # Write your code here\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  while [ $decimal -gt 0 ]; do\n \
    \   binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$((decimal % 2))\n        decimal=$((decimal / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  # Write your code here\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=$(( $decimal % 2 ))$binary\n    decimal=$(( $decimal / 2 ))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$((decimal % 2))\n        decimal=$((decimal / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"obase=2;$1\" | bc | sed 's/^/db/' | sed 's/$/db/'\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$(( $decimal % 2 ))\n        decimal=$(( $decimal\
    \ / 2 ))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$((decimal % 2))\n        binary=\"$remainder$binary\"\
    \n        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(( $decimal % 2 ))$binary\"\n        decimal=$(( $decimal\
    \ / 2 ))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$(( $decimal % 2 ))\n        decimal=$((\
    \ $decimal / 2 ))\n        binary=\"$remainder$binary\"\n    done\n    echo \"\
    db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(($decimal % 2))$binary\"\n        decimal=$(($decimal\
    \ / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=$((decimal % 2))$binary\n    decimal=$((decimal / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use echo \"$1\"\n    #echo \"db$(echo\
    \ \"obase=2;$1\" | bc)db\"\n    echo \"db$(printf '%08d' $(echo \"obase=2;$1\"\
    \ | bc))db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(($decimal % 2))$binary\"\n        decimal=$(($decimal\
    \ / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local dec=$1\n    local bin=''\n    local rem=0\n    while [ $dec -gt\
    \ 0 ]; do\n        rem=$((dec % 2))\n        bin=\"$rem$bin\"\n        dec=$((dec\
    \ / 2))\n    done\n    echo \"db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # Write your code here\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local i=0\n  local j=0\n  local k=0\n  local temp_binary_number=\"\
    \"\n  local temp_binary_number_length=0\n  local temp_binary_number_length_minus_one=0\n\
    \  local temp_binary_number_length_minus_two=0\n  local temp_binary_number_length_minus_three=0\n\
    \  local temp_binary_number_length_minus_four=0\n  local temp_binary_number_length_minus_five=0\n\
    \  local temp_binary_number_length_minus_six=0\n  local temp_binary_number_length_minus_seven=0\n\
    \  local temp_binary_number_length_minus_eight=0\n  local temp_binary_number_length_minus_nine=0\n\
    \  local temp_binary_number_length_minus_ten=0\n  local temp_binary_number_length_minus_eleven=0\n\
    \  local temp_binary_number_length_minus_twelve=0\n  local temp_binary_number_length_minus_thirteen=0\n\
    \  local temp_binary_number_length_minus_fourteen=0\n  local temp_binary_number_length_minus_fifteen=0\n\
    \  local temp_binary_number_length_minus_sixteen=0\n  local temp_binary_number_length_minus_seventeen=0\n\
    \  local temp_binary_number_length_minus_eighteen=0\n  local temp_binary_number_length_minus_nineteen=0\n\
    \  local temp_binary_number_length_minus_twenty=0\n  local temp_binary_number_length_minus_twenty_one=0\n\
    \  local temp_binary_number_length_minus_twenty_two=0\n  local temp_binary_number_length_minus_twenty_three=0\n\
    \  local temp_binary_number_length_minus_twenty_four=0\n  local temp_binary_number_length_minus_twenty_five=0\n\
    \  local temp_binary_number_length_minus_twenty_six=0\n \n}\n\ncandidate() {\n\
    \    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local result=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    result=\"$((decimal % 2))$result\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$(( $decimal % 2 ))$binary\"\n    decimal=$(( $decimal / 2 ))\n\
    \  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=\"$1\"\n  local binary=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local temp2=0\n\
    \  local temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n\
    \  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local\
    \ temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n\
    \  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local\
    \ temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n\
    \  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local\
    \ temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n\
    \  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local\
    \ temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n\
    \  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local\
    \ temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n\
    \  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local\
    \ temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n\
    \  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local\
    \ temp66=0\n  local temp67=0\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # Write your code here\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local result=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        result=\"$((number % 2))$result\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    # your code here\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local bin=''\n    while [ $num -gt 0 ]; do\n      \
    \  bin=$((num % 2))$bin\n        num=$((num / 2))\n    done\n    echo \"db$bin\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(( $decimal % 2 ))$binary\"\n        decimal=$(( $decimal\
    \ / 2 ))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$((decimal % 2))\n        decimal=$((decimal / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local dec=$1\n    local bin=\"\"\n    while [ $dec -gt 0 ]; do\n    \
    \    bin=\"$((dec % 2))$bin\"\n        dec=$((dec / 2))\n    done\n    echo \"\
    db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;ibase=10;$1\" | bc)db\"\n}\n\ncandidate() {\n\
    \    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$(($decimal % 2))$binary\n        decimal=$(($decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$(($decimal % 2))$binary\"\n        decimal=$(($decimal\
    \ / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   result=$((number % 2))$result\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=$((decimal % 2))$binary\n        decimal=$((decimal / 2))\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$(( $decimal % 2 ))$binary\"\n    decimal=$(( $decimal / 2 ))\n\
    \  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339735
