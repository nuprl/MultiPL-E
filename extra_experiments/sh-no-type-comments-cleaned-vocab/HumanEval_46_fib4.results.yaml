language: sh
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for (( i=4; i<=$1; i++ )); do\n            e=$(( $a + $b + $c + $d ))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n    local fib4_3=0\n\
    \    local fib4_n=0\n    if [ $n -eq 0 ]; then\n        echo $fib4_0\n    elif\
    \ [ $n -eq 1 ]; then\n        echo $fib4_1\n    elif [ $n -eq 2 ]; then\n    \
    \    echo $fib4_2\n    elif [ $n -eq 3 ]; then\n        echo $fib4_3\n    else\n\
    \        for ((i=4; i<=n; i++)); do\n            fib4_n=$((fib4_0 + fib4_1 + fib4_2\
    \ + fib4_3))\n            fib4_0=$fib4_1\n            fib4_1=$fib4_2\n       \
    \     fib4_2=$fib4_3\n            fib4_3=$fib4_n\n        done\n        echo $fib4_n\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n\tlocal n=$1\n\
    \tlocal a=0\n\tlocal b=0\n\tlocal c=2\n\tlocal d=0\n\tlocal i=3\n\twhile [ $i\
    \ -le $n ]; do\n\t\td=$((a+b+c))\n\t\ta=$b\n\t\tb=$c\n\t\tc=$d\n\t\ti=$((i+1))\n\
    \tdone\n\techo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0 b=0 c=2 d=0\n  for ((i=3; i<=n; i++)); do\n    e=$((a+b+c+d))\n \
    \   a=$b\n    b=$c\n    c=$d\n    d=$e\n  done\n  echo $e\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n           \
    \ a=$b\n            b=$c\n            c=$d\n            d=$e\n        done\n \
    \       echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  if [ $1 -eq\
    \ 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif [ $1 -eq\
    \ 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n    echo 0\n  else\n    a=0\n\
    \    b=0\n    c=2\n    d=0\n    for (( i=4; i<=$1; i++ )); do\n      e=$(( a +\
    \ b + c + d ))\n      a=$b\n      b=$c\n      c=$d\n      d=$e\n    done\n   \
    \ echo $e\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1\
    \ - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n    local fib4_3=0\n\
    \    local fib4_4=0\n    local fib4_5=0\n    local fib4_6=0\n    local fib4_7=0\n\
    \    local fib4_8=0\n    local fib4_9=0\n    local fib4_10=0\n    local fib4_11=0\n\
    \    local fib4_12=0\n    local fib4_13=0\n    local fib4_14=0\n    local fib4_15=0\n\
    \    local fib4_16=0\n    local fib4_17=0\n    local fib4_18=0\n    local fib4_19=0\n\
    \    local fib4_20=0\n    local fib4_21=0\n    local fib4_22=0\n    local fib4_23=0\n\
    \    local fib4_24=0\n    local fib4_25=0\n    local fib4_26=0\n    local fib4_27=0\n\
    \    local fib4_28=0\n    local fib4_29=0\n    local fib4_30=0\n    local fib4_31=0\n\
    \    local fib4_32=0\n    local fib4_33=0\n    local fib4_34=0\n    local fib4_35=0\n\
    \    local fib4_36=0\n    local fib4_37=0\n    local fib4_38=0\n    local fib4_39=0\n\
    \    local fib4_40=0\n    local fib4_41=0\n    local fib4_42=0\n    local fib4_43=0\n\
    \    local fib4_44=0\n    local fib4_45=0\n    local fib4_46=0\n    local fib4_47=0\n\
    \    local fib4_48=0\n    local fib4_49=0\n    local fib4_50=0\n    local fib4_51=0\n\
    \    local fib4_52=0\n    local fib4_53=0\n    local fib4_54=0\n    local fib4_55=0\n\
    \   \n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n\tlocal n=$1\n\
    \tlocal a=0\n\tlocal b=0\n\tlocal c=2\n\tlocal d=0\n\tlocal i=3\n\twhile [ $i\
    \ -le $n ]; do\n\t\td=$((a+b+c))\n\t\ta=$b\n\t\tb=$c\n\t\tc=$d\n\t\ti=$((i+1))\n\
    \tdone\n\techo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n    local fib4_3=0\n\
    \    local fib4_n=0\n    if [ $n -eq 0 ]; then\n        echo $fib4_0\n    elif\
    \ [ $n -eq 1 ]; then\n        echo $fib4_1\n    elif [ $n -eq 2 ]; then\n    \
    \    echo $fib4_2\n    elif [ $n -eq 3 ]; then\n        echo $fib4_3\n    else\n\
    \        for ((i=4; i<=$n; i++)); do\n            fib4_n=$((fib4_0 + fib4_1 +\
    \ fib4_2 + fib4_3))\n            fib4_0=$fib4_1\n            fib4_1=$fib4_2\n\
    \            fib4_2=$fib4_3\n            fib4_3=$fib4_n\n        done\n      \
    \  echo $fib4_n\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n    \
    \    echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for (( i=4; i<=$n; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  n=$1\n  if\
    \ [[ $n -eq 0 ]]; then\n    echo 0\n  elif [[ $n -eq 1 ]]; then\n    echo 0\n\
    \  elif [[ $n -eq 2 ]]; then\n    echo 2\n  elif [[ $n -eq 3 ]]; then\n    echo\
    \ 0\n  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for (( i=4; i<=$n; i++ ));\
    \ do\n      e=$((a+b+c+d))\n      a=$b\n      b=$c\n      c=$d\n      d=$e\n \
    \   done\n    echo $e\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  # TODO: Implement\
    \ me\n  echo \"0\"\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n    \
    \    echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for i in $(seq 4 $n); do\n            e=$((a+b+c+d))\n  \
    \          a=$b\n            b=$c\n            c=$d\n            d=$e\n      \
    \  done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"\
    8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [[ $i -le $n ]]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  if [ \"$1\"\
    \ -eq 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq 1 ]; then\n    echo 0\n  elif\
    \ [ \"$1\" -eq 2 ]; then\n    echo 2\n  elif [ \"$1\" -eq 3 ]; then\n    echo\
    \ 0\n  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for i in $(seq 4 $1); do\n\
    \      e=$((a+b+c+d))\n      a=$b\n      b=$c\n      c=$d\n      d=$e\n    done\n\
    \    echo $e\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 2
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  # Write your\
    \ code here\n  # Fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  #\
    \ Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n \
    \ # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n \
    \ # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4)\n  # Fib4(n) = Fib4(n-1) + Fib4(n-2) +\n}\n\ncandidate() {\n   \
    \ fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n\
    \    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpo9qdtd8j.sh: line 30: syntax error near unexpected token `}''\n/tmp/tmpo9qdtd8j.sh:
    line 30: `}''\n"'
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    # Write\
    \ your code here\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq\
    \ 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n   \
    \ elif [ $1 -eq 3 ]; then\n        echo 0\n    else\n        fib4_1=0\n      \
    \  fib4_2=0\n        fib4_3=2\n        fib4_4=0\n        for (( i=4; i<=$1; i++\
    \ )); do\n            fib4_5=$((fib4_1+fib4_2+fib4_3+fib4_4))\n            fib4_1=$fib4_2\n\
    \            fib4_2=$fib4_3\n            fib4_3=$fib4_4\n            fib4_4=$fib4_5\n\
    \        done\n        echo $fib4_5\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0 b=0 c=2 d=0\n    for ((i=3; i<=n; i++)); do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n    done\n    echo $d\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [[ $1\
    \ -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n\
    \        echo 0\n    else\n        n=$1\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        while [[ $n -gt 3 ]]; do\n            e=$((a+b+c+d))\n \
    \           a=$b\n            b=$c\n            c=$d\n            d=$e\n     \
    \       n=$((n-1))\n        done\n        echo $e\n    fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  for ((i=3; i<=n; i++));\
    \ do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n  done\n  echo $d\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    a=0\n    b=0\n    c=2\n    d=0\n    for ((i=3; i<=n; i++)); do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n    done\n    echo $d\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo \"0\"\n    elif [ $1 -eq 1 ]; then\n        echo\
    \ \"0\"\n    elif [ $1 -eq 2 ]; then\n        echo \"2\"\n    elif [ $1 -eq 3\
    \ ]; then\n        echo \"0\"\n    else\n        echo $(( $(fib4 $(($1-1))) +\
    \ $(fib4 $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4))) ))\n    fi\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    # Your\
    \ code here\n    echo \"0\"\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    for ((i=3; i<=n;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n\
    \    done\n    echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local fib4_1=0\n  local fib4_2=0\n  local fib4_3=2\n  local fib4_4=0\n  local\
    \ fib4_n=0\n  for (( i=4; i<=n; i++ )); do\n    fib4_n=$(( fib4_1 + fib4_2 + fib4_3\
    \ + fib4_4 ))\n    fib4_1=$fib4_2\n    fib4_2=$fib4_3\n    fib4_3=$fib4_4\n  \
    \  fib4_4=$fib4_n\n  done\n  echo $fib4_n\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    ((i++))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    if [ $n -eq 0\
    \ ]; then\n        echo $a\n    elif [ $n -eq 1 ]; then\n        echo $b\n   \
    \ elif [ $n -eq 2 ]; then\n        echo $c\n    elif [ $n -eq 3 ]; then\n    \
    \    echo $d\n    else\n        for ((i=4; i<=n; i++)); do\n            local\
    \ e=$((a+b+c+d))\n            a=$b\n            b=$c\n            c=$d\n     \
    \       d=$e\n        done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    ((i++))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n    \
    \    echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for ((i=4; i<=n; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  if [ \"$1\"\
    \ -eq 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq 1 ]; then\n    echo 0\n  elif\
    \ [ \"$1\" -eq 2 ]; then\n    echo 2\n  elif [ \"$1\" -eq 3 ]; then\n    echo\
    \ 0\n  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for ((i=4; i<=\"$1\"; i++));\
    \ do\n      e=$((a+b+c+d))\n      a=$b\n      b=$c\n      c=$d\n      d=$e\n \
    \   done\n    echo $e\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    # Write\
    \ your code here\n    echo \"0\"\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"\
    8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n    \
    \    echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for ((i=4; i<=n; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [[ $1\
    \ -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n\
    \        echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n           \
    \ a=$b\n            b=$c\n            c=$d\n            d=$e\n        done\n \
    \       echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1\
    \ - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$(($a + $b + $c))\n        a=$b\n     \
    \   b=$c\n        c=$d\n        i=$(($i + 1))\n    done\n    echo $d\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=\"\
    $1\"\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n\
    \    while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  if [[ $1\
    \ -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif\
    \ [[ $1 -eq 2 ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 0\n\
    \  else\n    fib4_1=0\n    fib4_2=0\n    fib4_3=2\n    fib4_4=0\n    for (( i=4;\
    \ i<=$1; i++ )); do\n      fib4_5=$(( fib4_1 + fib4_2 + fib4_3 + fib4_4 ))\n \
    \     fib4_1=$fib4_2\n      fib4_2=$fib4_3\n      fib4_3=$fib4_4\n      fib4_4=$fib4_5\n\
    \    done\n    echo $fib4_5\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  # Write your\
    \ code here\n  echo \"0\"\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    a=0\n    b=0\n    c=2\n    d=0\n    for ((i=3; i<=n; i++)); do\n        e=$((a+b+c+d))\n\
    \        a=$b\n        b=$c\n        c=$d\n        d=$e\n    done\n    echo $e\n\
    }\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  n=$1\n  a=0\n\
    \  b=0\n  c=2\n  d=0\n  for ((i=3; i<=n; i++)); do\n    e=$((a+b+c+d))\n    a=$b\n\
    \    b=$c\n    c=$d\n    d=$e\n  done\n  echo $e\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    n=$1\n\
    \    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n    \
    \    echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for i in $(seq 4 $n); do\n            e=$((a+b+c+d))\n  \
    \          a=$b\n            b=$c\n            c=$d\n            d=$e\n      \
    \  done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"\
    8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [[ $1\
    \ -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n\
    \        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $((\
    \ $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n    fi\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        echo $(( $(fib4 $(($1-1))) + $(fib4 $(($1-2)))\
    \ + $(fib4 $(($1-3))) + $(fib4 $(($1-4))) ))\n    fi\n}\n\ncandidate() {\n   \
    \ fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n\
    \    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [[ $i -le $n ]]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  if [[ $1\
    \ -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 0\n  elif\
    \ [[ $1 -eq 2 ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 0\n\
    \  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for ((i=4; i<=$1; i++)); do\n\
    \      e=$((a+b+c+d))\n      a=$b\n      b=$c\n      c=$d\n      d=$e\n    done\n\
    \    echo $e\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    for ((i=0; i<n;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n\
    \    done\n    echo $a\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n\tlocal n=$1\n\
    \tlocal a=0\n\tlocal b=0\n\tlocal c=2\n\tlocal d=0\n\tlocal i=3\n\twhile [ $i\
    \ -le $n ]; do\n\t\td=$((a+b+c))\n\t\ta=$b\n\t\tb=$c\n\t\tc=$d\n\t\ti=$((i+1))\n\
    \tdone\n\techo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1\
    \ - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        echo $(($(fib4 $(($1-1))) + $(fib4 $(($1-2)))\
    \ + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n    fi\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357003
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  for ((i=3; i<=n; i++));\
    \ do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n  done\n  echo $d\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    if [ $n -eq 0\
    \ ]; then\n        echo $a\n    elif [ $n -eq 1 ]; then\n        echo $b\n   \
    \ elif [ $n -eq 2 ]; then\n        echo $c\n    elif [ $n -eq 3 ]; then\n    \
    \    echo $d\n    else\n        for (( i=4; i<=$n; i++ )); do\n            a=$b\n\
    \            b=$c\n            c=$d\n            d=$((a+b+c))\n        done\n\
    \        echo $d\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    for ((i=3; i<=n;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n\
    \    done\n    echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    for ((i=3; i<=n;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n\
    \    done\n    echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n           \
    \ a=$b\n            b=$c\n            c=$d\n            d=$e\n        done\n \
    \       echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n         \
    \   a=$b\n            b=$c\n            c=$d\n            d=$e\n        done\n\
    \        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [[ $i\
    \ -le $n ]]; do\n    d=$((a + b + c))\n    a=$b\n    b=$c\n    c=$d\n    ((i++))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  for ((i=3; i<=n; i++));\
    \ do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n  done\n  echo $d\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n \
    \   while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n\
    \        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local fib4_0=0\n  local fib4_1=0\n  local fib4_2=2\n  local fib4_3=0\n  local\
    \ fib4_n=0\n  if [ $n -eq 0 ]; then\n    echo $fib4_0\n  elif [ $n -eq 1 ]; then\n\
    \    echo $fib4_1\n  elif [ $n -eq 2 ]; then\n    echo $fib4_2\n  elif [ $n -eq\
    \ 3 ]; then\n    echo $fib4_3\n  else\n    for (( i=4; i<=n; i++ )); do\n    \
    \  fib4_n=$((fib4_0 + fib4_1 + fib4_2 + fib4_3))\n      fib4_0=$fib4_1\n     \
    \ fib4_1=$fib4_2\n      fib4_2=$fib4_3\n      fib4_3=$fib4_n\n    done\n    echo\
    \ $fib4_n\n  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [[ $i\
    \ -le $n ]]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    ((i++))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    if [ \"\
    $1\" -eq 0 ]; then\n        echo 0\n    elif [ \"$1\" -eq 1 ]; then\n        echo\
    \ 0\n    elif [ \"$1\" -eq 2 ]; then\n        echo 2\n    elif [ \"$1\" -eq 3\
    \ ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n \
    \       d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357002
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\nfib4() {\n    local n=$1\n\
    \    local a=0\n    local b=0\n    local c=2\n    local d=0\n    for ((i=3; i<=n;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n\
    \    done\n    echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357002
