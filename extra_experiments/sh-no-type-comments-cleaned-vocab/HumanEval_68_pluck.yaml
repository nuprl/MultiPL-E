name: HumanEval_68_pluck
language: sh
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n#\
  \ >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n\
  # []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the first\
  \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
  \ 10000\n# * 0 <= node.value\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local nodes=$1\n  local evens=$(echo \"$nodes\" | grep -Eo '^[0-9]+$'\
    \ | grep -Eo '^[02468]+$')\n  local evens_count=$(echo \"$evens\" | wc -l)\n \
    \ if [ \"$evens_count\" -eq 0 ]; then\n    echo \"[]\"\n  else\n    local smallest_even=$(echo\
    \ \"$evens\" | sort -n | head -n 1)\n    local smallest_even_index=$(echo \"$nodes\"\
    \ | grep -Eo '^[0-9]+$' | grep -Eo '^[02468]+$' | grep -n \"^$smallest_even$\"\
    \ | cut -d: -f1)\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=${nodes[0]}\n  local\
    \ min_even_index=0\n  local min_even_found=false\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if ((${nodes[$i]} % 2 == 0)); then\n      if (($min_even_found\
    \ == false)); then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n\
    \        min_even_found=true\n      elif ((${nodes[$i]} < $min_even_value)); then\n\
    \        min_even_value=${nodes[$i]}\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if (($min_even_found == true)); then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local -a nodes=($1)\n\
    \  local min=\n  local min_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n  \
    \  if ((nodes[i] % 2 == 0)); then\n      if [[ -z $min || nodes[i] -lt $min ]];\
    \ then\n        min=${nodes[i]}\n        min_index=$i\n      fi\n    fi\n  done\n\
    \  if [[ -z $min ]]; then\n    echo '[]'\n  else\n    echo \"[\\\"$min\\\", \\\
    \"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  for ((i=0; i<n; i++)); do\n    local -i node=${nodes[$i]}\n    if ((node %\
    \ 2 == 0 && node < min_even_value)); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n  done\n  if ((min_even_value == 10000)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "   \
    \ local -a nodes=($1)\n    local -a evens=()\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n\
    \        fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\
    []\"\n    else\n        local min=${evens[0]}\n        local min_index=0\n   \
    \     for i in \"${!evens[@]}\"; do\n            if [[ ${evens[$i]} -lt $min ]];\
    \ then\n                min=${evens[$i]}\n                min_index=$i\n     \
    \       fi\n        done\n        echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n\
    \    fi", "    local nodes=($@)\n    local min_even_value=\n    local min_even_index=\n\
    \    local i=0\n    for node in \"${nodes[@]}\"; do\n        if (( node % 2 ==\
    \ 0 )); then\n            if [[ -z $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            elif (( node < min_even_value\
    \ )); then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        (( i++ ))\n    done\n    if [[ -z $min_even_value\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n  local -i i=0\n\
    \  local -i smallest_index=0\n  local -i smallest_value=0\n  local -i smallest_even_value=0\n\
    \  local -i smallest_even_index=0\n  local -i is_first_even=1\n  local -i is_first_value=1\n\
    \  local -i is_first_index=1\n  local -i is_first_even_index=1\n  local -i is_first_even_value=1\n\
    \  local -i is_first_even_index_value=1\n  local -i is_first_even_value_index=1\n\
    \  local -i is_first_even_index_value_index=1\n  local -i is_first_even_value_index_index=1\n\
    \  local -i is_first_even_index_value_index_index=1\n  local -i is_first_even_value_index_index_index=1\n\
    \  local -i is_first_even_index_value_index_index_index=1\n  local -i is_first_even_value_index_index_index_index=1\n\
    \  local -i is_first_even_index_value_index_index_index_index=1\n  local -i is_first_even_value_index_index_index_index_index=1\n\
    \  local -i is_first_even_index_value_index_index_index_index_index=1\n  local\
    \ -i is_first_even_value_index_index_index_index_index_index=1\n  local -i is_first_even_index_value_index_index_index_index_index_index=1\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index=1\n\
    \  local -i is_first_even_index_value_index_index_index_index_index_index_index=1\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index_index=1\n\
    \  local -i is_first_even_index_value_index_index", "  local -a nodes=($1)\n \
    \ local -a evens=()\n  local -a evens_index=()\n  local -a result=()\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      evens+=($node)\n      evens_index+=($i)\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n\
    \    local min_index=0\n    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]}\
    \ -lt $min ]]; then\n        min=${evens[$i]}\n        min_index=$i\n      fi\n\
    \    done\n    result+=($min)\n    result+=(${evens_index[$min_index]})\n    echo\
    \ \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local min_even=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if ((nodes[i] % 2 == 0)); then\n      if [[ -z $min_even ]]; then\n\
    \        min_even=${nodes[i]}\n        min_even_index=$i\n      elif ((nodes[i]\
    \ < min_even)); then\n        min_even=${nodes[i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local smallest_even_value=\n  local smallest_even_value_index=\n  local index=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    ((index++))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  local index=0\n  for node in $nodes; do\n \
    \   if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_value\" ] || [\
    \ $node -lt $smallest_value ]; then\n        smallest_value=$node\n        smallest_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local -a evens=()\n\
    \  local -a evens_indexes=()\n  local -a smallest_evens=()\n  local -a smallest_evens_indexes=()\n\
    \  local -a result=()\n  local i=0\n  local node_value=0\n  local smallest_even=0\n\
    \  local smallest_even_index=0\n  for node in \"${nodes[@]}\"; do\n    node_value=$(echo\
    \ \"$node\" | tr -d '\"')\n    if [[ $((node_value % 2)) -eq 0 ]]; then\n    \
    \  evens+=($node_value)\n      evens_indexes+=($i)\n    fi\n    i=$((i + 1))\n\
    \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  smallest_even=${evens[0]}\n  smallest_even_index=0\n  for i in \"${!evens[@]}\"\
    ; do\n    if [[ ${evens[$i]} -lt $smallest_even ]]; then\n      smallest_even=${evens[$i]}\n\
    \      smallest_even_index=$i\n    fi\n  done\n  smallest_evens+=($smallest_even)\n\
    \  smallest_evens_indexes+=(${evens_indexes[$smallest_even_index]})\n  for i in\
    \ \"${!evens[@]}\"; do\n    if [[ ${evens[$i]} -eq $smallest_even ]]; then\n \
    \     smallest_evens_indexes+=(${evens_indexes[$i]})\n    fi\n  done\n  smallest_even_index=${smallest_evens_indexes[0]}\n\
    \  for i in \"${!smallest_evens_indexes[@]}\"; do\n    if [[ ${smallest_evens_indexes[$i]}\
    \ -lt $smallest_even_index ]]; then\n      smallest_even_index=${smallest_evens_indexes[$i]}\n\
    \    fi\n  done\n  result+=($smallest_even)\n", "  local nodes=\"$1\"\n  local\
    \ min_even_value=\n  local min_even_index=\n  local i=0\n  for node in $nodes;\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]\
    \ || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n   \
    \     min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z\
    \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node_value=${nodes[$i]}\n    if [[ $((node_value % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node_value\n\
    \        smallest_even_value_index=$i\n      elif [[ $node_value -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node_value\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $smallest_even_value ]] || [[ $node -lt $smallest_even_value ]];\
    \ then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n", "  local nodes=($1)\n  local min_even_value=10000000000\n \
    \ local min_even_index=0\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n    \
    \  min_even_value=$node\n      min_even_index=$i\n    fi\n    i=$((i + 1))\n \
    \ done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($@)\n  local smallest_value=\n  local smallest_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_value=0\n \
    \     smallest_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ ${nodes[$i]}\
    \ -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n        smallest_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local evens=()\n  local evens_indexes=()\n  local smallest_even_value=0\n\
    \  local smallest_even_index=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(0)\n      evens_indexes+=($i)\n\
    \    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      evens_indexes+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    smallest_even_value=${evens[0]}\n    smallest_even_index=${evens_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${evens[$i]}\n        smallest_even_index=${evens_indexes[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local evens=()\n  local evens_indexes=()\n\
    \  local smallest_even=0\n  local smallest_even_index=0\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      evens_indexes+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    smallest_even=${evens[0]}\n    smallest_even_index=${evens_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $smallest_even\
    \ ]]; then\n        smallest_even=${evens[$i]}\n        smallest_even_index=${evens_indexes[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ \"${nodes[$i]}\" =~ ^[0-9]+$\
    \ ]]; then\n      if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n        smallest_even_value=0\n\
    \        smallest_even_value_index=$i\n        break\n      elif [[ \"${nodes[$i]}\"\
    \ -gt 0 ]] && [[ \"${nodes[$i]}\" -lt \"$smallest_even_value\" ]] && [[ \"${nodes[$i]}\"\
    %2 -eq 0 ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z \"$smallest_even_value\" ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens\n  local -a evens_indexes\n\
    \  local -a evens_indexes_sorted\n  local -a evens_sorted\n  local -a result\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n\
    \      evens+=(${nodes[i]})\n      evens_indexes+=($i)\n    fi\n  done\n  if ((${#evens[@]}\
    \ > 0)); then\n    evens_indexes_sorted=($(printf \"%s\\n\" \"${evens_indexes[@]}\"\
    \ | sort -n))\n    evens_sorted=($(printf \"%s\\n\" \"${evens[@]}\" | sort -n))\n\
    \    result=(${evens_sorted[0]} ${evens_indexes_sorted[0]})\n  fi\n  echo \"${result[@]}\"",
  "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n\
    \      smallest_even_value=\"${nodes[$i]}\"\n      smallest_even_value_index=\"\
    $i\"\n      break\n    elif [[ \"${nodes[$i]}\" -gt 0 ]] && [[ \"${nodes[$i]}\"\
    \ -lt \"$smallest_even_value\" ]] && [[ \"${nodes[$i]}\"%2 -eq 0 ]]; then\n  \
    \    smallest_even_value=\"${nodes[$i]}\"\n      smallest_even_value_index=\"\
    $i\"\n    fi\n  done\n  if [[ -z \"$smallest_even_value\" ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "    local -a nodes=($@)\n    local -i min_index=0\n    local -i\
    \ min_value=0\n    local -i i=0\n    local -i len=${#nodes[@]}\n    local -i value=0\n\
    \    local -i found=0\n    local -i first_even=0\n    local -i first_even_index=0\n\
    \    if [[ $len -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n\
    \    for ((i=0; i<len; i++)); do\n        value=${nodes[$i]}\n        if [[ $value\
    \ -eq 0 ]]; then\n            if [[ $found -eq 0 ]]; then\n                min_value=$value\n\
    \                min_index=$i\n                found=1\n            fi\n     \
    \   elif [[ $value -gt 0 ]]; then\n            if [[ $value -lt $min_value ]];\
    \ then\n                min_value=$value\n                min_index=$i\n     \
    \           found=1\n            fi\n        fi\n        if [[ $value -eq 0 ]];\
    \ then\n            if [[ $first_even -eq 0 ]]; then\n                first_even=$value\n\
    \                first_even_index=$i\n            fi\n        elif [[ $value -gt\
    \ 0 ]]; then\n            if [[ $value -lt $first_even ]]; then\n            \
    \    first_even=$value\n                first_even_index=$i\n            fi\n\
    \        fi\n    done\n    if [[ $found -eq 0 ]]; then\n        echo \"[]\"\n\
    \    else\n        echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n    fi",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "    local -a nodes=($1)\n   \
    \ local -a evens=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i min=0\n    local -i min_index=0\n    local -i len=${#nodes[@]}\n \
    \   for ((i=0; i<len; i++)); do\n        if ((nodes[i] % 2 == 0)); then\n    \
    \        evens[j]=${nodes[i]}\n            ((j++))\n        fi\n    done\n   \
    \ if ((j == 0)); then\n        echo \"[]\"\n        return\n    fi\n    min=${evens[0]}\n\
    \    min_index=0\n    for ((k=1; k<j; k++)); do\n        if ((evens[k] < min));\
    \ then\n            min=${evens[k]}\n            min_index=k\n        fi\n   \
    \ done\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"", "  local nodes=($@)\n\
    \  local min_even_value=10000\n  local min_even_value_index=10000\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if (( nodes[i] % 2 == 0 && nodes[i] < min_even_value\
    \ )); then\n      min_even_value=${nodes[i]}\n      min_even_value_index=$i\n\
    \    fi\n  done\n  if (( min_even_value == 10000 )); then\n    echo \"[]\"\n \
    \ else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n\
    \  fi", "  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i found=0\n  while (( i <\
    \ n )); do\n    if (( nodes[i] % 2 == 0 )); then\n      if (( found == 0 )); then\n\
    \        min_value=nodes[i]\n        min_index=i\n        found=1\n      elif\
    \ (( nodes[i] < min_value )); then\n        min_value=nodes[i]\n        min_index=i\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( found == 0 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a evens_index_sorted=()\n  local -a evens_index_sorted_uniq=()\n  local -a\
    \ evens_index_sorted_uniq_min=()\n  local -a evens_index_sorted_uniq_min_index=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted=()\n  local -a evens_index_sorted_uniq_min_index_sorted_uniq=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min=()\n  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min_index=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq=()\n\
    \  local -a evens_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min_index_sorted_uniq_min=()\n\
    \  local -a evens_index", "  local nodes=\"$1\"\n  local min_even_value=\"\"\n\
    \  local min_even_index=\"\"\n  local i=0\n  for node in $nodes; do\n    if [\
    \ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$min_even_value\" ] || [ $node\
    \ -lt $min_even_value ]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$min_even_value\" ];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "    local nodes=\"$1\"\n    local smallest_value=\n    local smallest_index=\n\
    \    local i=0\n    for node in $nodes; do\n        if [ $((node % 2)) -eq 0 ];\
    \ then\n            if [ -z \"$smallest_value\" ] || [ $node -lt $smallest_value\
    \ ]; then\n                smallest_value=$node\n                smallest_index=$i\n\
    \            fi\n        fi\n        i=$((i + 1))\n    done\n    if [ -z \"$smallest_value\"\
    \ ]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n    fi", "    local -a nodes=($1)\n    local -i\
    \ min_even_value=10000000\n    local -i min_even_index=10000000\n    local -i\
    \ i=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq 0\
    \ ]] && [[ $node -lt $min_even_value ]]; then\n            min_even_value=$node\n\
    \            min_even_index=$i\n        fi\n        i+=1\n    done\n    if [[\
    \ $min_even_value -eq 10000000 ]]; then\n        echo \"[]\"\n    else\n     \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local\
    \ nodes=($@)\n  local smallest_value=\n  local smallest_index=\n  local i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value ]]; then\n \
    \       smallest_value=$node\n        smallest_index=$i\n      fi\n    fi\n  \
    \  i=$((i + 1))\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_value_index=\n\
    \  local node_value=\n  local node_index=\n  for node_index in \"${!nodes[@]}\"\
    ; do\n    node_value=\"${nodes[$node_index]}\"\n    if [[ $node_value -eq 0 ]];\
    \ then\n      min_even_value=0\n      min_even_value_index=$node_index\n     \
    \ break\n    elif [[ $node_value -gt 0 ]] && [[ $((node_value % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node_value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node_value\n        min_even_value_index=$node_index\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\
    \n  fi", "  local nodes=($@)\n  local evens=()\n  local even_indexes=()\n  local\
    \ even_values=()\n  local even_count=0\n  local even_index=0\n  local even_value=0\n\
    \  local even_min_index=0\n  local even_min_value=0\n  local even_min_count=0\n\
    \  local i=0\n  local node=0\n  local node_count=${#nodes[@]}\n  for ((i=0; i<node_count;\
    \ i++)); do\n    node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     evens+=($node)\n      even_indexes+=($i)\n      even_count=$((even_count\
    \ + 1))\n    fi\n  done\n  if [[ $even_count -eq 0 ]]; then\n    echo \"[]\"\n\
    \    return\n  fi\n  even_min_count=$even_count\n  even_min_value=${evens[0]}\n\
    \  even_min_index=0\n  for ((i=0; i<even_count; i++)); do\n    even_value=${evens[$i]}\n\
    \    even_index=${even_indexes[$i]}\n    if [[ $even_value -lt $even_min_value\
    \ ]]; then\n      even_min_value=$even_value\n      even_min_index=$even_index\n\
    \      even_min_count=1\n    elif [[ $even_value -eq $even_min_value ]]; then\n\
    \      even_min_count=$((even_min_count + 1))\n    fi\n  done\n  if [[ $even_min_count\
    \ -gt 1 ]]; then\n    for ((i=0; i<even_count; i++)); do\n      even_value=${evens[$i]}\n\
    \      even_index=${even_indexes[$i]}\n      if [[ $even_value -eq $even_min_value\
    \ ]]; then\n        even_min_index=$even_index\n        break\n      fi\n    done\n\
    \  fi\n  echo \"[\\\"$even_min_value\\\", \\\"$", "    local -a nodes=(\"$@\"\
    )\n    local -i min_even_value=100001\n    local -i min_even_index=100001\n  \
    \  local -i index=0\n    local -i value\n    for value in \"${nodes[@]}\"; do\n\
    \        if (( value % 2 == 0 && value < min_even_value )); then\n           \
    \ min_even_value=$value\n            min_even_index=$index\n        fi\n     \
    \   (( index++ ))\n    done\n    if (( min_even_value == 100001 )); then\n   \
    \     echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "    local nodes=($@)\n    local min_value=\n    local min_index=\n\
    \    local i=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2))\
    \ -eq 0 ]]; then\n            if [[ -z $min_value ]] || [[ $node -lt $min_value\
    \ ]]; then\n                min_value=$node\n                min_index=$i\n  \
    \          fi\n        fi\n        i=$((i + 1))\n    done\n    if [[ -z $min_value\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n    fi", "    local -a nodes=(\"$@\")\n    local -i min_even_value=100000000\n\
    \    local -i min_even_index=100000000\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if (( node % 2 == 0 )); then\n            if (( node < min_even_value\
    \ )); then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        (( i++ ))\n    done\n    if (( min_even_value\
    \ == 100000000 )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=(\"$@\")\n  local -a\
    \ evens=()\n  local -a evens_indexes=()\n  local -a result=()\n  local i=0\n \
    \ local j=0\n  local k=0\n  local n=0\n  local m=0\n  local min_even=0\n  local\
    \ min_even_index=0\n  local min_even_index_count=0\n  local min_even_index_count_index=0\n\
    \  for i in \"${nodes[@]}\"; do\n    if (( i % 2 == 0 )); then\n      evens[j]=$i\n\
    \      evens_indexes[j]=$k\n      (( j++ ))\n    fi\n    (( k++ ))\n  done\n \
    \ if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_even_index=${evens_indexes[0]}\n  min_even_index_count=0\n  min_even_index_count_index=0\n\
    \  for (( n = 1; n < ${#evens[@]}; n++ )); do\n    if (( ${evens[n]} < min_even\
    \ )); then\n      min_even=${evens[n]}\n      min_even_index=${evens_indexes[n]}\n\
    \      min_even_index_count=0\n      min_even_index_count_index=0\n    elif ((\
    \ ${evens[n]} == min_even )); then\n      (( min_even_index_count++ ))\n     \
    \ min_even_index_count_index=$n\n    fi\n  done\n  if (( min_even_index_count\
    \ > 0 )); then\n    min_even_index=${evens_indexes[min_even_index_count_index]}\n\
    \  fi\n  result[0]=$min_even\n  result[1]=$min_even_index\n  echo \"[\\\"${result[0]}\\\
    \", \\\"${result[1]}\\\"]\"", "  local nodes=\"$1\"\n  local smallest_value\n\
    \  local smallest_index\n  local index=0\n  for node in $nodes; do\n    if [[\
    \ $node -eq 0 ]] || [[ $node -gt 0 && $node%2 -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$index\n      fi\n    fi\n    index=$((index+1))\n  done\n\
    \  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "    echo -n \"[\"\n \
    \   if [ $# -gt 0 ]; then\n        local min_even_value=$(echo \"$@\" | tr \"\
    \ \" \"\\n\" | grep -E \"^[0-9]+$\" | grep -E \"^[02468]$\" | sort -n | head -n\
    \ 1)\n        if [ -n \"$min_even_value\" ]; then\n            local min_even_index=$(echo\
    \ \"$@\" | tr \" \" \"\\n\" | grep -E \"^[0-9]+$\" | grep -E \"^[02468]$\" | sort\
    \ -n | grep -n \"^$min_even_value$\" | head -n 1 | cut -d \":\" -f 1)\n      \
    \      echo -n \"\\\"$min_even_value\\\", \\\"$min_even_index\\\"\"\n        fi\n\
    \    fi\n    echo -n \"]\"", "  local -a nodes=($1)\n  local -i min_even_index=-1\n\
    \  local -i min_even_value=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $min_even_index -eq -1 ]];\
    \ then\n        min_even_index=$i\n        min_even_value=$node\n      elif [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_index=$i\n        min_even_value=$node\n\
    \      fi\n    fi\n    ((i++))\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      evens_index+=(\"$i\"\
    )\n    elif [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n      evens_index+=(\"$i\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n    done\n    result+=(\"$min_even\")\n    result+=(\"$min_even_index\"\
    )\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local\
    \ nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\
    \"\n  local index=0\n  local node\n  for node in $nodes; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[ $node -lt\
    \ $smallest_even_value ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_value=${nodes[0]}\n\
    \  local smallest_index=0\n  local smallest_even_value=${nodes[0]}\n  local smallest_even_index=0\n\
    \  local even_found=false\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if ((node < smallest_value)); then\n      smallest_value=$node\n      smallest_index=$i\n\
    \    fi\n    if ((node % 2 == 0)); then\n      if ((even_found == false)); then\n\
    \        smallest_even_value=$node\n        smallest_even_index=$i\n        even_found=true\n\
    \      elif ((node < smallest_even_value)); then\n        smallest_even_value=$node\n\
    \        smallest_even_index=$i\n      fi\n    fi\n  done\n  if ((even_found ==\
    \ false)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  declare -a nodes=(\"$@\")\n  declare -i min_even_value=10000000000\n\
    \  declare -i min_even_index=0\n  declare -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n\
    \      min_even_value=$node\n      min_even_index=$i\n    fi\n    i+=1\n  done\n\
    \  if [[ $min_even_value -eq 10000000000 ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=\"$1\"\n  local min_value=10000\n  local min_index=10000\n  local index=0\n\
    \  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ] && [ $node -lt $min_value\
    \ ]; then\n      min_value=$node\n      min_index=$index\n    fi\n    index=$((index\
    \ + 1))\n  done\n  if [ $min_value -eq 10000 ]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi", "    local nodes=($@)\n\
    \    local min_even_value=100001\n    local min_even_index=100001\n    for i in\
    \ \"${!nodes[@]}\"; do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n          \
    \  min_even_value=0\n            min_even_index=$i\n            break\n      \
    \  elif [[ ${nodes[$i]} -lt $min_even_value && ${nodes[$i]}%2 -eq 0 ]]; then\n\
    \            min_even_value=${nodes[$i]}\n            min_even_index=$i\n    \
    \    fi\n    done\n    if [[ $min_even_value -eq 100001 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local -a nodes=(\"$@\")\n  local -a evens\n  local -a evens_indexes\n\
    \  local -a evens_indexes_sorted\n  local -a evens_sorted\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n \
    \ local -i ff\n  local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local\
    \ -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i\
    \ pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n\
    \  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n \
    \ local -i aaa\n  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n\
    \  local -i fff\n  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n\
    \  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n\
    \  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n\
    \  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n\
    \  local -i zzz", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   (( i++ ))\n  done\n  if (( min_even_value == 10000 )); then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($@)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a evens_sorted_index=()\n\
    \  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0", "  local nodes=($@)\n  local min_even_index=\n  local min_even_value=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local -i min_value=10000000000\n    local -i min_index=10000000000\n\
    \    local -i i=0\n    local -i len=${#nodes[@]}\n    local -i node\n    for ((i=0;\
    \ i<len; i++)); do\n        node=${nodes[$i]}\n        if ((node < min_value &&\
    \ node % 2 == 0)); then\n            min_value=$node\n            min_index=$i\n\
    \        fi\n    done\n    if ((min_value == 10000000000)); then\n        echo\
    \ \"[]\"\n    else\n        echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n\
    \    fi", "  local nodes=($@)\n  local smallest_even_value=10000\n  local smallest_even_value_index=10000\n\
    \  local smallest_even_value_found=false\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_even_value_found=true\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -lt $smallest_even_value && ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      smallest_even_value_found=true\n      smallest_even_value=${nodes[$i]}\n\
    \      smallest_even_value_index=$i\n    fi\n  done\n  if [[ $smallest_even_value_found\
    \ == false ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -a evens\n  local -a evens_indexes\n  local -a evens_indexes_sorted\n  local\
    \ -a evens_sorted\n  local -a evens_sorted_indexes\n  local -a evens_sorted_indexes_sorted\n\
    \  local -a evens_sorted_sorted\n  local -a evens_sorted_sorted_indexes\n  local\
    \ -a evens_sorted_sorted_indexes_sorted\n  local -a evens_sorted_sorted_sorted\n\
    \  local -a evens_sorted_sorted_sorted_indexes\n  local -a evens_sorted_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted_sorted_sorted_sorted\n  local -a evens_sorted_sorted_sorted_sorted_indexes\n\
    \  local -a evens_sorted_sorted_sorted_sorted_indexes_sorted\n  local -a evens_sorted_sorted_sorted_sorted_sorted\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_indexes\n  local -a evens_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n \
    \ local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  local -a\
    \ evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n   \
    \     smallest_even_value_index=$i\n      else\n        if [[ $node -lt $smallest_even_value\
    \ ]]; then\n          smallest_even_value=$node\n          smallest_even_value_index=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_value=\n  local smallest_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n\
    \      if [[ -z \"$smallest_value\" ]]; then\n        smallest_value=${nodes[i]}\n\
    \        smallest_index=$i\n      elif ((nodes[i] < smallest_value)); then\n \
    \       smallest_value=${nodes[i]}\n        smallest_index=$i\n      fi\n    fi\n\
    \  done\n  if [[ -z \"$smallest_value\" ]]; then\n    echo \"[]\"\n  else\n  \
    \  echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  for i in \"\
    ${!nodes[@]}\"; do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ $node\
    \ -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_value=\n\
    \  local smallest_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_value ]] || [[ ${nodes[$i]} -lt $smallest_value ]]; then\n\
    \        smallest_value=${nodes[$i]}\n        smallest_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local smallest_value=\n  local smallest_index=\n  local smallest_even_value=\n\
    \  local smallest_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ [[ -z $smallest_value || $smallest_value -gt ${nodes[$i]} ]]; then\n      smallest_value=${nodes[$i]}\n\
    \      smallest_index=$i\n    fi\n    if [[ ${nodes[$i]} -eq 0 || ${nodes[$i]}\
    \ -eq 2 || ${nodes[$i]} -eq 4 || ${nodes[$i]} -eq 6 || ${nodes[$i]} -eq 8 ]];\
    \ then\n      if [[ -z $smallest_even_value || $smallest_even_value -gt ${nodes[$i]}\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i found_even=0\n  local -i found_min_even=0\n  local -i found_min_even_index=0\n\
    \  local -i found_min=0\n  local -i found_min_index=0\n  local -i value=0\n  local\
    \ -i even=0\n  for i in \"${!nodes[@]}\"; do\n    value=${nodes[$i]}\n    even=$((value\
    \ % 2))\n    if [[ $even -eq 0 ]]; then\n      found_even=1\n      if [[ $found_min_even\
    \ -eq 0 ]]; then\n        min_even_value=$value\n        min_even_index=$i\n \
    \       found_min_even=1\n      elif [[ $value -lt $min_even_value ]]; then\n\
    \        min_even_value=$value\n        min_even_index=$i\n      fi\n    fi\n\
    \    if [[ $found_min -eq 0 ]]; then\n      min_value=$value\n      min_index=$i\n\
    \      found_min=1\n    elif [[ $value -lt $min_value ]]; then\n      min_value=$value\n\
    \      min_index=$i\n    fi\n  done\n  if [[ $found_even -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  elif [[ $found_min_even -eq 0 ]]; then\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value || $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\
    \n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_value_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n  local -i found=0\n\
    \  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0));\
    \ then\n      if ((found == 0)); then\n        min_value=$value\n        min_index=$i\n\
    \        found=1\n      elif ((value < min_value)); then\n        min_value=$value\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if ((found == 0)); then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\
    \n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local smallest_even_value_index_counter=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]];\
    \ then\n        smallest_even_value=$node\n        smallest_even_value_index=$smallest_even_value_index_counter\n\
    \      elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$smallest_even_value_index_counter\n      fi\n\
    \    fi\n    ((smallest_even_value_index_counter++))\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local\
    \ evens=\"\"\n  local evens_indexes=\"\"\n  local evens_indexes_sorted=\"\"\n\
    \  local evens_sorted=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local min_even=\"\
    \"\n  local min_even_index=\"\"\n  local min_even_index_sorted=\"\"\n  local min_even_sorted=\"\
    \"\n  local node=\"\"\n  local nodes_sorted=\"\"\n  local sorted=\"\"\n  local\
    \ tmp=\"\"\n  local tmp_sorted=\"\"\n  for node in $nodes; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens[$i]=$node\n      evens_indexes[$i]=$j\n  \
    \    ((i++))\n    fi\n    ((j++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n    return\n  fi\n  sorted=$(echo \"${evens[@]}\" | tr ' ' '\\\
    n' | sort -n)\n  for tmp in $sorted; do\n    nodes_sorted[$k]=$tmp\n    ((k++))\n\
    \  done\n  min_even=${nodes_sorted[0]}\n  tmp_sorted=$(echo \"${evens_indexes[@]}\"\
    \ | tr ' ' '\\n' | sort -n)\n  for tmp in $tmp_sorted; do\n    evens_indexes_sorted[$k]=$tmp\n\
    \    ((k++))\n  done\n  min_even_index=${evens_indexes_sorted[0]}\n  echo \"[\\\
    \"$min_even\\\", \\\"$min_even_index\\\"]\"", "  local -a nodes=($1)\n  local\
    \ -i i=0\n  local -i min_index=0\n  local -i min_value=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i node_value=0\n  local -i is_even=0\n\
    \  local -i is_first_even=0\n  local -i is_first_node=0\n  local -i is_first_even_node=0\n\
    \  local -i is_smaller_even_value=0\n  local -i is_smaller_even_index=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    node_value=${node}\n    is_even=$((node_value\
    \ % 2))\n    is_first_node=$((i == 0))\n    is_first_even=$((is_first_node &&\
    \ is_even == 0))\n    is_first_even_node=$((is_first_even && min_even_value ==\
    \ 0))\n    is_smaller_even_value=$((is_even == 0 && node_value < min_even_value))\n\
    \    is_smaller_even_index=$((is_smaller_even_value && node_value == min_even_value\
    \ && i < min_even_index))\n    if [[ $is_first_even_node -eq 1 ]]; then\n    \
    \  min_even_value=${node_value}\n      min_even_index=${i}\n    elif [[ $is_smaller_even_value\
    \ -eq 1 ]]; then\n      min_even_value=${node_value}\n      min_even_index=${i}\n\
    \    elif [[ $is_smaller_even_index -eq 1 ]]; then\n      min_even_index=${i}\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ $min_even_value -eq 0 ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"${min_even_value}\\\", \\\"${min_even_index}\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    local node=${nodes[$i]}\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local smallest_value\n  local smallest_index\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n   \
    \   smallest_value=0\n      smallest_index=$i\n      break\n    elif [[ $node\
    \ -gt 0 ]] && [[ $node%2 -eq 0 ]]; then\n      if [[ -z $smallest_value ]] ||\
    \ [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n      \
    \  smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "  local -n nodes=$1\n  local -a evens\n  local -a evens_indexes\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 ));\
    \ then\n      evens+=($node)\n      evens_indexes+=($i)\n    fi\n    ((i++))\n\
    \  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n    return\n  fi\n\
    \  local -i min_even_index=$(index_of_min \"${evens[@]}\")\n  echo \"[\\\"${evens[$min_even_index]}\\\
    \", \\\"${evens_indexes[$min_even_index]}\\\"]\"", "  local nodes=(\"$@\")\n \
    \ local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\"\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    local node_value=\"${nodes[$i]}\"\n  \
    \  if [[ -z \"$smallest_even_value\" && $((node_value % 2)) -eq 0 ]]; then\n \
    \     smallest_even_value=\"$node_value\"\n      smallest_even_value_index=\"\
    $i\"\n    elif [[ $((node_value % 2)) -eq 0 && $node_value -lt $smallest_even_value\
    \ ]]; then\n      smallest_even_value=\"$node_value\"\n      smallest_even_value_index=\"\
    $i\"\n    fi\n  done\n  if [[ -z \"$smallest_even_value\" ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  declare -a nodes=($1)\n  declare -a evens\n  declare -a odds\n\
    \  declare -a evens_indices\n  declare -a odds_indices\n  declare -a evens_indices_sorted\n\
    \  declare -a odds_indices_sorted\n  declare -a evens_sorted\n  declare -a odds_sorted\n\
    \  declare -a result\n  declare -i i\n  declare -i j\n  declare -i k\n  declare\
    \ -i l\n  declare -i m\n  declare -i n\n  declare -i o\n  declare -i p\n  declare\
    \ -i q\n  declare -i r\n  declare -i s\n  declare -i t\n  declare -i u\n  declare\
    \ -i v\n  declare -i w\n  declare -i x\n  declare -i y\n  declare -i z\n  declare\
    \ -i index\n  declare -i even_index\n  declare -i odd_index\n  declare -i even_value\n\
    \  declare -i odd_value\n  declare -i even_value_index\n  declare -i odd_value_index\n\
    \  declare -i even_value_index_sorted\n  declare -i odd_value_index_sorted\n \
    \ declare -i even_value_sorted\n  declare -i odd_value_sorted\n  declare -i even_value_sorted_index\n\
    \  declare -i odd_value_sorted_index\n  declare -i even_value_sorted_index_sorted\n\
    \  declare -i odd_value_sorted_index_sorted\n  declare -i even_value_sorted_sorted\n\
    \  declare -i odd_value_sorted_sorted\n  declare -i even_value_sorted_sorted_index\n\
    \  declare -i odd_value_sorted_sorted_index\n  declare -i even_value_sorted_sorted_index_sorted\n\
    \  declare -i odd_value_sorted_sorted_index_sorted\n  declare -i even_value_sorted_sorted_sorted\n\
    \  declare -i odd_value_sorted_sorted_sorted\n  declare -i even_value_sorted_sorted_s",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      min_even_value=0\n      min_even_value_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_value_index=$i\n      fi\n   \
    \ fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i min_even_index=10000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 &&\
    \ node < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 10000 )); then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  local node=\n  for node in $nodes; do\n    if [[ $((node % 2))\
    \ -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_index=${#nodes[@]}\n \
    \ local -i min_even_value=${nodes[0]}\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if [[ ${nodes[i]} -eq 0 ]]; then\n      min_even_index=$i\n      min_even_value=0\n\
    \      break\n    elif [[ ${nodes[i]} -lt $min_even_value && ${nodes[i]}%2 -eq\
    \ 0 ]]; then\n      min_even_index=$i\n      min_even_value=${nodes[i]}\n    fi\n\
    \  done\n  if [[ $min_even_index -eq ${#nodes[@]} ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=(\"$@\")\n  local min_even_index=\n  local min_even_value=\n  for\
    \ i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_index=$i\n\
    \      min_even_value=0\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n        min_even_index=$i\n        min_even_value=${nodes[$i]}\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=0\n  local min_even_index=0\n  local\
    \ even_found=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $even_found -eq 0 ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n        even_found=1\n\
    \      elif [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ $even_found -eq\
    \ 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\
    \"$min_even_index\\\"]\"\n  fi", "    local nodes=($1)\n    local smallest_value=\n\
    \    local smallest_index=\n    local index=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ -z $smallest_value\
    \ ]] || [[ $node -lt $smallest_value ]]; then\n                smallest_value=$node\n\
    \                smallest_index=$index\n            fi\n        fi\n        ((index++))\n\
    \    done\n    if [[ -z $smallest_value ]]; then\n        echo \"[]\"\n    else\n\
    \        echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n    fi",
  "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 ));\
    \ then\n      if (( node < min_even_value )); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      elif (( node == min_even_value )); then\n  \
    \      if (( i < min_even_index )); then\n          min_even_index=$i\n      \
    \  fi\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 1000000000\
    \ )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "    local -a nodes=($@)\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=10000000000\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i node_value\n    local -i node_index\n    local -i even_found=0\n\
    \    for ((i=0; i<n; i++)); do\n        node_value=${nodes[i]}\n        node_index=$i\n\
    \        if ((node_value % 2 == 0)); then\n            even_found=1\n        \
    \    if ((node_value < min_even_value)); then\n                min_even_value=$node_value\n\
    \                min_even_index=$node_index\n            fi\n        fi\n    done\n\
    \    if ((even_found == 0)); then\n        echo \"[]\"\n    else\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local -a\
    \ nodes=(\"$@\")\n  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value\n  local -i\
    \ is_even\n  local -i is_smaller\n  local -i is_first\n  local -i is_smaller_index\n\
    \  local -i is_first_index\n  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n\
    \    is_even=$((node_value % 2))\n    is_smaller=$((node_value < min_even_value))\n\
    \    is_first=$((min_even_value == 10000000000))\n    is_smaller_index=$((i <\
    \ min_even_index))\n    is_first_index=$((min_even_index == 10000000000))\n  \
    \  if ((is_even == 0 && (is_smaller || (is_first && is_first_index)))); then\n\
    \      min_even_value=$node_value\n      min_even_index=$i\n    fi\n  done\n \
    \ if ((min_even_value == 10000000000)); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local -a\
    \ nodes=($1)\n    local -i i=0\n    local -i min_index=0\n    local -i min_value=0\n\
    \    local -i min_even_value=0\n    local -i min_even_index=0\n    local -i min_even_found=0\n\
    \    for i in \"${!nodes[@]}\"; do\n        local -i value=${nodes[$i]}\n    \
    \    if (( value < min_value )); then\n            min_value=$value\n        \
    \    min_index=$i\n        fi\n        if (( value % 2 == 0 )); then\n       \
    \     if (( min_even_found == 0 )); then\n                min_even_value=$value\n\
    \                min_even_index=$i\n                min_even_found=1\n       \
    \     elif (( value < min_even_value )); then\n                min_even_value=$value\n\
    \                min_even_index=$i\n            fi\n        fi\n    done\n   \
    \ if (( min_even_found == 0 )); then\n        echo []\n    else\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=($@)\n\
    \  local evens=()\n  local evens_indexes=()\n  local evens_index=0\n  local smallest_even=0\n\
    \  local smallest_even_index=0\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n   \
    \ if (( nodes[i] % 2 == 0 )); then\n      evens+=(${nodes[i]})\n      evens_indexes+=($i)\n\
    \    fi\n  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n  else\n\
    \    smallest_even=${evens[0]}\n    smallest_even_index=${evens_indexes[0]}\n\
    \    for (( i=1; i<${#evens[@]}; i++ )); do\n      if (( evens[i] < smallest_even\
    \ )); then\n        smallest_even=${evens[i]}\n        smallest_even_index=${evens_indexes[i]}\n\
    \      fi\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local\
    \ -a smallest\n  local -a smallest_index\n  for i in \"${!nodes[@]}\"; do\n  \
    \  if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      smallest_index+=(\"\
    $i\")\n    elif [[ ${nodes[$i]} -eq 1 ]]; then\n      odds+=(\"${nodes[$i]}\"\
    )\n    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n      smallest_index+=(\"$i\")\n    else\n      odds+=(\"${nodes[$i]}\")\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    smallest=(\"${evens[0]}\")\n    for i in \"${evens[@]}\"; do\n      if [[\
    \ $i -lt ${smallest[0]} ]]; then\n        smallest=(\"$i\")\n      fi\n    done\n\
    \    echo \"[\\\"${smallest[0]}\\\" \\\"${smallest_index[0]}\\\"]\"\n  fi", " \
    \ local -a nodes=($1)\n  local -i min_even_value=100001\n  local -i min_even_index=100001\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]] && [[ $node -lt $min_even_value ]]; then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    ((i++))\n  done\n  if [[ $min_even_value\
    \ -eq 100001 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "    local -a nodes=($1)\n    local -i\
    \ i=0\n    local -i min_index=0\n    local -i min_value=0\n    local -i min_even_value=0\n\
    \    local -i min_even_index=0\n    local -i is_even=0\n    local -i is_first_even=0\n\
    \    local -i is_first_value=0\n    local -i is_first_index=0\n    local -i is_first_even_value=0\n\
    \    local -i is_first_even_index=0\n    local -i is_first_even_index_value=0\n\
    \    local -i is_first_even_value_index=0\n    local -i is_first_even_index_value_index=0\n\
    \    local -i is_first_even_value_index_index=0\n    local -i is_first_even_index_value_index_index=0\n\
    \    local -i is_first_even_value_index_index_index=0\n    local -i is_first_even_index_value_index_index_index=0\n\
    \    local -i is_first_even_value_index_index_index_index=0\n    local -i is_first_even_index_value_index_index_index_index=0\n\
    \    local -i is_first_even_value_index_index_index_index_index=0\n    local -i\
    \ is_first_even_index_value_index_index_index_index_index=0\n    local -i is_first_even_value_index_index_index_index_index_index=0\n\
    \    local -i is_first_even_index_value_index_index_index_index_index_index=0\n\
    \    local -i is_first_even_value_index_index_index_index_index_index_index=0\n\
    \    local -i is_first_even_index_value_index_index_index_index_index_index_index=0\n\
    \    local -i is_first_even_value_index_index_index_index_index_index_index_index=0\n\
    \    local -i is_first", "  local -a nodes=($@)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n\
    \      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((i++))\n  done\n\
    \  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local -a\
    \ nodes=($1)\n    local -a evens=()\n    local -a odds=()\n    local -a result=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n", "  local nodes=($@)\n  local min_even_index=\n\
    \  local min_even_value=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n        min_even_value=0\n\
    \        min_even_index=$i\n      fi\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($1)\n  local min=10000\n  local min_index=10000\n  for i in \"${!nodes[@]}\"\
    ; do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"\
    $i\\\"]\"\n      return\n    fi\n    if [[ \"${nodes[$i]}\" -lt \"$min\" ]] &&\
    \ [[ \"$((nodes[$i] % 2))\" -eq 0 ]]; then\n      min=\"${nodes[$i]}\"\n     \
    \ min_index=\"$i\"\n    fi\n  done\n  if [[ \"$min\" -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "  declare\
    \ -a nodes=($1)\n  declare -a evens=()\n  declare -a evens_index=()\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      evens_index+=($i)\n    elif [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n \
    \     evens+=(${nodes[$i]})\n      evens_index+=($i)\n    fi\n  done\n  if [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    declare -a smallest_evens=()\n\
    \    declare -a smallest_evens_index=()\n    smallest_evens+=(${evens[0]})\n \
    \   smallest_evens_index+=(${evens_index[0]})\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if [[ ${evens[$i]} -lt ${smallest_evens[0]} ]]; then\n    \
    \    smallest_evens=()\n        smallest_evens_index=()\n        smallest_evens+=(${evens[$i]})\n\
    \        smallest_evens_index+=(${evens_index[$i]})\n      elif [[ ${evens[$i]}\
    \ -eq ${smallest_evens[0]} ]]; then\n        smallest_evens+=(${evens[$i]})\n\
    \        smallest_evens_index+=(${evens_index[$i]})\n      fi\n    done\n    if\
    \ [[ ${#smallest_evens[@]} -eq 1 ]]; then\n      echo \"[\\\"${smallest_evens[0]}\\\
    \", \\\"${smallest_evens_index[0]}\\\"]\"\n    else\n      echo \"[\\\"${smallest_evens[0]}\\\
    \", \\\"${smallest_evens_index[0]}\\\"]\"\n    fi\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=100001\n  local -i min_even_index=100001\n  local -i\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0 && node < min_even_value));\
    \ then\n      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((i++))\n\
    \  done\n  if ((min_even_value == 100001)); then\n    echo \"[]\"\n  else\n  \
    \  echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "    local nodes=(\"$@\")\n    local\
    \ smallest_even_value=\n    local smallest_even_value_index=\n    for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n        local node=${nodes[$i]}\n        if [[ $node -eq 0 ]]; then\n\
    \            smallest_even_value=0\n            smallest_even_value_index=$i\n\
    \            break\n        elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]];\
    \ then\n            if [[ -z $smallest_even_value ]] || [[ $node -lt $smallest_even_value\
    \ ]]; then\n                smallest_even_value=$node\n                smallest_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $smallest_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_value_index\\\"]\"\n    fi", "  local nodes=($@)\n  local\
    \ evens=()\n  local evens_indices=()\n  local i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indices+=($i)\n\
    \    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
    []\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=0\n   \
    \ local i=0\n    for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min_even\
    \ ]]; then\n        min_even=$even\n        min_even_index=${evens_indices[$i]}\n\
    \      fi\n      ((i++))\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "    local nodes=($@)\n    local min=10000\n    local min_index=10000\n\
    \    for i in \"${!nodes[@]}\"; do\n        if [[ ${nodes[$i]} -lt $min && $((\
    \ ${nodes[$i]} % 2 )) -eq 0 ]]; then\n            min=${nodes[$i]}\n         \
    \   min_index=$i\n        fi\n    done\n    if [[ $min -eq 10000 ]]; then\n  \
    \      echo \"[]\"\n    else\n        echo \"[\\\"$min\\\", \\\"$min_index\\\"\
    ]\"\n    fi", "    local -a nodes=($1)\n    local -i smallest_even_value=10000\n\
    \    local -i smallest_even_index=10000\n    local -i index=0\n    for node in\
    \ \"${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $smallest_even_value\
    \ ]]; then\n            smallest_even_value=$node\n            smallest_even_index=$index\n\
    \        fi\n        ((index++))\n    done\n    if [[ $smallest_even_value -eq\
    \ 10000 ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_index\\\"]\"\n    fi", "  local nodes=($@)\n  local min_even_value=10000000000\n\
    \  local min_even_index=10000000000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n      \
    \  min_even_index=$i\n      elif [[ $node -eq $min_even_value ]]; then\n     \
    \   if [[ $i -lt $min_even_index ]]; then\n          min_even_index=$i\n     \
    \   fi\n      fi\n    fi\n  done\n  if [[ $min_even_value -eq 10000000000 ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_value=\n  local smallest_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n    \
    \  break\n    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ -z $smallest_value\
    \ ]]; then\n      smallest_value=$node\n      smallest_index=$i\n    elif [[ $node\
    \ -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ $node -lt $smallest_value ]]; then\n \
    \     smallest_value=$node\n      smallest_index=$i\n    fi\n  done\n  if [[ -z\
    \ $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_value=\n\
    \  local smallest_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $node -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n\
    \      break\n    elif [[ $node -gt 0 && $node%2 -eq 0 ]]; then\n      if [[ -z\
    \ $smallest_value || $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  local index=0\n  for node in $nodes; do\n \
    \   if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_value\" ] || [\
    \ $node -lt $smallest_value ]; then\n        smallest_value=$node\n        smallest_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min=\n  local min_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ \"${nodes[$i]}\" =~ ^[0-9]+$ ]]; then\n\
    \      if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n        min=0\n        min_index=$i\n\
    \        break\n      elif [[ \"${nodes[$i]}\" -gt 0 ]] && [[ \"${nodes[$i]}\"\
    \ -lt \"$min\" ]] && [[ \"${nodes[$i]}\"%2 -eq 0 ]]; then\n        min=${nodes[$i]}\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if [[ -z \"$min\" ]]; then\n\
    \    echo '[]'\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "  # your code here\n  # use echo to output the result\n  # use read to read the\
    \ input\n  # use $() to call the function\n  # use $1 to get the first argument\n\
    \  # use $2 to get the second argument\n  # use $# to get the number of arguments\n\
    \  # use $@ to get all the arguments\n  # use $? to get the return value of the\
    \ last command\n  # use $! to get the PID of the last command\n  # use $0 to get\
    \ the name of the script\n  # use $$ to get the PID of the script\n  # use $IFS\
    \ to get the Internal Field Separator\n  # use $RANDOM to get a random number\n\
    \  # use $LINENO to get the current line number\n  # use $SECONDS to get the number\
    \ of seconds since the script was started\n  # use $HOSTNAME to get the hostname\n\
    \  # use $OSTYPE to get the OS type\n  # use $MACHTYPE to get the machine type\n\
    \  # use $BASH_VERSION to get the bash version\n  # use $BASH_VERSINFO to get\
    \ the bash version info\n  # use $EUID to get the effective user ID\n  # use $UID\
    \ to get the user ID\n  # use $GROUPS to get the group IDs\n  # use $PWD to get\
    \ the current working directory\n  # use $OLDPWD to get the previous working directory\n\
    \  # use $SHELL to get the shell\n  # use $TMOUT to get the timeout value\n  #\
    \ use $TMPDIR to get the temporary directory\n  # use $HISTSIZE to get the history\
    \ size\n  # use $HISTFILESIZE to get the history file size\n  # use $HISTCONTROL\
    \ to get the history control\n  # use $HISTIGNORE to get the history ignore\n\
    \  # use $HISTTIMEFORMAT to get the history time format\n  # use $HISTFILE to\
    \ get the history file\n  # use $FCEDIT to get the fcedit\n  # use $EDITOR to\
    \ get the editor\n  # use $VISUAL to get the visual\n  # use $COLUMNS to get the\
    \ columns\n  # use $LINES to get the lines\n", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local -i min_value=10000\n  local\
    \ -i min_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_value ]]; then\n      min_value=$node\n\
    \      min_index=$i\n    fi\n    ((i++))\n  done\n  if [[ $min_value -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_value_index=\"\"\n  for ((i=0; i<${#nodes[@]}; i++)); do\n   \
    \ local node=${nodes[$i]}\n    if [[ $node =~ ^[0-9]+$ ]]; then\n      if [[ $node\
    \ -eq 0 ]]; then\n        if [[ -z $smallest_even_value ]]; then\n          smallest_even_value=0\n\
    \          smallest_even_value_index=$i\n        fi\n      elif [[ $((node % 2))\
    \ -eq 0 ]]; then\n        if [[ -z $smallest_even_value ]]; then\n          smallest_even_value=$node\n\
    \          smallest_even_value_index=$i\n        elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n          smallest_even_value=$node\n          smallest_even_value_index=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "    local -a nodes=(\"$@\")\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=10000000000\n    local -i index=0\n    local -i value\n\
    \    for value in \"${nodes[@]}\"; do\n        if (( value % 2 == 0 && value <\
    \ min_even_value )); then\n            min_even_value=$value\n            min_even_index=$index\n\
    \        fi\n        (( index++ ))\n    done\n    if (( min_even_value == 10000000000\
    \ )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_indexes=()\n  local -a result=()\n  local -i i=0\n  local -i\
    \ n=${#nodes[@]}\n  local -i min_even\n  local -i min_even_index\n  for ((i=0;\
    \ i<n; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      evens+=(${nodes[i]})\n\
    \      evens_indexes+=($i)\n    fi\n  done\n  if ((${#evens[@]} == 0)); then\n\
    \    echo \"[]\"\n  else\n    min_even=${evens[0]}\n    min_even_index=${evens_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if ((evens[i] < min_even)); then\n\
    \        min_even=${evens[i]}\n        min_even_index=${evens_indexes[i]}\n  \
    \    fi\n    done\n    result=($min_even $min_even_index)\n    echo \"[\\\"${result[0]}\\\
    \", \\\"${result[1]}\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_indexes=()\n  local -a evens_indexes_sorted=()\n  local -a evens_sorted=()\n\
    \  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i", "  local -a nodes=(\"$@\")\n\
    \  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value\n  local -i\
    \ node_index\n  local -i is_even\n  while (( i < n )); do\n    node_value=${nodes[i]}\n\
    \    is_even=$(( node_value % 2 ))\n    if (( is_even == 0 )); then\n      if\
    \ (( node_value < min_even_value )); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=$1\n  local evens=$(echo\
    \ $nodes | tr ' ' '\\n' | grep -E '^[0-9]+$' | grep -E '^[02468]')\n  local min_even=$(echo\
    \ $evens | tr ' ' '\\n' | sort -n | head -n 1)\n  local min_even_index=$(echo\
    \ $nodes | tr ' ' '\\n' | grep -n $min_even | cut -d: -f1)\n  if [ -z \"$min_even\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  for i in\
    \ \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} =~ ^[0-9]+$ ]]; then\n      if\
    \ [[ ${nodes[$i]} -eq 0 ]]; then\n        min_even_value=0\n        min_even_index=$i\n\
    \        break\n      elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0\
    \ ]]; then\n        if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n          min_even_value=${nodes[$i]}\n          min_even_index=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_index=\n  local min_even_value=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=0\n        min_even_index=$i\n\
    \      fi\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value ]];\
    \ then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n     \
    \ fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n \
    \ else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local evens=()\n  local evens_indexes=()\n  local smallest_even_value=\n\
    \  local smallest_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indexes+=($i)\n\
    \    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo '[]'\n\
    \    return\n  fi\n  smallest_even_value=${evens[0]}\n  smallest_even_index=${evens_indexes[0]}\n\
    \  for ((i = 1; i < ${#evens[@]}; i++)); do\n    if [[ ${evens[i]} -lt $smallest_even_value\
    \ ]]; then\n      smallest_even_value=${evens[i]}\n      smallest_even_index=${evens_indexes[i]}\n\
    \    fi\n  done\n  echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\
    \"]\"", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      elif [[ $node -lt\
    \ $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node %\
    \ 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      elif [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\"\
    \n  local i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n\
    \      if [ -z \"$smallest_even_value\" ] || [ $node -lt $smallest_even_value\
    \ ]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min_index=0\n\
    \  local min_value=0\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ $min_value -eq 0 ]]; then\n      \
    \  min_value=$node\n        min_index=$i\n      elif [[ $node -lt $min_value ]];\
    \ then\n        min_value=$node\n        min_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ $min_value -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi", "  declare -a nodes=(\"\
    $@\")\n  declare -i min_even_value=100000000\n  declare -i min_even_index=100000000\n\
    \  declare -i index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node %\
    \ 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n      min_even_value=$node\n\
    \      min_even_index=$index\n    fi\n    index=$((index + 1))\n  done\n  if [[\
    \ $min_even_value -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local nodes=($@)\n\
    \    local min_even_value=\n    local min_even_index=\n    for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n        local node=${nodes[$i]}\n        if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n            if [[ -z $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            elif [[ $node -lt $min_even_value\
    \ ]]; then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n    fi", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo '[]'\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local min_value=\n  local min_index=\n  local index=0\n  for node in $nodes;\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_value ]] ||\
    \ [[ $node -lt $min_value ]]; then\n        min_value=$node\n        min_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local\
    \ -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node\n\
    \  for ((i=0; i<n; i++)); do\n    node=${nodes[i]}\n    if ((node % 2 == 0 &&\
    \ node < min_even_value)); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n  done\n  if ((min_even_value == 100000000)); then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local -i min_even_index=0\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]] && [[ $node -lt $min_even_value ]]; then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq\
    \ 10000000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n   \
    \     smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local evens=\"$(echo \"$nodes\" | grep\
    \ -Eo '^[0-9]+$' | grep -Eo '^[02468]+$')\"\n  local smallest_even=\"$(echo \"\
    $evens\" | sort -n | head -n 1)\"\n  local smallest_even_index=\"$(echo \"$nodes\"\
    \ | grep -Eo '^[0-9]+$' | grep -Eo '^[02468]+$' | grep -n \"^$smallest_even$\"\
    \ | cut -d ':' -f 1)\"\n  if [ -z \"$smallest_even\" ]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n\
    \  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=0\n        min_even_index=$i\n\
    \      fi\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n \
    \     fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]} -lt ${smallest_even_value:-999999}\
    \ ]] && [[ $((nodes[$i] % 2)) -eq 0 ]]; then\n      smallest_even_value=${nodes[$i]}\n\
    \      smallest_even_value_index=$i\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=10000\n\
    \  local min_even_index=10000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -lt $min_even_value && ${nodes[$i]}%2 -eq\
    \ 0 ]]; then\n      min_even_value=${nodes[$i]}\n      min_even_index=$i\n   \
    \ fi\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes\n  local -i i\n  local -i min_even_value min_even_index\n  local -i\
    \ value\n  nodes=($@)\n  min_even_value=1000000001\n  min_even_index=-1\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    value=${nodes[$i]}\n    if ((value % 2\
    \ == 0)); then\n      if ((value < min_even_value)); then\n        min_even_value=$value\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((min_even_index ==\
    \ -1)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\
    \"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n   \
    \     smallest_even_value_index=$i\n      else\n        if [[ $node -lt $smallest_even_value\
    \ ]]; then\n          smallest_even_value=$node\n          smallest_even_value_index=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local\
    \ -i min_even_index=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n    \
    \  min_even_value=$node\n      min_even_index=$i\n    fi\n    i=$((i + 1))\n \
    \ done\n  if [[ $min_even_value -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($@)\n  local min=10000\n  local index=10000\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -lt $min && $((nodes[$i] % 2)) -eq 0 ]]; then\n\
    \      min=${nodes[$i]}\n      index=$i\n    fi\n  done\n  if [[ $min -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$index\\\"\
    ]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n  local smallest_even=\n\
    \  local smallest_even_index=\n  local smallest_even_index_in_nodes=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ \"${nodes[$i]}\" =~ ^[0-9]+$ ]]; then\n\
    \      if [[ \"${nodes[$i]}\" -eq 0 ]] || [[ \"${nodes[$i]}\" -gt 0 && \"${nodes[$i]}\"\
    %2 -eq 0 ]]; then\n        evens+=(\"${nodes[$i]}\")\n      fi\n    fi\n  done\n\
    \  if [[ ${#evens[@]} -gt 0 ]]; then\n    smallest_even=\"${evens[0]}\"\n    smallest_even_index=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ \"${evens[$i]}\" -lt \"\
    $smallest_even\" ]]; then\n        smallest_even=\"${evens[$i]}\"\n        smallest_even_index=$i\n\
    \      fi\n    done\n    for ((i=0; i<${#nodes[@]}; i++)); do\n      if [[ \"\
    ${nodes[$i]}\" -eq \"$smallest_even\" ]]; then\n        smallest_even_index_in_nodes=$i\n\
    \        break\n      fi\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index_in_nodes\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    local value=${nodes[$i]}\n    if [[ $((value % 2)) -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$value\n\
    \        smallest_even_value_index=$i\n      elif [[ $value -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$value\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  declare -a nodes=($@)\n  declare -a evens=()\n  declare -a evens_index=()\n \
    \ declare -a result=()\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n      evens_index+=($i)\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    result+=($(echo \"${evens[@]}\" | tr ' ' '\\n' | sort -n | head -n 1))\n\
    \    result+=($(echo \"${evens_index[@]}\" | tr ' ' '\\n' | sort -n | head -n\
    \ 1))\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local\
    \ nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  local i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) == 0 ]]; then\n  \
    \    if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n  \
    \      min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n   \
    \ ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo []\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "   \
    \ local -a nodes=(\"$@\")\n    local -i min_even_value=10000000000\n    local\
    \ -i min_even_index=-1\n    local -i i=0\n    for node in \"${nodes[@]}\"; do\n\
    \        if (( node % 2 == 0 && node < min_even_value )); then\n            min_even_value=$node\n\
    \            min_even_index=$i\n        fi\n        (( i++ ))\n    done\n    if\
    \ (( min_even_index == -1 )); then\n        echo \"[]\"\n    else\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "    local\
    \ nodes=($@)\n    local min_even_value=\n    local min_even_value_index=\n   \
    \ for ((i=0; i<${#nodes[@]}; i++)); do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \            min_even_value=0\n            min_even_value_index=$i\n         \
    \   break\n        elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n            if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n                min_even_value=${nodes[$i]}\n                min_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n    fi", "  local -n arr=$1\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i index=0\n  for value in \"\
    ${arr[@]}\"; do\n    if (( value % 2 == 0 && value < min_even_value )); then\n\
    \      min_even_value=$value\n      min_even_index=$index\n    fi\n    (( index++\
    \ ))\n  done\n  if (( min_even_value == 10000000000 )); then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=(\"$@\")\n  local -i smallest_even_value=10000000000\n  local\
    \ -i smallest_even_value_index=0\n  local -i i=0\n  local -i node_value=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    node_value=$((node))\n    if ((node_value %\
    \ 2 == 0)); then\n      if ((node_value < smallest_even_value)); then\n      \
    \  smallest_even_value=$node_value\n        smallest_even_value_index=$i\n   \
    \   fi\n    fi\n    i=$((i + 1))\n  done\n  if ((smallest_even_value == 10000000000));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n\
    \  local min_even_index=\n  local index=0\n  for node in $nodes; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "    local -a nodes=($1)\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=-1\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if (( node % 2 == 0 && node < min_even_value )); then\n        \
    \    min_even_value=$node\n            min_even_index=$i\n        fi\n       \
    \ (( i++ ))\n    done\n    if (( min_even_index == -1 )); then\n        echo \"\
    []\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "    local -a nodes=(\"$@\")\n    local -i min_index=0\n    local\
    \ -i min_value=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i\
    \ value=0\n    local -i min_even_index=0\n    local -i min_even_value=0\n    local\
    \ -i found_even=0\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n\
    \        if ((value < min_value)); then\n            min_value=$value\n      \
    \      min_index=$i\n        fi\n        if ((value % 2 == 0)); then\n       \
    \     if ((found_even == 0)); then\n                min_even_value=$value\n  \
    \              min_even_index=$i\n                found_even=1\n            elif\
    \ ((value < min_even_value)); then\n                min_even_value=$value\n  \
    \              min_even_index=$i\n            fi\n        fi\n    done\n    if\
    \ ((found_even == 0)); then\n        echo \"[]\"\n    else\n        echo \"[\\\
    \"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n  local\
    \ -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i+=1\n  done\n  if [[ $min_even_value\
    \ -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min=\n  local\
    \ min_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq\
    \ 0 ]]; then\n      min=0\n      min_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min ]] || [[ ${nodes[$i]}\
    \ -lt $min ]]; then\n        min=${nodes[$i]}\n        min_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "    local nodes=($@)\n    local\
    \ min_even_value=10000\n    local min_even_index=10000\n    local i=0\n    for\
    \ node in ${nodes[@]}; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n      \
    \      if [[ $node -lt $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    if [[ $min_even_value -eq 10000 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo '[]'\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local smallest_value=\n  local smallest_index=\n  for i in \"\
    ${!nodes[@]}\"; do\n    local value=${nodes[$i]}\n    if [[ $((value % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ $value -lt $smallest_value\
    \ ]]; then\n        smallest_value=$value\n        smallest_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "   \
    \ local nodes=($@)\n    local min_even_value=\n    local min_even_index=\n   \
    \ local min_even_value_index=\n    local i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ \"$node\" =~ ^[0-9]+$ ]]; then\n            if [[ \"$node\"\
    \ -eq 0 ]]; then\n                min_even_value=0\n                min_even_index=$i\n\
    \                min_even_value_index=$i\n                break\n            elif\
    \ [[ \"$node\" -gt 0 ]] && [[ \"$((node % 2))\" -eq 0 ]]; then\n             \
    \   if [[ -z \"$min_even_value\" ]]; then\n                    min_even_value=$node\n\
    \                    min_even_index=$i\n                    min_even_value_index=$i\n\
    \                elif [[ \"$node\" -lt \"$min_even_value\" ]]; then\n        \
    \            min_even_value=$node\n                    min_even_index=$i\n   \
    \                 min_even_value_index=$i\n                elif [[ \"$node\" -eq\
    \ \"$min_even_value\" ]]; then\n                    min_even_value_index=$i\n\
    \                fi\n            fi\n        fi\n        ((i++))\n    done\n \
    \   if [[ -z \"$min_even_value\" ]]; then\n        echo \"[]\"\n    else\n   \
    \     echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n    fi",
  "  local nodes=($@)\n  local min=\n  local min_index=\n  for i in \"${!nodes[@]}\"\
    ; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min=0\n      min_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      if [[ -z $min ]] || [[ ${nodes[$i]} -lt $min ]]; then\n        min=${nodes[$i]}\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min=\n  local min_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min=0\n      min_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      if [[ -z $min ]] || [[ ${nodes[$i]} -lt $min ]]; then\n        min=${nodes[$i]}\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local min_even_value=\"$(echo \"$nodes\" | tr ' ' '\\n'\
    \ | grep -E '^[02468]$' | sort -n | head -n 1)\"\n  if [ -z \"$min_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    local min_even_index=\"$(echo \"$nodes\"\
    \ | tr ' ' '\\n' | grep -n \"^$min_even_value$\" | cut -d ':' -f 1 | sort -n |\
    \ head -n 1)\"\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "    local -a nodes=($1)\n    local -i min_even_index=${#nodes[@]}\n\
    \    local -i min_even_value=1000000000\n    for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n            echo \"[\\\"0\\\"\
    , \\\"$i\\\"]\"\n            return\n        fi\n        if [[ ${nodes[$i]} -lt\
    \ $min_even_value && ${nodes[$i]}%2 -eq 0 ]]; then\n            min_even_value=${nodes[$i]}\n\
    \            min_even_index=$i\n        fi\n    done\n    if [[ $min_even_index\
    \ -eq ${#nodes[@]} ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\
    \"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=($@)\n\
    \  local smallest_even_value=10000\n  local smallest_even_value_index=10000\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ \"${nodes[$i]}\" -lt \"$smallest_even_value\" && \"${nodes[$i]}\"\
    \ -gt 0 && \"${nodes[$i]}\"%2 -eq 0 ]]; then\n      smallest_even_value=${nodes[$i]}\n\
    \      smallest_even_value_index=$i\n    fi\n  done\n  if [[ \"$smallest_even_value\"\
    \ -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($@)\n  local\
    \ min=10000\n  local min_index=10000\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n\
    \    if [[ ${nodes[$i]} -lt $min && $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n \
    \     min=${nodes[$i]}\n      min_index=$i\n    fi\n  done\n  if [[ $min -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\
    \"]\"\n  fi", "    local -n nodes=$1\n    local -a evens\n    local -i i=0\n \
    \   local -i min_index=0\n    local -i min_value=0\n    local -i node_value=0\n\
    \    local -i node_index=0\n    local -i even_count=0\n    for node in \"${nodes[@]}\"\
    ; do\n        node_value=${node}\n        node_index=${i}\n        if (( node_value\
    \ % 2 == 0 )); then\n            evens+=(\"${node_value}\")\n            even_count+=1\n\
    \            if (( even_count == 1 )); then\n                min_value=${node_value}\n\
    \                min_index=${node_index}\n            elif (( node_value < min_value\
    \ )); then\n                min_value=${node_value}\n                min_index=${node_index}\n\
    \            fi\n        fi\n        i+=1\n    done\n    if (( even_count == 0\
    \ )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"${min_value}\\\"\
    , \\\"${min_index}\\\"]\"\n    fi", "  declare -a nodes=($1)\n  declare -i min_index=0\n\
    \  declare -i min_value=0\n  declare -i i=0\n  declare -i len=${#nodes[@]}\n \
    \ declare -i min_even_index=0\n  declare -i min_even_value=0\n  declare -i found_even=0\n\
    \  while [ $i -lt $len ]; do\n    if [ $((nodes[$i] % 2)) -eq 0 ]; then\n    \
    \  if [ $found_even -eq 0 ]; then\n        min_even_index=$i\n        min_even_value=${nodes[$i]}\n\
    \        found_even=1\n      elif [ ${nodes[$i]} -lt $min_even_value ]; then\n\
    \        min_even_index=$i\n        min_even_value=${nodes[$i]}\n      fi\n  \
    \  fi\n    if [ $i -eq 0 ]; then\n      min_index=$i\n      min_value=${nodes[$i]}\n\
    \    elif [ ${nodes[$i]} -lt $min_value ]; then\n      min_index=$i\n      min_value=${nodes[$i]}\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [ $found_even -eq 0 ]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local\
    \ evens=()\n  local even_indexes=()\n  local even_index=0\n  local smallest_even=0\n\
    \  local smallest_even_index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=(\"$node\")\n      even_indexes+=(\"$even_index\"\
    )\n    fi\n    even_index=$((even_index + 1))\n  done\n  if [[ ${#evens[@]} -eq\
    \ 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  smallest_even=${evens[0]}\n\
    \  smallest_even_index=0\n  for index in \"${!evens[@]}\"; do\n    if [[ ${evens[$index]}\
    \ -lt $smallest_even ]]; then\n      smallest_even=${evens[$index]}\n      smallest_even_index=$index\n\
    \    fi\n  done\n  echo \"[\\\"$smallest_even\\\", \\\"${even_indexes[$smallest_even_index]}\\\
    \"]\"", "    local -a nodes=($1)\n    local -a evens=()\n    local -a evens_index=()\n\
    \    local -a result=()\n    local i=0\n    for node in \"${nodes[@]}\"; do\n\
    \        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n    \
    \        evens_index+=($i)\n        fi\n        i=$((i + 1))\n    done\n    if\
    \ [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n        local\
    \ min_even=${evens[0]}\n        local min_even_index=${evens_index[0]}\n     \
    \   for i in \"${!evens[@]}\"; do\n            if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n                min_even=${evens[$i]}\n                min_even_index=${evens_index[$i]}\n\
    \            fi\n        done\n        result=($min_even $min_even_index)\n  \
    \      echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n    fi", "    local\
    \ -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=100000000\n   \
    \ local -i min_even_index=0\n    local -i min_even_count=0\n    local -i node_value\n\
    \    local -i node_index\n    local -i node_count\n    for node in \"${nodes[@]}\"\
    ; do\n        node_value=$node\n        node_index=$i\n        node_count=0\n\
    \        if [[ $node_value -eq 0 ]]; then\n            min_even_value=0\n    \
    \        min_even_index=$node_index\n            min_even_count=1\n          \
    \  break\n        elif [[ $node_value -gt 0 && $node_value -lt $min_even_value\
    \ && $node_value%2 -eq 0 ]]; then\n            min_even_value=$node_value\n  \
    \          min_even_index=$node_index\n            min_even_count=1\n        elif\
    \ [[ $node_value -eq $min_even_value ]]; then\n            min_even_count=$min_even_count+1\n\
    \        fi\n        i=$i+1\n    done\n    if [[ $min_even_count -eq 0 ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n    fi", "  local nodes=(\"$@\")\n  local min=\n  local\
    \ min_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $node -eq 0 ]]; then\n      min=0\n      min_index=$i\n      break\n\
    \    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z\
    \ $min ]] || [[ $node -lt $min ]]; then\n        min=$node\n        min_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "  declare -a nodes=($1)\n\
    \  declare -a evens=()\n  declare -a evens_index=()\n  declare -a result=()\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      evens+=(${nodes[$i]})\n      evens_index+=($i)\n    elif [[ $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n      evens_index+=($i)\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    result+=($(echo \"${evens[@]}\" | tr ' ' '\\n' | sort -n | head -n 1))\n\
    \    result+=($(echo \"${evens_index[@]}\" | tr ' ' '\\n' | sort -n | head -n\
    \ 1))\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local\
    \ -a nodes=(\"$@\")\n  local -a evens=()\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 )); then\n      evens+=(\"$node\")\n    fi\n  done\n\
    \  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n  else\n    local -i min=${evens[0]}\n\
    \    local -i min_i=0\n    for (( i=1; i<${#evens[@]}; i++ )); do\n      if ((\
    \ evens[i] < min )); then\n        min=${evens[i]}\n        min_i=$i\n      fi\n\
    \    done\n    echo \"[\\\"$min\\\", \\\"$min_i\\\"]\"\n  fi", "  local nodes=(\"\
    $@\")\n  local min_even_value=\n  local min_even_value_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n   \
    \   min_even_value=0\n      min_even_value_index=$i\n      break\n    elif [[\
    \ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local evens=()\n\
    \  local evens_indexes=()\n  local smallest_even\n  local smallest_even_index\n\
    \  local i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      evens+=($node)\n      evens_indexes+=($i)\n    fi\n    i=$((i + 1))\n \
    \ done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  smallest_even=${evens[0]}\n  smallest_even_index=${evens_indexes[0]}\n  for\
    \ i in ${!evens[@]}; do\n    if [[ ${evens[$i]} -lt $smallest_even ]]; then\n\
    \      smallest_even=${evens[$i]}\n      smallest_even_index=${evens_indexes[$i]}\n\
    \    fi\n  done\n  echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"\
    ]\"", "  local -a nodes=($*)\n  local -i min_even_value=10000\n  local -i min_even_index=10000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0 &&\
    \ node < min_even_value)); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    ((i++))\n  done\n  if ((min_even_value == 10000)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) == 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi", "    local -a nodes=(\"$@\")\n    local -i min_index=0\n    local\
    \ -i min_value=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i\
    \ min_even_value=0\n    local -i min_even_index=0\n    local -i min_even_found=0\n\
    \    local -i value=0\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n\
    \        if ((value < min_value)); then\n            min_value=$value\n      \
    \      min_index=$i\n        fi\n        if ((value % 2 == 0)); then\n       \
    \     if ((min_even_found == 0)); then\n                min_even_value=$value\n\
    \                min_even_index=$i\n                min_even_found=1\n       \
    \     elif ((value < min_even_value)); then\n                min_even_value=$value\n\
    \                min_even_index=$i\n            fi\n        fi\n    done\n   \
    \ if ((min_even_found == 0)); then\n        echo \"[]\"\n    else\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=\"\
    $1\"\n  local smallest_value=\n  local smallest_index=\n  local index=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=(\"\
    $@\")\n  local min_even_value=\n  local min_even_value_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n   \
    \   min_even_value=0\n      min_even_value_index=$i\n      break\n    elif [[\
    \ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n\
    \      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((i++))\n  done\n\
    \  if [[ $min_even_value -lt 10000 ]]; then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local nodes=($@)\n\
    \  local min_even_value=\n  local min_even_index=\n  for (( i=0; i<${#nodes[@]};\
    \ i++ )); do\n    local node=${nodes[$i]}\n    if [[ $(( node % 2 )) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i min_even_count=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif [[ $node -eq $min_even_value ]]; then\n        min_even_count+=1\n\
    \      fi\n    fi\n    i+=1\n  done\n  if [[ $min_even_count -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local evens=()\n  local even_index=0\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ $((${nodes[$i]} % 2)) -eq 0 ]];\
    \ then\n      evens[$even_index]=${nodes[$i]}\n      even_index=$(($even_index\
    \ + 1))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n\
    \  else\n    local smallest_even=${evens[0]}\n    local smallest_even_index=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $smallest_even\
    \ ]]; then\n        smallest_even=${evens[$i]}\n        smallest_even_index=$i\n\
    \      fi\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local min_even_value=10000\n  local min_even_index=10000\n\
    \  for (( i=0; i<${#nodes[@]}; i++ )); do\n    local node=${nodes[$i]}\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "   \
    \ local -a nodes=($1)\n    local -i min_even_value=10000\n    local -i min_even_index=10000\n\
    \    for ((i=0; i<${#nodes[@]}; i++)); do\n        if ((nodes[i] % 2 == 0 && nodes[i]\
    \ < min_even_value)); then\n            min_even_value=nodes[i]\n            min_even_index=i\n\
    \        fi\n    done\n    if ((min_even_value < 10000)); then\n        echo \"\
    [\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    else\n        echo \"\
    []\"\n    fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    ((index++))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local\
    \ -i min_even_value=100001\n  local -i min_even_index=100001\n  local -i i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node\
    \ -lt $min_even_value ]]; then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 100001 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ];\
    \ then\n      if [ -z \"$smallest_even_value\" ] || [ $node -lt $smallest_even_value\
    \ ]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($@)\n  local evens=()\n\
    \  local even_indexes=()\n  local even_index=0\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      even_indexes+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${even_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[$i]}\n        min_even_index=${even_indexes[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i min_even=0\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node\n  local -i found_even=0\n\
    \  for ((i=0; i<n; i++)); do\n    node=${nodes[i]}\n    if ((node % 2 == 0));\
    \ then\n      if ((found_even == 0)); then\n        min_even=$node\n        min_even_index=$i\n\
    \        found_even=1\n      elif ((node < min_even)); then\n        min_even=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((found_even == 0));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\"\"\n  local min_even_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=10000\n  local min_even_index=10000\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n    \
    \  min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]} -lt $min_even_value ]] && [[ $((${nodes[$i]} % 2))\
    \ -eq 0 ]]; then\n      min_even_value=${nodes[$i]}\n      min_even_index=$i\n\
    \    fi\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($@)\n  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n\
    \  local -i index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2))\
    \ -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$index\n      fi\n    fi\n    ((index++))\n  done\n  if\
    \ [[ $min_even_value -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  declare -a\
    \ nodes=($1)\n  declare -a evens=()\n  declare -a evens_index=()\n  for i in \"\
    ${!nodes[@]}\"; do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n      evens+=(\"\
    ${nodes[$i]}\")\n      evens_index+=(\"$i\")\n    elif [[ \"$((nodes[$i] % 2))\"\
    \ -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      evens_index+=(\"$i\"\
    )\n    fi\n  done\n  if [[ \"${#evens[@]}\" -eq 0 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"${evens[0]}\\\", \\\"${evens_index[0]}\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local min_index=0\n  local min_value=0\n  local index=0\n\
    \  local value=0\n  local is_first=1\n  for value in $nodes; do\n    if [ $((value\
    \ % 2)) -eq 0 ]; then\n      if [ $is_first -eq 1 ]; then\n        min_value=$value\n\
    \        min_index=$index\n        is_first=0\n      elif [ $value -lt $min_value\
    \ ]; then\n        min_value=$value\n        min_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [ $is_first -eq 1 ]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi"]
stop_tokens:
- "\n}"
