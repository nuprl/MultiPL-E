name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    local x=$1\n    local y=$2\n    local i\n    local max=-1\n   \
    \ for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)) && ((i > max)); then\n\
    \            max=$i\n        fi\n    done\n    echo $max", "    local x=$1\n \
    \   local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n     \
    \   i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n  \
    \          echo $i\n            return\n        fi\n    done\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    local i=$x\n    local max_even=-1\n    while\
    \ [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max_even=$i\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo $max_even", "    if [[ $1\
    \ -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2);\
    \ do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n \
    \               break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "    local x=$1\n   \
    \ local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if\
    \ [[ $((i%2)) -eq 0 ]]; then\n            result=$i\n        fi\n    done\n  \
    \  echo $result", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n        \
    \    return\n        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n          \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            if [ $i -gt $max ]; then\n                max=$i\n\
    \            fi\n        fi\n        i=$((i + 1))\n    done\n    echo $max", " \
    \   local x=$1\n    local y=$2\n    local max_even=-1\n    for i in $(seq $x $y);\
    \ do\n        if [[ $((i % 2)) == 0 ]]; then\n            max_even=$i\n      \
    \  fi\n    done\n    echo $max_even", "  if [[ $1 -gt $2 ]]; then\n    echo \"\
    -1\"\n  elif [[ $1 -eq $2 ]]; then\n    if [[ $1%2 -eq 0 ]]; then\n      echo\
    \ \"$1\"\n    else\n      echo \"-1\"\n    fi\n  else\n    for ((i=$2; i>=$1;\
    \ i--)); do\n      if [[ $i%2 -eq 0 ]]; then\n        echo \"$i\"\n        break\n\
    \      fi\n    done\n  fi", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n\
    \        echo -1\n    else\n        for i in $(seq $x $y); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo \"$i\"\n            return\n        fi\n    done\n    echo \"-1\"",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n  \
    \          echo \"-1\"\n        fi\n    else\n        for (( i=$2; i>=$1; i--\
    \ )); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if [ $((i%2)) -eq\
    \ 0 ]; then\n            echo $i\n            return\n        fi\n    done\n \
    \   echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n \
    \       for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n \
    \   elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n        \
    \    echo $x\n        else\n            echo -1\n        fi\n    else\n      \
    \  for i in $(seq $x $y); do\n            if [ $((i % 2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $x $y); do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if [ $x -gt\
    \ $y ]; then\n        echo -1\n    elif [ $x -eq $y ]; then\n        if [ $((x\
    \ % 2)) -eq 0 ]; then\n            echo $x\n        else\n            echo -1\n\
    \        fi\n    else\n        for i in $(seq $x $y); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo $i\n                break\n      \
    \      fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ result=0\n    if [ $x -gt $y ]; then\n        result=-1\n    else\n        for\
    \ (( i=$x; i<=$y; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n      \
    \          result=$i\n            fi\n        done\n    fi\n    echo $result",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ num=$x\n    while [ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n\
    \            echo $num\n            return\n        fi\n        num=$((num + 1))\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i=$x\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ echo $i\n            return\n        fi\n        i=$((i + 1))\n    done\n  \
    \  echo \"-1\"", "    local x=$1\n    local y=$2\n    if [[ $x -gt $y ]]; then\n\
    \        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n        if [[ $x -eq 0 ]];\
    \ then\n            echo \"-1\"\n        elif [[ $x -eq 1 ]]; then\n         \
    \   echo \"-1\"\n        elif [[ $x -eq 2 ]]; then\n            echo \"2\"\n \
    \       elif [[ $x -eq 3 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 4 ]]; then\n            echo \"4\"\n        elif [[ $x -eq 5 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 6 ]]; then\n            echo\
    \ \"6\"\n        elif [[ $x -eq 7 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $x -eq 8 ]]; then\n            echo \"8\"\n        elif [[ $x -eq 9 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 10 ]]; then\n            echo\
    \ \"10\"\n        elif [[ $x -eq 11 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $x -eq\
    \ 13 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 14 ]]; then\n \
    \           echo \"14\"\n        elif [[ $x -eq 15 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 16 ]]; then\n            echo \"16\"\n      \
    \  elif [[ $x -eq 17 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq\
    \ 18 ]]; then\n            echo \"18\"\n        elif [[ $x -eq 19 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $x -eq 20 ]]; then\n            echo\
    \ \"20\"\n        elif [[ $x -eq 21 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 22 ]]; then\n            echo \"22\"\n        elif [[ $x -eq\
    \ 23 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 24 ]];", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if [[ $((i%2)) -eq 0 ]]; then\n            result=$i\n        fi\n  \
    \  done\n    echo $result", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n\
    \        echo \"-1\"\n    else\n        for i in $(seq $x $y); do\n          \
    \  if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\n    else\n\
    \        for ((i=$x; i<=$y; i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local max_even=-1\n    for i in\
    \ $(seq $x $y); do\n        if [ $((i % 2)) -eq 0 ] && [ $i -gt $max_even ]; then\n\
    \            max_even=$i\n        fi\n    done\n    echo $max_even", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if [[ $((i%2))\
    \ -eq 0 ]]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local i\n    local max=-1\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ if ((i > max)); then\n                max=$i\n            fi\n        fi\n \
    \   done\n    echo $max", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    if [[ $x -gt $y ]]; then\n        echo -1\n    elif [[ $x\
    \ -eq $y ]]; then\n        if [[ $x%2 -eq 0 ]]; then\n            echo $x\n  \
    \      else\n            echo -1\n        fi\n    else\n        local i=$x\n \
    \       while [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n   \
    \             echo $i\n                break\n            fi\n            i=$((i+1))\n\
    \        done\n    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    while\
    \ [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n\
    \            return\n        fi\n        i=$((i + 1))\n    done\n    echo -1",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "\tlocal x=$1\n\
    \tlocal y=$2\n\tlocal i\n\tfor ((i=$x; i<=$y; i++)); do\n\t\tif [[ $((i%2)) -eq\
    \ 0 ]]; then\n\t\t\techo $i\n\t\t\treturn\n\t\tfi\n\tdone\n\techo -1", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    x=$1\n    y=$2\n    if [ $x -gt $y ];\
    \ then\n        echo \"-1\"\n    elif [ $((x%2)) -eq 0 ]; then\n        echo $x\n\
    \    else\n        echo $((x+1))\n    fi", "    # Write your code here\n    #\
    \ To print results to the standard output you can use echo\n    # To debug your\
    \ solution, you can write to the standard error\n    #    using echo (e.g. echo\
    \ \"Debug messages...\" >&2)\n    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\
    \n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local i\n  \
    \  for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n\
    \            return\n        fi\n    done\n    echo -1", "    local x=$1\n   \
    \ local y=$2\n    local max=$x\n    local i=0\n    for i in $(seq $x $y); do\n\
    \        if [ $(($i % 2)) -eq 0 ] && [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n    done\n    if [ $max -eq $x ]; then\n        echo \"-1\"\n   \
    \ else\n        echo $max\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo \"$i\"\n\
    \            return\n        fi\n    done\n    echo \"-1\"", "    local x=$1\n\
    \    local y=$2\n    local result=-1\n    for i in $(seq $x $y); do\n        if\
    \ [ $(($i % 2)) -eq 0 ]; then\n            result=$i\n        fi\n    done\n \
    \   echo $result", "    local x=$1\n    local y=$2\n    local max=$x\n    local\
    \ i=0\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)) && ((i > max));\
    \ then\n            max=$i\n        fi\n    done\n    if ((max == x)); then\n\
    \        echo \"-1\"\n    else\n        echo $max\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "    local x=$1\n   \
    \ local y=$2\n    local result=-1\n    if [ $x -gt $y ]; then\n        echo $result\n\
    \        return\n    fi\n    for i in $(seq $x $y); do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            result=$i\n        fi\n    done\n    echo $result",
  "    local x=$1\n    local y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n\
    \        if [ $((num % 2)) -eq 0 ]; then\n            echo $num\n            return\n\
    \        fi\n        num=$((num + 1))\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    elif [ $x -eq\
    \ $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n            echo $x\n   \
    \     else\n            echo -1\n        fi\n    else\n        for i in $(seq\
    \ $x $y); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if\
    \ [[ $((i%2)) -eq 0 ]]; then\n            echo $i\n            return\n      \
    \  fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    if [ $x -gt\
    \ $y ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $x $y); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    local x=$1\n    local y=$2\n    local i=$x\n    local\
    \ max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            if [ $i -gt $max ]; then\n                max=$i\n            fi\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i\
    \ % 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n \
    \       echo \"-1\"\n    else\n        local i=$x\n        while [ $i -le $y ];\
    \ do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n   \
    \             return\n            fi\n            i=$((i + 1))\n        done\n\
    \        echo \"-1\"\n    fi", "  local x=$1\n  local y=$2\n  local i=$x\n  local\
    \ max_even=-1\n  while [ $i -le $y ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      max_even=$i\n    fi\n    i=$((i + 1))\n  done\n  echo $max_even", "   \
    \ # TODO: Implement this function\n    # Hint: You can use the modulo operator\
    \ % to check if a number is even.\n    # For example:\n    # >>> $(echo \"$((12\
    \ % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((13 % 2))\")\n    # \"1\"\n    #\
    \ >>> $(echo \"$((14 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((15 % 2))\")\n\
    \    # \"1\"\n    # >>> $(echo \"$((16 % 2))\")\n    # \"0\"\n    # >>> $(echo\
    \ \"$((17 % 2))\")\n    # \"1\"\n    # >>> $(echo \"$((18 % 2))\")\n    # \"0\"\
    \n    # >>> $(echo \"$((19 % 2))\")\n    # \"1\"\n    # >>> $(echo \"$((20 % 2))\"\
    )\n    # \"0\"\n    # >>> $(echo \"$((21 % 2))\")\n    # \"1\"\n    # >>> $(echo\
    \ \"$((22 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((23 % 2))\")\n    # \"1\"\
    \n    # >>> $(echo \"$((24 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((25 % 2))\"\
    )\n    # \"1\"\n    # >>> $(echo \"$((26 % 2))\")\n    # \"0\"\n    # >>> $(echo\
    \ \"$((27 % 2))\")\n    # \"1\"\n    # >>> $(echo \"$((28 % 2))\")\n    # \"0\"\
    \n    # >>> $(echo \"$((29 % 2))\")\n    # \"1\"\n    # >>> $(echo \"$((30 % 2))\"\
    )\n    # \"0\"\n    # >>> $(echo \"$((31 % 2))\")\n    # \"1\"\n    # >>> $(echo\
    \ \"$((32 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((33 % 2))\")\n    # \"1\"\
    \n    # >>> $(echo \"$((34 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((35 % 2))\"\
    )\n    # \"1\"\n    # >>> $(echo \"$((36 % 2))\")\n    # \"0\"", "    if [[ $1\
    \ -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2);\
    \ do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n \
    \               break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            if ((i > max)); then\n         \
    \       max=$i\n            fi\n        fi\n    done\n    echo $max", "    local\
    \ x=$1\n    local y=$2\n    local i\n    local max_even=-1\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            max_even=$i\n      \
    \  fi\n    done\n    echo $max_even", "    local x=$1\n    local y=$2\n    local\
    \ i=$x\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n \
    \           echo $i\n            return\n        fi\n        i=$((i + 1))\n  \
    \  done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n   \
    \         return\n        fi\n    done\n    echo -1", "  # TODO: Implement this\
    \ function\n  # Hint: You can use the modulo operator % to check if a number is\
    \ even\n  # or odd.\n  # Hint: You can use the bc command to do floating point\
    \ arithmetic.\n  # Hint: You can use the echo command to return a value.\n  #\
    \ Hint: You can use the read command to read in a variable.\n  # Hint: You can\
    \ use the echo command to print out a variable.\n  # Hint: You can use the seq\
    \ command to generate a sequence of numbers.\n  # Hint: You can use the sort command\
    \ to sort a list of numbers.\n  # Hint: You can use the head command to get the\
    \ first element of a list.\n  # Hint: You can use the tail command to get all\
    \ but the first element of a list.\n  # Hint: You can use the wc command to count\
    \ the number of elements in a list.\n  # Hint: You can use the tr command to remove\
    \ the newline character from the end of a string.\n  # Hint: You can use the test\
    \ command to check if a string is empty.\n  # Hint: You can use the test command\
    \ to check if a string is not empty.\n  # Hint: You can use the test command to\
    \ check if a string is equal to another string.\n  # Hint: You can use the test\
    \ command to check if a string is not equal to another string.\n  # Hint: You\
    \ can use the test command to check if a string is less than another string.\n\
    \  # Hint: You can use the test command to check if a string is greater than another\
    \ string.\n  # Hint: You can use the test command to check if a string is less\
    \ than or equal to another string.\n  # Hint: You can use the test command to\
    \ check if a string is greater than or equal to another string.\n  # Hint: You\
    \ can use the test command to check if a file exists.\n  # Hint: You can use the\
    \ test command to check if a file does not exist.\n  # Hint: You can use the test\
    \ command to check if a file is a regular file.\n  # Hint: You can use the test\
    \ command to check if a file is a directory.\n  # Hint:", "    if [[ $1 -gt $2\
    \ ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n        if [[\
    \ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n            echo\
    \ \"-1\"\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n     \
    \       if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n             \
    \   break\n            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n\
    \    if [[ $x -gt $y ]]; then\n        echo -1\n    elif [[ $x -eq $y ]]; then\n\
    \        if [[ $x -eq 0 ]]; then\n            echo 0\n        elif [[ $x -eq 1\
    \ ]]; then\n            echo -1\n        elif [[ $x -eq 2 ]]; then\n         \
    \   echo 2\n        elif [[ $x -eq 3 ]]; then\n            echo -1\n        elif\
    \ [[ $x -eq 4 ]]; then\n            echo 4\n        elif [[ $x -eq 5 ]]; then\n\
    \            echo -1\n        elif [[ $x -eq 6 ]]; then\n            echo 6\n\
    \        elif [[ $x -eq 7 ]]; then\n            echo -1\n        elif [[ $x -eq\
    \ 8 ]]; then\n            echo 8\n        elif [[ $x -eq 9 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 10 ]]; then\n            echo 10\n      \
    \  elif [[ $x -eq 11 ]]; then\n            echo -1\n        elif [[ $x -eq 12\
    \ ]]; then\n            echo 12\n        elif [[ $x -eq 13 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 14 ]]; then\n            echo 14\n      \
    \  elif [[ $x -eq 15 ]]; then\n            echo -1\n        elif [[ $x -eq 16\
    \ ]]; then\n            echo 16\n        elif [[ $x -eq 17 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 18 ]]; then\n            echo 18\n      \
    \  elif [[ $x -eq 19 ]]; then\n            echo -1\n        elif [[ $x -eq 20\
    \ ]]; then\n            echo 20\n        elif [[ $x -eq 21 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 22 ]]; then\n            echo 22\n      \
    \  elif [[ $x -eq 23 ]]; then\n            echo -1\n        elif [[ $x -eq 24\
    \ ]]; then\n            echo 24\n        elif [[ $x -eq 25 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 26 ]]; then\n", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq\
    \ 0 ]; then\n            echo $i\n            return\n        fi\n    done\n \
    \   echo -1", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    if [ $i -gt $max ]; then\n                max=$i\n            fi\n      \
    \  fi\n        i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n    local\
    \ y=$2\n    local i=0\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n    \
    \    if [[ $((i%2)) -eq 0 ]]; then\n            if [[ $i -gt $max ]]; then\n \
    \               max=$i\n            fi\n        fi\n    done\n    echo $max",
  "    local x=$1\n    local y=$2\n    local max=$x\n    local min=$y\n    if [ $x\
    \ -lt $y ]; then\n        max=$y\n        min=$x\n    fi\n    for i in $(seq $min\
    \ $max); do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n    \
    \        return\n        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n      \
    \  if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ result=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            result=$i\n        fi\n    done\n    echo $result", "    local x=$1\n\
    \    local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n       \
    \ if [[ $((i%2)) -eq 0 ]]; then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo \"$i\"\n\
    \            return\n        fi\n    done\n    echo \"-1\"", "    local x=$1\n\
    \    local y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n        if [\
    \ $((num % 2)) -eq 0 ]; then\n            echo $num\n            return\n    \
    \    fi\n        num=$((num + 1))\n    done\n    echo -1", "    if [[ $1 -lt $2\
    \ ]]; then\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n    else\n        for (( i=$2; i<=$1; i++ )); do\n      \
    \      if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n              \
    \  return\n            fi\n        done\n    fi\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            if ((i > max)); then\n         \
    \       max=$i\n            fi\n        fi\n    done\n    echo $max", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local num=$x\n \
    \   while [ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n     \
    \       echo $num\n            return\n        fi\n        num=$((num + 1))\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    if [[ $1 -lt\
    \ $2 ]]; then\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n    fi\n    echo -1", "    if [ $# -ne 2 ]; then\n      \
    \  echo \"Usage: choose_num x y\"\n        return 1\n    fi\n    x=$1\n    y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n        return 0\n    fi\n \
    \   for i in $(seq $x $y); do\n        if [ $((i % 2)) -eq 0 ]; then\n       \
    \     echo $i\n            return 0\n        fi\n    done\n    echo \"-1\"", " \
    \   local x=$1\n    local y=$2\n    local result=-1\n    for (( i = x; i <= y;\
    \ i++ )); do\n        if (( i % 2 == 0 )); then\n            result=$i\n     \
    \   fi\n    done\n    echo $result", "    local x=$1\n    local y=$2\n    local\
    \ i=0\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 ==\
    \ 0)); then\n            if ((i > max)); then\n                max=$i\n      \
    \      fi\n        fi\n    done\n    echo $max", "    local x=$1\n    local y=$2\n\
    \    local num=$x\n    while [[ $num -le $y ]]; do\n        if [[ $((num % 2))\
    \ -eq 0 ]]; then\n            echo $num\n            return\n        fi\n    \
    \    num=$((num + 1))\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n  \
    \          echo $i\n            return\n        fi\n    done\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    # TODO: Implement this function\n    #\
    \ Hint: You can use the modulo operator % to check if a number is even.\n    #\
    \ For example:\n    # >>> $(echo \"12 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo\
    \ \"13 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"14 % 2\" | bc)\n    # \"0\"\
    \n    # >>> $(echo \"15 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"16 % 2\"\
    \ | bc)\n    # \"0\"\n    # >>> $(echo \"17 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"18 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"19 % 2\" | bc)\n  \
    \  # \"1\"\n    # >>> $(echo \"20 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    21 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"22 % 2\" | bc)\n    # \"0\"\n\
    \    # >>> $(echo \"23 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"24 % 2\" |\
    \ bc)\n    # \"0\"\n    # >>> $(echo \"25 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"26 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"27 % 2\" | bc)\n  \
    \  # \"1\"\n    # >>> $(echo \"28 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    29 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"30 % 2\" | bc)\n    # \"0\"\n\
    \    # >>> $(echo \"31 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"32 % 2\" |\
    \ bc)\n    # \"0\"\n    # >>> $(echo \"33 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"34 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"35 % 2\" | bc)\n",
  "    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n \
    \   else\n        for i in $(seq $x $y); do\n            if [ $((i % 2)) -eq 0\
    \ ]; then\n                echo $i\n                break\n            fi\n  \
    \      done\n    fi", "    # TODO: implement this function\n    # Hint: use the\
    \ modulo operator (%) to check if a number is even.\n    # Hint: use the bc utility\
    \ to perform floating point arithmetic.\n    # Hint: use the echo command to return\
    \ the result.\n    # Hint: use the -eq operator to compare integers.\n    # Hint:\
    \ use the -le operator to compare integers.\n    # Hint: use the -ge operator\
    \ to compare integers.\n    # Hint: use the -gt operator to compare integers.\n\
    \    # Hint: use the -lt operator to compare integers.\n    # Hint: use the -ne\
    \ operator to compare integers.\n    # Hint: use the -z operator to check if a\
    \ string is empty.\n    # Hint: use the -n operator to check if a string is not\
    \ empty.\n    # Hint: use the -a operator to perform logical AND.\n    # Hint:\
    \ use the -o operator to perform logical OR.\n    # Hint: use the -f operator\
    \ to check if a file exists.\n    # Hint: use the -d operator to check if a directory\
    \ exists.\n    # Hint: use the -e operator to check if a file or directory exists.\n\
    \    # Hint: use the -r operator to check if a file is readable.\n    # Hint:\
    \ use the -w operator to check if a file is writable.\n    # Hint: use the -x\
    \ operator to check if a file is executable.\n    # Hint: use the -s operator\
    \ to check if a file is not empty.\n    # Hint: use the -z operator to check if\
    \ a string is empty.\n    # Hint: use the -n operator to check if a string is\
    \ not empty.\n    # Hint: use the -b operator to check if a file is a block special\
    \ file.\n    # Hint: use the -c operator to check if a file is a character special\
    \ file.\n    # Hint: use the -p operator to check if a file is a named pipe.\n\
    \    # Hint: use the -h operator to check if a file is a symbolic link.\n    #\
    \ Hint: use the -L operator to check if a file is a symbolic link.\n    # Hint:\
    \ use the -S operator", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n    \
    \    echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0\
    \ ]; then\n            echo \"$x\"\n        else\n            echo \"-1\"\n  \
    \      fi\n    else\n        if [ $((x % 2)) -eq 0 ]; then\n            echo \"\
    $x\"\n        else\n            echo \"$(choose_num $((x + 1)) $y)\"\n       \
    \ fi\n    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            echo \"$i\"\n\
    \            return\n        fi\n    done\n    echo \"-1\"", "    local x=$1\n\
    \    local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    else\n     \
    \   local i=$x\n        while [ $i -le $y ]; do\n            if [ $((i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                return\n            fi\n\
    \            i=$((i + 1))\n        done\n        echo -1\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if\
    \ [[ $((i%2)) -eq 0 ]]; then\n            echo $i\n            return\n      \
    \  fi\n    done\n    echo -1", "  local x=$1\n  local y=$2\n  local i=$x\n  local\
    \ max=-1\n  while [ $i -le $y ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n     \
    \ max=$i\n    fi\n    i=$((i + 1))\n  done\n  echo $max", "    local x=$1\n  \
    \  local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            if ((i > max)); then\n         \
    \       max=$i\n            fi\n        fi\n    done\n    echo $max", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator % to check\
    \ if a number is even\n    # or odd.\n    # Hint: You can use the bc command to\
    \ do floating point arithmetic.\n    # Hint: You can use the echo command to return\
    \ a string.\n    # Hint: You can use the if command to check if a number is even\
    \ or odd.\n    # Hint: You can use the if command to check if a number is greater\
    \ than\n    # another number.\n    # Hint: You can use the if command to check\
    \ if a number is less than\n    # another number.\n    # Hint: You can use the\
    \ if command to check if a number is equal to\n    # another number.\n    # Hint:\
    \ You can use the if command to check if a number is not equal to\n    # another\
    \ number.\n    # Hint: You can use the if command to check if a number is greater\
    \ than\n    # or equal to another number.\n    # Hint: You can use the if command\
    \ to check if a number is less than\n    # or equal to another number.\n    #\
    \ Hint: You can use the if command to check if a string is equal to\n    # another\
    \ string.\n    # Hint: You can use the if command to check if a string is not\
    \ equal to\n    # another string.\n    # Hint: You can use the if command to check\
    \ if a string is greater than\n    # another string.\n    # Hint: You can use\
    \ the if command to check if a string is less than\n    # another string.\n  \
    \  # Hint: You can use the if command to check if a string is greater than\n \
    \   # or equal to another string.\n    # Hint: You can use the if command to check\
    \ if a string is less than\n    # or equal to another string.\n    # Hint: You\
    \ can use the if command to check if a string is empty.\n    # Hint: You can use\
    \ the if command to check if a string is not empty.\n    # Hint: You can use the\
    \ if command to check if a string contains another\n    # string.\n    # Hint:\
    \ You can use the if command to check if a string does not contain\n    # another\
    \ string.\n   ", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n   \
    \         return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i %\
    \ 2 == 0)); then\n            result=$i\n        fi\n    done\n    echo $result",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n \
    \           echo $i\n            return\n        fi\n    done\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\
    \n    elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n      \
    \      echo \"$x\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        local i=$x\n        while [ $i -le $y ]; do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo \"$i\"\n                break\n    \
    \        fi\n            i=$((i + 1))\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i\
    \ % 2 == 0)); then\n            echo \"$i\"\n            return\n        fi\n\
    \    done\n    echo \"-1\"", "    local x=$1\n    local y=$2\n    local i=0\n\
    \    local max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)) &&\
    \ ((i > max)); then\n            max=$i\n        fi\n    done\n    echo $max",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n \
    \       if ((i%2==0)); then\n            echo $i\n            return\n       \
    \ fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n \
    \   for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local res=-1\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i%2==0)); then\n            res=$i\n        fi\n   \
    \ done\n    echo $res", "    local x=$1\n    local y=$2\n    if [[ $x -gt $y ]];\
    \ then\n        echo -1\n    elif [[ $x -eq $y ]]; then\n        if [[ $x%2 -eq\
    \ 0 ]]; then\n            echo $x\n        else\n            echo -1\n       \
    \ fi\n    else\n        for i in $(seq $x $y); do\n            if [[ $i%2 -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the modulo operator % to check if a number\
    \ is even.\n    # For example:\n    # >>> $(echo \"12 % 2\" | bc)\n    # \"0\"\
    \n    # >>> $(echo \"13 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"14 % 2\"\
    \ | bc)\n    # \"0\"\n    # >>> $(echo \"15 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"16 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"17 % 2\" | bc)\n  \
    \  # \"1\"\n    # >>> $(echo \"18 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    19 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"20 % 2\" | bc)\n    # \"0\"\n\
    \    # >>> $(echo \"21 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"22 % 2\" |\
    \ bc)\n    # \"0\"\n    # >>> $(echo \"23 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"24 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"25 % 2\" | bc)\n  \
    \  # \"1\"\n    # >>> $(echo \"26 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    27 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"28 % 2\" | bc)\n    # \"0\"\n\
    \    # >>> $(echo \"29 % 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"30 % 2\" |\
    \ bc)\n    # \"0\"\n    # >>> $(echo \"31 % 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"32 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"33 % 2\" | bc)\n  \
    \  # \"1\"\n    # >>> $(echo \"34 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    35 % 2\" | bc)\n", "    if [[ $1 -le $2 ]]; then\n        for i in $(seq $1 $2);\
    \ do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n \
    \               return\n            fi\n        done\n    fi\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ max=$x\n    local i\n    for ((i=x+1; i<=y; i++)); do\n        if ((i%2==0))\
    \ && ((i>max)); then\n            max=$i\n        fi\n    done\n    if ((max==x));\
    \ then\n        echo -1\n    else\n        echo $max\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    # TODO: implement this function\n    # Hint: you can use the modulo\
    \ operator '%' to check if a number is\n    # even or odd.\n    # Hint: you can\
    \ use the command 'echo' to return a value.\n    # Hint: you can use the command\
    \ 'expr' to evaluate arithmetic expressions.\n    # Hint: you can use the command\
    \ 'test' to check if a condition is true.\n    # Hint: you can use the command\
    \ 'seq' to generate a sequence of numbers.\n    # Hint: you can use the command\
    \ 'sort' to sort a list of numbers.\n    # Hint: you can use the command 'tail'\
    \ to get the last element of a list.\n    # Hint: you can use the command 'head'\
    \ to get the first element of a list.\n    # Hint: you can use the command 'wc'\
    \ to count the number of elements in a list.\n    # Hint: you can use the command\
    \ 'tr' to replace a character with another.\n    # Hint: you can use the command\
    \ 'grep' to filter a list of numbers.\n    # Hint: you can use the command 'cut'\
    \ to get a specific field of a string.\n    # Hint: you can use the command 'rev'\
    \ to reverse a string.\n    # Hint: you can use the command 'sed' to replace a\
    \ string with another.\n    # Hint: you can use the command 'awk' to do more complex\
    \ string manipulations.\n    # Hint: you can use the command 'bc' to do more complex\
    \ arithmetic operations.\n    # Hint: you can use the command 'tr' to replace\
    \ a character with another.\n    # Hint: you can use the command 'grep' to filter\
    \ a list of numbers.\n    # Hint: you can use the command 'cut' to get a specific\
    \ field of a string.\n    # Hint: you can use the command 'rev' to reverse a string.\n\
    \    # Hint: you can use the command 'sed' to replace a string with another.\n\
    \    # Hint: you can use the command 'awk' to do more complex string manipulations.\n\
    \    # Hint: you can use the command 'bc' to do more complex arithmetic operations.\n\
    \    #", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++));\
    \ do\n        if [[ $((i%2)) -eq 0 ]]; then\n            echo $i\n           \
    \ return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local i=$x\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ];\
    \ then\n            echo $i\n            return\n        fi\n        i=$((i +\
    \ 1))\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n\
    \    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n         \
    \   echo $i\n            return\n        fi\n    done\n    echo -1", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n\
    \                return\n            fi\n        done\n        echo \"-1\"\n \
    \   fi", "    local x=$1\n    local y=$2\n    local max=$x\n    local i\n    for\
    \ ((i=x+1; i<=y; i++)); do\n        if ((i % 2 == 0)) && ((i > max)); then\n \
    \           max=$i\n        fi\n    done\n    if ((max % 2 == 0)); then\n    \
    \    echo $max\n    else\n        echo -1\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local result=-1\n    if [ $x -gt $y ]; then\n        echo $result\n\
    \        return\n    fi\n    for i in $(seq $x $y); do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            result=$i\n        fi\n    done\n    echo $result",
  "  local x=$1\n  local y=$2\n  local max=$x\n  local i\n  for ((i=x+1; i<=y; i++));\
    \ do\n    if ((i % 2 == 0)) && ((i > max)); then\n      max=$i\n    fi\n  done\n\
    \  if ((max % 2 == 0)); then\n    echo $max\n  else\n    echo -1\n  fi", "   \
    \ local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    if [[\
    \ $x -gt $y ]]; then\n        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n  \
    \      if [[ $x%2 -eq 0 ]]; then\n            echo \"$x\"\n        else\n    \
    \        echo \"-1\"\n        fi\n    else\n        local i=$x\n        while\
    \ [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n               \
    \ echo \"$i\"\n                return\n            fi\n            ((i++))\n \
    \       done\n        echo \"-1\"\n    fi", "    x=$1\n    y=$2\n    if [ $x -gt\
    \ $y ]; then\n        echo \"-1\"\n    else\n        for (( i=$x; i<=$y; i++ ));\
    \ do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n     \
    \           break\n            fi\n        done\n    fi", "    local x=$1\n  \
    \  local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    elif [ $x -eq\
    \ $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n            echo $x\n   \
    \     else\n            echo -1\n        fi\n    else\n        local i=$x\n  \
    \      while [ $i -le $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n  \
    \              echo $i\n                return\n            fi\n            i=$((i\
    \ + 1))\n        done\n        echo -1\n    fi", "    local x=$1\n    local y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $((x % 2)) -eq 0\
    \ ]; then\n        echo $x\n    else\n        echo $(choose_num $((x + 1)) $y)\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n          \
    \  return\n        fi\n    done\n    echo -1", "  local x=$1\n  local y=$2\n \
    \ local max=-1\n  for i in $(seq $x $y); do\n    if [[ $((i % 2)) -eq 0 ]] &&\
    \ [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max", "    local\
    \ x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    else\n\
    \        local i=$x\n        while [ $i -le $y ]; do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n            i=$((i + 1))\n        done\n    fi", "    local x=$1\n  \
    \  local y=$2\n    local z=$(($x % 2))\n    if [ $z -eq 0 ]; then\n        echo\
    \ $x\n    else\n        x=$(($x + 1))\n        echo $x\n    fi", "    local x=$1\n\
    \    local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n       \
    \ if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n    echo\
    \ $result", "    local x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "    local x=$1\n    local y=$2\n  \
    \  local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n    \
    \        echo $i\n            return\n        fi\n    done\n    echo -1", "  \
    \  local x=$1\n    local y=$2\n    if [[ $x -gt $y ]]; then\n        echo \"-1\"\
    \n    elif [[ $x -eq $y ]]; then\n        if [[ $x -eq 0 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $x -eq 1 ]]; then\n            echo \"-1\"\n \
    \       elif [[ $x -eq 2 ]]; then\n            echo \"2\"\n        elif [[ $x\
    \ -eq 3 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 4 ]]; then\n\
    \            echo \"4\"\n        elif [[ $x -eq 5 ]]; then\n            echo \"\
    -1\"\n        elif [[ $x -eq 6 ]]; then\n            echo \"6\"\n        elif\
    \ [[ $x -eq 7 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 8 ]];\
    \ then\n            echo \"8\"\n        elif [[ $x -eq 9 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $x -eq 10 ]]; then\n            echo \"10\"\n\
    \        elif [[ $x -eq 11 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $x -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $x -eq 13 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 14 ]]; then\n            echo\
    \ \"14\"\n        elif [[ $x -eq 15 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 16 ]]; then\n            echo \"16\"\n        elif [[ $x -eq\
    \ 17 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 18 ]]; then\n \
    \           echo \"18\"\n        elif [[ $x -eq 19 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 20 ]]; then\n            echo \"20\"\n      \
    \  elif [[ $x -eq 21 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq\
    \ 22 ]]; then\n            echo \"22\"\n        elif [[ $x -eq 23 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $x -eq 24 ]];", "    local x=$1\n   \
    \ local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i %\
    \ 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local res=-1\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            res=$i\n        fi\n\
    \    done\n    echo $res", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            echo\
    \ \"$i\"\n            return\n        fi\n    done\n    echo \"-1\"", "    local\
    \ x=$1\n    local y=$2\n    local i\n    local result=-1\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            result=$i\n        fi\n\
    \    done\n    echo $result", "    local x=$1\n    local y=$2\n    local z=$x\n\
    \    while [ $z -le $y ]; do\n        if [ $((z % 2)) -eq 0 ]; then\n        \
    \    echo $z\n            return\n        fi\n        z=$((z + 1))\n    done\n\
    \    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for ((i=$1; i<=$2; i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=0\n    local max=-1\n \
    \   for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if\
    \ ((i > max)); then\n                max=$i\n            fi\n        fi\n    done\n\
    \    echo $max", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n        \
    \    return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    if (( x % 2 == 0 && x >= y )); then\n        echo $x\n    elif (( x % 2 ==\
    \ 1 && x >= y )); then\n        echo -1\n    elif (( y % 2 == 0 )); then\n   \
    \     echo $y\n    else\n        echo $(choose_num $((x+1)) $((y-1)))\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local max=-1\n \
    \   for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)) && ((i > max)); then\n\
    \            max=$i\n        fi\n    done\n    echo $max", "    local x=$1\n \
    \   local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n    echo\
    \ $result", "    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n    \
    \    echo -1\n    else\n        for i in $(seq $x $y); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo $i\n                break\n      \
    \      fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if [[ $x\
    \ -gt $y ]]; then\n        echo \"-1\"\n    else\n        for ((i=$x; i<=$y; i++));\
    \ do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n   \
    \             break\n            fi\n        done\n    fi", "    x=$1\n    y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $x $y); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n    \
    \    if [ $((num % 2)) -eq 0 ]; then\n            echo $num\n            return\n\
    \        fi\n        ((num++))\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local z=$(($x % 2))\n    if [ $x -gt $y ]\n    then\n        echo\
    \ \"-1\"\n    elif [ $z -eq 0 ]\n    then\n        echo $x\n    else\n       \
    \ echo $(choose_num $(($x + 1)) $y)\n    fi", "    x=$1\n    y=$2\n    if [ $x\
    \ -gt $y ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $x $y);\
    \ do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n   \
    \             break\n            fi\n        done\n    fi", "    local x=\"$1\"\
    \n    local y=\"$2\"\n    local num=\"-1\"\n    for ((i=x; i<=y; i++)); do\n \
    \       if [[ $((i%2)) -eq 0 ]]; then\n            num=\"$i\"\n        fi\n  \
    \  done\n    echo \"$num\"", "    local x=$1\n    local y=$2\n    local i=$x\n\
    \    while [[ $i -le $y ]]; do\n        if [[ $((i % 2)) -eq 0 ]]; then\n    \
    \        echo $i\n            return\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n          \
    \  return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i\
    \ % 2 == 0)); then\n            if ((i > max)); then\n                max=$i\n\
    \            fi\n        fi\n    done\n    echo $max", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
    \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            if [ $i -gt\
    \ $max ]; then\n                max=$i\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ i=0\n    local max=-1\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2))\
    \ -eq 0 ] && [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    echo $max", "    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n\
    \        echo -1\n    else\n        for i in $(seq $x $y); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if\
    \ [[ $x -gt $y ]]; then\n        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n\
    \        if [[ $x -eq 0 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 1 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 2 ]]; then\n\
    \            echo \"2\"\n        elif [[ $x -eq 3 ]]; then\n            echo \"\
    -1\"\n        elif [[ $x -eq 4 ]]; then\n            echo \"4\"\n        elif\
    \ [[ $x -eq 5 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 6 ]];\
    \ then\n            echo \"6\"\n        elif [[ $x -eq 7 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $x -eq 8 ]]; then\n            echo \"8\"\n  \
    \      elif [[ $x -eq 9 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $x -eq 11 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 12 ]]; then\n            echo\
    \ \"12\"\n        elif [[ $x -eq 13 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 14 ]]; then\n            echo \"14\"\n        elif [[ $x -eq\
    \ 15 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 16 ]]; then\n \
    \           echo \"16\"\n        elif [[ $x -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $x -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $x -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $x -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $x -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 24 ]];", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n \
    \           return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n\
    \            echo \"$i\"\n            return\n        fi\n    done\n    echo \"\
    -1\"", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
    \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n  \
    \      fi\n        i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n \
    \   local y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    elif [ $x -eq\
    \ $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n            echo $x\n   \
    \     else\n            echo -1\n        fi\n    else\n        for i in $(seq\
    \ $x $y); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if\
    \ ((i%2==0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i%2==0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    x=$1\n    y=$2\n    if [[ $x -gt $y ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $x $y); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "  local x=$1\n  local y=$2\n  if [[ $x -gt $y ]]; then\n    echo \"-1\"\n  else\n\
    \    for (( i=$x; i<=$y; i++ )); do\n      if [[ $((i%2)) -eq 0 ]]; then\n   \
    \     echo $i\n        return\n      fi\n    done\n    echo \"-1\"\n  fi", " \
    \   local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i%2==0)); then\n            echo $i\n            return\n      \
    \  fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local num=$x\n\
    \    while [ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n    \
    \        echo $num\n            return\n        fi\n        num=$((num + 1))\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n \
    \           return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i=$x\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq\
    \ 0 ]; then\n            echo $i\n            return\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"\
    -1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n        echo \"-1\"\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n         \
    \       echo $i\n                break\n            fi\n        done\n    fi"]
stop_tokens:
- "\n}"
