language: sh
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"\
    %.1f\" \"$number\")\n    local decimal_part=$(echo \"$decimal\" | cut -d '.' -f\
    \ 2)\n    if [ \"$decimal_part\" -gt 5 ]; then\n        echo \"$((integer + 1))\"\
    \n    elif [ \"$decimal_part\" -lt 5 ]; then\n        echo \"$integer\"\n    else\n\
    \        if [ \"$number\" -lt 0 ]; then\n            echo \"$((integer - 1))\"\
    \n        else\n            echo \"$((integer + 1))\"\n        fi\n    fi\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp0d5l503e.sh: line 25: [: 14.5: integer expression expected\n/tmp/tmp0d5l503e.sh:
    line 25: [: -15.5: integer expression expected\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=$1\n  local decimal=$(echo\
    \ $number | cut -d. -f2)\n  local integer=$(echo $number | cut -d. -f1)\n  if\
    \ [[ $decimal -ge 5 ]]; then\n    echo $((integer + 1))\n  else\n    echo $integer\n\
    \  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=$1\n  local integer=$(printf\
    \ \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.2f\" \"$number\" | cut -d.\
    \ -f2)\n  if [[ $decimal -gt 50 ]]; then\n    ((integer++))\n  elif [[ $decimal\
    \ -lt 50 ]]; then\n    ((integer--))\n  else\n    if [[ $integer -lt 0 ]]; then\n\
    \      ((integer--))\n    else\n      ((integer++))\n    fi\n  fi\n  echo \"$integer\"\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=\"${number%.*}\"\n  local decimal=\"${number#*.}\"\n  if [[ \"$decimal\"\
    \ -ge 5 ]]; then\n    ((integer++))\n  fi\n  echo \"$integer\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ printf \"%d\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpd_as8b92.sh: line 17: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    printf \"%.0f\" \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo $1 | awk '{printf \"\
    %d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(echo \"$number\" | cut -d. -f1)\n    local decimal=$(echo \"\
    $number\" | cut -d. -f2)\n    if [ -z \"$decimal\" ]; then\n        echo \"$integer\"\
    \n    elif [ \"$decimal\" -lt 5 ]; then\n        echo \"$integer\"\n    elif [\
    \ \"$decimal\" -gt 5 ]; then\n        echo \"$((integer + 1))\"\n    else\n  \
    \      if [ \"$integer\" -lt 0 ]; then\n            echo \"$((integer - 1))\"\n\
    \        else\n            echo \"$((integer + 1))\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  printf \"%d\" \"$1\"\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp6witm8v4.sh: line 16: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local num=\"$1\"\n  local\
    \ int=$(printf \"%.0f\" \"$num\")\n  local decimal=$(printf \"%.1f\" \"$num\"\
    )\n  local decimal_int=$(printf \"%.0f\" \"$decimal\")\n  if [[ \"$int\" == \"\
    $decimal_int\" ]]; then\n    echo \"$int\"\n  elif [[ \"$num\" -lt 0 ]]; then\n\
    \    echo \"$((int - 1))\"\n  else\n    echo \"$((int + 1))\"\n  fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"\
    %.2f\" \"$number\" | cut -d. -f2)\n    if [ \"$decimal\" -eq \"5\" ]; then\n \
    \       if [ \"$integer\" -lt 0 ]; then\n            ((integer--))\n        else\n\
    \            ((integer++))\n        fi\n    fi\n    echo \"$integer\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=$1\n  local int_number=$(echo\
    \ \"$number\" | cut -d. -f1)\n  local decimal_number=$(echo \"$number\" | cut\
    \ -d. -f2)\n  if [ -z \"$decimal_number\" ]; then\n    echo \"$int_number\"\n\
    \  else\n    if [ \"$decimal_number\" -ge 5 ]; then\n      echo \"$((int_number\
    \ + 1))\"\n    else\n      echo \"$int_number\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"%.3f\"\
    \ \"$number\" | cut -d. -f2)\n    if [[ $decimal -eq 500 ]]; then\n        if\
    \ [[ $integer -ge 0 ]]; then\n            echo $((integer + 1))\n        else\n\
    \            echo $((integer - 1))\n        fi\n    else\n        echo $integer\n\
    \    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Your code here\n    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"%.1f\"\
    \ \"$number\")\n    if (( $(echo \"$decimal > $integer\" | bc -l) )); then\n \
    \       echo $((integer + 1))\n    else\n        echo $integer\n    fi\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"Not implemented\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    number=\"$1\"\n    if [[\
    \ \"$number\" =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n        if [[ \"$number\" =~ ^-\
    \ ]]; then\n            echo \"$((${number%.*} - 1))\"\n        else\n       \
    \     echo \"$((${number%.*} + 1))\"\n        fi\n    else\n        echo \"$number\"\
    \n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=$1\n  local integer=$(printf\
    \ \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.3f\" \"$number\" | cut -d.\
    \ -f2)\n  if [[ $decimal -gt 499 ]]; then\n    ((integer++))\n  fi\n  echo \"\
    $integer\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  # Use $1 to access the first argument to the\
    \ function\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=$(printf \"%.0f\" \"$number\")\n    local decimal_part=$(echo \"\
    $number - $int_number\" | bc)\n    if (( $(echo \"$decimal_part > 0.5\" | bc -l)\
    \ )); then\n        echo \"$((int_number + 1))\"\n    elif (( $(echo \"$decimal_part\
    \ < -0.5\" | bc -l) )); then\n        echo \"$((int_number - 1))\"\n    else\n\
    \        echo \"$int_number\"\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(echo \"$number\" | cut -d. -f1)\n  local decimal=$(echo \"$number\"\
    \ | cut -d. -f2)\n  if [ \"$decimal\" -gt \"5\" ]; then\n    echo \"$((integer\
    \ + 1))\"\n  else\n    echo \"$integer\"\n  fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    printf \"%.0f\" \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(echo \"$number\" | cut -d. -f1)\n    local decimal=$(echo \"\
    $number\" | cut -d. -f2)\n    if [[ $decimal -gt 0 ]]; then\n        (( integer\
    \ += 1 ))\n    fi\n    echo \"$integer\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ printf \"%.0f\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\",$1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  #echo \"Not implemented\"\n  echo \"$1\" |\
    \ awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ printf \"%d\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpd_as8b92.sh: line 17: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.1f\" \"\
    $number\")\n  if (( $(echo \"$decimal > $integer\" | bc -l) )); then\n    echo\
    \ \"$((integer + 1))\"\n  else\n    echo \"$integer\"\n  fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo $1 | awk '{printf \"\
    %d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo \"$1\" | awk '{printf\
    \ \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    printf \"%d\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp0w9u75il.sh: line 17: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  printf \"%d\" \"$1\"\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp6witm8v4.sh: line 16: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ integer=$(echo \"$number\" | cut -d. -f1)\n    local decimal=$(echo \"$number\"\
    \ | cut -d. -f2)\n    if [ -z \"$decimal\" ]; then\n        echo \"$integer\"\n\
    \    elif [ \"$decimal\" -lt 5 ]; then\n        echo \"$integer\"\n    elif [\
    \ \"$decimal\" -gt 5 ]; then\n        echo \"$((integer + 1))\"\n    else\n  \
    \      if [ \"$integer\" -gt 0 ]; then\n            echo \"$((integer + 1))\"\n\
    \        else\n            echo \"$((integer - 1))\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # your code here\n  echo $1\
    \ | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=\"${number%.*}\"\n    local decimal=\"${number#*.}\"\n    if\
    \ [[ \"$decimal\" -ge 5 ]]; then\n        (( integer++ ))\n    fi\n    echo \"\
    $integer\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"$1\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=$(echo \"$number\" | cut -d. -f1)\n    local decimal_number=$(echo\
    \ \"$number\" | cut -d. -f2)\n    if [[ -z $decimal_number ]]; then\n        echo\
    \ \"$int_number\"\n    else\n        if [[ $decimal_number -ge 50 ]]; then\n \
    \           echo \"$((int_number + 1))\"\n        else\n            echo \"$int_number\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local int_number=$(printf \"%.0f\" \"$number\")\n    local decimal_number=$(printf\
    \ \"%.1f\" \"$number\")\n    local decimal_number_without_dot=$(echo \"$decimal_number\"\
    \ | tr -d '.')\n    local decimal_number_length=${#decimal_number_without_dot}\n\
    \    local decimal_number_length_minus_one=$((decimal_number_length - 1))\n  \
    \  local decimal_number_length_minus_two=$((decimal_number_length - 2))\n    local\
    \ decimal_number_length_minus_three=$((decimal_number_length - 3))\n    local\
    \ decimal_number_length_minus_four=$((decimal_number_length - 4))\n    local decimal_number_length_minus_five=$((decimal_number_length\
    \ - 5))\n    local decimal_number_length_minus_six=$((decimal_number_length -\
    \ 6))\n    local decimal_number_length_minus_seven=$((decimal_number_length -\
    \ 7))\n    local decimal_number_length_minus_eight=$((decimal_number_length -\
    \ 8))\n    local decimal_number_length_minus_nine=$((decimal_number_length - 9))\n\
    \    local decimal_number_length_minus_ten=$((decimal_number_length - 10))\n \
    \   local decimal_number_length_minus_eleven=$((decimal_number_length - 11))\n\
    \    local decimal_number_length_minus_twelve=$((decimal_number_length - 12))\n\
    \    local decimal_number_length_minus_thirteen=$((decimal_number_length - 13))\n\
    \    local decimal_number_length_minus_fourteen=$((decimal_number_length - 14))\n\
    \    local decimal_number_length_minus_fifteen=$((decimal_number_length - 15))\n\
    \    local decimal_number_length_minus_sixteen=$((decimal_number_length - 16))\n\
    \    local decimal_number_length_minus_seventeen=$((decimal_number_length - 17))\n\
    \    local decimal_number_length_minus_eighteen=$((decimal_number_length - 18))\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    printf \"%.0f\" \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local num=\"$1\"\n  local\
    \ int=$(printf \"%.0f\" \"$num\")\n  local diff=$(echo \"$num - $int\" | bc -l)\n\
    \  if [[ \"$diff\" == \"0\" ]]; then\n    echo \"$int\"\n  elif [[ \"$diff\" ==\
    \ \"0.5\" ]]; then\n    if [[ \"$num\" > 0 ]]; then\n      echo \"$((int + 1))\"\
    \n    else\n      echo \"$((int - 1))\"\n    fi\n  elif [[ \"$diff\" > \"0.5\"\
    \ ]]; then\n    echo \"$((int + 1))\"\n  else\n    echo \"$((int - 1))\"\n  fi\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=$(printf \"%.0f\" $number)\n    local decimal=$(echo \"$number -\
    \ $int_number\" | bc)\n    if [[ $decimal -eq 0 ]]; then\n        echo $int_number\n\
    \    elif [[ $decimal -lt 0 ]]; then\n        echo $((int_number - 1))\n    else\n\
    \        echo $((int_number + 1))\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsu4bz7oy.sh: line 19: [[: .5: syntax error: operand expected
    (error token is ".5")\n/tmp/tmpsu4bz7oy.sh: line 21: [[: .5: syntax error: operand
    expected (error token is ".5")\n/tmp/tmpsu4bz7oy.sh: line 19: [[: .5: syntax error:
    operand expected (error token is ".5")\n/tmp/tmpsu4bz7oy.sh: line 21: [[: .5:
    syntax error: operand expected (error token is ".5")\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=$(printf \"%.0f\" \"$number\")\n    local decimal_part=$(echo \"\
    $number - $int_number\" | bc)\n    if [[ \"$decimal_part\" == \"0\" ]]; then\n\
    \        echo \"$int_number\"\n    elif [[ \"$decimal_part\" == \"0.5\" ]]; then\n\
    \        if [[ \"$number\" -lt 0 ]]; then\n            echo \"$((int_number -\
    \ 1))\"\n        else\n            echo \"$((int_number + 1))\"\n        fi\n\
    \    elif [[ \"$decimal_part\" == \"-0.5\" ]]; then\n        if [[ \"$number\"\
    \ -lt 0 ]]; then\n            echo \"$((int_number + 1))\"\n        else\n   \
    \         echo \"$((int_number - 1))\"\n        fi\n    else\n        echo \"\
    $int_number\"\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  #echo \"10\"\n  echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ integer=$(printf \"%.0f\" $number)\n    local decimal=$(echo \"$number - $integer\"\
    \ | bc)\n    if [[ $decimal == 0 ]]; then\n        echo $integer\n    elif [[\
    \ $decimal > 0 ]]; then\n        echo $((integer + 1))\n    else\n        echo\
    \ $((integer - 1))\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Your code here\n  echo $1\
    \ | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local int_number=$(printf \"%.0f\" \"$number\")\n    local decimal_part=$(echo\
    \ \"$number - $int_number\" | bc)\n    if (( $(echo \"$decimal_part > 0.5\" |\
    \ bc -l) )); then\n        echo \"$((int_number + 1))\"\n    elif (( $(echo \"\
    $decimal_part < -0.5\" | bc -l) )); then\n        echo \"$((int_number - 1))\"\
    \n    else\n        echo \"$int_number\"\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.1f\" \"\
    $number\")\n  local decimal=$(echo \"$decimal - $integer\" | bc)\n  if [[ \"$decimal\"\
    \ == \"0.5\" ]]; then\n    if [[ \"$number\" -lt 0 ]]; then\n      echo \"$((integer\
    \ - 1))\"\n    else\n      echo \"$((integer + 1))\"\n    fi\n  else\n    echo\
    \ \"$integer\"\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * sign($1))}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `sign'' not defined\n"'
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\",$1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo $1\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local decimal=\"${number##*.}\"\n    local integer=\"${number%.*}\"\n    if\
    \ [[ \"$decimal\" -lt \"5\" ]]; then\n        echo \"$integer\"\n    else\n  \
    \      echo \"$((integer + 1))\"\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=${number%.*}\n  local decimal=${number#*.}\n  if [[ $decimal -ge 5 ]];\
    \ then\n    (( integer++ ))\n  fi\n  echo \"$integer\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $(printf \"%.0f\" $1)\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"\
    %.1f\" \"$number\")\n    if (( $(echo \"$decimal > $integer\" | bc -l) )); then\n\
    \        echo \"$((integer + 1))\"\n    else\n        echo \"$integer\"\n    fi\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $(printf \"%.0f\" $1)\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    printf \"%d\" \"$1\"\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpdlzeeord.sh: line 16: printf: 14.5: invalid number\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\",$1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"\
    %.2f\" \"$number\" | cut -d. -f2)\n    if [[ $decimal -gt 50 ]]; then\n      \
    \  ((integer++))\n    elif [[ $decimal -lt 50 ]]; then\n        ((integer--))\n\
    \    else\n        if [[ $integer -gt 0 ]]; then\n            ((integer++))\n\
    \        else\n            ((integer--))\n        fi\n    fi\n    echo \"$integer\"\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Fill in the code here\n\
    \  echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo $(printf \"%.0f\" $1)\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ integer=$(printf \"%.0f\" $number)\n    local decimal=$(echo \"$number - $integer\"\
    \ | bc)\n    if [[ $decimal -eq 0 ]]; then\n        echo $integer\n    elif [[\
    \ $decimal -lt 0 ]]; then\n        echo $((integer - 1))\n    else\n        echo\
    \ $((integer + 1))\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsoqgkdrx.sh: line 19: [[: .5: syntax error: operand expected
    (error token is ".5")\n/tmp/tmpsoqgkdrx.sh: line 21: [[: .5: syntax error: operand
    expected (error token is ".5")\n/tmp/tmpsoqgkdrx.sh: line 19: [[: .5: syntax error:
    operand expected (error token is ".5")\n/tmp/tmpsoqgkdrx.sh: line 21: [[: .5:
    syntax error: operand expected (error token is ".5")\n'''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.3f\" \"\
    $number\" | cut -d. -f2)\n  if [[ \"$decimal\" -gt 499 ]]; then\n    echo \"$((integer\
    \ + 1))\"\n  else\n    echo \"$integer\"\n  fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    # If\
    \ the number is positive, round it up.\n    if [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]; then\n        echo $number | awk '{print int($1+0.5)}'\n    # If the number\
    \ is negative, round it down.\n    elif [[ $number =~ ^-[0-9]+\\.[0-9]+$ ]]; then\n\
    \        echo $number | awk '{print int($1-0.5)}'\n    # If the number is an integer,\
    \ return it.\n    elif [[ $number =~ ^[0-9]+$ ]]; then\n        echo $number\n\
    \    # If the number is not a number, return nothing.\n    else\n        echo\
    \ \"\"\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  printf \"%.0f\" \"$1\"\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.1f\" \"\
    $number\")\n  local diff=$(echo \"$decimal - $integer\" | bc)\n  if [[ \"$diff\"\
    \ == \"0.5\" ]]; then\n    if [[ \"$integer\" -lt 0 ]]; then\n      echo \"$((integer\
    \ - 1))\"\n    else\n      echo \"$((integer + 1))\"\n    fi\n  else\n    echo\
    \ \"$integer\"\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=\"$1\"\n  \
    \  local integer=$(printf \"%.0f\" \"$number\")\n    local decimal=$(printf \"\
    %.3f\" \"$number\" | cut -d. -f2)\n    if [ \"$decimal\" -ge 500 ]; then\n   \
    \     echo \"$((integer + 1))\"\n    else\n        echo \"$integer\"\n    fi\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    printf \"%.0f\" \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=$(printf \"%.0f\" $number)\n    local decimal_part=$(echo \"$number\
    \ - $int_number\" | bc)\n    if [ $(echo \"$decimal_part == 0.5\" | bc) -eq 1\
    \ ]; then\n        if [ $(echo \"$number > 0\" | bc) -eq 1 ]; then\n         \
    \   echo $((int_number + 1))\n        else\n            echo $((int_number - 1))\n\
    \        fi\n    else\n        echo $int_number\n    fi\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ decimal_part=\"${number##*.}\"\n  local integer_part=\"${number%.*}\"\n  if\
    \ [[ \"$decimal_part\" -ge 5 ]]; then\n    (( integer_part++ ))\n  fi\n  echo\
    \ \"$integer_part\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  local number=\"$1\"\n  local\
    \ integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf \"%.1f\" \"\
    $number\")\n  local decimal_part=$(echo \"$decimal\" | cut -d. -f2)\n  if [ \"\
    $decimal_part\" -gt 0 ]; then\n    if [ \"$decimal_part\" -ge 5 ]; then\n    \
    \  echo \"$((integer + 1))\"\n    else\n      echo \"$integer\"\n    fi\n  else\n\
    \    echo \"$integer\"\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361459
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo $1 | awk '{printf \"\
    %d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    echo \"$1\" | awk '{printf\
    \ \"%.0f\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  # Write your code here\n \
    \ # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local num=\"$1\"\n    local\
    \ int_num=$(printf \"%.0f\" \"$num\")\n    local dec_num=$(printf \"%.1f\" \"\
    $num\")\n    if (( $(echo \"$dec_num > $int_num\" | bc -l) )); then\n        echo\
    \ \"$((int_num + 1))\"\n    else\n        echo \"$int_num\"\n    fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ decimal=$(echo $number | cut -d. -f2)\n    local integer=$(echo $number | cut\
    \ -d. -f1)\n    if [ -z \"$decimal\" ]; then\n        echo $integer\n    elif\
    \ [ $decimal -lt 5 ]; then\n        echo $integer\n    elif [ $decimal -gt 5 ];\
    \ then\n        echo $((integer + 1))\n    else\n        if [ $integer -lt 0 ];\
    \ then\n            echo $((integer - 1))\n        else\n            echo $((integer\
    \ + 1))\n        fi\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    local number=$1\n    local\
    \ int_number=${number%.*}\n    local decimal_number=${number#*.}\n    if [ \"\
    $decimal_number\" -gt \"5\" ]; then\n        echo $((int_number + 1))\n    else\n\
    \        echo $int_number\n    fi\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n    # Write your code here\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\nclosest_integer() {\n  echo \"$1\" | awk '{printf\
    \ \"%d\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660361460
