language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_nesting=0\n        local nesting=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            local char=${group:$i:1}\n            if [[ $char ==\
    \ \"(\" ]]; then\n                ((nesting++))\n                if ((nesting\
    \ > max_nesting)); then\n                    max_nesting=$nesting\n          \
    \      fi\n            elif [[ $char == \")\" ]]; then\n                ((nesting--))\n\
    \            fi\n        done\n        output+=(\"\\\"$max_nesting\\\"\")\n  \
    \  done\n    echo \"[${output[@]}]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local output=()\n\
    \  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ $char == \")\" ]]; then\n\
    \      ((depth--))\n    elif [[ $char == \" \" ]]; then\n      output+=(\"\\\"\
    $max_depth\\\"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  output+=(\"\
    \\\"$max_depth\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input_string=$1\n    local output_array=()\n    local max_depth=0\n\
    \    local current_depth=0\n    for ((i=0; i<${#input_string}; i++)); do\n   \
    \     local current_char=${input_string:$i:1}\n        if [[ \"$current_char\"\
    \ == \"(\" ]]; then\n            ((current_depth++))\n            if ((current_depth\
    \ > max_depth)); then\n                max_depth=$current_depth\n            fi\n\
    \        elif [[ \"$current_char\" == \")\" ]]; then\n            ((current_depth--))\n\
    \        elif [[ \"$current_char\" == \" \" ]]; then\n            output_array+=(\"\
    $max_depth\")\n            max_depth=0\n            current_depth=0\n        fi\n\
    \    done\n    output_array+=(\"$max_depth\")\n    echo \"${output_array[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_str=$1\n  local output_str=\"\"\n  local paren_count=0\n  local\
    \ max_paren_count=0\n  local curr_paren_count=0\n  local curr_paren_str=\"\"\n\
    \  local curr_paren_str_len=0\n  local curr_paren_str_idx=0\n  local curr_paren_str_char=\"\
    \"\n  local curr_paren_str_char_idx=0\n  local curr_paren_str_char_count=0\n \
    \ local curr_paren_str_char_count_idx=0\n  local curr_paren_str_char_count_len=0\n\
    \  local curr_paren_str_char_count_arr=()\n  local curr_paren_str_char_count_arr_len=0\n\
    \  local curr_paren_str_char_count_arr_idx=0\n  local curr_paren_str_char_count_arr_char=\"\
    \"\n  local curr_paren_str_char_count_arr_char_idx=0\n  local curr_paren_str_char_count_arr_char_count=0\n\
    \  local curr_paren_str_char_count_arr_char_count_idx=0\n  local curr_paren_str_char_count_arr_char_count_len=0\n\
    \  local curr_paren_str_char_count_arr_char_count_arr=()\n  local curr_paren_str_char_count_arr_char_count_arr_len=0\n\
    \  local curr_paren_str_char_count_arr_char_count_arr_idx=0\n  local curr_paren_str_char_count_arr_char_count_arr_char=\"\
    \"\n  local curr_paren_str_char_count_arr_char_count_arr_char_idx=0\n  local curr_paren_str_char_count_arr_char_count_arr_char_count=0\n\
    \  local curr_paren_str_char_count_arr_char_count_arr_char_count_idx=0\n  local\
    \ curr\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_array=($parens)\n  local paren_count\n \
    \ local max_paren_count\n  local max_paren_count_array=()\n  for paren in \"${paren_array[@]}\"\
    ; do\n    paren_count=0\n    max_paren_count=0\n    for (( i=0; i<${#paren}; i++\
    \ )); do\n      if [[ ${paren:$i:1} == \"(\" ]]; then\n        ((paren_count++))\n\
    \        if ((paren_count > max_paren_count)); then\n          max_paren_count=$paren_count\n\
    \        fi\n      elif [[ ${paren:$i:1} == \")\" ]]; then\n        ((paren_count--))\n\
    \      fi\n    done\n    max_paren_count_array+=(\"$max_paren_count\")\n  done\n\
    \  echo \"${max_paren_count_array[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=$1\n  local parens_array=($parens_string)\n  local\
    \ parens_array_length=${#parens_array[@]}\n  local parens_array_index=0\n  local\
    \ parens_array_element\n  local parens_array_element_length\n  local parens_array_element_index=0\n\
    \  local parens_array_element_char\n  local parens_array_element_char_prev\n \
    \ local parens_array_element_char_next\n  local parens_array_element_char_prev_prev\n\
    \  local parens_array_element_char_next_next\n  local parens_array_element_char_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next\n  local parens_array_element_char_prev_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next_next\n  local parens_array_element_char_prev_prev_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next_next_next\n  local parens_array_element_char_prev_prev_prev_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next_next_next_next\n  local parens_array_element_char_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next_next_next_next_next\n  local\
    \ parens_array_element_char_prev_prev_prev_prev_prev_prev_prev_prev\n  local parens_array_element_char_next_next_next_next_next_next_next_next\n\
    \  local parens_array_element_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_array_element_char_next_next_next_next_next_next_next_next_next\n\
    \  local parens_array_element_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=\"$1\"\n    local parens_arr=($parens)\n    local max_nesting=0\n\
    \    local nesting=0\n    local parens_nesting=()\n    for paren in \"${parens_arr[@]}\"\
    ; do\n        for ((i=0; i<${#paren}; i++)); do\n            if [[ \"${paren:$i:1}\"\
    \ == \"(\" ]]; then\n                ((nesting++))\n                if [[ $nesting\
    \ -gt $max_nesting ]]; then\n                    max_nesting=$nesting\n      \
    \          fi\n            elif [[ \"${paren:$i:1}\" == \")\" ]]; then\n     \
    \           ((nesting--))\n            fi\n        done\n        parens_nesting+=(\"\
    $max_nesting\")\n        max_nesting=0\n        nesting=0\n    done\n    echo\
    \ \"${parens_nesting[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ $char == \"(\" ]]; then\n      (( depth++ ))\n      if (( depth > max_depth\
    \ )); then\n        max_depth=$depth\n      fi\n    elif [[ $char == \")\" ]];\
    \ then\n      (( depth-- ))\n    elif [[ $char == \" \" ]]; then\n      output+=(\"\
    \\\"$max_depth\\\"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  output+=(\"\
    \\\"$max_depth\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=\"${input:$i:1}\"\
    \n    if [[ \"$char\" == \"(\" ]]; then\n      (( level++ ))\n      if (( level\
    \ > max_level )); then\n        max_level=$level\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      (( level-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_level\")\n      max_level=0\n      level=0\n    fi\n  done\n\
    \  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_str=$1\n  local output_str=\"\"\n  local max_depth=0\n  local\
    \ curr_depth=0\n  for ((i=0; i<${#input_str}; i++)); do\n    local char=${input_str:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      curr_depth=$((curr_depth + 1))\n\
    \      if [[ \"$curr_depth\" -gt \"$max_depth\" ]]; then\n        max_depth=$curr_depth\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      curr_depth=$((curr_depth\
    \ - 1))\n    elif [[ \"$char\" == \" \" ]]; then\n      output_str=\"$output_str\
    \ \\\"$max_depth\\\"\"\n      max_depth=0\n      curr_depth=0\n    fi\n  done\n\
    \  output_str=\"$output_str \\\"$max_depth\\\"\"\n  echo $output_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=\"$1\"\n    local parens_arr=($parens_str)\n    local\
    \ parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local parens_arr_max_idx=$((parens_arr_len\
    \ - 1))\n    local parens_arr_max_nesting=0\n    local parens_arr_max_nesting_idx=0\n\
    \    local parens_arr_nesting=0\n    local parens_arr_nesting_idx=0\n    local\
    \ parens_arr_nesting_max=0\n    local parens_arr_nesting_max_idx=0\n    local\
    \ parens_arr_nesting_max_str=\"\"\n    local parens_arr_nesting_str=\"\"\n   \
    \ local parens_arr_nesting_str_idx=0\n    local parens_arr_nesting_str_len=0\n\
    \    local parens_arr_nesting_str_max_len=0\n    local parens_arr_nesting_str_max_len_idx=0\n\
    \    local parens_arr_nesting_str_max_len_str=\"\"\n    local parens_arr_nesting_str_max_len_str_idx=0\n\
    \    local parens_arr_nesting_str_max_len_str_len=0\n    local parens_arr_nesting_str_max_len_str_max_len=0\n\
    \    local parens_arr_nesting_str_max_len_str_max_len_idx=0\n    local parens_arr_nesting_str_max_len_str_max_len_str=\"\
    \"\n    local parens_arr_nesting_str_max_len_str_max_len_str_idx=0\n    local\
    \ parens_arr_nesting_str_max_len_str_max_len_str_len=0\n    local parens_arr_nesting_str_max_len_str_max_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_last=$parens_arr_idx_max\n  local parens_arr_idx_next=$((parens_arr_idx_last\
    \ + 1))\n  local parens_arr_idx_prev=$((parens_arr_idx_last - 1))\n  local parens_arr_idx_last_parens_str=${parens_arr[$parens_arr_idx_last]}\n\
    \  local parens_arr_idx_last_parens_str_len=${#parens_arr_idx_last_parens_str}\n\
    \  local parens_arr_idx_last_parens_str_idx=0\n  local parens_arr_idx_last_parens_str_idx_max=$((parens_arr_idx_last_parens_str_len\
    \ - 1))\n  local parens_arr_idx_last_parens_str_idx_last=$parens_arr_idx_last_parens_str_idx_max\n\
    \  local parens_arr_idx_last_parens_str_idx_next=$((parens_arr_idx_last_parens_str_idx_last\
    \ + 1))\n  local parens_arr_idx_last_parens_str_idx_prev=$((parens_arr_idx_last_parens_str_idx_last\
    \ - 1))\n  local parens_arr_idx_last_parens_str_idx_last_char=${parens_arr_idx_last_parens_str:$parens_arr_idx_last_parens_str_idx_last:1}\n\
    \  local parens_arr_id\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=()\n  local parens_arr_idx=0\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=\"\"\n  local parens_str_char_prev=\"\"\n  local parens_str_char_next=\"\
    \"\n  local parens_str_char_next_next=\"\"\n  local parens_str_char_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\
    \n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  for (( i=0; i<${#input}; i++ )); do\n    local char=${input:$i:1}\n    if [[\
    \ \"$char\" == \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth\
    \ > max_depth)); then\n        max_depth=$current_depth\n      fi\n    elif [[\
    \ \"$char\" == \")\" ]]; then\n      ((current_depth--))\n    elif [[ \"$char\"\
    \ == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n     \
    \ current_depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_max_str=$parens_arr_idx_max\n  local parens_arr_idx_max_str_len=${#parens_arr_idx_max_str}\n\
    \  local parens_arr_idx_max_str_len_plus_1=$((parens_arr_idx_max_str_len + 1))\n\
    \  local parens_arr_idx_max_str_len_plus_1_str=$parens_arr_idx_max_str_len_plus_1\n\
    \  local parens_arr_idx_max_str_len_plus_1_str_len=${#parens_arr_idx_max_str_len_plus_1_str}\n\
    \  local parens_arr_idx_max_str_len_plus_1_str_len_plus_1=$((parens_arr_idx_max_str_len_plus_1_str_len\
    \ + 1))\n  local parens_arr_idx_max_str_len_plus_1_str_len_plus_1_str=$parens_arr_idx_max_str_len_plus_1_str_len_plus_1\n\
    \  local parens_arr_idx_max_str_len_plus_1_str_len_plus_1_str_len=${#parens_arr_idx_max_str_len_plus_1_str_len_plus_1_str}\n\
    \  local parens_arr_idx_max_str_len_plus_1_str_len_plus_1_str_len_plus_1=$((parens_arr_idx_max_str_len_plus_1_str_len_plus_1_str_len\
    \ +\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphamcjnnj.sh: line 21: unexpected EOF while looking for matching
    `)''\n/tmp/tmphamcjnnj.sh: line 36: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local current_char\n  for (( i=0; i<${#input}; i++ )); do\n    current_char=\"\
    ${input:$i:1}\"\n    if [[ \"$current_char\" == \"(\" ]]; then\n      ((current_nesting++))\n\
    \      if ((current_nesting > max_nesting)); then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [[ \"$current_char\" == \")\" ]]; then\n      ((current_nesting--))\n\
    \    elif [[ \"$current_char\" == \" \" ]]; then\n      output+=(\"$max_nesting\"\
    )\n      max_nesting=0\n      current_nesting=0\n    fi\n  done\n  output+=(\"\
    $max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local parens_arr=($parens)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  for ((i=0; i<$parens_arr_len; i++)); do\n    local\
    \ paren_str=${parens_arr[$i]}\n    local paren_str_len=${#paren_str}\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((j=0; j<$paren_str_len; j++));\
    \ do\n      local char=${paren_str:$j:1}\n      if [ \"$char\" == \"(\" ]; then\n\
    \        nesting=$((nesting+1))\n      elif [ \"$char\" == \")\" ]; then\n   \
    \     nesting=$((nesting-1))\n      fi\n      if [ \"$nesting\" -gt \"$max_nesting\"\
    \ ]; then\n        max_nesting=$nesting\n      fi\n    done\n    max_nesting_arr+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nesting_arr=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local max_nesting=0\n    local\
    \ nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n      if [[ \"${parens:$i:1}\"\
    \ == \"(\" ]]; then\n        ((nesting++))\n        if [[ $nesting -gt $max_nesting\
    \ ]]; then\n          max_nesting=$nesting\n        fi\n      elif [[ \"${parens:$i:1}\"\
    \ == \")\" ]]; then\n        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ level=0\n    local max_level=0\n    for (( i=0; i<${#group}; i++ )); do\n  \
    \    if [[ ${group:$i:1} == \"(\" ]]; then\n        (( level++ ))\n        if\
    \ (( level > max_level )); then\n          max_level=$level\n        fi\n    \
    \  elif [[ ${group:$i:1} == \")\" ]]; then\n        (( level-- ))\n      fi\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo ${output[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input_str=$1\n    local output_str=\"\"\n    local max_nesting_level=0\n\
    \    local nesting_level=0\n    local char=\"\"\n    local i=0\n    local j=0\n\
    \    local k=0\n    local len=0\n    local group_len=0\n    local group_start=0\n\
    \    local group_end=0\n    local group_str=\"\"\n    local group_arr=()\n   \
    \ local group_arr_len=0\n    local group_arr_idx=0\n    local group_arr_str=\"\
    \"\n    local group_arr_str_len=0\n    local group_arr_str_idx=0\n    local group_arr_str_char=\"\
    \"\n    local group_arr_str_char_idx=0\n    local group_arr_str_char_len=0\n \
    \   local group_arr_str_char_arr=()\n    local group_arr_str_char_arr_len=0\n\
    \    local group_arr_str_char_arr_idx=0\n    local group_arr_str_char_arr_str=\"\
    \"\n    local group_arr_str_char_arr_str_len=0\n    local group_arr_str_char_arr_str_idx=0\n\
    \    local group_arr_str_char_arr_str_char=\"\"\n    local group_arr_str_char_arr_str_char_idx=0\n\
    \    local group_arr_str_char_arr_str_char_len=0\n    local group_arr_str_char_arr_str_char_arr=()\n\
    \    local group_arr_str_char_arr_str_char_arr_len=0\n    local group_arr_str_char_arr_str_char_arr_idx=0\n\
    \    local group_arr_str_char_arr_str_char_arr_str=\"\"\n    local group_arr_str_char_arr_str_char_arr_str_len=0\n\
    \    local group_arr_str_char_arr_str_char_arr_str_idx=0\n    local group_arr_str_char_arr_str_char_arr_str_char=\"\
    \"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=${input:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            (( level++ ))\n          \
    \  if (( level > max_level )); then\n                max_level=$level\n      \
    \      fi\n        elif [[ $char == \")\" ]]; then\n            (( level-- ))\n\
    \        elif [[ $char == \" \" ]]; then\n            output+=($max_level)\n \
    \           max_level=0\n            level=0\n        fi\n    done\n    output+=($max_level)\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_last=$parens_arr_idx_max\n  local parens_arr_idx_last_parens=0\n\
    \  local parens_arr_idx_last_parens_max=0\n  local parens_arr_idx_last_parens_max_idx=0\n\
    \  local parens_arr_idx_last_parens_max_idx_max=0\n  local parens_arr_idx_last_parens_max_idx_max_idx=0\n\
    \  local parens_arr_idx_last_parens_max_idx_max_idx_max=0\n  local parens_arr_idx_last_parens_max_idx_max_idx_max_idx=0\n\
    \  local parens_arr_idx_last_parens_max_idx_max_idx_max_idx_max=0\n  local parens_arr_idx_last_parens_max_idx_max_idx_max_idx_max_idx=0\n\
    \  local parens_arr_idx_last_parens_max_idx_max_idx_max_idx_max_idx_max=0\n  local\
    \ parens_arr_idx_last_parens_max_idx_max_idx_max_idx_max_idx_max_idx=0\n  local\
    \ parens_arr_idx_last_parens_max_idx_max_idx_max_idx_max_idx_max_idx_max=0\n \
    \ local parens_arr_idx_last_parens_max_idx_max_idx_max_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            depth=$((depth + 1))\n            if [ $depth -gt $max_depth\
    \ ]; then\n                max_depth=$depth\n            fi\n        elif [ \"\
    $c\" == \")\" ]; then\n            depth=$((depth - 1))\n        fi\n        i=$((i\
    \ + 1))\n        if [ $i -eq $len ] || [ \"$c\" == \" \" ]; then\n           \
    \ output+=($max_depth)\n            max_depth=0\n        fi\n    done\n    echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local current_char=''\n  local current_index=0\n  local current_group=''\n\
    \  local current_group_index=0\n  local current_group_length=0\n  local current_group_max_nesting=0\n\
    \  local current_group_nesting=0\n  local current_group_char=''\n  local current_group_index=0\n\
    \  local current_group_output=''\n  local current_group_output_index=0\n  local\
    \ current_group_output_length=0\n  local current_group_output_char=''\n  local\
    \ current_group_output_index=0\n  local current_group_output_max_nesting=0\n \
    \ local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_output_nesting=0\n  local current_group_output_char=''\n\
    \  local current_group_output_index=0\n  local current_group_output_max_nesting=0\n\
    \  local current_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  for ((i=0; i<${#input}; i++)); do\n    c=${input:$i:1}\n\
    \    if [[ $c == '(' ]]; then\n      ((level++))\n      ((max_level = level >\
    \ max_level ? level : max_level))\n    elif [[ $c == ')' ]]; then\n      ((level--))\n\
    \    fi\n  done\n  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      level=$((level +\
    \ 1))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n  \
    \    fi\n    elif [ \"$c\" == \")\" ]; then\n      level=$((level - 1))\n    elif\
    \ [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"$max_level\\\"\")\n      max_level=0\n\
    \      level=0\n    fi\n    i=$((i + 1))\n  done\n  output+=(\"\\\"$max_level\\\
    \"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local max_depth_parens=()\n\
    \  for (( i=0; i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1} == \"(\" ]];\
    \ then\n      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n      ((depth--))\n \
    \   fi\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    for ((i=0; i<${#input}; i++)); do\n\
    \        c=${input:$i:1}\n        if [[ $c == '(' ]]; then\n            ((level++))\n\
    \            if ((level > max_level)); then\n                max_level=$level\n\
    \            fi\n        elif [[ $c == ')' ]]; then\n            ((level--))\n\
    \        fi\n        if [[ $c == ' ' ]]; then\n            output+=(\"\\\"$max_level\\\
    \"\")\n            max_level=0\n            level=0\n        fi\n    done\n  \
    \  output+=(\"\\\"$max_level\\\"\")\n    echo ${output[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local result=\"\"\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    local paren_count=0\n  \
    \  local max_paren_count=0\n    for ((i=0; i<${#paren_group}; i++)); do\n    \
    \  local char=${paren_group:$i:1}\n      if [[ $char == \"(\" ]]; then\n     \
    \   ((paren_count++))\n        if [[ $paren_count -gt $max_paren_count ]]; then\n\
    \          max_paren_count=$paren_count\n        fi\n      elif [[ $char == \"\
    )\" ]]; then\n        ((paren_count--))\n      fi\n    done\n    if [[ $result\
    \ == \"\" ]]; then\n      result=\"\\\"$max_paren_count\\\"\"\n    else\n    \
    \  result=\"$result, \\\"$max_paren_count\\\"\"\n    fi\n  done\n  echo \"[$result]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=\"$1\"\n    local output=()\n    local max_nesting=0\n  \
    \  local nesting=0\n    local char\n    for ((i=0; i<${#input}; i++)); do\n  \
    \      char=\"${input:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n   \
    \         ((nesting++))\n            if ((nesting > max_nesting)); then\n    \
    \            max_nesting=$nesting\n            fi\n        elif [[ \"$char\" ==\
    \ \")\" ]]; then\n            ((nesting--))\n        elif [[ \"$char\" == \" \"\
    \ ]]; then\n            output+=(\"$max_nesting\")\n            max_nesting=0\n\
    \            nesting=0\n        fi\n    done\n    output+=(\"$max_nesting\")\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=\"${input:$i:1}\"\
    \n    if [[ \"$char\" == \"(\" ]]; then\n      ((current_nesting++))\n      if\
    \ ((current_nesting > max_nesting)); then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((current_nesting--))\n\
    \    elif [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_nesting\")\n \
    \     max_nesting=0\n      current_nesting=0\n    fi\n  done\n  output+=(\"$max_nesting\"\
    )\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ $char == \")\" ]]; then\n\
    \      ((depth--))\n    elif [[ $char == \" \" ]]; then\n      result+=(\"\\\"\
    $max_depth\\\"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  result+=(\"\
    \\\"$max_depth\\\"\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_str_arr=($parens_str)\n  local\
    \ parens_str_arr_len=${#parens_str_arr[@]}\n  local parens_str_arr_idx=0\n  local\
    \ parens_str_arr_idx_max=$((parens_str_arr_len - 1))\n  local parens_str_arr_idx_max_parens=0\n\
    \  local parens_str_arr_idx_max_parens_len=0\n  local parens_str_arr_idx_max_parens_len_max=0\n\
    \  local parens_str_arr_idx_max_parens_len_max_str=\"\"\n  local parens_str_arr_idx_max_parens_len_max_str_arr=()\n\
    \  local parens_str_arr_idx_max_parens_len_max_str_arr_len=0\n  local parens_str_arr_idx_max_parens_len_max_str_arr_idx=0\n\
    \  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max=0\n  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max_parens=0\n\
    \  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max_parens_len=0\n\
    \  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max_parens_len_max=0\n\
    \  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max_parens_len_max_str=\"\
    \"\n  local parens_str_arr_idx_max_parens_len_max_str_arr_idx_max_parens_len_max_str_arr=()\n\
    \  local p\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      (( level++ ))\n      (( max_level\
    \ = max_level < level ? level : max_level ))\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      (( level-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n      output+=(\"\
    $max_level\")\n      max_level=0\n    fi\n  done\n  output+=(\"$max_level\")\n\
    \  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  for ((i=0; i<${#input}; i++)); do\n    local char=\"${input:$i:1}\"\n    if\
    \ [[ \"$char\" == \"(\" ]]; then\n      ((current_nesting++))\n      if ((current_nesting\
    \ > max_nesting)); then\n        max_nesting=$current_nesting\n      fi\n    elif\
    \ [[ \"$char\" == \")\" ]]; then\n      ((current_nesting--))\n    elif [[ \"\
    $char\" == \" \" ]]; then\n      output+=(\"$max_nesting\")\n      max_nesting=0\n\
    \      current_nesting=0\n    fi\n  done\n  output+=(\"$max_nesting\")\n  echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        level=$((level+1))\n\
    \        if [[ $level -gt $max_level ]]; then\n          max_level=$level\n  \
    \      fi\n      elif [[ $char == \")\" ]]; then\n        level=$((level-1))\n\
    \      fi\n    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local paren_group\n\
    \  local paren_group_len\n  local paren_group_max_nesting\n  local paren_group_nesting\n\
    \  local paren_group_nesting_max\n  local paren_group_nesting_max_len\n  local\
    \ paren_group_nesting_max_len_max\n  local paren_group_nesting_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max\n  local paren_group_nesting_max_len_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max_len_max\n  local paren_group_nesting_max_len_max_len_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max_len_max_len_max\n  local paren_group_nesting_max_len_max_len_max_len_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max\n  local\
    \ paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max_len\n  local\
    \ paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max_len_max\n  local\
    \ paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max_len_max_len_max\n\
    \  local paren_group_nesting_max_len_max_len_max_len_max_len_max_len_max_len_max_len_max_len\n\
    \  local paren_group_nesting_max_len_max_len_max_len\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_level=0\n        local level=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            if [[ ${group:$i:1} == \"(\" ]]; then\n             \
    \   ((level++))\n                if ((level > max_level)); then\n            \
    \        max_level=$level\n                fi\n            elif [[ ${group:$i:1}\
    \ == \")\" ]]; then\n                ((level--))\n            fi\n        done\n\
    \        output+=(\"\\\"$max_level\\\"\")\n    done\n    echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local max_depth=0\n    local curr_depth=0\n    local\
    \ parens_arr=()\n    local parens_arr_idx=0\n    local parens_arr_len=0\n    local\
    \ parens_arr_str=\"\"\n    local curr_parens=\"\"\n    local curr_parens_len=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local curr_char=\"\"\n    local\
    \ curr_char_ascii=0\n    local curr_char_ascii_str=\"\"\n    local curr_char_ascii_str_len=0\n\
    \    local curr_char_ascii_str_idx=0\n    local curr_char_ascii_str_idx_str=\"\
    \"\n    local curr_char_ascii_str_idx_str_len=0\n    local curr_char_ascii_str_idx_str_idx=0\n\
    \    local curr_char_ascii_str_idx_str_idx_str=\"\"\n    local curr_char_ascii_str_idx_str_idx_str_len=0\n\
    \    local curr_char_ascii_str_idx_str_idx_str_idx=0\n    local curr_char_ascii_str_idx_str_idx_str_idx_str=\"\
    \"\n    local curr_char_ascii_str_idx_str_idx_str_idx_str_len=0\n    local curr_char_ascii_str_idx_str_idx_str_idx_str_idx=0\n\
    \    local curr_char_ascii_str_idx_str_idx_str_idx_str_idx_str=\"\"\n    local\
    \ curr_char_ascii_str_idx_str_idx_str_idx_str_idx_str_len=0\n    local curr_char_ascii_str_idx_str_idx_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nesting_arr=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local max_nesting=0\n    local\
    \ nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n      local char=\"${parens:$i:1}\"\
    \n      if [[ \"$char\" == \"(\" ]]; then\n        ((nesting++))\n        if ((nesting\
    \ > max_nesting)); then\n          max_nesting=$nesting\n        fi\n      elif\
    \ [[ \"$char\" == \")\" ]]; then\n        ((nesting--))\n      fi\n    done\n\
    \    max_nesting_arr+=(\"$max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local max_nesting=()\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    local nesting=0\n    local\
    \ max_nesting_in_group=0\n    for (( i=0; i<${#paren_group}; i++ )); do\n    \
    \  if [[ ${paren_group:$i:1} == \"(\" ]]; then\n        ((nesting++))\n      elif\
    \ [[ ${paren_group:$i:1} == \")\" ]]; then\n        ((nesting--))\n      fi\n\
    \      if [[ $nesting -gt $max_nesting_in_group ]]; then\n        max_nesting_in_group=$nesting\n\
    \      fi\n    done\n    max_nesting+=(\"$max_nesting_in_group\")\n  done\n  echo\
    \ \"${max_nesting[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local max_nesting=0\n\
    \  local max_nesting_groups=()\n  for paren_group in \"${paren_groups[@]}\"; do\n\
    \    local nesting=0\n    local max_nesting_group=0\n    local paren_group_len=${#paren_group}\n\
    \    for ((i=0; i<paren_group_len; i++)); do\n      local char=${paren_group:$i:1}\n\
    \      if [[ $char == \"(\" ]]; then\n        nesting=$((nesting + 1))\n     \
    \ elif [[ $char == \")\" ]]; then\n        nesting=$((nesting - 1))\n      fi\n\
    \      if [[ $nesting -gt $max_nesting_group ]]; then\n        max_nesting_group=$nesting\n\
    \      fi\n    done\n    if [[ $max_nesting_group -gt $max_nesting ]]; then\n\
    \      max_nesting=$max_nesting_group\n    fi\n    max_nesting_groups+=($max_nesting_group)\n\
    \  done\n  echo \"${max_nesting_groups[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=()\n  local parens_str_len=${#parens_str}\n\
    \  local parens_str_idx=0\n  local parens_str_char=\"\"\n  local parens_str_char_prev=\"\
    \"\n  local parens_str_char_next=\"\"\n  local parens_str_char_prev_prev=\"\"\n\
    \  local parens_str_char_next_next=\"\"\n  local parens_str_char_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next_next_next_next=\"\"\n  local\
    \ parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local parens_str\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local result=()\n    for i in $input; do\n      \
    \  local max_level=0\n        local level=0\n        for (( j=0; j<${#i}; j++\
    \ )); do\n            if [[ ${i:$j:1} == \"(\" ]]; then\n                (( level++\
    \ ))\n                if (( level > max_level )); then\n                    max_level=$level\n\
    \                fi\n            elif [[ ${i:$j:1} == \")\" ]]; then\n       \
    \         (( level-- ))\n            fi\n        done\n        result+=(\"\\\"\
    $max_level\\\"\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_nesting=0\n        local current_nesting=0\n        for ((i=0;\
    \ i<${#group}; i++)); do\n            local char=${group:$i:1}\n            if\
    \ [[ $char == \"(\" ]]; then\n                ((current_nesting++))\n        \
    \        if ((current_nesting > max_nesting)); then\n                    max_nesting=$current_nesting\n\
    \                fi\n            elif [[ $char == \")\" ]]; then\n           \
    \     ((current_nesting--))\n            fi\n        done\n        output+=($max_nesting)\n\
    \    done\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_item\n  local parens_arr_item_len\n\
    \  local parens_arr_item_idx\n  local parens_arr_item_char\n  local parens_arr_item_char_idx\n\
    \  local parens_arr_item_char_stack\n  local parens_arr_item_char_stack_len\n\
    \  local parens_arr_item_char_stack_idx\n  local parens_arr_item_char_stack_item\n\
    \  local parens_arr_item_char_stack_item_len\n  local parens_arr_item_char_stack_item_idx\n\
    \  local parens_arr_item_char_stack_item_char\n  local parens_arr_item_char_stack_item_char_idx\n\
    \  local parens_arr_item_char_stack_item_char_stack\n  local parens_arr_item_char_stack_item_char_stack_len\n\
    \  local parens_arr_item_char_stack_item_char_stack_idx\n  local parens_arr_item_char_stack_item_char_stack_item\n\
    \  local parens_arr_item_char_stack_item_char_stack_item_len\n  local parens_arr_item_char_stack_item_char_stack_item_idx\n\
    \  local parens_arr_item_char_stack_item_char_stack_item_char\n  local parens_arr_item_char_stack_item_char_stack_item_char_idx\n\
    \  local parens_arr_item_char_stack_item_char_stack_item_char_stack\n  local parens_arr_item_char_stack_item_char_stack_item_char_stack_len\n\
    \  local parens_arr_item_char\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=\"$1\"\n    local parens_arr=()\n    local parens_arr_idx=0\n\
    \    local parens_arr_len=0\n    local parens_arr_max_len=0\n    local parens_arr_max_len_idx=0\n\
    \    local parens_arr_max_len_str=\"\"\n    local parens_arr_max_len_str_arr=()\n\
    \    local parens_arr_max_len_str_arr_idx=0\n    local parens_arr_max_len_str_arr_len=0\n\
    \    local parens_arr_max_len_str_arr_max_len=0\n    local parens_arr_max_len_str_arr_max_len_idx=0\n\
    \    local parens_arr_max_len_str_arr_max_len_str=\"\"\n    local parens_arr_max_len_str_arr_max_len_str_arr=()\n\
    \    local parens_arr_max_len_str_arr_max_len_str_arr_idx=0\n    local parens_arr_max_len_str_arr_max_len_str_arr_len=0\n\
    \    local parens_arr_max_len_str_arr_max_len_str_arr_max_len=0\n    local parens_arr_max_len_str_arr_max_len_str_arr_max_len_idx=0\n\
    \    local parens_arr_max_len_str_arr_max_len_str_arr_max_len_str=\"\"\n    local\
    \ parens_arr_max_len_str_arr_max_len_str_arr_max_len_str_arr=()\n    local parens_arr_max_len_str_arr_max_len_str_arr_max_len_str_arr_idx=0\n\
    \    local parens_arr_max_len_str_arr_max_len_str_arr_max_len_str_arr_len=0\n\
    \    local parens\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_array\n  local -a parens_array_output\n  local -a parens_array_output_final\n\
    \  local -a parens_array_output_final_final\n  local -a parens_array_output_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final\n  local -a parens_array_output_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final\n  local -a\
    \ parens_array_output_final_final_final_final_final_final_final\n  local -a parens_array_output_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local -a parens_array_output_final_final_final_final_final_final_final\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local max_nesting=0\n    local curr_nesting=0\n\
    \    local output=()\n    for ((i=0; i<${#parens}; i++)); do\n        local char=${parens:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            ((curr_nesting++))\n     \
    \       if ((curr_nesting > max_nesting)); then\n                max_nesting=$curr_nesting\n\
    \            fi\n        elif [[ $char == \")\" ]]; then\n            ((curr_nesting--))\n\
    \        elif [[ $char == \" \" ]]; then\n            output+=(\"\\\"$max_nesting\\\
    \"\")\n            max_nesting=0\n            curr_nesting=0\n        fi\n   \
    \ done\n    output+=(\"\\\"$max_nesting\\\"\")\n    echo \"${output[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local current_char\n  for (( i=0; i<${#input}; i++ )); do\n    current_char=${input:$i:1}\n\
    \    if [[ $current_char == \"(\" ]]; then\n      ((current_nesting++))\n    \
    \  if ((current_nesting > max_nesting)); then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [[ $current_char == \")\" ]]; then\n      ((current_nesting--))\n\
    \    elif [[ $current_char == \" \" ]]; then\n      output+=(\"\\\"$max_nesting\\\
    \"\")\n      max_nesting=0\n      current_nesting=0\n    fi\n  done\n  output+=(\"\
    \\\"$max_nesting\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_val\n  local parens_arr_val_len\n\
    \  local parens_arr_val_idx\n  local parens_arr_val_char\n  local parens_arr_val_char_prev\n\
    \  local parens_arr_val_char_next\n  local parens_arr_val_char_parens_count\n\
    \  local parens_arr_val_char_parens_count_max\n  local parens_arr_val_char_parens_count_max_str\n\
    \  local parens_arr_val_char_parens_count_max_str_arr\n  local parens_arr_val_char_parens_count_max_str_arr_len\n\
    \  local parens_arr_val_char_parens_count_max_str_arr_idx\n  local parens_arr_val_char_parens_count_max_str_arr_val\n\
    \  local parens_arr_val_char_parens_count_max_str_arr_val_len\n  local parens_arr_val_char_parens_count_max_str_arr_val_idx\n\
    \  local parens_arr_val_char_parens_count_max_str_arr_val_char\n  local parens_arr_val_char_parens_count_max_str_arr_val_char_prev\n\
    \  local parens_arr_val_char_parens_count_max_str_arr_val_char_next\n  local parens_arr_val_char_parens_count_max_str_arr_val_char_parens_count\n\
    \  local parens_arr_val_char_parens_count_max_str_arr_val_char_parens_count_max\n\
    \  local parens_arr_val_char_parens\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local paren_groups=($parens)\n    local paren_group\n\
    \    local paren_group_len\n    local paren_group_max_depth\n    local paren_group_depth\n\
    \    local paren_group_char\n    local paren_group_char_idx\n    local paren_group_max_depth_arr=()\n\
    \    for paren_group in \"${paren_groups[@]}\"; do\n        paren_group_len=${#paren_group}\n\
    \        paren_group_max_depth=0\n        paren_group_depth=0\n        for ((paren_group_char_idx=0;\
    \ paren_group_char_idx<paren_group_len; paren_group_char_idx++)); do\n       \
    \     paren_group_char=${paren_group:$paren_group_char_idx:1}\n            if\
    \ [[ $paren_group_char == \"(\" ]]; then\n                ((paren_group_depth++))\n\
    \                if ((paren_group_depth > paren_group_max_depth)); then\n    \
    \                paren_group_max_depth=$paren_group_depth\n                fi\n\
    \            elif [[ $paren_group_char == \")\" ]]; then\n                ((paren_group_depth--))\n\
    \            fi\n        done\n        paren_group_max_depth_arr+=($paren_group_max_depth)\n\
    \    done\n    echo ${paren_group_max_depth_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_str=$1\n  local paren_strs=($input_str)\n  local paren_str\n\
    \  local paren_str_len\n  local paren_str_idx\n  local paren_str_char\n  local\
    \ paren_str_nest_level\n  local paren_str_nest_level_max\n  local paren_str_nest_level_max_str\n\
    \  local paren_str_nest_level_max_strs=()\n  for paren_str in \"${paren_strs[@]}\"\
    ; do\n    paren_str_len=${#paren_str}\n    paren_str_nest_level=0\n    paren_str_nest_level_max=0\n\
    \    for ((paren_str_idx=0; paren_str_idx<paren_str_len; paren_str_idx++)); do\n\
    \      paren_str_char=${paren_str:paren_str_idx:1}\n      if [[ $paren_str_char\
    \ == \"(\" ]]; then\n        ((paren_str_nest_level++))\n        if [[ $paren_str_nest_level\
    \ -gt $paren_str_nest_level_max ]]; then\n          paren_str_nest_level_max=$paren_str_nest_level\n\
    \        fi\n      elif [[ $paren_str_char == \")\" ]]; then\n        ((paren_str_nest_level--))\n\
    \      fi\n    done\n    paren_str_nest_level_max_str=\"\\\"$paren_str_nest_level_max\\\
    \"\"\n    paren_str_nest_level_max_strs+=(\"$paren_str_nest_level_max_str\")\n\
    \  done\n  echo \"${paren_str_nest_level_max_strs[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      (( depth++ ))\n      if (( depth\
    \ > max_depth )); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      (( depth-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=\"$1\"\n    local result=()\n    local max_level=0\n    local\
    \ level=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=\"\
    ${input:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            (( level++\
    \ ))\n            (( max_level = level > max_level ? level : max_level ))\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            (( level-- ))\n      \
    \  elif [[ \"$char\" == \" \" ]]; then\n            result+=(\"$max_level\")\n\
    \            max_level=0\n        fi\n    done\n    result+=(\"$max_level\")\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_out=()\n  local parens_arr_out_idx=0\n\
    \  local parens_arr_out_len=0\n  local parens_arr_out_str=\"\"\n  local parens_arr_out_str_len=0\n\
    \  local parens_arr_out_str_idx=0\n  local parens_arr_out_str_char=\"\"\n  local\
    \ parens_arr_out_str_char_prev=\"\"\n  local parens_arr_out_str_char_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev=\"\"\n  local parens_arr_out_str_char_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev=\"\"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev=\"\"\n\
    \  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n\
    \  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_arr_out_str_char_prev\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local current_group=\"\"\n  for (( i=0; i<${#input}; i++ )); do\n    local\
    \ char=${input:$i:1}\n    if [[ $char == \"(\" ]]; then\n      depth=$(( depth\
    \ + 1 ))\n      if [[ $depth -gt $max_depth ]]; then\n        max_depth=$depth\n\
    \      fi\n    elif [[ $char == \")\" ]]; then\n      depth=$(( depth - 1 ))\n\
    \    elif [[ $char == \" \" ]]; then\n      output+=(\"\\\"$max_depth\\\"\")\n\
    \      max_depth=0\n      depth=0\n    fi\n  done\n  output+=(\"\\\"$max_depth\\\
    \"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ level=0\n    local max_level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if [[ $level -gt $max_level ]]; then\n          max_level=$level\n  \
    \      fi\n      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  local current_char\n  local i\n  for ((i=0; i<${#input}; i++)); do\n    current_char=${input:$i:1}\n\
    \    if [[ $current_char == \"(\" ]]; then\n      ((current_depth++))\n      if\
    \ ((current_depth > max_depth)); then\n        max_depth=$current_depth\n    \
    \  fi\n    elif [[ $current_char == \")\" ]]; then\n      ((current_depth--))\n\
    \    fi\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for (( i=0; i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1} == \"(\" ]];\
    \ then\n      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n      ((depth--))\n \
    \   elif [[ ${parens:$i:1} == \" \" ]]; then\n      result+=(\"\\\"$max_depth\\\
    \"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  result+=(\"\\\"$max_depth\\\
    \"\")\n  echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((current_depth++))\n\
    \      if [ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((current_depth--))\n   \
    \ elif [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"$max_depth\\\"\")\n   \
    \   max_depth=0\n      current_depth=0\n    fi\n    ((i++))\n  done\n  output+=(\"\
    \\\"$max_depth\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_depth_arr=()\n  for ((i=0; i<parens_arr_len; i++)); do\n    local\
    \ parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n    local max_depth=0\n\
    \    local curr_depth=0\n    for ((j=0; j<parens_len; j++)); do\n      local char=${parens:$j:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        ((curr_depth++))\n        if\
    \ ((curr_depth > max_depth)); then\n          max_depth=$curr_depth\n        fi\n\
    \      elif [[ \"$char\" == \")\" ]]; then\n        ((curr_depth--))\n      fi\n\
    \    done\n    max_depth_arr+=(\"$max_depth\")\n  done\n  echo \"${max_depth_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ stack=()\n    local max_depth=0\n    local depth=0\n    for ((i=0; i<${#group};\
    \ i++)); do\n      local c=${group:$i:1}\n      if [[ $c == \"(\" ]]; then\n \
    \       stack+=($c)\n        depth=$((depth+1))\n        if [[ $depth -gt $max_depth\
    \ ]]; then\n          max_depth=$depth\n        fi\n      elif [[ $c == \")\"\
    \ ]]; then\n        stack+=($c)\n        depth=$((depth-1))\n      fi\n    done\n\
    \    output+=($max_depth)\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ];\
    \ do\n        local c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          level=$((level+1))\n            if [ $level -gt $max_level ]; then\n\
    \                max_level=$level\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            level=$((level-1))\n        elif [ \"$c\" == \" \" ];\
    \ then\n            output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n\
    \            level=0\n        fi\n        i=$((i+1))\n    done\n    output+=(\"\
    \\\"$max_level\\\"\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_string=$1\n    local parens_array=($parens_string)\n   \
    \ local parens_array_len=${#parens_array[@]}\n    local parens_array_idx=0\n \
    \   local parens_array_val\n    local parens_array_val_len\n    local parens_array_val_idx\n\
    \    local parens_array_val_char\n    local parens_array_val_char_prev\n    local\
    \ parens_array_val_char_next\n    local parens_array_val_char_prev_idx\n    local\
    \ parens_array_val_char_next_idx\n    local parens_array_val_char_prev_parens_level\n\
    \    local parens_array_val_char_next_parens_level\n    local parens_array_val_char_parens_level\n\
    \    local parens_array_val_char_parens_level_max\n    local parens_array_val_char_parens_level_max_idx\n\
    \    local parens_array_val_char_parens_level_max_idx_prev\n    local parens_array_val_char_parens_level_max_idx_next\n\
    \    local parens_array_val_char_parens_level_max_idx_prev_parens_level\n    local\
    \ parens_array_val_char_parens_level_max_idx_next_parens_level\n    local parens_array_val_char_parens_level_max_idx_parens_level\n\
    \    local parens_array_val_char_parens_level_max_idx_parens_level_max\n    local\
    \ parens_array_val_char_parens_level_max_idx_parens_level_max_idx\n    local parens_array_val_char_parens_level_max_idx_parens_level_max_idx_prev\n\
    \    local parens_array_val_char_parens_level_max_id\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_last=0\n  local parens_arr_idx_last_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min=0\n  local parens_arr_idx_last_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min=0\n  local parens_arr_idx_last_min_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min_min=0\n  local parens_arr_idx_last_min_min_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min_min_min=0\n  local parens_arr_idx_last_min_min_min_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min_min_min_min=0\n  local parens_arr_idx_last_min_min_min_min_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min_min_min_min_min=0\n  local parens_arr_idx_last_min_min_min_min_min_min_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last_min_min_min_min_min_min_min=0\n  local parens_arr_idx_last_min_min_min_min_min_min_min_max=$\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=\"$1\"\n    local output=()\n    local max_depth=0\n    local\
    \ curr_depth=0\n    for ((i=0; i<${#input}; i++)); do\n        local char=\"${input:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            ((curr_depth++))\n  \
    \          if ((curr_depth > max_depth)); then\n                max_depth=$curr_depth\n\
    \            fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((curr_depth--))\n\
    \        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_depth\"\
    )\n            max_depth=0\n            curr_depth=0\n        fi\n    done\n \
    \   output+=(\"$max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local c=''\n  for ((i=0; i<${#input}; i++)); do\n    c=${input:$i:1}\n\
    \    if [[ $c == '(' ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ $c == ')' ]]; then\n \
    \     ((depth--))\n    elif [[ $c == ' ' ]]; then\n      output+=(\"\\\"$max_depth\\\
    \"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  output+=(\"\\\"$max_depth\\\
    \"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local curr_depth=0\n\
    \  for (( i=0; i<${#input}; i++ )); do\n    local char=${input:$i:1}\n    if [[\
    \ \"$char\" == \"(\" ]]; then\n      (( curr_depth++ ))\n      if (( curr_depth\
    \ > max_depth )); then\n        max_depth=$curr_depth\n      fi\n    elif [[ \"\
    $char\" == \")\" ]]; then\n      (( curr_depth-- ))\n    elif [[ \"$char\" ==\
    \ \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n      curr_depth=0\n\
    \    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_level=0\n  local cur_level=0\n  local max_level_str=\"\
    \"\n  local cur_level_str=\"\"\n  local result=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local c=${str:$i:1}\n    if [[ $c == \"(\" ]]; then\n      cur_level=$((cur_level+1))\n\
    \      cur_level_str=\"$cur_level_str$c\"\n      if [[ $cur_level -gt $max_level\
    \ ]]; then\n        max_level=$cur_level\n        max_level_str=\"$cur_level_str\"\
    \n      fi\n    elif [[ $c == \")\" ]]; then\n      cur_level=$((cur_level-1))\n\
    \      cur_level_str=\"$cur_level_str$c\"\n    elif [[ $c == \" \" ]]; then\n\
    \      result=\"$result \\\"$max_level\\\"\"\n      max_level=0\n      cur_level=0\n\
    \      max_level_str=\"\"\n      cur_level_str=\"\"\n    fi\n  done\n  if [[ $cur_level\
    \ -gt 0 ]]; then\n    result=\"$result \\\"$max_level\\\"\"\n  fi\n  echo \"[$result]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_string=$1\n  local paren_group\n  local paren_count\n  local\
    \ paren_level\n  local paren_levels\n  local paren_level_max\n  local paren_level_max_str\n\
    \  local paren_levels_str\n  local paren_levels_str_array\n  local paren_levels_str_array_len\n\
    \  local i\n  for paren_group in $input_string; do\n    paren_count=0\n    paren_level=0\n\
    \    paren_levels=\"\"\n    paren_level_max=0\n    for ((i=0; i<${#paren_group};\
    \ i++)); do\n      if [[ \"${paren_group:$i:1}\" == \"(\" ]]; then\n        ((paren_count++))\n\
    \        ((paren_level++))\n        if [[ $paren_level -gt $paren_level_max ]];\
    \ then\n          paren_level_max=$paren_level\n        fi\n      elif [[ \"${paren_group:$i:1}\"\
    \ == \")\" ]]; then\n        ((paren_count--))\n        ((paren_level--))\n  \
    \    fi\n      if [[ $paren_count -lt 0 ]]; then\n        echo \"ERROR: Invalid\
    \ input string: $input_string\"\n        return 1\n      fi\n      paren_levels=\"\
    $paren_levels $paren_level\"\n    done\n    if [[ $paren_count -ne 0 ]]; then\n\
    \      echo \"ERROR: Invalid input string: $input_string\"\n      return 1\n \
    \   fi\n    paren_level_max_str=\"\\\"$paren_level_max\\\"\"\n    paren_levels_str=\"\
    [$paren_level_max_str, $paren_levels]\"\n    paren_levels_str_array=\"$paren_levels_str_array\
    \ $paren_levels_str\"\n  done\n  paren_levels_str_array_len=${#paren_levels_str_array[@]}\n\
    \  echo \"[${paren_levels_str_array[@]:1:$paren_levels_str_array_len}]\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local groups=$1\n  local result=()\n  for group in $groups; do\n    local\
    \ max_level=0\n    local level=0\n    for (( i=0; i<${#group}; i++ )); do\n  \
    \    if [[ ${group:$i:1} == \"(\" ]]; then\n        (( level++ ))\n        if\
    \ (( level > max_level )); then\n          max_level=$level\n        fi\n    \
    \  elif [[ ${group:$i:1} == \")\" ]]; then\n        (( level-- ))\n      fi\n\
    \    done\n    result+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_depth=0\n    local depth=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  if [[ ${group:$i:1} == \"(\" ]]; then\n        ((depth++))\n        if ((depth\
    \ > max_depth)); then\n          max_depth=$depth\n        fi\n      elif [[ ${group:$i:1}\
    \ == \")\" ]]; then\n        ((depth--))\n      fi\n    done\n    output+=(\"\\\
    \"$max_depth\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    local char=${input:$i:1}\n\
    \    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n      if [ $level -gt\
    \ $max_level ]; then\n        max_level=$level\n      fi\n    elif [ \"$char\"\
    \ == \")\" ]; then\n      ((level--))\n    elif [ \"$char\" == \" \" ]; then\n\
    \      output+=(\"$max_level\")\n      max_level=0\n      level=0\n    fi\n  \
    \  ((i++))\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_nesting=0\n  local curr_nesting=0\n  local\
    \ result=()\n  for ((i=0; i<${#parens}; i++)); do\n    if [[ ${parens:$i:1} ==\
    \ \"(\" ]]; then\n      ((curr_nesting++))\n      if ((curr_nesting > max_nesting));\
    \ then\n        max_nesting=$curr_nesting\n      fi\n    elif [[ ${parens:$i:1}\
    \ == \")\" ]]; then\n      ((curr_nesting--))\n    elif [[ ${parens:$i:1} == \"\
    \ \" ]]; then\n      result+=(\"\\\"$max_nesting\\\"\")\n      max_nesting=0\n\
    \      curr_nesting=0\n    fi\n  done\n  result+=(\"\\\"$max_nesting\\\"\")\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input_str=$1\n    local output_str=\"\"\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local paren_count_str=\"\"\n    local max_paren_count_str=\"\
    \"\n    for (( i=0; i<${#input_str}; i++ )); do\n        if [[ ${input_str:$i:1}\
    \ == \"(\" ]]; then\n            ((paren_count++))\n            if ((paren_count\
    \ > max_paren_count)); then\n                max_paren_count=$paren_count\n  \
    \          fi\n        elif [[ ${input_str:$i:1} == \")\" ]]; then\n         \
    \   ((paren_count--))\n        fi\n        if [[ ${input_str:$i:1} == \" \" ]];\
    \ then\n            max_paren_count_str=\"$max_paren_count_str \\\"$max_paren_count\\\
    \"\"\n            paren_count=0\n            max_paren_count=0\n        fi\n \
    \   done\n    max_paren_count_str=\"$max_paren_count_str \\\"$max_paren_count\\\
    \"\"\n    echo \"[$max_paren_count_str]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_str=$1\n  local output_str=\"\"\n  local paren_count=0\n  local\
    \ max_paren_count=0\n  local i=0\n  local char=\"\"\n  local char_code=0\n  local\
    \ len=${#input_str}\n  for ((i=0; i<len; i++)); do\n    char=${input_str:$i:1}\n\
    \    char_code=$(printf \"%d\" \"'$char\")\n    if [[ $char_code == 40 ]]; then\n\
    \      ((paren_count++))\n      if [[ $paren_count -gt $max_paren_count ]]; then\n\
    \        max_paren_count=$paren_count\n      fi\n    elif [[ $char_code == 41\
    \ ]]; then\n      ((paren_count--))\n    elif [[ $char_code == 32 ]]; then\n \
    \     output_str+=\"\\\"$max_paren_count\\\" \"\n      max_paren_count=0\n   \
    \ fi\n  done\n  output_str+=\"\\\"$max_paren_count\\\"\"\n  echo \"[$output_str]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting_level=0\n  local\
    \ current_nesting_level=0\n  local i=0\n  local char=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    char=${input:$i:1}\n    if [ \"$char\" == \"\
    (\" ]; then\n      current_nesting_level=$((current_nesting_level + 1))\n    \
    \  if [ $current_nesting_level -gt $max_nesting_level ]; then\n        max_nesting_level=$current_nesting_level\n\
    \      fi\n    elif [ \"$char\" == \")\" ]; then\n      current_nesting_level=$((current_nesting_level\
    \ - 1))\n    elif [ \"$char\" == \" \" ]; then\n      output+=($max_nesting_level)\n\
    \      max_nesting_level=0\n      current_nesting_level=0\n    fi\n    i=$((i\
    \ + 1))\n  done\n  output+=($max_nesting_level)\n  echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local nesting=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ $char == \"(\" ]]; then\n      (( nesting++ ))\n      (( max_nesting\
    \ = max_nesting > nesting ? max_nesting : nesting ))\n    elif [[ $char == \"\
    )\" ]]; then\n      (( nesting-- ))\n    elif [[ $char == \" \" ]]; then\n   \
    \   output+=(\"$max_nesting\")\n      max_nesting=0\n      nesting=0\n    fi\n\
    \  done\n  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local parens_array=($parens)\n  local parens_array_len=${#parens_array[@]}\n\
    \  local max_nesting_level=0\n  local nesting_level=0\n  local output_array=()\n\
    \  for (( i=0; i<${parens_array_len}; i++ )); do\n    local parens_str=${parens_array[$i]}\n\
    \    local parens_str_len=${#parens_str}\n    for (( j=0; j<${parens_str_len};\
    \ j++ )); do\n      local parens_char=${parens_str:$j:1}\n      if [ \"$parens_char\"\
    \ == \"(\" ]; then\n        nesting_level=$((nesting_level+1))\n        if [ \"\
    $nesting_level\" -gt \"$max_nesting_level\" ]; then\n          max_nesting_level=$nesting_level\n\
    \        fi\n      elif [ \"$parens_char\" == \")\" ]; then\n        nesting_level=$((nesting_level-1))\n\
    \      fi\n    done\n    output_array+=(\"\\\"$max_nesting_level\\\"\")\n    max_nesting_level=0\n\
    \    nesting_level=0\n  done\n  echo ${output_array[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_nesting=0\n    local current_nesting=0\n    for ((i=0; i<${#group}; i++));\
    \ do\n      local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n  \
    \      ((current_nesting++))\n        if ((current_nesting > max_nesting)); then\n\
    \          max_nesting=$current_nesting\n        fi\n      elif [[ $char == \"\
    )\" ]]; then\n        ((current_nesting--))\n      fi\n    done\n    output+=(\"\
    \\\"$max_nesting\\\"\")\n  done\n  echo \"[${output[@]}]\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_val\n  local parens_arr_val_len\n\
    \  local parens_arr_val_idx\n  local parens_arr_val_char\n  local parens_arr_val_char_prev\n\
    \  local parens_arr_val_char_next\n  local parens_arr_val_char_prev_parens_count\n\
    \  local parens_arr_val_char_next_parens_count\n  local parens_arr_val_char_prev_parens_count_max\n\
    \  local parens_arr_val_char_next_parens_count_max\n  local parens_arr_val_char_prev_parens_count_max_idx\n\
    \  local parens_arr_val_char_next_parens_count_max_idx\n  local parens_arr_val_char_prev_parens_count_max_idx_len\n\
    \  local parens_arr_val_char_next_parens_count_max_idx_len\n  local parens_arr_val_char_prev_parens_count_max_idx_len_max\n\
    \  local parens_arr_val_char_next_parens_count_max_idx_len_max\n  local parens_arr_val_char_prev_parens_count_max_idx_len_max_idx\n\
    \  local parens_arr_val_char_next_parens_count_max_idx_len_max_idx\n  local parens_arr_val_char_prev_parens_count_max_idx_len_max_idx_len\n\
    \  local parens_arr_val_char_next_parens_count_max_idx_len_max_idx_len\n  local\
    \ parens_arr_val_char_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local stack=()\n  local level=0\n\
    \  local max_level=0\n  local char\n  local i\n  for ((i=0; i<${#input}; i++));\
    \ do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n      stack+=($char)\n\
    \      level=$((level+1))\n      if [[ \"$level\" -gt \"$max_level\" ]]; then\n\
    \        max_level=$level\n      fi\n    elif [[ \"$char\" == \")\" ]]; then\n\
    \      stack+=($char)\n      level=$((level-1))\n    fi\n  done\n  output+=($max_level)\n\
    \  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=\"$1\"\n  local parens_arr=($parens)\n  local parens_max_depth=()\n\
    \  for paren in \"${parens_arr[@]}\"; do\n    local paren_depth=0\n    local paren_max_depth=0\n\
    \    for (( i=0; i<${#paren}; i++ )); do\n      if [[ \"${paren:$i:1}\" == \"\
    (\" ]]; then\n        ((paren_depth++))\n        if (( paren_depth > paren_max_depth\
    \ )); then\n          paren_max_depth=$paren_depth\n        fi\n      elif [[\
    \ \"${paren:$i:1}\" == \")\" ]]; then\n        ((paren_depth--))\n      fi\n \
    \   done\n    parens_max_depth+=(\"$paren_max_depth\")\n  done\n  echo \"${parens_max_depth[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=\"$1\"\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  for ((i=0; i<${#parens}; i++)); do\n    local char=\"${parens:$i:1}\"\n   \
    \ if [[ \"$char\" == \"(\" ]]; then\n      ((level++))\n      ((max_level = level\
    \ > max_level ? level : max_level))\n    elif [[ \"$char\" == \")\" ]]; then\n\
    \      ((level--))\n    elif [[ \"$char\" == \" \" ]]; then\n      result+=(\"\
    $max_level\")\n      max_level=0\n      level=0\n    fi\n  done\n  result+=(\"\
    $max_level\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_nesting_level=0\n  local nesting_level=0\n\
    \  local output=\"\"\n  for (( i=0; i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1}\
    \ == \"(\" ]]; then\n      (( nesting_level++ ))\n      if (( nesting_level >\
    \ max_nesting_level )); then\n        max_nesting_level=$nesting_level\n     \
    \ fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n      (( nesting_level-- ))\n\
    \    elif [[ ${parens:$i:1} == \" \" ]]; then\n      output=\"$output \\\"$max_nesting_level\\\
    \"\"\n      max_nesting_level=0\n      nesting_level=0\n    fi\n  done\n  output=\"\
    $output \\\"$max_nesting_level\\\"\"\n  echo \"[$output]\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local parens_arr=($parens)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_level=0\n  local nesting_level=0\n  local i=0\n  local j=0\n\
    \  local output=()\n  for ((i=0; i<parens_arr_len; i++)); do\n    local parens_str=${parens_arr[$i]}\n\
    \    local parens_str_len=${#parens_str}\n    for ((j=0; j<parens_str_len; j++));\
    \ do\n      local char=${parens_str:$j:1}\n      if [ \"$char\" == \"(\" ]; then\n\
    \        ((nesting_level++))\n        if [ $nesting_level -gt $max_nesting_level\
    \ ]; then\n          max_nesting_level=$nesting_level\n        fi\n      elif\
    \ [ \"$char\" == \")\" ]; then\n        ((nesting_level--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_nesting_level\\\"\")\n    max_nesting_level=0\n    nesting_level=0\n\
    \  done\n  echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=$1\n  local parens_array=($parens_string)\n  local\
    \ parens_array_len=${#parens_array[@]}\n  local parens_array_index=0\n  local\
    \ parens_array_index_max=$((parens_array_len - 1))\n  local parens_array_index_max_str=$parens_array_index_max\n\
    \  local parens_array_index_str\n  local parens_array_index_str_len\n  local parens_array_index_str_len_max\n\
    \  local parens_array_index_str_len_max_str\n  local parens_array_index_str_len_max_str_len\n\
    \  local parens_array_index_str_len_max_str_len_max\n  local parens_array_index_str_len_max_str_len_max_str\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len\n  local parens_array_index_str_len_max_str_len_max_str_len_max\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len_max_str\n  local parens_array_index_str_len_max_str_len_max_str_len_max_str_len\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len_max_str_len_max\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len_max_str_len_max_str\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len_max_str_len_max_str_len\n\
    \  local parens_array_index_str_len_max_str_len_max_str_len_max_str_len_max_str_len_max\n\
    \  local parens_array_index_str_len_max_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_groups=($1)\n  local -a parens_levels=()\n  for parens_group\
    \ in \"${parens_groups[@]}\"; do\n    local parens_level=0\n    local max_parens_level=0\n\
    \    for ((i=0; i<${#parens_group}; i++)); do\n      if [[ \"${parens_group:$i:1}\"\
    \ == \"(\" ]]; then\n        ((parens_level++))\n        if ((parens_level > max_parens_level));\
    \ then\n          max_parens_level=$parens_level\n        fi\n      elif [[ \"\
    ${parens_group:$i:1}\" == \")\" ]]; then\n        ((parens_level--))\n      fi\n\
    \    done\n    parens_levels+=(\"$max_parens_level\")\n  done\n  echo \"${parens_levels[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_nesting=0\n        local current_nesting=0\n        for ((i=0;\
    \ i<${#group}; i++)); do\n            local char=${group:$i:1}\n            if\
    \ [[ $char == \"(\" ]]; then\n                ((current_nesting++))\n        \
    \        if ((current_nesting > max_nesting)); then\n                    max_nesting=$current_nesting\n\
    \                fi\n            elif [[ $char == \")\" ]]; then\n           \
    \     ((current_nesting--))\n            fi\n        done\n        output+=(\"\
    \\\"$max_nesting\\\"\")\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  for group in $input; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#group}; i++)); do\n\
    \      local char=\"${group:$i:1}\"\n      if [[ \"$char\" == \"(\" ]]; then\n\
    \        ((nesting++))\n        if ((nesting > max_nesting)); then\n         \
    \ max_nesting=$nesting\n        fi\n      elif [[ \"$char\" == \")\" ]]; then\n\
    \        ((nesting--))\n      fi\n    done\n    output+=(\"$max_nesting\")\n \
    \ done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c\n  while [ $i -lt ${#input} ]; do\n    c=${input:$i:1}\n\
    \    if [ \"$c\" == \"(\" ]; then\n      ((level++))\n      if [ $level -gt $max_level\
    \ ]; then\n        max_level=$level\n      fi\n    elif [ \"$c\" == \")\" ]; then\n\
    \      ((level--))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"$max_level\"\
    )\n      max_level=0\n      level=0\n    fi\n    ((i++))\n  done\n  output+=(\"\
    $max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  for (( i=0; i<${parens_arr_len}; i++ )); do\n \
    \   local parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n    local\
    \ max_nesting=0\n    local nesting=0\n    for (( j=0; j<${parens_len}; j++ ));\
    \ do\n      local char=${parens:$j:1}\n      if [[ \"$char\" == \"(\" ]]; then\n\
    \        ((nesting++))\n        if [[ \"$nesting\" -gt \"$max_nesting\" ]]; then\n\
    \          max_nesting=$nesting\n        fi\n      elif [[ \"$char\" == \")\"\
    \ ]]; then\n        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nesting=0\n\
    \  local max_nesting_idx=0\n  for ((i=0; i<${#parens_arr[@]}; i++)); do\n    local\
    \ parens=${parens_arr[$i]}\n    local nesting=$(parse_parens \"$parens\")\n  \
    \  if [ \"$nesting\" -gt \"$max_nesting\" ]; then\n      max_nesting=$nesting\n\
    \      max_nesting_idx=$i\n    fi\n  done\n  echo \"$max_nesting_idx\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpp0__83b7.sh: line 14: parse_parens: command not found\n/tmp/tmpp0__83b7.sh:
    line 15: [: : integer expression expected\n/tmp/tmpp0__83b7.sh: line 14: parse_parens:
    command not found\n/tmp/tmpp0__83b7.sh: line 15: [: : integer expression expected\n/tmp/tmpp0__83b7.sh:
    line 14: parse_parens: command not found\n/tmp/tmpp0__83b7.sh: line 15: [: : integer
    expression expected\n/tmp/tmpp0__83b7.sh: line 14: parse_parens: command not found\n/tmp/tmpp0__83b7.sh:
    line 15: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_nesting=0\n    local\
    \ nesting=0\n    local i=0\n    local c=''\n    for ((i=0; i<${#input}; i++));\
    \ do\n        c=${input:$i:1}\n        if [[ \"$c\" == \"(\" ]]; then\n      \
    \      ((nesting++))\n            if ((nesting > max_nesting)); then\n       \
    \         max_nesting=$nesting\n            fi\n        elif [[ \"$c\" == \")\"\
    \ ]]; then\n            ((nesting--))\n        elif [[ \"$c\" == \" \" ]]; then\n\
    \            output+=(\"\\\"$max_nesting\\\"\")\n            max_nesting=0\n \
    \           nesting=0\n        fi\n    done\n    output+=(\"\\\"$max_nesting\\\
    \"\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=\"$1\"\n    local parens_arr=()\n    local parens_arr_len=0\n\
    \    local parens_max_level=0\n    local parens_level=0\n    local parens_char=''\n\
    \    local parens_i=0\n    local parens_j=0\n    local parens_k=0\n    local parens_l=0\n\
    \    local parens_m=0\n    local parens_n=0\n    local parens_o=0\n    local parens_p=0\n\
    \    local parens_q=0\n    local parens_r=0\n    local parens_s=0\n    local parens_t=0\n\
    \    local parens_u=0\n    local parens_v=0\n    local parens_w=0\n    local parens_x=0\n\
    \    local parens_y=0\n    local parens_z=0\n    local parens_A=0\n    local parens_B=0\n\
    \    local parens_C=0\n    local parens_D=0\n    local parens_E=0\n    local parens_F=0\n\
    \    local parens_G=0\n    local parens_H=0\n    local parens_I=0\n    local parens_J=0\n\
    \    local parens_K=0\n    local parens_L=0\n    local parens_M=0\n    local parens_N=0\n\
    \    local parens_O=0\n    local parens_P=0\n    local parens_Q=0\n    local parens_R=0\n\
    \    local parens_S=0\n    local parens_T=0\n    local parens_U=0\n    local parens_V=0\n\
    \    local parens_W=0\n    local parens_X=0\n    local parens_Y=0\n    local parens_Z=0\n\
    \    local parens\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=()\n  local parens_arr_len=0\n\
    \  local parens_arr_idx=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local curr_nesting=0\n\
    \  local curr_char\n  for (( i=0; i<${#input}; i++ )); do\n    curr_char=\"${input:$i:1}\"\
    \n    if [[ \"$curr_char\" == \"(\" ]]; then\n      (( curr_nesting++ ))\n   \
    \   if (( curr_nesting > max_nesting )); then\n        max_nesting=$curr_nesting\n\
    \      fi\n    elif [[ \"$curr_char\" == \")\" ]]; then\n      (( curr_nesting--\
    \ ))\n    elif [[ \"$curr_char\" == \" \" ]]; then\n      output+=(\"$max_nesting\"\
    )\n      max_nesting=0\n      curr_nesting=0\n    fi\n  done\n  output+=(\"$max_nesting\"\
    )\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=\"$1\"\n  local parens_array\n  IFS=' ' read -r -a\
    \ parens_array <<< \"$parens_string\"\n  local parens_array_length=${#parens_array[@]}\n\
    \  local max_nesting_array=()\n  for ((i=0; i<parens_array_length; i++)); do\n\
    \    local parens_string=\"${parens_array[$i]}\"\n    local parens_string_length=${#parens_string}\n\
    \    local max_nesting=0\n    local current_nesting=0\n    for ((j=0; j<parens_string_length;\
    \ j++)); do\n      local current_char=\"${parens_string:$j:1}\"\n      if [[ \"\
    $current_char\" == \"(\" ]]; then\n        current_nesting=$((current_nesting\
    \ + 1))\n      elif [[ \"$current_char\" == \")\" ]]; then\n        current_nesting=$((current_nesting\
    \ - 1))\n      fi\n      if [[ \"$current_nesting\" -gt \"$max_nesting\" ]]; then\n\
    \        max_nesting=\"$current_nesting\"\n      fi\n    done\n    max_nesting_array+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_array[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=()\n  local max_level=0\n \
    \ local level=0\n  local parens_str_len=${#parens_str}\n  local i=0\n  while [[\
    \ $i -lt $parens_str_len ]]; do\n    local char=${parens_str:$i:1}\n    if [[\
    \ \"$char\" == \"(\" ]]; then\n      ((level++))\n      ((max_level = max_level\
    \ < level ? level : max_level))\n    elif [[ \"$char\" == \")\" ]]; then\n   \
    \   ((level--))\n    elif [[ \"$char\" == \" \" ]]; then\n      parens_arr+=(\"\
    $max_level\")\n      max_level=0\n      level=0\n    fi\n    ((i++))\n  done\n\
    \  parens_arr+=(\"$max_level\")\n  echo \"${parens_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local result=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    result+=(\"\\\"$max_level\\\"\")\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local char=''\n    local len=${#input}\n    while\
    \ [ $i -lt $len ]; do\n        char=${input:$i:1}\n        if [ \"$char\" == \"\
    (\" ]; then\n            ((depth++))\n            if [ $depth -gt $max_depth ];\
    \ then\n                max_depth=$depth\n            fi\n        elif [ \"$char\"\
    \ == \")\" ]; then\n            ((depth--))\n        fi\n        ((i++))\n   \
    \ done\n    echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=$1\n  local parens_array=($parens_string)\n  local\
    \ parens_array_len=${#parens_array[@]}\n  local parens_array_index=0\n  local\
    \ parens_array_index_max=$((parens_array_len - 1))\n  local parens_array_index_last=$parens_array_index_max\n\
    \  local parens_array_index_last_parens_len=0\n  local parens_array_index_last_parens_len_max=0\n\
    \  local parens_array_index_last_parens_len_max_index=0\n  local parens_array_index_last_parens_len_max_index_max=0\n\
    \  local parens_array_index_last_parens_len_max_index_max_len=0\n  local parens_array_index_last_parens_len_max_index_max_len_max=0\n\
    \  local parens_array_index_last_parens_len_max_index_max_len_max_index=0\n  local\
    \ parens_array_index_last_parens_len_max_index_max_len_max_index_max=0\n  local\
    \ parens_array_index_last_parens_len_max_index_max_len_max_index_max_len=0\n \
    \ local parens_array_index_last_parens_len_max_index_max_len_max_index_max_len_max=0\n\
    \  local parens_array_index_last_parens_len_max_index_max_len_max_index_max_len_max_index=0\n\
    \  local parens_array_index_last_parens_len_max_index_max_len_max_index_max_len_max_index_max=0\n\
    \  local parens_array_index_last_parens_len_max_index_max_len_max_index_max_len_max_index_max_len=0\n\
    \  local parens_array\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=\"$1\"\n    local parens_arr=($parens_str)\n    local\
    \ max_nesting_arr=()\n    for parens in \"${parens_arr[@]}\"; do\n        local\
    \ max_nesting=0\n        local nesting=0\n        for ((i=0; i<${#parens}; i++));\
    \ do\n            if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n               \
    \ ((nesting++))\n                if [[ $nesting -gt $max_nesting ]]; then\n  \
    \                  max_nesting=$nesting\n                fi\n            elif\
    \ [[ \"${parens:$i:1}\" == \")\" ]]; then\n                ((nesting--))\n   \
    \         fi\n        done\n        max_nesting_arr+=(\"$max_nesting\")\n    done\n\
    \    echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nested_parens=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local nested_parens=0\n    local\
    \ parens_len=${#parens}\n    for ((i=0; i<parens_len; i++)); do\n      local char=${parens:$i:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        ((nested_parens++))\n      elif\
    \ [[ \"$char\" == \")\" ]]; then\n        ((nested_parens--))\n      fi\n    done\n\
    \    max_nested_parens+=(\"$nested_parens\")\n  done\n  echo \"${max_nested_parens[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_end=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_idx\n\
    \  local parens_arr_idx_str_idx_end\n  local parens_arr_idx_str_idx_str\n  local\
    \ parens_arr_idx_str_idx_str_len\n  local parens_arr_idx_str_idx_str_idx\n  local\
    \ parens_arr_idx_str_idx_str_idx_end\n  local parens_arr_idx_str_idx_str_idx_str\n\
    \  local parens_arr_idx_str_idx_str_idx_str_len\n  local parens_arr_idx_str_idx_str_idx_str_idx\n\
    \  local parens_arr_idx_str_idx_str_idx_str_idx_end\n  local parens_arr_idx_str_idx_str_idx_str_idx_str\n\
    \  local parens_arr_idx_str_idx_str_idx_str_idx_str_len\n  local parens_arr_idx_str_idx_str_idx_str_idx_str_idx\n\
    \  local parens_arr_idx_str_idx_str_idx_str_idx_str_idx_end\n  local parens_arr_idx_str_idx_str_idx_str_idx_str_idx_str\n\
    \  local parens_arr_idx_str_idx_str_idx_str_idx_str_\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            level=$((level + 1))\n            if [ $level -gt $max_level\
    \ ]; then\n                max_level=$level\n            fi\n        elif [ \"\
    $c\" == \")\" ]; then\n            level=$((level - 1))\n        elif [ \"$c\"\
    \ == \" \" ]; then\n            output+=(\"\\\"$max_level\\\"\")\n           \
    \ max_level=0\n            level=0\n        fi\n        i=$((i + 1))\n    done\n\
    \    output+=(\"\\\"$max_level\\\"\")\n    echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_nesting=0\n  local nesting=0\n  local max_nesting_groups=()\n\
    \  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n    if [[\
    \ \"$char\" == \"(\" ]]; then\n      ((nesting++))\n    elif [[ \"$char\" == \"\
    )\" ]]; then\n      ((nesting--))\n    elif [[ \"$char\" == \" \" ]]; then\n \
    \     if [[ \"$nesting\" -gt \"$max_nesting\" ]]; then\n        max_nesting=$nesting\n\
    \        max_nesting_groups=(\"$nesting\")\n      elif [[ \"$nesting\" -eq \"\
    $max_nesting\" ]]; then\n        max_nesting_groups+=(\"$nesting\")\n      fi\n\
    \      nesting=0\n    fi\n  done\n  echo \"${max_nesting_groups[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local paren_groups=($parens)\n    local paren_group\n\
    \    local max_depth\n    local depth\n    local char\n    local i\n    for paren_group\
    \ in \"${paren_groups[@]}\"; do\n        max_depth=0\n        depth=0\n      \
    \  for ((i=0; i<${#paren_group}; i++)); do\n            char=${paren_group:$i:1}\n\
    \            if [[ $char == \"(\" ]]; then\n                ((depth++))\n    \
    \            if ((depth > max_depth)); then\n                    max_depth=$depth\n\
    \                fi\n            elif [[ $char == \")\" ]]; then\n           \
    \     ((depth--))\n            fi\n        done\n        echo -n \"\\\"$max_depth\\\
    \" \"\n    done\n    echo\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ level=0\n    local max_level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ $char == \"(\" ]]; then\n      ((level++))\n      if (( level > max_level\
    \ )); then\n        max_level=$level\n      fi\n    elif [[ $char == \")\" ]];\
    \ then\n      ((level--))\n    elif [[ $char == \" \" ]]; then\n      output+=(\"\
    $max_level\")\n      max_level=0\n      level=0\n    fi\n  done\n  output+=(\"\
    $max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_level=0\n        local level=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            local ch=${group:$i:1}\n            if [[ $ch == \"(\"\
    \ ]]; then\n                ((level++))\n                if ((level > max_level));\
    \ then\n                    max_level=$level\n                fi\n           \
    \ elif [[ $ch == \")\" ]]; then\n                ((level--))\n            fi\n\
    \        done\n        output+=($max_level)\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_nesting=0\n    local\
    \ nesting=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while\
    \ [ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            nesting=$((nesting + 1))\n            if [ $nesting -gt $max_nesting\
    \ ]; then\n                max_nesting=$nesting\n            fi\n        elif\
    \ [ \"$c\" == \")\" ]; then\n            nesting=$((nesting - 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"$max_nesting\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      (( level++ ))\n      (( max_level\
    \ = max_level < level ? level : max_level ))\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      (( level-- ))\n    fi\n  done\n  echo \"$max_level\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n    local parens_len=${#parens_arr[@]}\n\
    \    local parens_idx=0\n    local parens_nesting=0\n    local parens_max_nesting=0\n\
    \    local parens_max_nesting_arr=()\n    local parens_max_nesting_arr_idx=0\n\
    \    local parens_max_nesting_arr_len=0\n    local parens_max_nesting_arr_str=\"\
    \"\n    local parens_max_nesting_arr_str_len=0\n    local parens_max_nesting_arr_str_idx=0\n\
    \    local parens_max_nesting_arr_str_substr=\"\"\n    local parens_max_nesting_arr_str_substr_len=0\n\
    \    local parens_max_nesting_arr_str_substr_idx=0\n    local parens_max_nesting_arr_str_substr_char=\"\
    \"\n    local parens_max_nesting_arr_str_substr_char_idx=0\n    local parens_max_nesting_arr_str_substr_char_len=0\n\
    \    local parens_max_nesting_arr_str_substr_char_arr=()\n    local parens_max_nesting_arr_str_substr_char_arr_idx=0\n\
    \    local parens_max_nesting_arr_str_substr_char_arr_len=0\n    local parens_max_nesting_arr_str_substr_char_arr_str=\"\
    \"\n    local parens_max_nesting_arr_str_substr_char_arr_str_len=0\n    local\
    \ parens_max_nesting_arr_str_substr_char_arr_str_idx=0\n    local parens_max_nesting_arr_str_substr_char_arr_str_substr=\"\
    \"\n    local parens_max\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#group}; i++)); do\n\
    \      local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n       \
    \ ((nesting++))\n        if ((nesting > max_nesting)); then\n          max_nesting=$nesting\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        ((nesting--))\n  \
    \    fi\n    done\n    output+=(\"\\\"$max_nesting\\\"\")\n  done\n  echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((level++))\n  \
    \    if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    fi\n    ((i++))\n\
    \  done\n  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local paren_group_nesting_levels=()\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    local paren_group_nesting_level=0\n\
    \    local paren_group_nesting_level_max=0\n    for (( i=0; i<${#paren_group};\
    \ i++ )); do\n      local char=${paren_group:$i:1}\n      if [[ $char == \"(\"\
    \ ]]; then\n        ((paren_group_nesting_level++))\n        if ((paren_group_nesting_level\
    \ > paren_group_nesting_level_max)); then\n          paren_group_nesting_level_max=$paren_group_nesting_level\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        ((paren_group_nesting_level--))\n\
    \      fi\n    done\n    paren_group_nesting_levels+=(\"$paren_group_nesting_level_max\"\
    )\n  done\n  echo \"${paren_group_nesting_levels[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_depth=0\n        local depth=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            if [[ ${group:$i:1} == \"(\" ]]; then\n             \
    \   ((depth++))\n                if ((depth > max_depth)); then\n            \
    \        max_depth=$depth\n                fi\n            elif [[ ${group:$i:1}\
    \ == \")\" ]]; then\n                ((depth--))\n            fi\n        done\n\
    \        output+=(\"\\\"$max_depth\\\"\")\n    done\n    echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  for ((i=0; i<parens_arr_len; i++)); do\n    local\
    \ parens_str=\"${parens_arr[$i]}\"\n    local parens_str_len=${#parens_str}\n\
    \    local max_nesting=0\n    local nesting=0\n    for ((j=0; j<parens_str_len;\
    \ j++)); do\n      local char=\"${parens_str:$j:1}\"\n      if [[ \"$char\" ==\
    \ \"(\" ]]; then\n        ((nesting++))\n        if ((nesting > max_nesting));\
    \ then\n          max_nesting=$nesting\n        fi\n      elif [[ \"$char\" ==\
    \ \")\" ]]; then\n        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ level=0\n    local max_level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${output[@]}]\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  for ((i=0; i<${#input}; i++)); do\n    local c=${input:$i:1}\n    if [[ $c\
    \ == \"(\" ]]; then\n      ((level++))\n      if ((level > max_level)); then\n\
    \        max_level=$level\n      fi\n    elif [[ $c == \")\" ]]; then\n      ((level--))\n\
    \    elif [[ $c == \" \" ]]; then\n      output+=(\"\\\"$max_level\\\"\")\n  \
    \    max_level=0\n      level=0\n    fi\n  done\n  output+=(\"\\\"$max_level\\\
    \"\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for (( i=0; i<${#group}; i++ )); do\n  \
    \    if [[ \"${group:$i:1}\" == \"(\" ]]; then\n        (( level++ ))\n      \
    \  if (( level > max_level )); then\n          max_level=$level\n        fi\n\
    \      elif [[ \"${group:$i:1}\" == \")\" ]]; then\n        (( level-- ))\n  \
    \    fi\n    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for (( i=0; i<${#group}; i++ )); do\n  \
    \    if [[ ${group:$i:1} == \"(\" ]]; then\n        (( level++ ))\n        if\
    \ (( level > max_level )); then\n          max_level=$level\n        fi\n    \
    \  elif [[ ${group:$i:1} == \")\" ]]; then\n        (( level-- ))\n      fi\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_arr\n  local -a parens_arr_len\n  local -a parens_arr_max_len\n\
    \  local -a parens_arr_max_len_idx\n  local -a parens_arr_max_len_idx_len\n  local\
    \ -a parens_arr_max_len_idx_len_max\n  local -a parens_arr_max_len_idx_len_max_idx\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len\n  local -a parens_arr_max_len_idx_len_max_idx_len_max\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx\n  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max\n  local -a\
    \ parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max_idx\n  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max_idx_len\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max_idx_len_max\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max_idx_len_max_idx\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_idx_len_max_idx_len_max_idx_len\n\
    \  local -a parens_arr_max_len_idx_len_max_idx_len_max_id\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_level=0\n        local level=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            local char=${group:$i:1}\n            if [[ $char ==\
    \ \"(\" ]]; then\n                level=$((level+1))\n            elif [[ $char\
    \ == \")\" ]]; then\n                level=$((level-1))\n            fi\n    \
    \        if [[ $level -gt $max_level ]]; then\n                max_level=$level\n\
    \            fi\n        done\n        output+=(\"\\\"$max_level\\\"\")\n    done\n\
    \    echo \"[${output[@]}]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local parens_arr=($parens)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_min=0\n  local parens_arr_idx_mid=$((parens_arr_len /\
    \ 2))\n  local parens_arr_idx_mid_max=$((parens_arr_len - 1))\n  local parens_arr_idx_mid_min=0\n\
    \  local parens_arr_idx_mid_mid=$((parens_arr_len / 2))\n  local parens_arr_idx_mid_mid_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_mid_mid_min=0\n  local parens_arr_idx_mid_mid_mid=$((parens_arr_len\
    \ / 2))\n  local parens_arr_idx_mid_mid_mid_max=$((parens_arr_len - 1))\n  local\
    \ parens_arr_idx_mid_mid_mid_min=0\n  local parens_arr_idx_mid_mid_mid_mid=$((parens_arr_len\
    \ / 2))\n  local parens_arr_idx_mid_mid_mid_mid_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_mid_mid_mid_mid_min=0\n  local parens_arr_idx_mid_mid_mid_mid_mid=$((parens_arr_len\
    \ / 2))\n  local parens_arr_idx_mid_mid_mid_mid_mid_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_mid_mid_mid_mid_mid_min=0\n  local parens_arr_idx_mid_mid_mid_mid_mid_mid=$\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  if [[ ${group:$i:1} == \"(\" ]]; then\n        ((level++))\n        if ((level\
    \ > max_level)); then\n          max_level=$level\n        fi\n      elif [[ ${group:$i:1}\
    \ == \")\" ]]; then\n        ((level--))\n      fi\n    done\n    output+=(\"\\\
    \"$max_level\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_nesting=0\n        local current_nesting=0\n        for ((i=0;\
    \ i<${#group}; i++)); do\n            if [[ ${group:$i:1} == \"(\" ]]; then\n\
    \                ((current_nesting++))\n                if ((current_nesting >\
    \ max_nesting)); then\n                    max_nesting=$current_nesting\n    \
    \            fi\n            elif [[ ${group:$i:1} == \")\" ]]; then\n       \
    \         ((current_nesting--))\n            fi\n        done\n        output+=(\"\
    \\\"$max_nesting\\\"\")\n    done\n    echo \"[${output[@]}]\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  for (( i=0; i<${#input}; i++ )); do\n    local char=${input:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth\
    \ > max_depth)); then\n        max_depth=$current_depth\n      fi\n    elif [[\
    \ $char == \")\" ]]; then\n      ((current_depth--))\n    elif [[ $char == \"\
    \ \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n      current_depth=0\n\
    \    fi\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local max_nesting=0\n\
    \  local max_nesting_group=0\n  local i=0\n  for paren_group in \"${paren_groups[@]}\"\
    ; do\n    local nesting=0\n    local paren_count=0\n    for ((i=0; i<${#paren_group};\
    \ i++)); do\n      if [[ \"${paren_group:$i:1}\" == \"(\" ]]; then\n        paren_count=$((paren_count+1))\n\
    \        if [[ $paren_count -gt $nesting ]]; then\n          nesting=$paren_count\n\
    \        fi\n      elif [[ \"${paren_group:$i:1}\" == \")\" ]]; then\n       \
    \ paren_count=$((paren_count-1))\n      fi\n    done\n    if [[ $nesting -gt $max_nesting\
    \ ]]; then\n      max_nesting=$nesting\n      max_nesting_group=$((max_nesting_group+1))\n\
    \    fi\n    echo \"\\\"$nesting\\\"\"\n  done\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_nesting=0\n  local nesting=0\n  local max_nesting_list=()\n\
    \  for (( i=0; i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1} == \"(\" ]];\
    \ then\n      ((nesting++))\n      if ((nesting > max_nesting)); then\n      \
    \  max_nesting=$nesting\n      fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n\
    \      ((nesting--))\n      if ((nesting == 0)); then\n        max_nesting_list+=(\"\
    $max_nesting\")\n        max_nesting=0\n      fi\n    fi\n  done\n  echo \"${max_nesting_list[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  for ((i=0; i<${#input}; i++)); do\n    local char=${input:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((current_nesting++))\n      if ((current_nesting\
    \ > max_nesting)); then\n        max_nesting=$current_nesting\n      fi\n    elif\
    \ [[ $char == \")\" ]]; then\n      ((current_nesting--))\n    elif [[ $char ==\
    \ \" \" ]]; then\n      output+=(\"\\\"$max_nesting\\\"\")\n      max_nesting=0\n\
    \      current_nesting=0\n    fi\n  done\n  output+=(\"\\\"$max_nesting\\\"\"\
    )\n  echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_count=0\n  local max_paren_count=0\n  local\
    \ paren_count_list=()\n  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n\
    \    if [[ $char == \"(\" ]]; then\n      ((paren_count++))\n      if ((paren_count\
    \ > max_paren_count)); then\n        max_paren_count=$paren_count\n      fi\n\
    \    elif [[ $char == \")\" ]]; then\n      ((paren_count--))\n    elif [[ $char\
    \ == \" \" ]]; then\n      paren_count_list+=(\"$max_paren_count\")\n      max_paren_count=0\n\
    \      paren_count=0\n    fi\n  done\n  paren_count_list+=(\"$max_paren_count\"\
    )\n  echo \"${paren_count_list[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local paren_group\n\
    \  local paren_group_len\n  local paren_group_len_max\n  local paren_group_len_max_idx\n\
    \  local paren_group_len_max_idx_list\n  local paren_group_len_max_idx_list_str\n\
    \  local paren_group_len_max_idx_list_str_len\n  local paren_group_len_max_idx_list_str_len_max\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx\n  local paren_group_len_max_idx_list_str_len_max_idx_list\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str\n  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max\n  local\
    \ paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max_idx\n  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max_idx_list\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max_idx_list_str\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max_idx_list_str_len\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str_len_max_idx_list_str_len_max\n\
    \  local paren_group_len_max_idx_list_str_len_max_idx_list_str_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=${input:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            (( depth++ ))\n          \
    \  if (( depth > max_depth )); then\n                max_depth=$depth\n      \
    \      fi\n        elif [[ $char == \")\" ]]; then\n            (( depth-- ))\n\
    \        elif [[ $char == \" \" ]]; then\n            output+=(\"\\\"$max_depth\\\
    \"\")\n            max_depth=0\n            depth=0\n        fi\n    done\n  \
    \  output+=(\"\\\"$max_depth\\\"\")\n    echo ${output[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local i=0\n  local char=''\n  local len=${#input}\n  while [ $i -lt $len ];\
    \ do\n    char=${input:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      ((current_nesting++))\n\
    \      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$char\" == \")\" ]; then\n      ((current_nesting--))\n\
    \    elif [ \"$char\" == \" \" ]; then\n      output+=(\"$max_nesting\")\n   \
    \   max_nesting=0\n      current_nesting=0\n    fi\n    ((i++))\n  done\n  output+=(\"\
    $max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local str=$1\n  local paren_count=0\n  local max_paren_count=0\n  local\
    \ max_paren_count_list=()\n  local char\n  for (( i=0; i<${#str}; i++ )); do\n\
    \    char=${str:$i:1}\n    if [[ $char == \"(\" ]]; then\n      (( paren_count++\
    \ ))\n      if (( paren_count > max_paren_count )); then\n        max_paren_count=$paren_count\n\
    \      fi\n    elif [[ $char == \")\" ]]; then\n      (( paren_count-- ))\n  \
    \  elif [[ $char == \" \" ]]; then\n      max_paren_count_list+=($max_paren_count)\n\
    \      max_paren_count=0\n      paren_count=0\n    fi\n  done\n  max_paren_count_list+=($max_paren_count)\n\
    \  echo ${max_paren_count_list[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nesting_arr=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local max_nesting=0\n    local\
    \ nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n      local char=\"${parens:$i:1}\"\
    \n      if [[ \"$char\" == \"(\" ]]; then\n        ((nesting++))\n        if ((nesting\
    \ > max_nesting)); then\n          max_nesting=$nesting\n        fi\n      elif\
    \ [[ \"$char\" == \")\" ]]; then\n        ((nesting--))\n      fi\n    done\n\
    \    max_nesting_arr+=(\"$max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  local current_char=''\n  local i=0\n  local len=${#input}\n  while [ $i -lt\
    \ $len ]; do\n    current_char=\"${input:$i:1}\"\n    if [ \"$current_char\" ==\
    \ \"(\" ]; then\n      current_depth=$((current_depth + 1))\n      if [ $current_depth\
    \ -gt $max_depth ]; then\n        max_depth=$current_depth\n      fi\n    elif\
    \ [ \"$current_char\" == \")\" ]; then\n      current_depth=$((current_depth -\
    \ 1))\n    fi\n    i=$((i + 1))\n  done\n  echo \"$max_depth\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_depth=0\n    local depth=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((depth++))\n\
    \        if ((depth > max_depth)); then\n          max_depth=$depth\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((depth--))\n      fi\n    done\n\
    \    output+=(\"\\\"$max_depth\\\"\")\n  done\n  echo \"[${output[@]}]\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local parens_arr=($parens)\n    local parens_arr_len=${#parens_arr[@]}\n\
    \    local max_nesting=0\n    local nesting=0\n    local parens_arr_out=()\n \
    \   for ((i=0; i<parens_arr_len; i++)); do\n        local parens_str=${parens_arr[$i]}\n\
    \        local parens_str_len=${#parens_str}\n        for ((j=0; j<parens_str_len;\
    \ j++)); do\n            local char=${parens_str:$j:1}\n            if [ \"$char\"\
    \ == \"(\" ]; then\n                nesting=$((nesting+1))\n            elif [\
    \ \"$char\" == \")\" ]; then\n                nesting=$((nesting-1))\n       \
    \     fi\n            if [ $nesting -gt $max_nesting ]; then\n               \
    \ max_nesting=$nesting\n            fi\n        done\n        parens_arr_out+=($max_nesting)\n\
    \        max_nesting=0\n        nesting=0\n    done\n    echo ${parens_arr_out[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_array\n  local -a parens_depth\n  local -a parens_max_depth\n\
    \  local parens_string=\"$1\"\n  local parens_string_len=${#parens_string}\n \
    \ local parens_string_idx=0\n  local parens_string_char\n  local parens_string_char_prev\n\
    \  local parens_string_char_next\n  local parens_string_char_prev_idx\n  local\
    \ parens_string_char_next_idx\n  local parens_string_char_prev_prev\n  local parens_string_char_next_next\n\
    \  local parens_string_char_prev_prev_idx\n  local parens_string_char_next_next_idx\n\
    \  local parens_string_char_prev_prev_prev\n  local parens_string_char_next_next_next\n\
    \  local parens_string_char_prev_prev_prev_idx\n  local parens_string_char_next_next_next_idx\n\
    \  local parens_string_char_prev_prev_prev_prev\n  local parens_string_char_next_next_next_next\n\
    \  local parens_string_char_prev_prev_prev_prev_idx\n  local parens_string_char_next_next_next_next_idx\n\
    \  local parens_string_char_prev_prev_prev_prev_prev\n  local parens_string_char_next_next_next_next_next\n\
    \  local parens_string_char_prev_prev_prev_prev_prev_idx\n  local parens_string_char_next_next_next_next_next_idx\n\
    \  local parens_string_char_prev_prev_prev_prev_prev_prev\n  local parens_string_char_next_next_next_next_next_next\n\
    \  local parens_string_char_prev_prev_prev_prev_prev_prev_idx\n  local parens_string\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local groups=\"$1\"\n  local group\n  local max_nesting=0\n  local nesting=0\n\
    \  local output=()\n  for group in $groups; do\n    max_nesting=0\n    nesting=0\n\
    \    for ((i=0; i<${#group}; i++)); do\n      if [[ \"${group:$i:1}\" == \"(\"\
    \ ]]; then\n        ((nesting++))\n        if ((nesting > max_nesting)); then\n\
    \          max_nesting=$nesting\n        fi\n      elif [[ \"${group:$i:1}\" ==\
    \ \")\" ]]; then\n        ((nesting--))\n      fi\n    done\n    output+=(\"\\\
    \"$max_nesting\\\"\")\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local len=${#parens}\n  while [ $i -lt $len ]; do\n    local char=${parens:$i:1}\n\
    \    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n      if [ $level -gt\
    \ $max_level ]; then\n        max_level=$level\n      fi\n    elif [ \"$char\"\
    \ == \")\" ]; then\n      ((level--))\n    elif [ \"$char\" == \" \" ]; then\n\
    \      result+=(\"$max_level\")\n      max_level=0\n      level=0\n    fi\n  \
    \  ((i++))\n  done\n  result+=(\"$max_level\")\n  echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_last=$parens_arr_idx_max\n  local parens_arr_idx_first=0\n\
    \  local parens_arr_idx_mid=$((parens_arr_idx_first + parens_arr_idx_last))\n\
    \  local parens_arr_idx_mid_prev=$parens_arr_idx_mid\n  local parens_arr_idx_mid_next=$parens_arr_idx_mid\n\
    \  local parens_arr_idx_mid_prev_prev=$parens_arr_idx_mid\n  local parens_arr_idx_mid_next_next=$parens_arr_idx_mid\n\
    \  local parens_arr_idx_mid_prev_prev_prev=$parens_arr_idx_mid\n  local parens_arr_idx_mid_next_next_next=$parens_arr_idx_mid\n\
    \  local parens_arr_idx_mid_prev_prev_prev_prev=$parens_arr_idx_mid\n  local parens_arr_idx_mid_next_next_next_next=$parens_arr_idx_mid\n\
    \  local parens_arr_idx_mid_prev_prev_prev_prev_prev=$parens_arr_idx_mid\n  local\
    \ parens_arr_idx_mid_next_next_next_next_next=$parens_arr_idx_mid\n  local parens_arr_idx_mid_prev_prev_prev_prev_prev_prev=$parens_arr_idx_mid\n\
    \  local parens_arr_idx_mid_next_next_next_next_next_next=$parens_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local groups=($input)\n  local result=()\n  for group\
    \ in \"${groups[@]}\"; do\n    local max_nesting=0\n    local nesting=0\n    for\
    \ ((i=0; i<${#group}; i++)); do\n      local char=${group:$i:1}\n      if [[ $char\
    \ == \"(\" ]]; then\n        ((nesting++))\n        if ((nesting > max_nesting));\
    \ then\n          max_nesting=$nesting\n        fi\n      elif [[ $char == \"\
    )\" ]]; then\n        ((nesting--))\n      fi\n    done\n    result+=(\"\\\"$max_nesting\\\
    \"\")\n  done\n  echo \"[${result[*]}]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_array\n  local -a parens_array_len\n  local -a parens_array_max_len\n\
    \  local -a parens_array_max_len_index\n  local -a parens_array_max_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index\n  local -a parens_array_max_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index\n  local -a parens_array_max_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index\n  local\
    \ -a parens_array_max_len_index_len_index_len_index_len_index_len\n  local -a\
    \ parens_array_max_len_index_len_index_len_index_len_index_len_index\n  local\
    \ -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    for ((i=0; i<${#input}; i++)); do\n        local char=${input:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            ((level++))\n        \
    \    if ((level > max_level)); then\n                max_level=$level\n      \
    \      fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((level--))\n\
    \        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"\\\"$max_level\\\
    \"\")\n            max_level=0\n            level=0\n        fi\n    done\n  \
    \  output+=(\"\\\"$max_level\\\"\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      ((depth++))\n      if (( depth >\
    \ max_depth )); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      ((depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=$1\n  local parens_array=($parens_string)\n  local\
    \ parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local parens_array_idx_end=$((parens_array_len\
    \ - 1))\n  local parens_array_idx_end_str=$parens_array_idx_end\n  local parens_array_idx_str\n\
    \  local parens_array_idx_str_len\n  local parens_array_idx_str_len_end\n  local\
    \ parens_array_idx_str_len_end_str\n  local parens_array_idx_str_len_idx\n  local\
    \ parens_array_idx_str_len_idx_str\n  local parens_array_idx_str_len_idx_str_len\n\
    \  local parens_array_idx_str_len_idx_str_len_end\n  local parens_array_idx_str_len_idx_str_len_end_str\n\
    \  local parens_array_idx_str_len_idx_str_len_idx\n  local parens_array_idx_str_len_idx_str_len_idx_str\n\
    \  local parens_array_idx_str_len_idx_str_len_idx_str_len\n  local parens_array_idx_str_len_idx_str_len_idx_str_len_end\n\
    \  local parens_array_idx_str_len_idx_str_len_idx_str_len_end_str\n  local parens_array_idx_str_len_idx_str_len_idx_str_len_idx\n\
    \  local parens_array_idx_str_len_idx_str_len_idx_str_len_idx_str\n  local parens_array_idx_str_len_idx_str\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input_str=$1\n    local paren_groups=($input_str)\n    local paren_group_nesting_levels=()\n\
    \    for paren_group in \"${paren_groups[@]}\"; do\n        local paren_group_nesting_level=0\n\
    \        local paren_group_nesting_level_max=0\n        for (( i=0; i<${#paren_group};\
    \ i++ )); do\n            if [[ ${paren_group:$i:1} == \"(\" ]]; then\n      \
    \          ((paren_group_nesting_level++))\n                ((paren_group_nesting_level_max++))\n\
    \            elif [[ ${paren_group:$i:1} == \")\" ]]; then\n                ((paren_group_nesting_level--))\n\
    \            fi\n        done\n        paren_group_nesting_levels+=($paren_group_nesting_level_max)\n\
    \    done\n    echo \"${paren_group_nesting_levels[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local paren_group\n\
    \  local paren_count=0\n  local max_paren_count=0\n  local max_paren_counts=()\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    max_paren_count=0\n    paren_count=0\n\
    \    for ((i=0; i<${#paren_group}; i++)); do\n      if [[ \"${paren_group:$i:1}\"\
    \ == \"(\" ]]; then\n        ((paren_count++))\n        if ((paren_count > max_paren_count));\
    \ then\n          max_paren_count=$paren_count\n        fi\n      elif [[ \"${paren_group:$i:1}\"\
    \ == \")\" ]]; then\n        ((paren_count--))\n      fi\n    done\n    max_paren_counts+=(\"\
    $max_paren_count\")\n  done\n  echo \"${max_paren_counts[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=\"${input:$i:1}\"\
    \n    if [[ \"$char\" == \"(\" ]]; then\n      (( depth++ ))\n      if (( depth\
    \ > max_depth )); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      (( depth-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    local char=${input:$i:1}\n\
    \    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n      if [ $level -gt\
    \ $max_level ]; then\n        max_level=$level\n      fi\n    elif [ \"$char\"\
    \ == \")\" ]; then\n      ((level--))\n    fi\n    ((i++))\n  done\n  echo \"\
    [\\\"$max_level\\\"]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=\"$1\"\n  local max_depth=0\n  local depth=0\n  local parens_arr=()\n\
    \  local parens_arr_index=0\n  local parens_arr_index_max=0\n  local parens_arr_index_max_depth=0\n\
    \  local parens_arr_index_max_depth_prev=0\n  local parens_arr_index_max_depth_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev=0\n  local parens_arr_index_max_depth_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev=0\n  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_index_max_depth_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \ \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if [[ $level -gt $max_level ]]; then\n          max_level=$level\n  \
    \      fi\n      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens=$1\n    local parens_array=($parens)\n    local parens_array_len=${#parens_array[@]}\n\
    \    local parens_array_idx=0\n    local parens_array_idx_max=$((parens_array_len\
    \ - 1))\n    local parens_array_idx_last=$parens_array_idx_max\n    local parens_array_idx_next=$((parens_array_idx_last\
    \ + 1))\n    local parens_array_idx_prev=$((parens_array_idx_last - 1))\n    local\
    \ parens_array_idx_next_max=$((parens_array_idx_max + 1))\n    local parens_array_idx_prev_max=$((parens_array_idx_max\
    \ - 1))\n    local parens_array_idx_next_min=$((parens_array_idx_max + 1))\n \
    \   local parens_array_idx_prev_min=$((parens_array_idx_max - 1))\n    local parens_array_idx_next_last=$((parens_array_idx_max\
    \ + 1))\n    local parens_array_idx_prev_last=$((parens_array_idx_max - 1))\n\
    \    local parens_array_idx_next_first=$((parens_array_idx_max + 1))\n    local\
    \ parens_array_idx_prev_first=$((parens_array_idx_max - 1))\n    local parens_array_idx_next_last_max=$((parens_array_idx_max\
    \ + 1))\n    local parens_array_idx_prev_last_max=$((parens_array_idx_max - 1))\n\
    \    local parens_array_idx_next_first_max=$((parens_array_idx_max + 1))\n   \
    \ local parens_array_idx_prev_first_max=$((parens_array_idx_max - 1))\n\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  # TODO: Write your code here\n  # Please use the echo command to output\
    \ the result, e.g.\n  # echo \"Hello world\"\n  echo \"Not implemented\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  for (( i=0; i<${#input}; i++ )); do\n    local char=${input:$i:1}\n    if [[\
    \ \"$char\" == \"(\" ]]; then\n      (( depth++ ))\n      if (( depth > max_depth\
    \ )); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\" == \")\"\
    \ ]]; then\n      (( depth-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n   \
    \   output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_string=\"$1\"\n    local parens_array=($parens_string)\n\
    \    local parens_array_len=${#parens_array[@]}\n    local parens_array_idx=0\n\
    \    local parens_array_item\n    local parens_array_item_len\n    local parens_array_item_idx\n\
    \    local parens_array_item_char\n    local parens_array_item_char_prev\n   \
    \ local parens_array_item_char_next\n    local parens_array_item_char_prev_idx\n\
    \    local parens_array_item_char_next_idx\n    local parens_array_item_char_prev_char\n\
    \    local parens_array_item_char_next_char\n    local parens_array_item_char_prev_char_prev\n\
    \    local parens_array_item_char_next_char_next\n    local parens_array_item_char_prev_char_prev_idx\n\
    \    local parens_array_item_char_next_char_next_idx\n    local parens_array_item_char_prev_char_prev_char\n\
    \    local parens_array_item_char_next_char_next_char\n    local parens_array_item_char_prev_char_prev_char_prev\n\
    \    local parens_array_item_char_next_char_next_char_next\n    local parens_array_item_char_prev_char_prev_char_prev_idx\n\
    \    local parens_array_item_char_next_char_next_char_next_idx\n    local parens_array_item_char_prev_char_prev_char_prev_char\n\
    \    local parens_array_item_char_next_char_next_char_next_char\n    local parens_array_item_char_prev_char_prev_char_prev_char_prev\n\
    \    local parens_array_item_char_next_char_next_char_next_char_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ $char == \")\" ]]; then\n\
    \      ((depth--))\n    elif [[ $char == \" \" ]]; then\n      result+=(\"\\\"\
    $max_depth\\\"\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  result+=(\"\
    \\\"$max_depth\\\"\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344025
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local current_depth=0\n\
    \  local current_char=''\n  local i=0\n  local input_length=${#input}\n  while\
    \ [ $i -lt $input_length ]; do\n    current_char=${input:$i:1}\n    if [ \"$current_char\"\
    \ == \"(\" ]; then\n      current_depth=$((current_depth + 1))\n      if [ $current_depth\
    \ -gt $max_depth ]; then\n        max_depth=$current_depth\n      fi\n    elif\
    \ [ \"$current_char\" == \")\" ]; then\n      current_depth=$((current_depth -\
    \ 1))\n    elif [ \"$current_char\" == \" \" ]; then\n      output+=(\"$max_depth\"\
    )\n      max_depth=0\n      current_depth=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input_str=$1\n    local output_str=\"\"\n    local max_depth=0\n\
    \    local curr_depth=0\n    local i=0\n    local len=${#input_str}\n    while\
    \ [ $i -lt $len ]; do\n        local char=${input_str:$i:1}\n        if [ \"$char\"\
    \ == \"(\" ]; then\n            curr_depth=$((curr_depth + 1))\n            if\
    \ [ $curr_depth -gt $max_depth ]; then\n                max_depth=$curr_depth\n\
    \            fi\n        elif [ \"$char\" == \")\" ]; then\n            curr_depth=$((curr_depth\
    \ - 1))\n        fi\n        i=$((i + 1))\n    done\n    echo $max_depth\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local curr_depth=0\n\
    \  local curr_char=''\n  local curr_paren_count=0\n  local curr_paren_depth=0\n\
    \  local curr_paren_depth_count=0\n  local curr_paren_depth_count_str=''\n  local\
    \ curr_paren_depth_count_str_arr=()\n  local curr_paren_depth_count_str_arr_len=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx=0\n  local curr_paren_depth_count_str_arr_last_idx_val=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx_val_int=0\n  local curr_paren_depth_count_str_arr_last_idx_val_int_plus_one=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str=''\n  local\
    \ curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr=()\n  local\
    \ curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr_len=0\n  local\
    \ curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr_last_idx=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr_last_idx_val=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr_last_idx_val_int=0\n\
    \  local curr_paren_depth_count_str_arr_last_idx_val_int_plus_one_str_arr_last_idx_val_int_plus_one=0\n\
    \  local curr_paren_depth_count_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#group}; i++)); do\n\
    \      if [[ ${group:$i:1} == \"(\" ]]; then\n        ((nesting++))\n        if\
    \ ((nesting > max_nesting)); then\n          max_nesting=$nesting\n        fi\n\
    \      elif [[ ${group:$i:1} == \")\" ]]; then\n        ((nesting--))\n      fi\n\
    \    done\n    output+=(\"\\\"$max_nesting\\\"\")\n  done\n  echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local paren_groups=($parens)\n  local max_nesting_levels=()\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    local max_nesting_level=0\n\
    \    local nesting_level=0\n    for (( i=0; i<${#paren_group}; i++ )); do\n  \
    \    local char=${paren_group:$i:1}\n      if [[ $char == \"(\" ]]; then\n   \
    \     ((nesting_level++))\n        if ((nesting_level > max_nesting_level)); then\n\
    \          max_nesting_level=$nesting_level\n        fi\n      elif [[ $char ==\
    \ \")\" ]]; then\n        ((nesting_level--))\n      fi\n    done\n    max_nesting_levels+=(\"\
    $max_nesting_level\")\n  done\n  echo \"${max_nesting_levels[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local -a parens_array\n  local -a parens_array_nested\n  local -a parens_array_nested_max\n\
    \  local parens_array_nested_max_len\n  local parens_array_nested_max_len_max\n\
    \  local parens_array_nested_max_len_max_index\n  local parens_array_nested_max_len_max_index_len\n\
    \  local parens_array_nested_max_len_max_index_len_max\n  local parens_array_nested_max_len_max_index_len_max_index\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len\n  local parens_array_nested_max_len_max_index_len_max_index_len_max\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index\n \
    \ local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max_index\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max_index_len\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max_index_len_max\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max_index_len_max_index\n\
    \  local parens_array_nested_max_len_max_index_len_max_index_len_max_index_len_max_index_len\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local result=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local max_level=0\n    local level=0\n\
    \    for ((i=0; i<${#parens}; i++)); do\n      local char=\"${parens:$i:1}\"\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        ((level++))\n        if ((level\
    \ > max_level)); then\n          max_level=$level\n        fi\n      elif [[ \"\
    $char\" == \")\" ]]; then\n        ((level--))\n      fi\n    done\n    result+=(\"\
    $max_level\")\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    for group in $input; do\n  \
    \      local max_level=0\n        local cur_level=0\n        for ((i=0; i<${#group};\
    \ i++)); do\n            if [[ ${group:$i:1} == \"(\" ]]; then\n             \
    \   ((cur_level++))\n                if ((cur_level > max_level)); then\n    \
    \                max_level=$cur_level\n                fi\n            elif [[\
    \ ${group:$i:1} == \")\" ]]; then\n                ((cur_level--))\n         \
    \   fi\n        done\n        output+=(\"$max_level\")\n    done\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nested_parens=()\n\
    \  for parens in \"${parens_arr[@]}\"; do\n    local max_nested_parens_in_parens=0\n\
    \    local parens_stack=()\n    for ((i=0; i<${#parens}; i++)); do\n      local\
    \ char=\"${parens:$i:1}\"\n      if [[ \"$char\" == \"(\" ]]; then\n        parens_stack+=(\"\
    $char\")\n      elif [[ \"$char\" == \")\" ]]; then\n        parens_stack=(\"\
    ${parens_stack[@]:0:$((${#parens_stack[@]}-1))}\")\n      fi\n      if [[ ${#parens_stack[@]}\
    \ -gt $max_nested_parens_in_parens ]]; then\n        max_nested_parens_in_parens=${#parens_stack[@]}\n\
    \      fi\n    done\n    max_nested_parens+=(\"$max_nested_parens_in_parens\"\
    )\n  done\n  echo \"${max_nested_parens[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=\"$1\"\n    local output=()\n    local max_nesting=0\n  \
    \  local current_nesting=0\n    local current_char\n    for ((i=0; i<${#input};\
    \ i++)); do\n        current_char=\"${input:$i:1}\"\n        if [[ \"$current_char\"\
    \ == \"(\" ]]; then\n            ((current_nesting++))\n            if ((current_nesting\
    \ > max_nesting)); then\n                max_nesting=$current_nesting\n      \
    \      fi\n        elif [[ \"$current_char\" == \")\" ]]; then\n            ((current_nesting--))\n\
    \        elif [[ \"$current_char\" == \" \" ]]; then\n            output+=(\"\
    $max_nesting\")\n            max_nesting=0\n            current_nesting=0\n  \
    \      fi\n    done\n    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local current_char\n  local i\n  for ((i=0; i<${#input}; i++)); do\n    current_char=\"\
    ${input:$i:1}\"\n    if [[ \"$current_char\" == \"(\" ]]; then\n      ((current_nesting++))\n\
    \      if ((current_nesting > max_nesting)); then\n        max_nesting=\"$current_nesting\"\
    \n      fi\n    elif [[ \"$current_char\" == \")\" ]]; then\n      ((current_nesting--))\n\
    \    elif [[ \"$current_char\" == \" \" ]]; then\n      output+=(\"$max_nesting\"\
    )\n      max_nesting=0\n      current_nesting=0\n    fi\n  done\n  output+=(\"\
    $max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=${input:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            ((depth++))\n        \
    \    if ((depth > max_depth)); then\n                max_depth=$depth\n      \
    \      fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((depth--))\n\
    \        fi\n        if [[ \"$char\" == \" \" ]]; then\n            output+=(\"\
    $max_depth\")\n            max_depth=0\n            depth=0\n        fi\n    done\n\
    \    output+=(\"$max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  for (( i=0; i<${#input}; i++ )); do\n    local char=${input:$i:1}\n    if [[\
    \ $char == \"(\" ]]; then\n      ((current_nesting++))\n      ((max_nesting =\
    \ current_nesting > max_nesting ? current_nesting : max_nesting))\n    elif [[\
    \ $char == \")\" ]]; then\n      ((current_nesting--))\n    elif [[ $char == \"\
    \ \" ]]; then\n      output+=(\"$max_nesting\")\n      max_nesting=0\n      current_nesting=0\n\
    \    fi\n  done\n  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  local i\n  for ((i=0; i<${#input}; i++)); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      ((depth++))\n      ((max_depth =\
    \ depth > max_depth ? depth : max_depth))\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      ((depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n      output+=(\"\
    $max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n  output+=(\"\
    $max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local groups=\"$1\"\n  local group\n  local max_level\n  local level\n\
    \  local char\n  local result=()\n  for group in $groups; do\n    max_level=0\n\
    \    level=0\n    for ((i=0; i<${#group}; i++)); do\n      char=${group:$i:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        ((level++))\n        ((max_level\
    \ = max_level < level ? level : max_level))\n      elif [[ \"$char\" == \")\"\
    \ ]]; then\n        ((level--))\n      fi\n    done\n    result+=(\"\\\"$max_level\\\
    \"\")\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  for ((i=0; i<$parens_arr_len; i++)); do\n    local\
    \ parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n    local max_nesting=0\n\
    \    local nesting=0\n    for ((j=0; j<$parens_len; j++)); do\n      local char=${parens:$j:1}\n\
    \      if [ \"$char\" == \"(\" ]; then\n        ((nesting++))\n        if [ $nesting\
    \ -gt $max_nesting ]; then\n          max_nesting=$nesting\n        fi\n     \
    \ elif [ \"$char\" == \")\" ]; then\n        ((nesting--))\n      fi\n    done\n\
    \    max_nesting_arr+=($max_nesting)\n  done\n  echo ${max_nesting_arr[@]}\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input_string=$1\n  local paren_count=0\n  local max_paren_count=0\n\
    \  local output_string=\"\"\n  local i=0\n  local char=\"\"\n  local char_code=0\n\
    \  local paren_count_array=()\n  local output_array=()\n\n  for ((i=0; i<${#input_string};\
    \ i++)); do\n    char=\"${input_string:$i:1}\"\n    char_code=$(printf \"%d\"\
    \ \"'$char\")\n    if [[ $char_code == 40 ]]; then\n      ((paren_count++))\n\
    \      if [[ $paren_count -gt $max_paren_count ]]; then\n        max_paren_count=$paren_count\n\
    \      fi\n    elif [[ $char_code == 41 ]]; then\n      ((paren_count--))\n  \
    \  elif [[ $char_code == 32 ]]; then\n      paren_count_array+=($max_paren_count)\n\
    \      max_paren_count=0\n    fi\n  done\n  paren_count_array+=($max_paren_count)\n\
    \n  for ((i=0; i<${#paren_count_array[@]}; i++)); do\n    output_array+=(\"\\\"\
    ${paren_count_array[$i]}\\\"\")\n  done\n\n  echo \"[${output_array[@]}]\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local char\n  for ((i=0; i<${#input}; i++)); do\n    char=${input:$i:1}\n \
    \   if [[ \"$char\" == \"(\" ]]; then\n      ((level++))\n      ((max_level =\
    \ level > max_level ? level : max_level))\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      ((level--))\n    fi\n    if [[ \"$char\" == \" \" ]]; then\n   \
    \   output+=(\"$max_level\")\n      max_level=0\n      level=0\n    fi\n  done\n\
    \  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_string=\"$1\"\n  local parens_array=($parens_string)\n  local\
    \ parens_array_len=${#parens_array[@]}\n  local max_nesting_array=()\n  for ((i=0;\
    \ i<parens_array_len; i++)); do\n    local parens_group=\"${parens_array[$i]}\"\
    \n    local parens_group_len=${#parens_group}\n    local max_nesting=0\n    local\
    \ nesting=0\n    for ((j=0; j<parens_group_len; j++)); do\n      local char=\"\
    ${parens_group:$j:1}\"\n      if [[ \"$char\" == \"(\" ]]; then\n        ((nesting++))\n\
    \        if [[ \"$nesting\" -gt \"$max_nesting\" ]]; then\n          max_nesting=\"\
    $nesting\"\n        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        ((nesting--))\n\
    \      fi\n    done\n    max_nesting_array+=(\"$max_nesting\")\n  done\n  echo\
    \ \"${max_nesting_array[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local max_depth=0\n  local depth=0\n  local result=\"\
    \"\n  for ((i=0; i<${#parens}; i++)); do\n    local char=${parens:$i:1}\n    if\
    \ [[ \"$char\" == \"(\" ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      ((depth--))\n    fi\n  done\n  echo $max_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      ((depth++))\n      if ((depth >\
    \ max_depth)); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      ((depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev\n \
    \ local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local -a groups=($1)\n    local -a results=()\n    for group in \"${groups[@]}\"\
    ; do\n        local -i level=0\n        local -i max_level=0\n        for ((i=0;\
    \ i<${#group}; i++)); do\n            local char=${group:$i:1}\n            if\
    \ [[ $char == \"(\" ]]; then\n                ((level++))\n                ((max_level\
    \ = level > max_level ? level : max_level))\n            elif [[ $char == \")\"\
    \ ]]; then\n                ((level--))\n            fi\n        done\n      \
    \  results+=($max_level)\n    done\n    echo \"${results[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((depth++))\n  \
    \    if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    fi\n    ((i++))\n\
    \  done\n  echo \"[\\\"$max_depth\\\"]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((depth++))\n            if [ $depth -gt $max_depth ]; then\n\
    \                max_depth=$depth\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n        ((i++))\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  for ((i=0; i<parens_arr_len; i++)); do\n    local\
    \ parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n    local max_nesting=0\n\
    \    local nesting=0\n    for ((j=0; j<parens_len; j++)); do\n      local char=${parens:$j:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        nesting=$((nesting+1))\n   \
    \     if [[ \"$nesting\" -gt \"$max_nesting\" ]]; then\n          max_nesting=$nesting\n\
    \        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        nesting=$((nesting-1))\n\
    \      fi\n    done\n    max_nesting_arr+=(\"$max_nesting\")\n  done\n  echo \"\
    ${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_curr=0\n  local parens_arr_idx_next=0\n  local parens_arr_idx_prev=0\n\
    \  local parens_arr_idx_prev_prev=0\n  local parens_arr_idx_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev=0\n  local parens_arr_idx_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev=0\n  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n    local parens_arr_len=${#parens_arr[@]}\n\
    \    local parens_arr_idx=0\n    local parens_arr_max_idx=$((parens_arr_len -\
    \ 1))\n    local parens_arr_max_nesting=0\n    local parens_arr_max_nesting_idx=0\n\
    \    local parens_arr_nesting=0\n    local parens_arr_nesting_idx=0\n    local\
    \ parens_arr_nesting_max=0\n    local parens_arr_nesting_max_idx=0\n    local\
    \ parens_arr_nesting_max_idx_prev=0\n    local parens_arr_nesting_max_idx_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev=0\n    local parens_arr_nesting_max_idx_prev_prev_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev=0\n    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev_prev=0\n \
    \   local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_nesting_max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  if [[ ${group:$i:1} == \"(\" ]]; then\n        level=$((level+1))\n       \
    \ if [[ $level -gt $max_level ]]; then\n          max_level=$level\n        fi\n\
    \      elif [[ ${group:$i:1} == \")\" ]]; then\n        level=$((level-1))\n \
    \     fi\n    done\n    output+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${output[@]}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_next=0\n  local parens_arr_idx_prev=0\n  local parens_arr_idx_curr=0\n\
    \  local parens_arr_idx_max_nested=0\n  local parens_arr_idx_max_nested_level=0\n\
    \  local parens_arr_idx_max_nested_level_curr=0\n  local parens_arr_idx_max_nested_level_prev=0\n\
    \  local parens_arr_idx_max_nested_level_next=0\n  local parens_arr_idx_max_nested_level_max=0\n\
    \  local parens_arr_idx_max_nested_level_max_prev=0\n  local parens_arr_idx_max_nested_level_max_next=0\n\
    \  local parens_arr_idx_max_nested_level_max_curr=0\n  local parens_arr_idx_max_nested_level_max_prev_curr=0\n\
    \  local parens_arr_idx_max_nested_level_max_next_curr=0\n  local parens_arr_idx_max_nested_level_max_prev_next=0\n\
    \  local parens_arr_idx_max_nested_level_max_prev_prev=0\n  local parens_arr_idx_max_nested_level_max_next_next=0\n\
    \  local parens_arr_idx_max_nested_level_max_prev_next_curr=0\n  local parens_arr_idx_max_nested_level_max_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n    local input=\"$1\"\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=\"\
    ${input:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            (( depth++\
    \ ))\n            if (( depth > max_depth )); then\n                max_depth=$depth\n\
    \            fi\n        elif [[ \"$char\" == \")\" ]]; then\n            (( depth--\
    \ ))\n        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_depth\"\
    )\n            max_depth=0\n            depth=0\n        fi\n    done\n    output+=(\"\
    $max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((level++))\n  \
    \    ((max_level = max_level < level ? level : max_level))\n    elif [ \"$c\"\
    \ == \")\" ]; then\n      ((level--))\n    fi\n    ((i++))\n  done\n  echo $max_level\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev\n \
    \ local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  for group in $input; do\n    local\
    \ level=0\n    local max_level=0\n    for ((i=0; i<${#group}; i++)); do\n    \
    \  local char=\"${group:$i:1}\"\n      if [[ \"$char\" == \"(\" ]]; then\n   \
    \     ((level++))\n        if ((level > max_level)); then\n          max_level=$level\n\
    \        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        ((level--))\n\
    \      fi\n    done\n    output+=(\"$max_level\")\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  for group in $input; do\n    local\
    \ max_depth=0\n    local current_depth=0\n    for ((i=0; i<${#group}; i++)); do\n\
    \      local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n       \
    \ ((current_depth++))\n        if ((current_depth > max_depth)); then\n      \
    \    max_depth=$current_depth\n        fi\n      elif [[ $char == \")\" ]]; then\n\
    \        ((current_depth--))\n      fi\n    done\n    output+=($max_depth)\n \
    \ done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344026
