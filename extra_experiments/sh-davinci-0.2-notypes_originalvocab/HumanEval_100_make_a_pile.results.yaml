language: sh
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local -a pile\n    pile[0]=$n\n    for ((i=1; i<n; i++));\
    \ do\n        if ((n%2==0)); then\n            pile[i]=$((n+2*i))\n        else\n\
    \            pile[i]=$((n+2*i-1))\n        fi\n    done\n    echo \"${pile[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [[ $i -lt $n ]];\
    \ do\n    if [[ $i -eq 0 ]]; then\n      stones+=(\"$n\")\n    elif [[ $((i %\
    \ 2)) -eq 0 ]]; then\n      stones+=(\"$((stones[i-1] + 2))\")\n    else\n   \
    \   stones+=(\"$((stones[i-1] + 1))\")\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local -a pile\n    local i=0\n    while (( n > 0 ));\
    \ do\n        pile[i++]=$n\n        (( n % 2 == 0 )) && (( n /= 2 )) || (( n =\
    \ (n - 1) / 2 ))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=\"$n\"\n    local next_level\n    while\
    \ [ \"$stones\" -gt 1 ]; do\n        if [ \"$((stones % 2))\" -eq 0 ]; then\n\
    \            next_level=\"$((stones + 2))\"\n        else\n            next_level=\"\
    $((stones + 1))\"\n        fi\n        stones=\"$next_level\"\n        echo \"\
    \\\"$stones\\\"\"\n    done\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=19>
  stdout: <_io.BufferedReader name=17>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local result=()\n    local i=0\n    while (( i <\
    \ n )); do\n        if (( i % 2 == 0 )); then\n            result+=(\"$(( 2 *\
    \ i + 1 ))\")\n        else\n            result+=(\"$(( 2 * i + 2 ))\")\n    \
    \    fi\n        (( i++ ))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local result=()\n    local i=0\n    while [ $i -lt $n\
    \ ]; do\n        if [ $((n % 2)) -eq 0 ]; then\n            result+=($((n + 2)))\n\
    \        else\n            result+=($((n + 1)))\n        fi\n        n=$((n +\
    \ 1))\n        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=35>
  stdout: <_io.BufferedReader name=15>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while (( n > 0 )); do\n        stones+=(\"\
    $n\")\n        (( n % 2 == 0 )) && (( n += 1 )) || (( n += 2 ))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=28>
  stdout: <_io.BufferedReader name=21>
  timestamp: 1660341275
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local stones\n    while (( i < n ));\
    \ do\n        stones[i]=\"$(( n + (i*2) ))\"\n        (( i++ ))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [[ \"$n\" -gt 0 ]]; do\n   \
    \ stones+=(\"$n\")\n    if [[ \"$n\" -eq 1 ]]; then\n      break\n    fi\n   \
    \ if [[ \"$n\" -eq 2 ]]; then\n      n=1\n    elif [[ \"$((n % 2))\" -eq 0 ]];\
    \ then\n      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=32>
  stdout: <_io.BufferedReader name=25>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local result=()\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            result+=(\"$((i +\
    \ 1))\")\n        else\n            result+=(\"$((i + 2))\")\n        fi\n   \
    \     i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [ $n -gt 0\
    \ ]; do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n      \
    \      n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    \
    \    i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n \
    \   make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=23>
  stdout: <_io.BufferedReader name=29>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local -a pile\n  local i=0\n  while [[ \"$n\" -gt 0 ]];\
    \ do\n    pile[$i]=\"$n\"\n    (( i++ ))\n    if [[ \"$n\" -eq 1 ]]; then\n  \
    \    break\n    elif [[ \"$n\" -eq 2 ]]; then\n      n=1\n    elif [[ \"$(( n\
    \ % 2 ))\" -eq 0 ]]; then\n      n=$(( n / 2 ))\n    else\n      n=$(( (n + 1)\
    \ / 2 ))\n    fi\n  done\n  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n \
    \       stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        elif [[ \"$n\" -eq 2 ]]; then\n            n=1\n        elif [[ \"$n\"\
    \ -eq 3 ]]; then\n            n=2\n        elif [[ \"$n\" -eq 4 ]]; then\n   \
    \         n=3\n        elif [[ \"$n\" -eq 5 ]]; then\n            n=4\n      \
    \  elif [[ \"$n\" -eq 6 ]]; then\n            n=5\n        elif [[ \"$n\" -eq\
    \ 7 ]]; then\n            n=6\n        elif [[ \"$n\" -eq 8 ]]; then\n       \
    \     n=7\n        elif [[ \"$n\" -eq 9 ]]; then\n            n=8\n        elif\
    \ [[ \"$n\" -eq 10 ]]; then\n            n=9\n        elif [[ \"$n\" -eq 11 ]];\
    \ then\n            n=10\n        elif [[ \"$n\" -eq 12 ]]; then\n           \
    \ n=11\n        elif [[ \"$n\" -eq 13 ]]; then\n            n=12\n        elif\
    \ [[ \"$n\" -eq 14 ]]; then\n            n=13\n        elif [[ \"$n\" -eq 15 ]];\
    \ then\n            n=14\n        elif [[ \"$n\" -eq 16 ]]; then\n           \
    \ n=15\n        elif [[ \"$n\" -eq 17 ]]; then\n            n=16\n        elif\
    \ [[ \"$n\" -eq 18 ]]; then\n            n=17\n        elif [[ \"$n\" -eq 19 ]];\
    \ then\n            n=18\n        elif [[ \"$n\" -eq 20 ]]; then\n           \
    \ n=19\n        elif [[ \"$n\" -eq 21 ]]; then\n            n=20\n        elif\
    \ [[ \"$n\" -eq 22 ]]; then\n            n=21\n        elif [[ \"$n\" -eq 23 ]];\
    \ then\n            n=22\n        elif [[ \"$n\" -eq 24 ]]; then\n           \
    \ n=23\n        elif [[ \"$n\" -eq 25 ]]; then\n            n=24\n        elif\
    \ [[ \"$n\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_itb5mv.sh: line 76: conditional binary operator expected\n/tmp/tmps_itb5mv.sh:
    line 76: syntax error near `5\''\n/tmp/tmps_itb5mv.sh: line 76: `    [[ $(candidate
    "3") = "3 5 7" ]]\''\n'''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [ $n -gt 0\
    \ ]; do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n      \
    \      n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    \
    \    i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n \
    \   make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=23>
  stdout: <_io.BufferedReader name=29>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local -a pile\n    pile[0]=$n\n    for ((i=1; i<n; i++));\
    \ do\n        if ((n % 2 == 0)); then\n            pile[i]=$((n + 2 * i))\n  \
    \      else\n            pile[i]=$((n + 2 * i - 1))\n        fi\n    done\n  \
    \  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [[ $i -lt\
    \ $n ]]; do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            stones+=(\"\
    $((i + 2))\")\n        else\n            stones+=(\"$((i + 1))\")\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local pile=()\n    local i=0\n    while (( i < n\
    \ )); do\n        pile+=(\"$n\")\n        (( n % 2 == 0 )) && (( n += 2 )) ||\
    \ (( n += 1 ))\n        (( i++ ))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=43>
  stdout: <_io.BufferedReader name=24>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]];\
    \ do\n    stones[$i]=\"$n\"\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n\
    \ + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=27>
  stdout: <_io.BufferedReader name=18>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [ $i -lt $n ]; do\n\
    \    stones+=(\"$n\")\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=20>
  stdout: <_io.BufferedReader name=3>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        pile[$i]=\"$n\"\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=42>
  stdout: <_io.BufferedReader name=38>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local level=1\n    while [[ $level\
    \ -le $n ]]; do\n        stones+=(\"$level\")\n        ((level++))\n        if\
    \ [[ $((level % 2)) -eq 0 ]]; then\n            ((level++))\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    for ((i=0; i<n; i++)); do\n    \
    \    if ((i % 2 == 0)); then\n            stones+=($((n+i)))\n        else\n \
    \           stones+=($((n+i+1)))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [ $i -lt $n\
    \ ]; do\n        stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n   \
    \         n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=47>
  stdout: <_io.BufferedReader name=39>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local pile=()\n    local stones=$n\n    while [[ $stones\
    \ -gt 0 ]]; do\n        pile+=(\"$stones\")\n        if [[ $stones -eq 1 ]]; then\n\
    \            break\n        fi\n        if [[ $((stones % 2)) -eq 0 ]]; then\n\
    \            stones=$((stones + 1))\n        else\n            stones=$((stones\
    \ + 2))\n        fi\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n \
    \   make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=57>
  stdout: <_io.BufferedReader name=52>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [ \"$n\" -gt 0\
    \ ]; do\n    stones[$i]=\"$n\"\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n\
    \ + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=61>
  stdout: <_io.BufferedReader name=31>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while (( i < n )); do\n \
    \   if (( i % 2 == 0 )); then\n      stones+=(\"$(( n + i ))\")\n    else\n  \
    \    stones+=(\"$(( n + i + 1 ))\")\n    fi\n    (( i++ ))\n  done\n  echo \"\
    ${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local stones=()\n    while [[ $i -lt\
    \ $n ]]; do\n        if [[ $((n % 2)) -eq 0 ]]; then\n            stones+=(\"\
    $((n + 2))\")\n        else\n            stones+=(\"$((n + 1))\")\n        fi\n\
    \        n=$((n - 1))\n        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=\"$n\"\n  local next_level_stones\n  local\
    \ stones_list\n  while [ \"$stones\" -gt 1 ]; do\n    if [ \"$((stones % 2))\"\
    \ -eq 0 ]; then\n      next_level_stones=\"$((stones + 2))\"\n    else\n     \
    \ next_level_stones=\"$((stones + 1))\"\n    fi\n    stones_list=\"$stones_list,\\\
    \"$stones\\\"\"\n    stones=\"$next_level_stones\"\n  done\n  stones_list=\"[\\\
    \"$stones\\\"$stones_list]\"\n  echo \"$stones_list\"\n}\n\ncandidate() {\n  \
    \  make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=56>
  stdout: <_io.BufferedReader name=54>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [ $n -gt 0 ]; do\n\
    \    stones[$i]=$n\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n  \
    \  else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=55>
  stdout: <_io.BufferedReader name=26>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        stones[$i]=\"$n\"\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n       \
    \ stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=62>
  stdout: <_io.BufferedReader name=68>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n \
    \       stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n          \
    \  n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=73>
  stdout: <_io.BufferedReader name=64>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        elif [[ \"$n\" -eq 2 ]]; then\n            n=1\n        elif [[ \"$((n\
    \ % 2))\" -eq 0 ]]; then\n            n=$((n / 2))\n        else\n           \
    \ n=$(((n + 1) / 2))\n        fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        stones[$i]=\"$n\"\n        if [ \"$((n % 2))\" -eq 0 ];\
    \ then\n            n=$((n + 1))\n        else\n            n=$((n + 2))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=66>
  stdout: <_io.BufferedReader name=51>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [[ \"$n\" -gt 0 ]]; do\n   \
    \ stones+=(\"$n\")\n    if [[ \"$n\" -eq 1 ]]; then\n      break\n    fi\n   \
    \ if [[ \"$n\" -eq 2 ]]; then\n      n=1\n    elif [[ \"$((n % 2))\" -eq 0 ]];\
    \ then\n      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=32>
  stdout: <_io.BufferedReader name=25>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local level=1\n    local stones=$n\n    local result=\"\
    [\\\"$stones\\\"\"\n    while [[ $stones -gt 1 ]]; do\n        ((level++))\n \
    \       if [[ $((stones % 2)) -eq 0 ]]; then\n            ((stones++))\n     \
    \   else\n            ((stones--))\n        fi\n        result=\"$result, \\\"\
    $stones\\\"\"\n    done\n    echo \"$result]\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=71>
  stdout: <_io.BufferedReader name=9>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones\n    local i\n    for ((i=1; i<=n; i++));\
    \ do\n        stones+=($((n+i)))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local result=()\n  while [[ $n -gt 0 ]]; do\n    result+=($n)\n\
    \    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n      n=$((n\
    \ + 2))\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=70>
  stdout: <_io.BufferedReader name=58>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    for ((i=0; i<n; i++)); do\n    \
    \    stones+=(\"$n\")\n        if ((n % 2 == 0)); then\n            n=$((n + 2))\n\
    \        else\n            n=$((n + 1))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=81>
  stdout: <_io.BufferedReader name=67>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones=()\n    while (( i < n ));\
    \ do\n        stones+=(\"$n\")\n        if (( n % 2 == 0 )); then\n          \
    \  n=$(( n + 2 ))\n        else\n            n=$(( n + 1 ))\n        fi\n    \
    \    (( i++ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=86>
  stdout: <_io.BufferedReader name=77>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones\n    while [ $i -lt $n ];\
    \ do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n         \
    \   n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n       \
    \ i=$((i + 1))\n    done\n    echo ${stones[@]}\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=76>
  stdout: <_io.BufferedReader name=74>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while (( n > 0 )); do\n        stones+=(\"\
    $n\")\n        (( n % 2 == 0 )) && (( n += 1 )) || (( n += 2 ))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=28>
  stdout: <_io.BufferedReader name=21>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones=()\n    while [[ $i -lt $n\
    \ ]]; do\n        stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=82>
  stdout: <_io.BufferedReader name=80>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local -i i=0\n    while (( i <\
    \ n )); do\n        if (( i == 0 )); then\n            pile[i]=$n\n        elif\
    \ (( n % 2 == 0 )); then\n            pile[i]=$(( pile[i-1] + 2 ))\n        else\n\
    \            pile[i]=$(( pile[i-1] + 1 ))\n        fi\n        (( i++ ))\n   \
    \ done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ $i -lt\
    \ $n ]; do\n        stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=89>
  stdout: <_io.BufferedReader name=10>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while ((i < n));\
    \ do\n        if ((i % 2 == 0)); then\n            stones+=(\"$((n + i))\")\n\
    \        else\n            stones+=(\"$((n + i + 1))\")\n        fi\n        ((i++))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [[ $i -lt $n ]]; do\n\
    \    stones+=(\"$n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 2))\n\
    \    else\n      n=$((n + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=95>
  stdout: <_io.BufferedReader name=93>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    stones+=(\"$n\")\n    while\
    \ [[ \"$n\" -gt 1 ]]; do\n        if [[ \"$n\" -eq 2 ]]; then\n            stones+=(\"\
    1\")\n            break\n        fi\n        if [[ \"$((n % 2))\" -eq 0 ]]; then\n\
    \            n=\"$((n / 2))\"\n        else\n            n=\"$((n / 2 + 1))\"\n\
    \        fi\n        stones+=(\"$n\")\n    done\n    printf '[\"%s\"]' \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        pile[$i]=\"$n\"\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=42>
  stdout: <_io.BufferedReader name=38>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n       \
    \ stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=62>
  stdout: <_io.BufferedReader name=68>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local level=0\n  local num_stones=0\n\
    \  while [ \"$level\" -lt \"$n\" ]; do\n    if [ \"$level\" -eq 0 ]; then\n  \
    \    num_stones=\"$n\"\n    elif [ \"$((num_stones % 2))\" -eq 0 ]; then\n   \
    \   num_stones=\"$((num_stones + 2))\"\n    else\n      num_stones=\"$((num_stones\
    \ + 1))\"\n    fi\n    stones+=(\"$num_stones\")\n    level=\"$((level + 1))\"\
    \n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local level=1\n    local stones=\"$n\"\n    local\
    \ result=\"[\\\"$stones\\\"\"\n    while [[ $level -lt $n ]]; do\n        if [[\
    \ $stones % 2 -eq 0 ]]; then\n            stones=$((stones + 2))\n        else\n\
    \            stones=$((stones + 1))\n        fi\n        result=\"$result, \\\"\
    $stones\\\"\"\n        level=$((level + 1))\n    done\n    echo \"$result]\"\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpjmz71rpw.sh: line 18: conditional binary operator expected\n/tmp/tmpjmz71rpw.sh:
    line 18: syntax error near `%''\n/tmp/tmpjmz71rpw.sh: line 18: `        if [[
    $stones % 2 -eq 0 ]]; then''\n"'
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            ((n++))\n\
    \        else\n            ((n--))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=84>
  stdout: <_io.BufferedReader name=49>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  for ((i=0; i<n; i++)); do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) == 0 ]]; then\n      n=$((n + 2))\n    else\n    \
    \  n=$((n + 1))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=41>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones_in_level\n    local stones_in_next_level\n\
    \    local stones_in_each_level=()\n    while [[ $n -gt 0 ]]; do\n        stones_in_level=$n\n\
    \        stones_in_each_level+=(\"$stones_in_level\")\n        if [[ $((n % 2))\
    \ -eq 0 ]]; then\n            stones_in_next_level=$((n + 2))\n        else\n\
    \            stones_in_next_level=$((n + 1))\n        fi\n        n=$stones_in_next_level\n\
    \    done\n    echo \"${stones_in_each_level[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=46>
  stdout: <_io.BufferedReader name=37>
  timestamp: 1660341280
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones\n  while [[ $i -lt $n ]]; do\n\
    \    stones[$i]=$((n + i * 2))\n    ((i++))\n  done\n  echo ${stones[@]}\n}\n\n\
    candidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local level=\"$n\"\n    local result=\"\"\n    while\
    \ [[ \"$level\" -gt 0 ]]; do\n        result=\"$result \\\"$level\\\"\"\n    \
    \    if [[ \"$level\" -eq 1 ]]; then\n            break\n        fi\n        if\
    \ [[ \"$level\" -eq 2 ]]; then\n            level=1\n        elif [[ \"$level\"\
    \ -eq 3 ]]; then\n            level=2\n        elif [[ \"$level\" -eq 4 ]]; then\n\
    \            level=3\n        else\n            if [[ \"$((level % 2))\" -eq 0\
    \ ]]; then\n                level=$((level + 1))\n            else\n         \
    \       level=$((level + 2))\n            fi\n        fi\n    done\n    echo \"\
    [$result]\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local i=0\n    while ((i < n));\
    \ do\n        pile[$i]=\"$n\"\n        if ((n % 2 == 0)); then\n            ((n++))\n\
    \        else\n            ((n += 2))\n        fi\n        ((i++))\n    done\n\
    \    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=21>
  stdout: <_io.BufferedReader name=13>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n       \
    \ stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=62>
  stdout: <_io.BufferedReader name=68>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones\n    local i\n    local next_level\n\
    \    for ((i=0; i<n; i++)); do\n        if ((i == 0)); then\n            stones[$i]=\"\
    $n\"\n        else\n            next_level=\"${stones[$((i-1))]}\"\n         \
    \   if ((next_level % 2 == 0)); then\n                stones[$i]=\"$((next_level\
    \ + 2))\"\n            else\n                stones[$i]=\"$((next_level + 1))\"\
    \n            fi\n        fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones\n    local i\n    for ((i=0; i<n; i++));\
    \ do\n        stones[i]=$((n + 2*i))\n    done\n    echo \"${stones[@]}\"\n}\n\
    \ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local level=0\n    while [[\
    \ $level -lt $n ]]; do\n        stones+=(\"$n\")\n        if [[ $((n % 2)) -eq\
    \ 0 ]]; then\n            n=$((n + 2))\n        else\n            n=$((n + 1))\n\
    \        fi\n        level=$((level + 1))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=15>
  stdout: <_io.BufferedReader name=11>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local result=()\n    while ((i < n));\
    \ do\n        result+=(\"$n\")\n        if ((n % 2 == 0)); then\n            n=$((n\
    \ + 2))\n        else\n            n=$((n + 1))\n        fi\n        i=$((i +\
    \ 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=69>
  stdout: <_io.BufferedReader name=25>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n \
    \       stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n          \
    \  n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=73>
  stdout: <_io.BufferedReader name=64>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local -i i=0\n    while ((i <\
    \ n)); do\n        pile[i]=\"$n\"\n        ((n % 2 == 0)) && ((n += 2)) || ((n\
    \ += 1))\n        ((i++))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=96>
  stdout: <_io.BufferedReader name=90>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones[$i]=$n\n    local next_level=$n\n\
    \    while [ $next_level -gt 1 ]; do\n        if [ $((next_level % 2)) -eq 0 ];\
    \ then\n            next_level=$((next_level / 2))\n        else\n           \
    \ next_level=$((next_level / 2 + 1))\n        fi\n        i=$((i + 1))\n     \
    \   stones[$i]=$next_level\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a result\n    result=()\n    local i=0\n \
    \   while [ \"$n\" -gt 0 ]; do\n        result[$i]=\"$n\"\n        if [ $((n %\
    \ 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n            n=$((n\
    \ + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=19>
  stdout: <_io.BufferedReader name=12>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        pile[$i]=\"$n\"\n        if [ \"$((n % 2))\" -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=36>
  stdout: <_io.BufferedReader name=24>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while ((i < n)); do\n   \
    \ stones+=(\"$n\")\n    ((n % 2 == 0)) && ((n++)) || ((n += 2))\n    ((i++))\n\
    \  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=18>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local level=1\n    local stones=$n\n    local result=\"\
    [\\\"$stones\\\"\"\n    while [[ $level -lt $n ]]; do\n        if [[ $((stones\
    \ % 2)) -eq 0 ]]; then\n            stones=$((stones + 2))\n        else\n   \
    \         stones=$((stones + 1))\n        fi\n        result=\"$result, \\\"$stones\\\
    \"\"\n        level=$((level + 1))\n    done\n    echo \"$result]\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones=()\n    while [[ $i -lt $n\
    \ ]]; do\n        stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=82>
  stdout: <_io.BufferedReader name=80>
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local level=1\n  local stones=\"$n\"\n  local next_level_stones\n\
    \  local result=()\n  while [ \"$level\" -lt \"$n\" ]; do\n    if [ \"$((stones\
    \ % 2))\" -eq 0 ]; then\n      next_level_stones=\"$((stones + 2))\"\n    else\n\
    \      next_level_stones=\"$((stones + 1))\"\n    fi\n    result+=(\"$stones\"\
    )\n    stones=\"$next_level_stones\"\n    level=\"$((level + 1))\"\n  done\n \
    \ result+=(\"$stones\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    for ((i=0; i<n; i++)); do\n    \
    \    if ((i%2==0)); then\n            stones+=(\"$((2*i+1))\")\n        else\n\
    \            stones+=(\"$((2*i))\")\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones\n    while [ $i -lt $n ];\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            stones[$i]=$((n + i))\n\
    \        else\n            stones[$i]=$((n + i + 1))\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a pile\n    local i=0\n    while (( i < n\
    \ )); do\n        pile[$i]=\"$n\"\n        if (( n % 2 == 0 )); then\n       \
    \     (( n++ ))\n        else\n            (( n += 2 ))\n        fi\n        ((\
    \ i++ ))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=47>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        fi\n        if [[ \"$((n % 2))\" -eq 0 ]]; then\n            n=\"$((n\
    \ + 1))\"\n        else\n            n=\"$((n - 1))\"\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=33>
  stdout: <_io.BufferedReader name=27>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $i -lt $n\
    \ ]]; do\n        stones+=($n)\n        if [[ $((n % 2)) -eq 0 ]]; then\n    \
    \        n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n  \
    \      i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=39>
  stdout: <_io.BufferedReader name=29>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n       \
    \ stones+=($n)\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n\
    \        else\n            n=$((n + 2))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=42>
  stdout: <_io.BufferedReader name=31>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [ $i -lt $n ]; do\n\
    \    stones+=($n)\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n   \
    \ else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=9>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        stones[$i]=\"$n\"\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    ((i++))\n    if [[ $((n % 2)) -eq 0 ]]; then\n      ((n++))\n\
    \    else\n      ((n--))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=57>
  stdout: <_io.BufferedReader name=55>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while ((i < n));\
    \ do\n        stones+=(\"$n\")\n        if ((n % 2 == 0)); then\n            n=$((n\
    \ + 2))\n        else\n            n=$((n + 1))\n        fi\n        i=$((i +\
    \ 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=48>
  stdout: <_io.BufferedReader name=60>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while (( n > 0 )); do\n        stones+=(\"\
    $n\")\n        (( n % 2 == 0 )) && (( n += 1 )) || (( n += 2 ))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=28>
  stdout: <_io.BufferedReader name=21>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a result\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        result[$i]=\"$n\"\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=64>
  stdout: <_io.BufferedReader name=62>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=58>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  printf '%s\\n' \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=73>
  stdout: <_io.BufferedReader name=68>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones_in_levels=()\n    local stones_in_level=$n\n\
    \    while [[ $stones_in_level -gt 0 ]]; do\n        stones_in_levels+=(\"$stones_in_level\"\
    )\n        if [[ $stones_in_level -eq 1 ]]; then\n            break\n        fi\n\
    \        if [[ $((stones_in_level % 2)) -eq 0 ]]; then\n            stones_in_level=$((stones_in_level\
    \ + 2))\n        else\n            stones_in_level=$((stones_in_level + 1))\n\
    \        fi\n    done\n    echo \"${stones_in_levels[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=78>
  stdout: <_io.BufferedReader name=53>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones\n    local i=0\n    while [ $n -gt 0 ];\
    \ do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n         \
    \   n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n       \
    \ i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=56>
  stdout: <_io.BufferedReader name=52>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        fi\n        if [[ \"$n\" -eq 2 ]]; then\n            n=1\n        else\n\
    \            if [[ \"$((n % 2))\" -eq 0 ]]; then\n                n=$((n + 1))\n\
    \            else\n                n=$((n + 2))\n            fi\n        fi\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=51>
  stdout: <_io.BufferedReader name=45>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [[ \"$n\" -gt 0 ]]; do\n   \
    \ stones+=(\"$n\")\n    if [[ \"$n\" -eq 1 ]]; then\n      break\n    fi\n   \
    \ if [[ \"$n\" -eq 2 ]]; then\n      n=1\n    else\n      if [[ \"$((n % 2))\"\
    \ -eq 0 ]]; then\n        n=$((n + 1))\n      else\n        n=$((n + 2))\n   \
    \   fi\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=83>
  stdout: <_io.BufferedReader name=71>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=\"$n\"\n    local i=1\n    while [ \"\
    $stones\" -gt 1 ]; do\n        if [ \"$((stones % 2))\" -eq 0 ]; then\n      \
    \      stones=$((stones + 1))\n        else\n            stones=$((stones - 1))\n\
    \        fi\n        i=$((i + 1))\n        echo \"\\\"$stones\\\"\"\n    done\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=54>
  stdout: <_io.BufferedReader name=79>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [ \"$n\" -gt 0 ]; do\n    stones+=(\"\
    $n\")\n    if [ \"$((n % 2))\" -eq 0 ]; then\n      n=$((n + 1))\n    else\n \
    \     n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=66>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local -a pile\n  while [[ \"$n\" -gt 0 ]]; do\n    pile+=(\"\
    $n\")\n    if [[ \"$n\" -eq 1 ]]; then\n      break\n    fi\n    if [[ \"$((n\
    \ % 2))\" -eq 0 ]]; then\n      n=\"$((n + 1))\"\n    else\n      n=\"$((n - 1))\"\
    \n    fi\n  done\n  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n  \
    \  [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7\
    \ 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=49>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  while [[ \"$n\" -gt 0 ]]; do\n   \
    \ stones+=(\"$n\")\n    if [[ \"$n\" -eq 1 ]]; then\n      break\n    fi\n   \
    \ if [[ \"$((n % 2))\" -eq 0 ]]; then\n      n=\"$((n + 1))\"\n    else\n    \
    \  n=\"$((n - 1))\"\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=75>
  stdout: <_io.BufferedReader name=67>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $i -lt $n\
    \ ]]; do\n        stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=19>
  stdout: <_io.BufferedReader name=11>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [[ $i -lt $n ]]; do\n\
    \    stones+=(\"$n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 2))\n\
    \    else\n      n=$((n + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=95>
  stdout: <_io.BufferedReader name=93>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while (( i <\
    \ n )); do\n        stones+=(\"$n\")\n        (( n % 2 == 0 )) && (( n += 2 ))\
    \ || (( n += 1 ))\n        (( i++ ))\n    done\n    echo \"${stones[@]}\"\n}\n\
    \ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=24>
  stdout: <_io.BufferedReader name=21>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local -a pile\n    local n=$1\n    local i=0\n    while [[ $n -gt 0 ]];\
    \ do\n        pile[$i]=$n\n        (( i++ ))\n        if [[ $(( n % 2 )) -eq 0\
    \ ]]; then\n            (( n++ ))\n        else\n            (( n += 2 ))\n  \
    \      fi\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=74>
  stdout: <_io.BufferedReader name=46>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        fi\n        if [[ \"$n\" -eq 2 ]]; then\n            n=1\n        elif\
    \ [[ \"$n\" -eq 3 ]]; then\n            n=2\n        elif [[ \"$n\" -eq 4 ]];\
    \ then\n            n=3\n        else\n            if [[ \"$((n % 2))\" -eq 0\
    \ ]]; then\n                n=$((n + 1))\n            else\n                n=$((n\
    \ + 2))\n            fi\n        fi\n    done\n    echo \"${stones[@]}\"\n}\n\n\
    candidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        stones[$i]=\"$n\"\n        ((i++))\n        if [[ $((n % 2))\
    \ -eq 0 ]]; then\n            ((n++))\n        else\n            ((n--))\n   \
    \     fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=37>
  stdout: <_io.BufferedReader name=25>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        elif [[ \"$n\" -eq 2 ]]; then\n            n=1\n        elif [[ \"$((n\
    \ % 2))\" -eq 0 ]]; then\n            n=$((n / 2))\n        else\n           \
    \ n=$(((n + 1) / 2))\n        fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341270
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        ((i++))\n        if [[ $((n % 2)) -eq\
    \ 0 ]]; then\n            ((n++))\n        else\n            ((n--))\n       \
    \ fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=17>
  timestamp: 1660341285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=1\n    local stones=()\n    while [ $i -le $n\
    \ ]; do\n        stones+=($((n + i)))\n        i=$((i + 2))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=($n)\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=76>
  stdout: <_io.BufferedReader name=65>
  timestamp: 1660341285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=1\n    local stones=()\n    while [[ $i -le\
    \ $n ]]; do\n        stones+=($((n + i)))\n        ((i += 2))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local -a pile\n  local n=$1\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    pile[$i]=$n\n    (( n = n % 2 == 0 ? n + 1 : n + 2 ))\n    (( i++ ))\n  done\n\
    \  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=81>
  stdout: <_io.BufferedReader name=77>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local result=()\n  local i=0\n  while [[ $i -lt $n ]];\
    \ do\n    if [[ $((i % 2)) -eq 0 ]]; then\n      result+=(\"$((n + i))\")\n  \
    \  else\n      result+=(\"$((n + i + 1))\")\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]];\
    \ do\n    stones[$i]=\"$n\"\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n\
    \ + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=27>
  stdout: <_io.BufferedReader name=18>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n\
    \    stones[$i]=$n\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n\
    \    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        stones[$i]=\"$n\"\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=1\n    local stones=()\n    while (( i <=\
    \ n )); do\n        if (( i % 2 == 0 )); then\n            stones+=(\"$(( i +\
    \ 1 ))\")\n        else\n            stones+=(\"$(( i + 2 ))\")\n        fi\n\
    \        (( i++ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local level=1\n    local stones=$n\n    local result=()\n\
    \    while [ $stones -gt 0 ]; do\n        result+=(\"$stones\")\n        if [\
    \ $((level % 2)) -eq 0 ]; then\n            stones=$((stones - 2))\n        else\n\
    \            stones=$((stones - 1))\n        fi\n        level=$((level + 1))\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [ $n -gt 0\
    \ ]; do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n      \
    \      n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    \
    \    i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n \
    \   make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=23>
  stdout: <_io.BufferedReader name=29>
  timestamp: 1660341275
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=$(seq $n $((n+2)))\n  local even_stones=$(seq\
    \ $((n+1)) $((n+3)))\n  if [[ $((n % 2)) -eq 0 ]]; then\n    echo \"[$(echo $stones\
    \ | tr ' ' ',')]\"\n  else\n    echo \"[$(echo $even_stones | tr ' ' ',')]\"\n\
    \  fi\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8\
    \ 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$n\"\
    \ -gt 0 ]; do\n        stones[$i]=\"$n\"\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local result=\"$n\"\n  local i=0\n  while [ $i -lt $n\
    \ ]; do\n    if [ $((n % 2)) -eq 0 ]; then\n      result=\"$result,$((n + 2))\"\
    \n    else\n      result=\"$result,$((n + 1))\"\n    fi\n    n=$((n + 2))\n  \
    \  i=$((i + 1))\n  done\n  echo \"[$result]\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=23>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [ $n -gt 0 ]; do\n    stones+=(\"\
    $n\")\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n    else\n     \
    \ n=$((n + 2))\n    fi\n  done\n  echo ${stones[@]}\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=29>
  stdout: <_io.BufferedReader name=18>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n \
    \       stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n          \
    \  n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=73>
  stdout: <_io.BufferedReader name=64>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local result=()\n    while [[ $i -lt $n\
    \ ]]; do\n        result[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       ((i++))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n   \
    \ make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"\
    5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n\
    \    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=31>
  stdout: <_io.BufferedReader name=27>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ $i -lt\
    \ $n ]; do\n        stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=89>
  stdout: <_io.BufferedReader name=10>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        stones+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        fi\n        if [[ \"$n\" -eq 2 ]]; then\n            n=1\n        else\n\
    \            if [[ \"$((n % 2))\" -eq 0 ]]; then\n                n=$((n + 1))\n\
    \            else\n                n=$((n + 2))\n            fi\n        fi\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=51>
  stdout: <_io.BufferedReader name=45>
  timestamp: 1660341285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local stones=()\n    while [ $i -lt\
    \ $n ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            stones+=(\"$((n\
    \ + i))\")\n        else\n            stones+=(\"$((n + i + 1))\")\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=\"$n\"\n  local i=1\n  local next_level_stones\n\
    \  while [ \"$stones\" -gt 0 ]; do\n    if [ \"$((stones % 2))\" -eq 0 ]; then\n\
    \      next_level_stones=\"$((stones + 2))\"\n    else\n      next_level_stones=\"\
    $((stones + 1))\"\n    fi\n    echo \"\\\"$next_level_stones\\\"\"\n    stones=\"\
    $((stones - next_level_stones))\"\n    i=\"$((i + 1))\"\n  done\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local result=()\n    while [[ $i -lt $n\
    \ ]]; do\n        result+=($n)\n        if [[ $((n % 2)) -eq 0 ]]; then\n    \
    \        n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n  \
    \      i=$((i + 1))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n   \
    \ make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"\
    5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n\
    \    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=69>
  stdout: <_io.BufferedReader name=60>
  timestamp: 1660341290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=$n\n    local next_stones=$((n + 2))\n \
    \   local stones_list=()\n    while [[ $stones -gt 0 ]]; do\n        stones_list+=($stones)\n\
    \        stones=$((stones - next_stones))\n        next_stones=$((next_stones\
    \ + 2))\n    done\n    echo \"${stones_list[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        stones[$i]=\"$n\"\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=57>
  stdout: <_io.BufferedReader name=10>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=\"$n\"\n  local next_stones=\"$n\"\n  local\
    \ pile=()\n  while [[ \"$next_stones\" -gt 0 ]]; do\n    pile+=(\"$stones\")\n\
    \    if [[ \"$stones\" -eq \"$n\" ]]; then\n      if [[ \"$stones\" -eq 1 ]];\
    \ then\n        next_stones=0\n      elif [[ \"$stones\" -eq 2 ]]; then\n    \
    \    next_stones=3\n      else\n        next_stones=$((stones + 2))\n      fi\n\
    \    else\n      if [[ \"$stones\" -eq 1 ]]; then\n        next_stones=0\n   \
    \   elif [[ \"$stones\" -eq 2 ]]; then\n        next_stones=1\n      else\n  \
    \      next_stones=$((stones - 2))\n      fi\n    fi\n    stones=\"$next_stones\"\
    \n  done\n  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=80>
  stdout: <_io.BufferedReader name=55>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ \"$i\"\
    \ -lt \"$n\" ]; do\n        stones+=(\"$n\")\n        if [ \"$((n % 2))\" -eq\
    \ 0 ]; then\n            n=$((n + 1))\n        else\n            n=$((n + 2))\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\n\
    candidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=92>
  stdout: <_io.BufferedReader name=72>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [ $i -lt $n ]; do\n\
    \    stones[$i]=$n\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n  \
    \  else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo ${stones[@]}\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=41>
  stdout: <_io.BufferedReader name=30>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local stones=()\n    while [ $i -lt\
    \ $n ]; do\n        if [ $((n % 2)) -eq 0 ]; then\n            stones+=(\"$((n\
    \ + 2))\")\n        else\n            stones+=(\"$((n + 1))\")\n        fi\n \
    \       n=$((n + 1))\n        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=45>
  stdout: <_io.BufferedReader name=38>
  timestamp: 1660341290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local -r n=\"$1\"\n  local -i i=0\n  local -i stones=n\n  local -a pile=()\n\
    \  while (( i < n )); do\n    pile+=(\"$stones\")\n    (( stones = stones % 2\
    \ == 0 ? stones + 2 : stones + 1 ))\n    (( i++ ))\n  done\n  echo \"${pile[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n%2)) -eq 0 ]]; then\n            n=$((n+1))\n\
    \        else\n            n=$((n+2))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=88>
  stdout: <_io.BufferedReader name=86>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=($n)\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=76>
  stdout: <_io.BufferedReader name=65>
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n \
    \       stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n          \
    \  n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=73>
  stdout: <_io.BufferedReader name=64>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones_in_level=()\n    local i=0\n    while [[\
    \ $n -gt 0 ]]; do\n        stones_in_level[$i]=$n\n        if [[ $((n % 2)) -eq\
    \ 0 ]]; then\n            n=$((n + 1))\n        else\n            n=$((n + 2))\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo \"${stones_in_level[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=84>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local stones=()\n  while [[ $n -gt 0 ]]; do\n    stones+=(\"\
    $n\")\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n   \
    \   n=$((n + 2))\n    fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=50>
  stdout: <_io.BufferedReader name=48>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        stones[$i]=\"$n\"\n        if [[ $((n % 2)) -eq 0 ]]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=57>
  stdout: <_io.BufferedReader name=10>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n       \
    \ stones+=($n)\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n\
    \        else\n            n=$((n + 2))\n        fi\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=42>
  stdout: <_io.BufferedReader name=31>
  timestamp: 1660341280
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local i=0\n    local stones=()\n    while [ $i -lt $n\
    \ ]; do\n        stones+=(\"$n\")\n        if [ $((n % 2)) -eq 0 ]; then\n   \
    \         n=$((n + 2))\n        else\n            n=$((n + 1))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=90>
  stdout: <_io.BufferedReader name=33>
  timestamp: 1660341290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [[ $i -lt $n ]];\
    \ do\n    stones+=(\"$((n+i))\")\n    ((i++))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=$1\n  local i=0\n  local stones=()\n  while [ $i -lt $n ]; do\n\
    \    stones[$i]=$n\n    if [ $((n % 2)) -eq 0 ]; then\n      n=$((n + 1))\n  \
    \  else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=40>
  stdout: <_io.BufferedReader name=15>
  timestamp: 1660341290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones_in_level=()\n    local level=1\n    while\
    \ [[ $level -le $n ]]; do\n        if [[ $((level % 2)) -eq 0 ]]; then\n     \
    \       stones_in_level+=($((level + 1)))\n        else\n            stones_in_level+=($((level\
    \ + 2)))\n        fi\n        level=$((level + 1))\n    done\n    echo \"${stones_in_level[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local pile=()\n    while [[ $n -gt 0 ]]; do\n       \
    \ pile+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=63>
  stdout: <_io.BufferedReader name=61>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    local i=0\n    while [[ $n -gt 0\
    \ ]]; do\n        stones[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=14>
  timestamp: 1660341275
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local -a result\n    while [[ \"$n\" -gt 0 ]]; do\n\
    \        result+=(\"$n\")\n        if [[ \"$n\" -eq 1 ]]; then\n            break\n\
    \        fi\n        if [[ \"$((n % 2))\" -eq 0 ]]; then\n            ((n++))\n\
    \        else\n            ((n--))\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=52>
  stdout: <_io.BufferedReader name=49>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n  local n=\"$1\"\n  local stones=()\n  local i=0\n  while [ \"$n\" -gt 0\
    \ ]; do\n    stones[$i]=\"$n\"\n    if [ \"$((n % 2))\" -eq 0 ]; then\n      n=$((n\
    \ + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=51>
  stdout: <_io.BufferedReader name=59>
  timestamp: 1660341290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\nmake_a_pile()\
    \ {\n    local n=$1\n    local stones=()\n    while [[ $n -gt 0 ]]; do\n     \
    \   stones+=(\"$n\")\n        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n\
    \ + 1))\n        else\n            n=$((n + 2))\n        fi\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=11>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660341275
