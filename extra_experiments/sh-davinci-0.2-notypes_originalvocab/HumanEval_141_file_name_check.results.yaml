language: sh
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][0-9]{0,3}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ name_part=${file_name%.*}\n    local ext_part=${file_name##*.}\n    if [[ ${#name_part}\
    \ -gt 8 ]]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ${name_part}\
    \ =~ [^a-zA-Z0-9] ]]; then\n        echo \"No\"\n        return\n    fi\n    if\
    \ [[ ${name_part} =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    if [[ ${ext_part} != \"txt\" && ${ext_part} != \"exe\" && ${ext_part}\
    \ != \"dll\" ]]; then\n        echo \"No\"\n        return\n    fi\n    echo \"\
    Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ name_regex=\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\"\n    local digit_regex=\"\
    [0-9]\"\n    local dot_regex=\"\\.\"\n    local valid_extensions=(\"txt\" \"exe\"\
    \ \"dll\")\n    local extension=\"\"\n    local name=\"\"\n    local num_digits=0\n\
    \    local num_dots=0\n    local i=0\n    local valid=true\n\n    # Check if the\
    \ file name is valid\n    if [[ ! $file_name =~ $name_regex ]]; then\n       \
    \ valid=false\n    fi\n\n    # Check if the file name has more than 3 digits\n\
    \    num_digits=$(echo $file_name | grep -o $digit_regex | wc -l)\n    if [[ $num_digits\
    \ -gt 3 ]]; then\n        valid=false\n    fi\n\n    # Check if the file name\
    \ has more than 1 dot\n    num_dots=$(echo $file_name | grep -o $dot_regex | wc\
    \ -l)\n    if [[ $num_dots -gt 1 ]]; then\n        valid=false\n    fi\n\n   \
    \ # Check if the file name has a valid extension\n    extension=$(echo $file_name\
    \ | cut -d'.' -f2)\n    for i in \"${valid_extensions[@]}\"; do\n        if [[\
    \ $i == $extension ]]; then\n            break\n        fi\n    done\n    if [[\
    \ $i != $extension ]]; then\n        valid=false\n    fi\n\n    # Return the result\n\
    \    if [[ $valid == true ]]; then\n        echo \"Yes\"\n    else\n        echo\
    \ \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n   \
    \ local file_extension_pattern=\"^\\.[a-zA-Z0-9]{1,3}$\"\n    local file_extension_pattern_valid=\"\
    ^\\.(txt|exe|dll)$\"\n    local file_name_valid=\"No\"\n    if [[ $file_name =~\
    \ $file_name_pattern ]]; then\n        local file_extension=${file_name##*.}\n\
    \        if [[ $file_extension =~ $file_extension_pattern ]]; then\n         \
    \   if [[ $file_extension =~ $file_extension_pattern_valid ]]; then\n        \
    \        file_name_valid=\"Yes\"\n            fi\n        fi\n    fi\n    echo\
    \ $file_name_valid\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$\"\n   \
    \ if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii_code=$(printf \"%d\" \"\
    '$file_name_without_extension_first_char\")\n    local file_name_without_extension_first_char_ascii_code_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n    local file_name_without_extension_first_char_ascii_code_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n    local file_name_without_extension_first_char_ascii_code_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n    local file_name_without_extension_first_char_ascii_code_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n    local file_name_without_extension_first_char_ascii_code_is_valid=false\n\
    \    local file_name_without\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n    local\
    \ file_extension_regex=\"^(txt|exe|dll)$\"\n    local file_extension=$(echo $file_name\
    \ | cut -d'.' -f2)\n    if [[ $file_name =~ $file_name_regex ]] && [[ $file_extension\
    \ =~ $file_extension_regex ]]; then\n        echo \"Yes\"\n    else\n        echo\
    \ \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local dot_index=$(expr index \"$file_name\"\
    \ '.')\n    local file_name_before_dot=${file_name:0:$dot_index-1}\n    local\
    \ file_name_after_dot=${file_name:$dot_index}\n    local file_name_before_dot_len=${#file_name_before_dot}\n\
    \    local file_name_after_dot_len=${#file_name_after_dot}\n    local file_name_before_dot_digit_count=0\n\
    \    local file_name_after_dot_valid=0\n    local file_name_before_dot_valid=0\n\
    \    local file_name_valid=0\n    local i=0\n    local c=0\n    local file_name_before_dot_first_char=${file_name_before_dot:0:1}\n\
    \    local file_name_before_dot_first_char_ascii_code=$(printf \"%d\" \"'$file_name_before_dot_first_char\"\
    )\n    local file_name_before_dot_first_char_ascii_code_lower_bound=$(printf \"\
    %d\" \"'a\")\n    local file_name_before_dot_first_char_ascii_code_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_before_dot_first_char_ascii_code_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_before_dot_first_char_ascii_code_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_before_dot_first_char_ascii_code_lower_bound_digit=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_before_dot_first_char_ascii_code_upper_bound_digit=$(printf\
    \ \"%d\" \"'9\")\n    if [ $file_name_len -gt 0 ] && [ $dot_index -gt 0 ] && [\
    \ $dot_index -lt $file_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp5un2wnup.sh: line 39: syntax error near unexpected token `}''\n/tmp/tmp5un2wnup.sh:
    line 39: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_length=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii_code=$(printf \"%d\" \"\
    '$file_name_without_extension_first_char\")\n    local file_name_without_extension_first_char_ascii_code_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_code_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_code_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_code_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_valid=0\n\
    \    local file_name_without_extension_first_char_is_digit=0\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_lower_case=0\n    local file_name_without_extension_first_char_is_upper_case=0\n\
    \    local file_name_without_extension_first_char_is_valid=0\n    local file_name_without_extension_first_char_is_digit=0\n\
    \    local file_name_without_extension_first_char_is_letter=0\n    local file_name_without_extension_first_char_is_lower_case=0\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n   \
    \ local file_extension_pattern=\"^(txt|exe|dll)$\"\n    local file_extension=$(echo\
    \ $file_name | cut -d'.' -f2)\n    if [[ $file_name =~ $file_name_pattern ]] &&\
    \ [[ $file_extension =~ $file_extension_pattern ]]; then\n        echo \"Yes\"\
    \n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n    local\
    \ extension_regex=\"^(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        local extension=${file_name##*.}\n        if [[ $extension\
    \ =~ $extension_regex ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})?$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local FILE_NAME=$1\n    local\
    \ FILE_NAME_REGEX=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\.dll$\"\n    if [[ $FILE_NAME =~ $FILE_NAME_REGEX\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=\"$1\"\n \
    \   local file_name_len=$(expr length \"$file_name\")\n    local file_name_len_without_ext=$(expr\
    \ index \"$file_name\" '.')\n    local file_name_ext=${file_name:$file_name_len_without_ext}\n\
    \    local file_name_ext_len=$(expr length \"$file_name_ext\")\n    local file_name_without_ext=${file_name:0:$file_name_len_without_ext}\n\
    \    local file_name_without_ext_len=$(expr length \"$file_name_without_ext\"\
    )\n    local file_name_without_ext_first_char=${file_name_without_ext:0:1}\n \
    \   local file_name_without_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_without_ext_first_char\"\
    )\n    local file_name_without_ext_first_char_ascii_lower=$(expr $file_name_without_ext_first_char_ascii\
    \ + 32)\n    local file_name_without_ext_first_char_lower=$(printf \\\\$(printf\
    \ '%03o' $file_name_without_ext_first_char_ascii_lower))\n    local file_name_without_ext_first_char_ascii_upper=$(expr\
    \ $file_name_without_ext_first_char_ascii - 32)\n    local file_name_without_ext_first_char_upper=$(printf\
    \ \\\\$(printf '%03o' $file_name_without_ext_first_char_ascii_upper))\n    local\
    \ file_name_without_ext_first_char_ascii_lower_is_valid=0\n    local file_name_without_ext_first_char_ascii_upper_is_valid=0\n\
    \    local file_name_without_ext_first_char_is_valid=0\n    local file_name_without_ext_is_valid=0\n\
    \    local file_name_ext_is_valid=0\n    local file_name_is_valid=0\n    local\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal file_name_len_without_extension=$(echo\
    \ $file_name | cut -d '.' -f 1 | wc -c)\n\tlocal file_name_len_without_extension=$((file_name_len_without_extension-1))\n\
    \tlocal file_name_extension=$(echo $file_name | cut -d '.' -f 2)\n\tlocal file_name_extension_len=${#file_name_extension}\n\
    \tlocal file_name_extension_len_without_dot=$((file_name_extension_len-1))\n\t\
    local file_name_extension_len_without_dot_and_extension=$((file_name_len-file_name_extension_len-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_extension=$((file_name_extension_len_without_dot_and_extension-1))\n\
    \tlocal file_name_extension_len_without_dot_and_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\n \
    \   local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{1,3})?$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal dot_index=$(expr index \"$file_name\" '.')\n\
    \tlocal dot_index_plus_one=$((dot_index + 1))\n\tlocal file_name_extension=${file_name:$dot_index_plus_one:$file_name_len}\n\
    \tlocal file_name_extension_len=${#file_name_extension}\n\tlocal file_name_extension_len_minus_one=$((file_name_extension_len\
    \ - 1))\n\tlocal file_name_extension_minus_one=${file_name_extension:0:$file_name_extension_len_minus_one}\n\
    \tlocal file_name_extension_minus_one_len=${#file_name_extension_minus_one}\n\t\
    local file_name_extension_minus_one_len_minus_one=$((file_name_extension_minus_one_len\
    \ - 1))\n\tlocal file_name_extension_minus_one_minus_one=${file_name_extension_minus_one:0:$file_name_extension_minus_one_len_minus_one}\n\
    \tlocal file_name_extension_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one}\n\
    \tlocal file_name_extension_minus_one_minus_one_len_minus_one=$((file_name_extension_minus_one_minus_one_len\
    \ - 1))\n\tlocal file_name_extension_minus_one_minus_one_minus_one=${file_name_extension_minus_one_minus_one:0:$file_name_extension_minus_one_minus_one_len_minus_one}\n\
    \tlocal file_name_extension_minus_one_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one_minus_one}\n\
    \tlocal file_name_extension_minus_one_minus_one_minus_one_len_minus_one=$((file_name\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpbuk28zb3.sh: line 32: unexpected EOF while looking for matching
    `)''\n/tmp/tmpbuk28zb3.sh: line 70: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  local file_name=$1\n  local\
    \ file_name_len=${#file_name}\n  local dot_index=$(expr index \"$file_name\" '.')\n\
    \  local dot_index_len=${#dot_index}\n  local file_extension=${file_name:$dot_index:$file_name_len}\n\
    \  local file_name_without_extension=${file_name:0:$dot_index-1}\n  local file_name_without_extension_len=${#file_name_without_extension}\n\
    \  local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \  local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n  local file_name_without_extension_first_char_ascii_len=${#file_name_without_extension_first_char_ascii}\n\
    \  local file_name_without_extension_first_char_ascii_first_digit=${file_name_without_extension_first_char_ascii:0:1}\n\
    \  local file_name_without_extension_first_char_ascii_first_digit_len=${#file_name_without_extension_first_char_ascii_first_digit}\n\
    \  local file_name_without_extension_first_char_ascii_second_digit=${file_name_without_extension_first_char_ascii:1:1}\n\
    \  local file_name_without_extension_first_char_ascii_second_digit_len=${#file_name_without_extension_first_char_ascii_second_digit}\n\
    \  local file_name_without_extension_first_char_ascii_third_digit=${file_name_without_extension_first_char_ascii:2:1}\n\
    \  local file_name_without_extension_first_char_ascii_third_digit_len=${#file_name_without\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0qy5w0pp.sh: line 70: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\n \
    \   local file_extension_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        local file_extension=${file_name##*.}\n\
    \        if [[ $file_extension =~ $file_extension_pattern ]]; then\n         \
    \   echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{1,3})?$ ]]; then\n\t\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt$\
    \ ]]; then\n\t\t\techo \"Yes\"\n\t\telif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n\t\t\techo \"Yes\"\n\t\telif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\
    \t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  local file_name=$1\n  local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n  if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{1,3})?$ ]]; then\n\t\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt$\
    \ ]]; then\n\t\t\techo \"Yes\"\n\t\telif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n\t\t\techo \"Yes\"\n\t\telif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\
    \t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_ext=${file_name##*.}\n    local\
    \ file_name_ext_len=${#file_name_ext}\n    local file_name_ext_len_diff=$((file_name_len\
    \ - file_name_ext_len - 1))\n    local file_name_ext_len_diff_len=${#file_name_ext_len_diff}\n\
    \    local file_name_ext_len_diff_len_diff=$((file_name_ext_len_diff - file_name_ext_len_diff_len))\n\
    \    local file_name_ext_len_diff_len_diff_len=${#file_name_ext_len_diff_len_diff}\n\
    \    local file_name_ext_len_diff_len_diff_len_diff=$((file_name_ext_len_diff_len\
    \ - file_name_ext_len_diff_len_diff_len))\n    local file_name_ext_len_diff_len_diff_len_diff_len=${#file_name_ext_len_diff_len_diff_len_diff}\n\
    \    local file_name_ext_len_diff_len_diff_len_diff_len_diff=$((file_name_ext_len_diff_len_diff_len\
    \ - file_name_ext_len_diff_len_diff_len_diff_len))\n    local file_name_ext_len_diff_len_diff_len_diff_len_diff_len=${#file_name_ext_len_diff_len_diff_len_diff_len_diff}\n\
    \    local file_name_ext_len_diff_len_diff_len_diff_len_diff_len_diff=$((file_name_ext_len_diff_len_diff_len_diff_len\
    \ - file_name_ext_len_diff_len_diff_len_diff_len_diff_len))\n    local file_name_ext_len_diff_len_diff_len_diff_len_diff_len_diff_len=${#file_name_ext_len_diff\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmf2at8v3.sh: line 68: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_pattern=\"^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\"\n\tif [[ $file_name\
    \ =~ $file_name_pattern ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\t\
    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_len_without_ext=${file_name_len%%.*}\n\
    \    local file_name_len_without_ext_len=${#file_name_len_without_ext}\n    local\
    \ file_name_ext=${file_name#*.}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_ext_len_without_dot=${file_name_ext_len#*.}\n    local file_name_ext_len_without_dot_len=${#file_name_ext_len_without_dot}\n\
    \    local file_name_ext_len_without_dot_len_without_ext=${file_name_ext_len_without_dot%%.*}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len=${#file_name_ext_len_without_dot_len_without_ext}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len_without_dot=${file_name_ext_len_without_dot_len_without_ext#*.}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len_without_dot_len=${#file_name_ext_len_without_dot_len_without_ext_len_without_dot}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len_without_dot_len_without_ext=${file_name_ext_len_without_dot_len_without_ext_len_without_dot%%.*}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len_without_dot_len_without_ext_len=${#file_name_ext_len_without_dot_len_without_ext_len_without_dot_len_without_ext}\n\
    \    local file_name_ext_len_without_dot_len_without_ext_len_without_dot_len_without_ext_len_without\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if [[ $file_name =~\
    \ $regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_first_char_valid=0\n    local file_name_without_extension_valid=0\n\
    \    local file_name_extension_valid=0\n    local file_name_valid=0\n    local\
    \ file_name_without_extension_first_char_ascii_valid=0\n    local file_name_without_extension_first_char_valid=0\n\
    \    local file_name_without_extension_valid=0\n    local file_name_extension_valid=0\n\
    \    local file_name_valid=0\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_first_char_valid=0\n    local\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=\"$1\"\n \
    \   local file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if\
    \ [[ \"$file_name\" =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n\tif [[ $file_name\
    \ =~ $file_name_pattern ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\t\
    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    file_name=$1\n    if [[ $file_name\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]; then\n        if [[ $file_name\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[tT][xX][tT])$ ]]; then\n            echo \"Yes\"\
    \n        elif [[ $file_name =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[eE][xX][eE])$ ]]; then\n\
    \            echo \"Yes\"\n        elif [[ $file_name =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[dD][lL][lL])$ ]]; then\n            echo \"Yes\"\n        else\n           \
    \ echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local dot_index=$(expr index \"$file_name\"\
    \ \".\")\n    local dot_index_minus_one=$((dot_index - 1))\n    local dot_index_plus_one=$((dot_index\
    \ + 1))\n    local dot_index_plus_two=$((dot_index + 2))\n    local dot_index_plus_three=$((dot_index\
    \ + 3))\n    local dot_index_plus_four=$((dot_index + 4))\n    local dot_index_plus_five=$((dot_index\
    \ + 5))\n    local dot_index_plus_six=$((dot_index + 6))\n    local dot_index_plus_seven=$((dot_index\
    \ + 7))\n    local dot_index_plus_eight=$((dot_index + 8))\n    local dot_index_plus_nine=$((dot_index\
    \ + 9))\n    local dot_index_plus_ten=$((dot_index + 10))\n    local dot_index_plus_eleven=$((dot_index\
    \ + 11))\n    local dot_index_plus_twelve=$((dot_index + 12))\n    local dot_index_plus_thirteen=$((dot_index\
    \ + 13))\n    local dot_index_plus_fourteen=$((dot_index + 14))\n    local dot_index_plus_fifteen=$((dot_index\
    \ + 15))\n    local dot_index_plus_sixteen=$((dot_index + 16))\n    local dot_index_plus_seventeen=$((dot_index\
    \ + 17))\n    local dot_index_plus_eighteen=$((dot_index + 18))\n    local dot_index_plus_nineteen=$((dot_index\
    \ + 19))\n    local dot_index_plus_twenty=$((dot_index + 20))\n    local dot_index_plus_twenty_one=$((dot_index\
    \ + 21))\n    local dot_index_plus_twenty_two=$((dot_index + 22))\n    local dot_index_plus_twenty_three=$((dot_index\
    \ + 23))\n    local dot_index_plus_twenty_four=$((dot_index + 24\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpip53t3iz.sh: line 44: unexpected EOF while looking for matching
    `)''\n/tmp/tmpip53t3iz.sh: line 82: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\n\
    \tif [[ $file_name =~ $regex ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\
    \n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    if\
    \ [[ $file_name =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]; then\n        if\
    \ [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[ ${BASH_REMATCH[1]} == \".exe\" ]]\
    \ || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n            echo \"Yes\"\n  \
    \      else\n            echo \"No\"\n        fi\n    else\n        echo \"No\"\
    \n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\\
    .(txt|exe|dll)$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=\"$1\"\n \
    \   local file_name_without_extension=\"${file_name%.*}\"\n    local file_name_extension=\"\
    ${file_name##*.}\"\n    local file_name_extension_is_valid=0\n    local file_name_without_extension_is_valid=0\n\
    \    local file_name_contains_more_than_three_digits=0\n    local file_name_contains_more_than_one_dot=0\n\
    \    local file_name_contains_no_dot=0\n    local file_name_contains_no_letters=0\n\
    \    local file_name_contains_no_digits=0\n    local file_name_contains_no_letters_or_digits=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores=0\n    local\
    \ file_name_contains_no_letters_or_digits_or_underscores_or_dashes=0\n    local\
    \ file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots_or_slashes=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots_or_slashes_or_colons=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots_or_slashes_or_colons_or_asterisks=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots_or_slashes_or_colons_or_asterisks_or_question_marks=0\n\
    \    local file_name_contains_no_letters_or_digits_or_underscores_or_dashes_or_dots_or_slashes_or\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal file_name_no_ext=${file_name%.*}\n\tlocal\
    \ file_name_ext=${file_name##*.}\n\tlocal file_name_no_ext_len=${#file_name_no_ext}\n\
    \tlocal file_name_ext_len=${#file_name_ext}\n\tlocal file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \tlocal file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n\tlocal file_name_no_ext_first_char_ascii_lower=$(printf \"%d\" \"'a\")\n\t\
    local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'A\")\n\tlocal\
    \ file_name_no_ext_first_char_ascii_lower_end=$(printf \"%d\" \"'z\")\n\tlocal\
    \ file_name_no_ext_first_char_ascii_upper_end=$(printf \"%d\" \"'Z\")\n\tlocal\
    \ file_name_no_ext_first_char_is_letter=0\n\tlocal file_name_no_ext_first_char_is_digit=0\n\
    \tlocal file_name_no_ext_first_char_is_letter_or_digit=0\n\tlocal file_name_no_ext_first_char_is_digit_ascii=$(printf\
    \ \"%d\" \"'0\")\n\tlocal file_name_no_ext_first_char_is_digit_ascii_end=$(printf\
    \ \"%d\" \"'9\")\n\tlocal file_name_no_ext_first_char_is_digit_ascii_diff=$((file_name_no_ext_first_char_ascii\
    \ - file_name_no_ext_first_char_is_digit_ascii))\n\tlocal file_name_no_ext_first_char_is_digit_ascii_diff_end=$((file_name_no_ext_first\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpo5nekagx.sh: line 35: unexpected EOF while looking for matching
    `)''\n/tmp/tmpo5nekagx.sh: line 73: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3}){1}$\"\n   \
    \ local file_extension_regex=\"^(txt|exe|dll)$\"\n    local file_extension=$(echo\
    \ $file_name | cut -d '.' -f 2)\n    if [[ $file_name =~ $file_name_regex ]] &&\
    \ [[ $file_extension =~ $file_extension_regex ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{3})?$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$\
    \ ]] || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n  \
    \          echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{3})?$ ]]; then\n\t\tif [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\
    \n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  local file_name=$1\n  local\
    \ file_name_len=${#file_name}\n  local file_name_no_ext=${file_name%.*}\n  local\
    \ file_name_ext=${file_name##*.}\n  local file_name_no_ext_len=${#file_name_no_ext}\n\
    \  local file_name_ext_len=${#file_name_ext}\n  local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \  local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n  local file_name_no_ext_first_char_ascii_lower_case=$(printf \"%d\" \"'a\"\
    )\n  local file_name_no_ext_first_char_ascii_upper_case=$(printf \"%d\" \"'A\"\
    )\n  local file_name_no_ext_first_char_ascii_lower_case_limit=$(printf \"%d\"\
    \ \"'z\")\n  local file_name_no_ext_first_char_ascii_upper_case_limit=$(printf\
    \ \"%d\" \"'Z\")\n  local file_name_no_ext_first_char_ascii_lower_case_limit_plus_one=$((file_name_no_ext_first_char_ascii_lower_case_limit\
    \ + 1))\n  local file_name_no_ext_first_char_ascii_upper_case_limit_plus_one=$((file_name_no_ext_first_char_ascii_upper_case_limit\
    \ + 1))\n  local file_name_no_ext_first_char_ascii_lower_case_limit_minus_one=$((file_name_no_ext_first_char_ascii_lower_case_limit\
    \ - 1))\n  local file_name_no_ext_first_char_ascii_upper_case_limit_minus_one=$((file_name_no_ext_first_char_ascii_upper_case_limit\
    \ - 1))\n  local\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]];\
    \ then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n   \
    \ local file_extension_pattern=\"^(txt|exe|dll)$\"\n    local file_name_valid=1\n\
    \    local file_extension_valid=1\n    local file_name_without_extension=\"\"\n\
    \    local file_extension=\"\"\n\n    if [[ ! $file_name =~ $file_name_pattern\
    \ ]]; then\n        file_name_valid=0\n    fi\n\n    if [[ $file_name_valid -eq\
    \ 1 ]]; then\n        file_name_without_extension=${file_name%.*}\n        file_extension=${file_name##*.}\n\
    \        if [[ ! $file_extension =~ $file_extension_pattern ]]; then\n       \
    \     file_extension_valid=0\n        fi\n    fi\n\n    if [[ $file_name_valid\
    \ -eq 1 && $file_extension_valid -eq 1 ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    file_name=$1\n    if [[ $file_name\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $file_name\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $file_name\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]]; then\n        echo \"Yes\"\n    else\n  \
    \      echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=\"$1\"\n \
    \   local file_name_len=${#file_name}\n    local file_name_no_ext=${file_name%.*}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_no_ext_len=${#file_name_no_ext}\n\
    \    local file_name_ext_len=${#file_name_ext}\n    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \    local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n    local file_name_no_ext_first_char_ascii_lower=$(printf \"%d\" \"'a\")\n\
    \    local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'A\")\n \
    \   local file_name_no_ext_first_char_ascii_lower_end=$(printf \"%d\" \"'z\")\n\
    \    local file_name_no_ext_first_char_ascii_upper_end=$(printf \"%d\" \"'Z\"\
    )\n    local file_name_no_ext_first_char_ascii_lower_range=$((file_name_no_ext_first_char_ascii_lower_end\
    \ - file_name_no_ext_first_char_ascii_lower + 1))\n    local file_name_no_ext_first_char_ascii_upper_range=$((file_name_no_ext_first_char_ascii_upper_end\
    \ - file_name_no_ext_first_char_ascii_upper + 1))\n    local file_name_no_ext_first_char_ascii_range=$((file_name_no_ext_first_char_ascii_lower_range\
    \ + file_name_no_ext_first_char_ascii_upper_range))\n    local file_name_no_ext_first_char_ascii_lower_end_plus_one=$((file_name_no_ext\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp4yh7f_30.sh: line 32: unexpected EOF while looking for matching
    `)''\n/tmp/tmp4yh7f_30.sh: line 70: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n\tif [[ $file_name\
    \ =~ $file_name_pattern ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\t\
    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_length=${#file_name}\n\tlocal file_name_without_extension=${file_name%.*}\n\
    \tlocal file_name_extension=${file_name##*.}\n\tlocal file_name_without_extension_length=${#file_name_without_extension}\n\
    \tlocal file_name_extension_length=${#file_name_extension}\n\tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_lower_bound=$(printf \"\
    %d\" \"'a\")\n\tlocal file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n\tlocal file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_without_extension_first_char_is_valid=0\n\t\
    local file_name_extension_is_valid=0\n\tlocal file_name_without_extension_contains_digits=0\n\
    \tlocal file_name_without_extension_contains_digits_count=0\n\tlocal file_name_without_extension_contains_digits_count_max=3\n\
    \tlocal file_name_contains_dot=0\n\tlocal file_name_contains_dot_count=0\n\tlocal\
    \ file_name_contains_dot_count_max=1\n\tlocal file_name_is_valid=0\n\tlocal file_name_is_valid_message=\"\
    No\"\n\tlocal file_name_extensions=(\"txt\" \"exe\" \"dll\")\n\tlocal file_name_extensions_length\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$ ]] || [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_without_extension=$(echo $file_name | cut -d '.' -f 1)\n    local\
    \ file_name_extension=$(echo $file_name | cut -d '.' -f 2)\n    local file_name_extension_valid=0\n\
    \    local file_name_without_extension_valid=0\n    local file_name_valid=0\n\
    \    local file_name_without_extension_first_char=$(echo $file_name_without_extension\
    \ | cut -c 1)\n    local file_name_without_extension_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_without_extension_first_char\")\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_digits_count=0\n    local file_name_without_extension_digits_count_valid=0\n\
    \    local file_name_without_extension_dots_count=0\n    local file_name_without_extension_dots_count_valid=0\n\
    \    local file_name_without_extension_length=0\n    local file_name_without_extension_length_valid=0\n\
    \    local file_name_without_extension_valid=0\n    local file_name_without_extension_valid_string=\"\
    No\"\n    local file_name_valid_string=\"No\"\n\n    if [ \"$file_name_without_extension\"\
    \ != \"\" ]; then\n        file_name_without_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpz6tho0gq.sh: line 42: syntax error near unexpected token `}''\n/tmp/tmpz6tho0gq.sh:
    line 42: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal name=$1\n\tlocal name_len=${#name}\n\
    \tlocal dot_count=0\n\tlocal digit_count=0\n\tlocal i=0\n\tlocal dot_index=0\n\
    \tlocal first_char=${name:0:1}\n\tlocal last_char=${name:$name_len-1:1}\n\tlocal\
    \ ext=${name:$name_len-3:3}\n\tlocal ext_len=${#ext}\n\tlocal ext_valid=0\n\t\
    local ext_list=(\"txt\" \"exe\" \"dll\")\n\tlocal ext_list_len=${#ext_list[@]}\n\
    \tlocal ext_list_index=0\n\tlocal ext_list_item=\"\"\n\tlocal ext_list_item_len=0\n\
    \tlocal ext_list_item_index=0\n\tlocal ext_list_item_char=\"\"\n\tlocal ext_list_item_char_valid=0\n\
    \tlocal ext_list_item_char_valid_count=0\n\tlocal ext_list_item_char_valid_count_max=0\n\
    \tlocal ext_list_item_char_valid_count_max_index=0\n\tlocal ext_list_item_char_valid_count_max_item=\"\
    \"\n\tlocal ext_list_item_char_valid_count_max_item_len=0\n\tlocal ext_list_item_char_valid_count_max_item_index=0\n\
    \tlocal ext_list_item_char_valid_count_max_item_char=\"\"\n\tlocal ext_list_item_char_valid_count_max_item_char_valid=0\n\
    \tlocal ext_list_item_char_valid_count_max_item_char_valid_count=0\n\tlocal ext_list_item_char_valid_count_max_item_char_valid_count_max=0\n\
    \tlocal ext_list_item_char_valid_count_max_item_char_valid_count_max_index=0\n\
    \tlocal ext_list_item_char_valid_count_max_item_char_valid_count_max_item=\"\"\
    \n\tlocal ext_list_item_char_valid_count_max_item_char\n}\n\ncandidate() {\n \
    \   file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ num_of_digits=$(echo $file_name | grep -o \"[0-9]\" | wc -l)\n    local num_of_dots=$(echo\
    \ $file_name | grep -o \"\\.\" | wc -l)\n    local extension=$(echo $file_name\
    \ | cut -d '.' -f 2)\n    local first_char=$(echo $file_name | cut -c 1)\n   \
    \ local valid_extensions=(\"txt\" \"exe\" \"dll\")\n    local valid_first_chars=(\"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"\
    A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"\
    N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\")\n\
    \    local valid_first_char=0\n    local valid_extension=0\n    for i in ${valid_first_chars[@]};\
    \ do\n        if [ \"$i\" == \"$first_char\" ]; then\n            valid_first_char=1\n\
    \        fi\n    done\n    for i in ${valid_extensions[@]}; do\n        if [ \"\
    $i\" == \"$extension\" ]; then\n            valid_extension=1\n        fi\n  \
    \  done\n    if [ $num_of_digits -gt 3 ]; then\n        echo \"No\"\n    elif\
    \ [ $num_of_dots -ne 1 ]; then\n        echo \"No\"\n    elif [ $valid_first_char\
    \ -eq 0 ]; then\n        echo \"No\"\n    elif [ $valid_extension -eq 0 ]; then\n\
    \        echo \"No\"\n    else\n        echo \"Yes\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\.dll$\"\n    if [[ $file_name =~ $file_name_pattern\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  local file_name=$1\n  local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n  if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_no_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_no_extension_len=${#file_name_no_extension}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n\
    \    local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_bound=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_is_letter=0\n  \
    \  local file_name_no_extension_first_char_is_letter_2=0\n    local file_name_no_extension_first_char_is_letter_3=0\n\
    \    local file_name_no_extension_first_char_is_letter_4=0\n    local file_name_no_extension_first_char_is_letter_5=0\n\
    \    local file_name_no_extension_first_char_is_letter_6=0\n    local file_name_no_extension_first_char_is_letter_7=0\n\
    \    local file_name_no_extension_first_char_is_letter_8=0\n    local file_name_no_extension_first_char_is_letter_9=0\n\
    \    local file_name_no_extension_first_char_is_letter_10=0\n    local file_name_no_extension\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_length=${#file_name}\n\tlocal file_name_without_extension=${file_name%.*}\n\
    \tlocal file_name_extension=${file_name#*.}\n\tlocal file_name_without_extension_length=${#file_name_without_extension}\n\
    \tlocal file_name_extension_length=${#file_name_extension}\n\tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii_code=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_code_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_without_extension_first_char_ascii_code_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_without_extension_first_char_ascii_code_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n\tlocal file_name_without_extension_first_char_ascii_code_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_without_extension_first_char_is_letter=false\n\
    \tlocal file_name_without_extension_contains_digits=false\n\tlocal file_name_contains_more_than_one_dot=false\n\
    \tlocal file_name_extension_is_valid=false\n\tlocal file_name_is_valid=false\n\
    \t\n\tif [[ $file_name_without_extension_first_char_ascii_code -ge $file_name_without_extension_first_char_ascii_code_lower_case_a\
    \ && $file_name_without_extension_first_char_ascii_code -le $file_name_without_extension_first_char_ascii_code_lower_case_z\
    \ ]] || [[ $file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpearnh4y5.sh: line 35: unexpected token `newline'', conditional
    binary operator expected\n/tmp/tmpearnh4y5.sh: line 35: syntax error near `$file''\n/tmp/tmpearnh4y5.sh:
    line 35: `\tif [[ $file_name_without_extension_first_char_ascii_code -ge $file_name_without_extension_first_char_ascii_code_lower_case_a
    && $file_name_without_extension_first_char_ascii_code -le $file_name_without_extension_first_char_ascii_code_lower_case_z
    ]] || [[ $file''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_is_valid=0\n\
    \    local file_name_without_extension_first_char_is_valid_upper_case=0\n    local\
    \ file_name_without_extension_first_char_is_valid_lower_case=0\n    local file_name_without_extension_first_char_is_valid_lower_case_upper_bound=0\n\
    \    local file_name_without_extension_first_char_is_valid_upper_case_upper_bound=0\n\
    \    local file_name_without_extension_first_char_is_valid_upper_case_lower_bound=0\n\
    \    local file_name_without_extension_first_char_is_valid_lower_case_lower_bound=0\n\
    \    local file_name_without_extension_first_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_without_extension=${file_name%.*}\n\tlocal file_name_extension=${file_name##*.}\n\
    \tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii_code=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_code_lower_case=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_without_extension_first_char_ascii_code_upper_case=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_without_extension_first_char_is_letter=0\n\
    \tif [ $file_name_without_extension_first_char_ascii_code -ge $file_name_without_extension_first_char_ascii_code_lower_case\
    \ ] && [ $file_name_without_extension_first_char_ascii_code -le $(($file_name_without_extension_first_char_ascii_code_lower_case\
    \ + 25)) ]; then\n\t\tfile_name_without_extension_first_char_is_letter=1\n\telif\
    \ [ $file_name_without_extension_first_char_ascii_code -ge $file_name_without_extension_first_char_ascii_code_upper_case\
    \ ] && [ $file_name_without_extension_first_char_ascii_code -le $(($file_name_without_extension_first_char_ascii_code_upper_case\
    \ + 25)) ]; then\n\t\tfile_name_without_extension_first_char_is_letter=1\n\tfi\n\
    \tif [ $(echo $file_name | grep -o \"[0-9]\" | wc -l) -gt 3 ]; then\n\t\techo\
    \ \"No\"\n\telif [ $(echo $file_name | grep -o \"\\.\" | wc -l\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpnz_mxl7m.sh: line 32: unexpected EOF while looking for matching
    `)''\n/tmp/tmpnz_mxl7m.sh: line 70: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_last_char=${file_name_without_extension:$file_name_without_extension_len-1:1}\n\
    \    local file_name_without_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_last_char\"\
    )\n    local file_name_without_extension_first_char_is_valid=0\n    local file_name_without_extension_last_char_is_valid=0\n\
    \    local file_name_extension_is_valid=0\n    local file_name_without_extension_contains_digits=0\n\
    \    local file_name_without_extension_contains_more_than_three_digits=0\n   \
    \ local file_name_contains_exactly_one_dot=0\n    local file_name_without_extension_is_not_empty=0\n\
    \    local file_name_is_valid=0\n\n    if [[ $file_name_without_extension_first_char_ascii\
    \ -ge 65 && $file_name_without_extension_first_char_ascii -le 90 ]] || \\\n  \
    \     [[ $file_name_without_extension_first_char_ascii -ge 97 && $file_name_without_extension_first_char_ascii\
    \ -le 122 ]]; then\n        file_name_without_ext\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpqxzvhawp.sh: line 39: syntax error near unexpected token `}''\n/tmp/tmpqxzvhawp.sh:
    line 39: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\\
    .(txt|exe|dll)$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]];\
    \ then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local first_char=${file_name_without_extension:0:1}\n    local number_of_digits=$(echo\
    \ $file_name_without_extension | grep -o [0-9] | wc -l)\n    local number_of_dots=$(echo\
    \ $file_name | grep -o \\. | wc -l)\n    if [[ $number_of_digits -gt 3 ]]; then\n\
    \        echo \"No\"\n    elif [[ $number_of_dots -ne 1 ]]; then\n        echo\
    \ \"No\"\n    elif [[ ! $first_char =~ [a-zA-Z] ]]; then\n        echo \"No\"\n\
    \    elif [[ ! $file_name_extension =~ ^(txt|exe|dll)$ ]]; then\n        echo\
    \ \"No\"\n    else\n        echo \"Yes\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name#*.}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_digit=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_upper_bound_digit=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_lower_bound_dot=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_upper_bound_dot=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_is_valid=0\n\
    \    local file_name_without_extension_has_more_than_three_digits=0\n    local\
    \ file_name_without_extension_has_more_than_one_dot=\n}\n\ncandidate() {\n   \
    \ file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpplw8ftzi.sh: line 145: syntax error near unexpected token `}''\n/tmp/tmpplw8ftzi.sh:
    line 145: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal dot_index=$(expr index \"$file_name\" \"\
    .\")\n\tlocal dot_index_len=${#dot_index}\n\tlocal dot_index_len_minus_one=$(expr\
    \ $dot_index_len - 1)\n\tlocal dot_index_minus_one=$(expr substr $dot_index $dot_index_len_minus_one\
    \ $dot_index_len)\n\tlocal dot_index_minus_one_len=${#dot_index_minus_one}\n\t\
    local dot_index_minus_one_len_minus_one=$(expr $dot_index_minus_one_len - 1)\n\
    \tlocal dot_index_minus_one_minus_one=$(expr substr $dot_index_minus_one 1 $dot_index_minus_one_len_minus_one)\n\
    \tlocal dot_index_minus_one_minus_one_len=${#dot_index_minus_one_minus_one}\n\t\
    local dot_index_minus_one_minus_one_len_minus_one=$(expr $dot_index_minus_one_minus_one_len\
    \ - 1)\n\tlocal dot_index_minus_one_minus_one_minus_one=$(expr substr $dot_index_minus_one_minus_one\
    \ 1 $dot_index_minus_one_minus_one_len_minus_one)\n\tlocal dot_index_minus_one_minus_one_minus_one_len=${#dot_index_minus_one_minus_one_minus_one}\n\
    \tlocal dot_index_minus_one_minus_one_minus_one_len_minus_one=$(expr $dot_index_minus_one_minus_one_minus_one_len\
    \ - 1)\n\tlocal dot_index_minus_one_minus_one_minus_one_minus_one=$(expr substr\
    \ $dot_index_minus_one_minus_one_minus_one 1 $dot_index_minus_one_minus_one_minus_one_len_minus_one)\n\
    \tlocal dot_index_minus_one_minus_one_minus_one_minus_one_\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''expr: syntax error: missing argument after \xe2\x80\x98-1\xe2\x80\x99\nexpr:
    syntax error: missing argument after \xe2\x80\x98-1\xe2\x80\x99\nexpr: syntax
    error: missing argument after \xe2\x80\x98-1\xe2\x80\x99\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_len_without_ext=${file_name_len%.*}\n\
    \    local file_name_len_without_ext=$(($file_name_len_without_ext-1))\n    local\
    \ file_name_ext=${file_name##*.}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_ext_len=$(($file_name_ext_len-1))\n    local file_name_without_ext=${file_name%.*}\n\
    \    local file_name_without_ext_len=${#file_name_without_ext}\n    local file_name_without_ext_len=$(($file_name_without_ext_len-1))\n\
    \    local file_name_without_ext_first_char=${file_name_without_ext:0:1}\n   \
    \ local file_name_without_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_without_ext_first_char\"\
    )\n    local file_name_without_ext_first_char_ascii=$(($file_name_without_ext_first_char_ascii-1))\n\
    \    local file_name_without_ext_last_char=${file_name_without_ext:$file_name_without_ext_len:1}\n\
    \    local file_name_without_ext_last_char_ascii=$(printf \"%d\" \"'$file_name_without_ext_last_char\"\
    )\n    local file_name_without_ext_last_char_ascii=$(($file_name_without_ext_last_char_ascii-1))\n\
    \    local file_name_ext_first_char=${file_name_ext:0:1}\n    local file_name_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_ext_first_char\")\n    local file_name_ext_first_char_ascii=$(($file_name_ext_first_char_ascii-1))\n\
    \   \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][tT][xX][tT]$|^[a-zA-Z][a-zA-Z0-9]{0,2}[.][eE][xX][eE]$|^[a-zA-Z][a-zA-Z0-9]{0,2}[.][dD][lL][lL]$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n\t\tif [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[ ${BASH_REMATCH[1]}\
    \ == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\t\t\techo \"\
    Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{2,3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$ ]]; then\n            echo \"Yes\"\n        else\n           \
    \ echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{2,3})$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\
    \n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal dot_index=$(expr index \"$file_name\" \"\
    .\")\n\tlocal file_name_substr_1=${file_name:0:$dot_index-1}\n\tlocal file_name_substr_2=${file_name:$dot_index}\n\
    \tlocal file_name_substr_1_len=${#file_name_substr_1}\n\tlocal file_name_substr_2_len=${#file_name_substr_2}\n\
    \tlocal file_name_substr_1_first_char=${file_name_substr_1:0:1}\n\tlocal file_name_substr_1_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_substr_1_first_char\")\n\tlocal file_name_substr_1_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_substr_1_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n\tlocal file_name_substr_1_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_substr_1_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_substr_1_num_digits=$(echo \"$file_name_substr_1\"\
    \ | grep -o \"[0-9]\" | wc -l)\n\tlocal file_name_substr_2_num_digits=$(echo \"\
    $file_name_substr_2\" | grep -o \"[0-9]\" | wc -l)\n\tlocal file_name_substr_2_num_dots=$(echo\
    \ \"$file_name_substr_2\" | grep -o \".\" | wc -l)\n\tlocal file_name_substr_2_num_dots_upper=$(echo\
    \ \"$file_name_substr_2\" | grep -o \".\" | wc -l)\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  local file_name=\"$1\"\n  local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n  if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})?$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_length=${#file_name}\n\tlocal file_name_without_extension=${file_name%.*}\n\
    \tlocal file_name_extension=${file_name##*.}\n\tlocal file_name_without_extension_length=${#file_name_without_extension}\n\
    \tlocal file_name_extension_length=${#file_name_extension}\n\tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii_code=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_code_is_valid=0\n\tlocal\
    \ file_name_without_extension_first_char_is_valid=0\n\tlocal file_name_without_extension_contains_digit=0\n\
    \tlocal file_name_without_extension_contains_more_than_three_digits=0\n\tlocal\
    \ file_name_extension_is_valid=0\n\tlocal file_name_is_valid=0\n\tlocal file_name_without_extension_first_char_ascii_code_is_valid_message=\"\
    \"\n\tlocal file_name_without_extension_first_char_is_valid_message=\"\"\n\tlocal\
    \ file_name_without_extension_contains_digit_message=\"\"\n\tlocal file_name_without_extension_contains_more_than_three_digits_message=\"\
    \"\n\tlocal file_name_extension_is_valid_message=\"\"\n\tlocal file_name_is_valid_message=\"\
    \"\n\t\n\tif [ $file_name_length -eq 0 ]; then\n\t\tfile_name_is_valid_message=\"\
    No\"\n\telse\n\t\tif [ $file_name_without_extension_length -eq 0 ]; then\n\t\t\
    \tfile_name_is_valid_message=\"No\"\n\t\telse\n\t\t\tif [ $file_name_extension_length\
    \ -eq\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp088zqbr7.sh: line 45: syntax error near unexpected token `}''\n/tmp/tmp088zqbr7.sh:
    line 45: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal file_name_len_without_extension=0\n\tlocal\
    \ file_name_extension=''\n\tlocal file_name_extension_len=0\n\tlocal file_name_extension_len_without_dot=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters=0\n\tlocal file_name_extension_len_without_dot_and_letters_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits=0\n\
    \tlocal file_name_extension_len_without_dot_and_letters_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits_and_digits\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\t# Write your code here\n\t#\
    \ ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpyuhjt8y1.sh: line 23: syntax error near unexpected token `}''\n/tmp/tmpyuhjt8y1.sh:
    line 23: `}''\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n  if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}[.](txt|exe|dll)$\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n  \
    \      echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local dot_count=0\n    local digit_count=0\n\
    \    local extension_len=0\n    local extension=\"\"\n    local extension_valid=0\n\
    \    local i=0\n    local valid_extensions=(\"txt\" \"exe\" \"dll\")\n    local\
    \ valid_extensions_len=${#valid_extensions[@]}\n    local valid_extensions_count=0\n\
    \    local valid_extensions_index=0\n    local valid_extensions_str=\"\"\n   \
    \ local valid_extensions_str_len=0\n    local valid_extensions_str_index=0\n \
    \   local valid_extensions_str_index_end=0\n    local valid_extensions_str_index_end_next=0\n\
    \    local valid_extensions_str_index_end_next_next=0\n    local valid_extensions_str_index_end_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next=0\n    local valid_extensions_str_index_end_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next=0\n  \
    \  local valid_extensions_str_index_end_next_next_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local valid_extensions_str_index_end_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_dot_index=$(expr index \"$file_name\"\
    \ '.')\n    local file_name_dot_index_minus_one=$((file_name_dot_index - 1))\n\
    \    local file_name_dot_index_plus_one=$((file_name_dot_index + 1))\n    local\
    \ file_name_dot_index_plus_two=$((file_name_dot_index + 2))\n    local file_name_dot_index_plus_three=$((file_name_dot_index\
    \ + 3))\n    local file_name_dot_index_plus_four=$((file_name_dot_index + 4))\n\
    \    local file_name_dot_index_plus_five=$((file_name_dot_index + 5))\n    local\
    \ file_name_dot_index_plus_six=$((file_name_dot_index + 6))\n    local file_name_dot_index_plus_seven=$((file_name_dot_index\
    \ + 7))\n    local file_name_dot_index_plus_eight=$((file_name_dot_index + 8))\n\
    \    local file_name_dot_index_plus_nine=$((file_name_dot_index + 9))\n    local\
    \ file_name_dot_index_plus_ten=$((file_name_dot_index + 10))\n    local file_name_dot_index_plus_eleven=$((file_name_dot_index\
    \ + 11))\n    local file_name_dot_index_plus_twelve=$((file_name_dot_index + 12))\n\
    \    local file_name_dot_index_plus_thirteen=$((file_name_dot_index + 13))\n \
    \   local file_name_dot_index_plus_fourteen=$((file_name_dot_index + 14))\n  \
    \  local file_name_dot_index_plus_fifteen=$((file_name_dot_index + 15))\n    local\
    \ file_name_dot_index_plus_sixteen=$((file_name_dot_index + 16))\n    local file_name_dot_index_plus_seventeen=$((file\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpguguvjuc.sh: line 37: unexpected EOF while looking for matching
    `)''\n/tmp/tmpguguvjuc.sh: line 75: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z]+[0-9]{0,3}\\.txt$|^[a-zA-Z]+[0-9]{0,3}\\.exe$|^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$\"\n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"\
    Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z]+[0-9]{0,3}\\.[txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal file_name_len_without_extension=${file_name_len%%.*}\n\
    \tlocal file_name_len_without_extension=$((file_name_len_without_extension-1))\n\
    \tlocal file_name_extension=${file_name##*.}\n\tlocal file_name_extension_len=${#file_name_extension}\n\
    \tlocal file_name_extension_len=$((file_name_extension_len-1))\n\tlocal file_name_without_extension=${file_name%.*}\n\
    \tlocal file_name_without_extension_len=${#file_name_without_extension}\n\tlocal\
    \ file_name_without_extension_len=$((file_name_without_extension_len-1))\n\tlocal\
    \ file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\t\
    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii=$((file_name_without_extension_first_char_ascii-1))\n\
    \tlocal file_name_without_extension_last_char=${file_name_without_extension:$file_name_without_extension_len:1}\n\
    \tlocal file_name_without_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_last_char\"\
    )\n\tlocal file_name_without_extension_last_char_ascii=$((file_name_without_extension_last_char_ascii-1))\n\
    \tlocal file_name_without_extension_second_char=${file_name_without_extension:1:1}\n\
    \tlocal file_name_without_extension_second_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_second_char\"\
    )\n\tlocal\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    # Write your code here\n \
    \   # Remove pass and write your code\n    pass\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvoan_cz_.sh: line 19: pass: command not found\n'''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=\"$1\"\n \
    \   local file_name_regex='^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$'\n    if [[\
    \ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n  \
    \      echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,3}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_valid=0\n\
    \    local file_name_without_extension_first_char_is_valid_2=0\n    local file_name_without_extension_first_char_is_valid_3=0\n\
    \    local file_name_without_extension_first_char_is_valid_4=0\n    local file_name_without_extension_first_char_is_valid_5=0\n\
    \    local file_name_without_extension_first_char_is_valid_6=0\n    local file_name_without_extension_first_char_is_valid_7=0\n\
    \    local file_name_without_extension_first_char_is_valid_8=0\n    local file_name_without_extension_first_char_is_valid_9=0\n\
    \    local file_name_without_extension_first_char_is_valid_10=0\n    local file_name_without_extension\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_regex ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal\
    \ file_name_len=${#file_name}\n\tlocal file_name_dot_index=$(expr index \"$file_name\"\
    \ \".\")\n\tlocal file_name_dot_index_plus_one=$((file_name_dot_index + 1))\n\t\
    local file_name_dot_index_minus_one=$((file_name_dot_index - 1))\n\tlocal file_name_substring_before_dot=${file_name:0:file_name_dot_index_minus_one}\n\
    \tlocal file_name_substring_after_dot=${file_name:file_name_dot_index_plus_one:file_name_len}\n\
    \tlocal file_name_substring_before_dot_len=${#file_name_substring_before_dot}\n\
    \tlocal file_name_substring_after_dot_len=${#file_name_substring_after_dot}\n\t\
    local file_name_substring_before_dot_first_char=${file_name_substring_before_dot:0:1}\n\
    \tlocal file_name_substring_before_dot_first_char_ascii_code=$(printf \"%d\" \"\
    '$file_name_substring_before_dot_first_char\")\n\tlocal file_name_substring_before_dot_first_char_ascii_code_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_substring_before_dot_first_char_ascii_code_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_substring_before_dot_first_char_ascii_code_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n\tlocal file_name_substring_before_dot_first_char_ascii_code_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_substring_before_dot_first_char_is_letter=false\n\
    \tlocal file_name_substring_before_dot_contains_digit=false\n\tlocal file_name_substring_before_dot\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex='^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$'\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.][txt|exe|dll]$\"\n    if [[\
    \ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_dot_index=0\n    local file_name_dot_count=0\n\
    \    local file_name_digit_count=0\n    local file_name_substring_before_dot=\"\
    \"\n    local file_name_substring_after_dot=\"\"\n    local file_name_substring_after_dot_len=0\n\
    \    local file_name_substring_after_dot_txt_len=3\n    local file_name_substring_after_dot_exe_len=3\n\
    \    local file_name_substring_after_dot_dll_len=3\n    local file_name_substring_after_dot_txt=\"\
    \"\n    local file_name_substring_after_dot_exe=\"\"\n    local file_name_substring_after_dot_dll=\"\
    \"\n    local file_name_substring_after_dot_txt_index=0\n    local file_name_substring_after_dot_exe_index=0\n\
    \    local file_name_substring_after_dot_dll_index=0\n    local file_name_substring_after_dot_txt_index_last=0\n\
    \    local file_name_substring_after_dot_exe_index_last=0\n    local file_name_substring_after_dot_dll_index_last=0\n\
    \    local file_name_substring_after_dot_txt_index_last_len=0\n    local file_name_substring_after_dot_exe_index_last_len=0\n\
    \    local file_name_substring_after_dot_dll_index_last_len=0\n    local file_name_substring_after_dot_txt_index_last_len_sub=0\n\
    \    local file_name_substring_after_dot_exe_index_last_len_sub=0\n    local file_name_substring_after_dot_dll_index_last_len_sub=0\n\
    \    local file_name_substring_after_dot_txt_index_last_len_sub_sub=0\n    local\
    \ file_name_substring_after_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z0-9]{1,3})?$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{0,2})?\\.(txt|exe|dll)$\"\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\
    .[a-zA-Z]{2,3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] ||\
    \ [[ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ name_part=${file_name%.*}\n    local ext_part=${file_name##*.}\n    local valid_exts=(txt\
    \ exe dll)\n    local valid_ext=0\n    local valid_name=0\n    local valid_digits=0\n\
    \    local valid_dot=0\n    local valid_name_part=0\n    local valid_ext_part=0\n\
    \    local valid_file_name=0\n    local valid_file_name_str=\"No\"\n    local\
    \ valid_ext_str=\"No\"\n    local valid_name_str=\"No\"\n    local valid_dot_str=\"\
    No\"\n    local valid_digits_str=\"No\"\n    local valid_name_part_str=\"No\"\n\
    \    local valid_ext_part_str=\"No\"\n    local valid_exts_str=\"No\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ I=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local\n}\n\ncandidate() {\n   \
    \ file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_length=${#file_name}\n    local file_name_no_extension=${file_name%.*}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_no_extension_length=${#file_name_no_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n\
    \    local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_is_letter=0\n    local file_name_no_extension_first_char_is_lower_case_letter=0\n\
    \    local file_name_no_extension_first_char_is_upper_case_letter=0\n    local\
    \ file_name_no_extension_first_char_is_valid=0\n    local file_name_no_extension_has_valid_characters=0\n\
    \    local file_name_no_extension_has_valid_characters_count=0\n    local file_name_no_extension_has_valid_characters_count_max=3\n\
    \    local file_name_has_one_dot=0\n    local file_name_has_one_dot_count=0\n\
    \    local file_name_has_one_dot_count_max=1\n    local file_name_has_valid_extension=0\n\
    \    local file_name_has_valid_extension_count=0\n    local file_name_has_valid_extension_count_max=1\n\
    \    local file_name_has_valid_extension_valid_extensions=(\"txt\" \"exe\" \"\
    dll\")\n    local file_name_has_valid_extension_valid_extensions_length=${#file_name_has_valid_extension_valid_extensions[@]}\n\
    \    local file_name_has_valid_\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    local file_name=$1\n    local\
    \ file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n   \
    \ local file_extension_pattern=\"^(txt|exe|dll)$\"\n    local file_name_match=$(echo\
    \ $file_name | grep -E $file_name_pattern)\n    local file_extension_match=$(echo\
    \ $file_name | grep -E $file_extension_pattern)\n    if [[ -z $file_name_match\
    \ ]]; then\n        echo \"No\"\n    elif [[ -z $file_extension_match ]]; then\n\
    \        echo \"No\"\n    else\n        echo \"Yes\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\nfile_name_check() {\n    file_name=$1\n    if [[ $file_name\
    \ =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n   \
    \ else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341552
