language: sh
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack::-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=0\n  for\
    \ (( i=0; i<${#brackets}; i++ )); do\n    local bracket=\"${brackets:$i:1}\"\n\
    \    if [[ \"$bracket\" == \"(\" ]]; then\n      open_brackets=$((open_brackets\
    \ + 1))\n    elif [[ \"$bracket\" == \")\" ]]; then\n      open_brackets=$((open_brackets\
    \ - 1))\n    fi\n    if [[ \"$open_brackets\" -lt 0 ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if [[ \"$open_brackets\" -eq 0 ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"(\" ]]; then\n      stack=$stack\"(\"\n    elif [[ $bracket == \")\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$char\" == \"\
    )\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n   \
    \     return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[ -z\
    \ \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif [[ $c == \")\"\
    \ ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack=\"$stack(\"\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ -z $stack ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n        elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ \"$stack\" == \"\
    \" ]]; then\n                echo \"false\"\n                return\n        \
    \    fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[\
    \ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            else\n                stack=\"\
    ${stack:0:-1}\"\n            fi\n        fi\n    done\n    [[ -z \"$stack\" ]]\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n        if\
    \ [[ \"$char\" == \"(\" ]]; then\n            count=$(( count + 1 ))\n       \
    \ elif [[ \"$char\" == \")\" ]]; then\n            count=$(( count - 1 ))\n  \
    \      fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local i\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n   \
    \ done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    return 1\n            else\n                stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n            fi\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n        elif [[\
    \ \"$char\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\" == 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ \"${#stack[@]}\"\
    \ == 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack=\"$stack$c\"\n        elif [[ $c == \"\
    )\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=${stack%?}\n     \
    \   fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        return 0\n    else\n        return 1\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=($c)\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"(\"\
    \ ]]; then\n      stack+=(\"$bracket\")\n    elif [[ $bracket == \")\" ]]; then\n\
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\n   \
    \     if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack$c\"\n       \
    \ elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            stack+=($i)\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=($c)\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n        elif [[\
    \ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"(\"\
    \ ]]; then\n      stack+=(\"(\")\n    elif [[ $bracket == \")\" ]]; then\n   \
    \   if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n\
    \        elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=$c\n        elif [[ $c == \")\" ]]; then\n\
    \            if [[ -z $stack ]]; then\n                echo \"false\"\n      \
    \          return\n            fi\n            stack=${stack:0:-1}\n        fi\n\
    \    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ $c == \")\"\
    \ ]]; then\n            if [[ -z $stack ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=${stack:0:-1}\n  \
    \      fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    local\
    \ i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=\"(\"\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            stack+=(\"(\")\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[-1]\n      \
    \  fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=($c)\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_brackets=0\n  for ((\
    \ i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \      (( open_brackets++ ))\n    elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \      (( open_brackets-- ))\n    fi\n    if (( open_brackets < 0 )); then\n \
    \     echo \"false\"\n      return\n    fi\n  done\n  if (( open_brackets == 0\
    \ )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n     \
    \       open_count=$((open_count + 1))\n        elif [[ \"$char\" == \")\" ]];\
    \ then\n            close_count=$((close_count + 1))\n        fi\n        if [[\
    \ $close_count -gt $open_count ]]; then\n            echo \"false\"\n        \
    \    return\n        fi\n    done\n    if [[ $open_count -eq $close_count ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"(\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \")\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=($c)\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $bracket\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=()\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"(\" ]]; then\n      stack+=(\"$char\")\n    elif [[ \"$char\" ==\
    \ \")\" ]]; then\n      if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n\
    \  done\n  if [[ \"${#stack[@]}\" -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[\
    \ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif [[ $c == \")\"\
    \ ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"(\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \")\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=(\"$char\")\n        elif [[ $char\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            open_brackets=$(( open_brackets + 1 ))\n    \
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            open_brackets=$((\
    \ open_brackets - 1 ))\n        fi\n        if [[ $open_brackets -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $open_brackets -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"(\"\
    \ ]]; then\n            stack=\"$stack(\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack+=($char)\n     \
    \   elif [[ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local i\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if [[\
    \ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1} == \")\"\
    \ ]]; then\n            count=$(( count - 1 ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_count=0\n  local\
    \ close_count=0\n  for ((i=0; i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n      open_count=$((open_count + 1))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n      close_count=$((close_count + 1))\n    fi\n    if [[\
    \ $close_count -gt $open_count ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1} == \")\"\
    \ ]]; then\n            count=$(( count - 1 ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ \"\
    $c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ \"$c\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ ${brackets:$i:1} == \")\" ]];\
    \ then\n            if [[ -z $stack ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            stack=${stack:0:-1}\n   \
    \     fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ \"\
    $c\" == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif [[ \"$c\" ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\n   \
    \     if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ \"$c\" == \")\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ \"$stack\" ==\
    \ \"\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local bracket_stack=()\n  local\
    \ bracket_stack_index=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      bracket_stack[$bracket_stack_index]=$bracket\n\
    \      (( bracket_stack_index++ ))\n    elif [[ $bracket == \")\" ]]; then\n \
    \     if [[ $bracket_stack_index -eq 0 ]]; then\n        echo \"false\"\n    \
    \    return\n      fi\n      (( bracket_stack_index-- ))\n    fi\n  done\n  if\
    \ [[ $bracket_stack_index -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=($c)\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_count=0\n  local close_count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n      open_count=$((open_count+1))\n    else\n      close_count=$((close_count+1))\n\
    \    fi\n    if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=0\n  for\
    \ ((i=0; i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n \
    \   if [[ \"$bracket\" == \"(\" ]]; then\n      ((open_brackets++))\n    elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n      ((open_brackets--))\n    fi\n    if\
    \ ((open_brackets < 0)); then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if ((open_brackets == 0)); then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n       \
    \ if [[ \"$char\" == \"(\" ]]; then\n            open=$((open + 1))\n        elif\
    \ [[ \"$char\" == \")\" ]]; then\n            open=$((open - 1))\n        fi\n\
    \        if [[ $open -lt 0 ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $open -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            open_count=$((open_count + 1))\n        elif\
    \ [[ ${brackets:$i:1} == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local c=${brackets:$i:1}\n    if [[ \"$c\" ==\
    \ \"(\" ]]; then\n      (( count++ ))\n    elif [[ \"$c\" == \")\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local -i count=0\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n\
    \      ((count++))\n    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n     \
    \ ((count--))\n    fi\n    if ((count < 0)); then\n      echo \"false\"\n    \
    \  return\n    fi\n  done\n  if ((count == 0)); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n    local\
    \ close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            open=$(( open + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            close=$(( close + 1 ))\n        fi\n        if\
    \ [[ $close -gt $open ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $open -eq $close ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"(\"\
    \ ]]; then\n      stack+=($bracket)\n    elif [[ $bracket == \")\" ]]; then\n\
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif\
    \ [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $bracket\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"(\"\
    \ ]]; then\n            stack=\"$stack(\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n\
    \  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n    local\
    \ close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            ((open++))\n        elif\
    \ [[ \"$char\" == \")\" ]]; then\n            ((close++))\n        fi\n      \
    \  if [[ \"$close\" -gt \"$open\" ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n    done\n    if [[ \"$open\" -eq \"$close\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack::-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"(\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \")\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$char\" == \"\
    )\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n   \
    \     return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[ -z\
    \ \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            (( open_brackets++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            (( open_brackets-- ))\n        fi\n        if\
    \ (( open_brackets < 0 )); then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if (( open_brackets == 0 )); then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_count=0\n  local\
    \ close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n      open_count=$((open_count+1))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n      close_count=$((close_count+1))\n    fi\n    if [[ $close_count\
    \ -gt $open_count ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\n   \
    \     if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local i\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          echo \"false\"\n                return\n            fi\n          \
    \  unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            else\n                stack=\"\
    ${stack%?}\"\n            fi\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n  \
    \      elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ -eq 0 ]]; then\n                return 1\n            else\n               \
    \ unset stack[${#stack[@]}-1]\n            fi\n        fi\n    done\n    if [[\
    \ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            stack+=(\"(\")\n        elif [[ $c == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            else\n                stack=\"\
    ${stack:0:-1}\"\n            fi\n        fi\n    done\n    [[ -z \"$stack\" ]]\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            count=$((count+1))\n        elif [[ ${brackets:$i:1} == \")\" ]];\
    \ then\n            count=$((count-1))\n        fi\n        if [[ $count -lt 0\
    \ ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif\
    \ [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"(\"\
    \ ]]; then\n      stack+=(\"$bracket\")\n    elif [[ $bracket == \")\" ]]; then\n\
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"(\"\
    \ ]]; then\n            stack=\"$stack(\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif\
    \ [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \")\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            count=$(( count + 1 ))\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            count=$(( count - 1\
    \ ))\n        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\n   \
    \     if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local i\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"(\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \")\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n     \
    \       open_count=$(( open_count + 1 ))\n        elif [[ \"$char\" == \")\" ]];\
    \ then\n            close_count=$(( close_count + 1 ))\n        fi\n        if\
    \ [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n    done\n    if [[ $open_count -eq $close_count ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack$bracket\"\n    elif [[\
    \ \"$bracket\" == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n       \
    \ echo \"false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n  \
    \  fi\n  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            stack=(\"\
    ${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack=\"$stack$char\"\n        elif [[\
    \ $char == \")\" ]]; then\n            if [[ -z $stack ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n        elif\
    \ [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n \
    \               echo \"false\"\n                return\n            fi\n     \
    \       stack=${stack%?}\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"(\" ]]; then\n            stack+=\"(\"\n        elif [[ $char ==\
    \ \")\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack::-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif\
    \ [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack::-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            open_brackets=$((\
    \ open_brackets + 1 ))\n        elif [[ \"$bracket\" == \")\" ]]; then\n     \
    \       open_brackets=$(( open_brackets - 1 ))\n        fi\n        if [[ $open_brackets\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $open_brackets -gt 0 ]]; then\n        echo \"false\"\n \
    \   else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            else\n                stack=\"\
    ${stack:0:-1}\"\n            fi\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"(\" ]]; then\n      stack=\"$stack$bracket\"\n    elif [[ $bracket == \"\
    )\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n       \
    \ return\n      fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z $stack\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\n        elif\
    \ [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n \
    \               echo \"false\"\n                return\n            fi\n     \
    \       stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  local bracket\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n    if\
    \ [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n\
    \  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660341335
