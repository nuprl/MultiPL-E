language: sh
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    case ${hex:$i:1} in\n\t\t\t2|3|5|7|B|D)\n\t\t\t\tcount=$((count+1))\n\t\t\t\t\
    ;;\n\t\tesac\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=\"$1\"\n  local -i count=0\n  local -i i=0\n  local -i\
    \ len=${#hex_number}\n  for ((i=0; i<len; i++)); do\n    case ${hex_number:i:1}\
    \ in\n      2|3|5|7|B|D)\n        ((count++))\n        ;;\n    esac\n  done\n\
    \  echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access the first\
    \ argument use $1, second - $2, etc.\n    echo \"0\"\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == 2 || $digit == 3 || $digit == 5 ||\
    \ $digit == 7 || $digit == B || $digit == D ]]; then\n\t\t\t(( count++ ))\n\t\t\
    fi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    local -a primes=(2 3 5 7 11 13)\n\
    \    for ((i=0; i<${#hex}; i++)); do\n        local -i digit=$(printf \"%d\" \"\
    '${hex:i:1}\")\n        if [[ $digit -ge 65 && $digit -le 70 ]]; then\n      \
    \      ((digit-=55))\n        elif [[ $digit -ge 48 && $digit -le 57 ]]; then\n\
    \            ((digit-=48))\n        fi\n        for prime in ${primes[@]}; do\n\
    \            if [[ $digit -eq $prime ]]; then\n                ((count++))\n \
    \           fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local prime_count=0\n    for\
    \ digit in ${hex_digits[@]}; do\n        if [[ $hex_number =~ $digit ]]; then\n\
    \            for prime_digit in ${prime_digits[@]}; do\n                if [[\
    \ $digit = $prime_digit ]]; then\n                    ((prime_count++))\n    \
    \            fi\n            done\n        fi\n    done\n    echo $prime_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        local digit=${hex:$i:1}\n        if [[ $digit == [2357BD] ]]; then\n\
    \            ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tlocal primes=\"2 3 5 7 B D\"\n\tfor i\
    \ in $(echo $primes); do\n\t\tif [[ $hex =~ $i ]]; then\n\t\t\tcount=$((count+1))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ 2 || $digit == 3 || $digit == 5 || $digit == 7 || $digit == B || $digit == D\
    \ ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    \"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex_key}; i++)); do\n\
    \t\tlocal char=${hex_key:$i:1}\n\t\tif [[ $char == \"2\" || $char == \"3\" ||\
    \ $char == \"5\" || $char == \"7\" || $char == \"B\" || $char == \"D\" ]]; then\n\
    \t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=\"$1\"\n    local -i count=0\n    for (( i=0; i<${#hex}; i++\
    \ )); do\n        case ${hex:$i:1} in\n            2|3|5|7|B|D)\n            \
    \    (( count++ ))\n                ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_string=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n\tlocal prime_hex_digits=(2 3 5 7 B D)\n\tlocal count=0\n\tfor i in ${hex_digits[@]};\
    \ do\n\t\tif [[ $hex_string =~ $i ]]; then\n\t\t\tfor j in ${prime_hex_digits[@]};\
    \ do\n\t\t\t\tif [[ $i = $j ]]; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\tfi\n\
    \t\t\tdone\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -i n=0\n    local -i prime=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -a primes=(2 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3 4\
    \ 5 6 7 8 9 A B C D E F)\n    local -a hex_primes=(2 3 5 7 B D)\n    local -a\
    \ hex_nums=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count=(0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum=(0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total=(0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_final=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_final_count=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_final_count_sum=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_final_count_sum_total=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_final_count_sum_total_final=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_nums_primes_count_sum_total_\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # your code here\n  echo \"$1\" | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\"\
    \ \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n  local\
    \ primes=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n  local count=0\n  for i in ${hex_digits[@]};\
    \ do\n    for j in ${primes[@]}; do\n      if [[ $i == $j ]]; then\n        count=$((count+1))\n\
    \      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex}; i++)); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d '0-9' | tr -d 'A-F' | wc -c\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex}; i++)); do\n\t\t\
    local char=${hex:$i:1}\n\t\tif [[ $char == 2 || $char == 3 || $char == 5 || $char\
    \ == 7 || $char == B || $char == D ]]; then\n\t\t\tcount=$((count+1))\n\t\tfi\n\
    \tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local hex_key_length=${#hex_key}\n  local hex_key_prime_count=0\n\
    \  local hex_key_prime_count_index=0\n  local hex_key_prime_count_index_value=0\n\
    \  local hex_key_prime_count_index_value_length=0\n  local hex_key_prime_count_index_value_length_index=0\n\
    \  local hex_key_prime_count_index_value_length_index_value=0\n  local hex_key_prime_count_index_value_length_index_value_length=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index=0\n \
    \ local hex_key_prime_count_index_value_length_index_value_length_index_value=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value_length=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value_length_index=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length=0\n\
    \  local hex_key_prime_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index=0\n\
    \  local hex_key_prime_count_index_\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(\"0\" \"1\" \"2\" \"3\" \"\
    4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n    local\
    \ primes=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n    local count=0\n    for i in\
    \ ${hex_digits[@]}; do\n        for j in ${primes[@]}; do\n            if [ \"\
    $i\" == \"$j\" ]; then\n                count=$((count+1))\n            fi\n \
    \       done\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local primes=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            primes=$((primes+1))\n        fi\n    done\n    echo $primes\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local primes=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == [2357BD] ]]; then\n\
    \            ((primes++))\n        fi\n    done\n    echo $primes\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  for ((i=0; i<${#1}; i++)); do\n    case ${1:i:1} in\n\
    \      [2357BD]) ((count++));;\n    esac\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit ==\
    \ \"B\" || $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for (( i=0; i<${#hex}; i++ ));\
    \ do\n        case ${hex:$i:1} in\n            2|3|5|7|B|D)\n                ((\
    \ count++ ))\n                ;;\n        esac\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local -i digit=${hex_number:$i:1}\n        if [[ $digit\
    \ -eq 2 || $digit -eq 3 || $digit -eq 5 || $digit -eq 7 || $digit -eq 11 || $digit\
    \ -eq 13 ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n   \
    \ for digit in $(echo $hex_digits); do\n        if [[ $hex_number =~ $digit ]];\
    \ then\n            for prime_digit in $(echo $prime_digits); do\n           \
    \     if [[ $digit = $prime_digit ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local count=0\n  for ((i=0; i<${#hex}; i++)); do\n    local\
    \ digit=${hex:$i:1}\n    case $digit in\n      2|3|5|7|B|D) ((count++)) ;;\n \
    \   esac\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_digits=\"$1\"\n  local primes_count=0\n  local hex_digit\n  for\
    \ (( i=0; i<${#hex_digits}; i++ )); do\n    hex_digit=\"${hex_digits:$i:1}\"\n\
    \    if [[ \"$hex_digit\" == \"2\" || \"$hex_digit\" == \"3\" || \"$hex_digit\"\
    \ == \"5\" || \"$hex_digit\" == \"7\" || \"$hex_digit\" == \"B\" || \"$hex_digit\"\
    \ == \"D\" ]]; then\n      (( primes_count++ ))\n    fi\n  done\n  echo \"$primes_count\"\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    local primes=\"2357BD\"\n    for\
    \ (( i=0; i<${#hex}; i++ )); do\n        for (( j=0; j<${#primes}; j++ )); do\n\
    \            if [[ ${hex:$i:1} == ${primes:$j:1} ]]; then\n                ((\
    \ count++ ))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access argument\
    \ #n use $n\n    # To store the output of a command in a variable use the following\
    \ syntax:\n    # output=$(cmd)\n    # output=$(cmd arg1 arg2 ...)\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=\"$1\"\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#hex_num}\n\
    \tlocal -i num=0\n\tfor ((i=0; i<len; i++)); do\n\t\tcase ${hex_num:i:1} in\n\t\
    \t\t[2-7]|[B-D])\n\t\t\t\t((count++))\n\t\t\t\t;;\n\t\t\t[A-F])\n\t\t\t\tnum=16#${hex_num:i:1}\n\
    \t\t\t\tif ((num%2==1)); then\n\t\t\t\t\t((count++))\n\t\t\t\tfi\n\t\t\t\t;;\n\
    \t\tesac\n\tdone\n\techo \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=$1\n    local count=0\n    for (( i=0; i<${#hex_num}; i++\
    \ )); do\n        local digit=${hex_num:$i:1}\n        if [[ $digit == \"2\" ||\
    \ $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" ||\
    \ $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex}\n\
    \    local -a primes=(2 3 5 7 11 13)\n    local -a hex_digits=(0 1 2 3 4 5 6 7\
    \ 8 9 A B C D E F)\n    local -a hex_digits_dec=(0 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15)\n    local -i index=0\n    local -i dec=0\n    for ((i=0; i<len; i++));\
    \ do\n        index=$(echo ${hex_digits[@]} | grep -b -o ${hex:$i:1} | cut -d:\
    \ -f1)\n        dec=${hex_digits_dec[$index]}\n        if [[ \" ${primes[@]} \"\
    \ =~ \" ${dec} \" ]]; then\n            ((count++))\n        fi\n    done\n  \
    \  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access argument\
    \ #n use $n\n    # To store the output of a command in a variable use the following\
    \ syntax:\n    # output=$(cmd)\n    # output=$(cmd arg1 arg2 ...)\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#hex}\n\
    \twhile [ $i -lt $len ]; do\n\t\tlocal -i digit=${hex:$i:1}\n\t\tif [ $digit -eq\
    \ 2 ] || [ $digit -eq 3 ] || [ $digit -eq 5 ] || [ $digit -eq 7 ] || [ $digit\
    \ -eq 11 ] || [ $digit -eq 13 ]; then\n\t\t\t((count++))\n\t\tfi\n\t\t((i++))\n\
    \tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex}\n\
    \    local -i digit=0\n    local -i prime=0\n    local -i is_prime=0\n    local\
    \ -a primes=(2 3 5 7 11 13 17)\n    for ((i=0; i<len; i++)); do\n        digit=${hex:i:1}\n\
    \        is_prime=0\n        for prime in ${primes[@]}; do\n            if [ $digit\
    \ -eq $prime ]; then\n                is_prime=1\n                break\n    \
    \        fi\n        done\n        if [ $is_prime -eq 1 ]; then\n            ((count++))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_num=$1\n  local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\
    \n  local primes=\"2 3 5 7 B D\"\n  local count=0\n  for digit in $hex_digits;\
    \ do\n    if [[ $hex_num =~ $digit ]]; then\n      for prime in $primes; do\n\
    \        if [[ $digit = $prime ]]; then\n          count=$((count+1))\n      \
    \  fi\n      done\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | sed 's/[^2-7B-D]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            [2357BD]) ((count++)) ;;\n        esac\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=\"$1\"\n  local -i count=0\n  for (( i=0; i<${#hex_number};\
    \ i++ )); do\n    case ${hex_number:$i:1} in\n      [2357BD])\n        (( count++\
    \ ))\n        ;;\n    esac\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    local primes=\"2 3 5 7 B D\"\n \
    \   for i in $(echo $primes); do\n        if [[ $hex =~ $i ]]; then\n        \
    \    ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_number == *$digit* ]]; then\n \
    \           for prime_digit in $prime_digits; do\n                if [[ $digit\
    \ == $prime_digit ]]; then\n                    ((count++))\n                fi\n\
    \            done\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    local -a primes=(2 3 5\
    \ 7 11 13)\n    for ((i=0; i<${#hex_number}; i++)); do\n        for ((j=0; j<${#primes[@]};\
    \ j++)); do\n            if [[ ${hex_number:$i:1} == $(printf \"%x\" ${primes[$j]})\
    \ ]]; then\n                ((count++))\n            fi\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_length=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit=0\n    local hex_key_digit_decimal=0\n    local hex_key_digit_decimal_is_prime=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor=0\n    local hex_key_digit_decimal_is_prime_divisor_max=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half=0\n    local hex_key_digit_decimal_is_prime_divisor_max_half_int=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod=0\n    local\
    \ hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero=0\n    local\
    \ hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true_is_true=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true_is_true_is_true=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true_is_true_is_true_is_true=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true_is_true_is_true_is_true_is_true=0\n\
    \    local hex_key_digit_decimal_is_prime_divisor_max_half_int_mod_is_zero_is_true_is_true_is_true_is_true_is_true_is_true\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=$1\n    local count=0\n    for (( i=0; i<${#hex_num}; i++\
    \ )); do\n        local digit=${hex_num:$i:1}\n        if [[ $digit == \"2\" ||\
    \ $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" ||\
    \ $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-D]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=\"$1\"\n    local -i count=0\n    local -i i=0\n    local -i\
    \ len=${#hex}\n    local -i prime=0\n    local -i digit=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i\
    \ jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i\
    \ nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i\
    \ rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i\
    \ vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i\
    \ zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local\
    \ -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local\
    \ -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n   \n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | tr -d [0-9] | grep -o [2-7BD] | wc -l\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex_key}; i++ ));\
    \ do\n\t\tif [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n\t\t\t(( count++ ))\n\t\t\
    fi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local primes_count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit ==\
    \ \"B\" || $digit == \"D\" ]]; then\n            primes_count=$((primes_count+1))\n\
    \        fi\n    done\n    echo $primes_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex}\n\
    \    local -a primes=(2 3 5 7 11 13)\n    local -a hex_digits=(0 1 2 3 4 5 6 7\
    \ 8 9 A B C D E F)\n    while [ $i -lt $len ]; do\n        local -i j=0\n    \
    \    while [ $j -lt ${#primes[@]} ]; do\n            if [ \"${hex:$i:1}\" == \"\
    ${hex_digits[${primes[$j]}]}\" ]; then\n                ((count++))\n        \
    \    fi\n            ((j++))\n        done\n        ((i++))\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local -i count=0\n    local -i i=0\n    local\
    \ -i len=${#hex_string}\n    local -i digit=0\n    local -i is_prime=0\n    local\
    \ -i j=0\n    for ((i=0; i<len; i++)); do\n        digit=${hex_string:i:1}\n \
    \       case $digit in\n            0|1|4|6|8|9|A|C|E|F)\n                continue\n\
    \                ;;\n            2|3|5|7|B|D)\n                ((count++))\n \
    \               ;;\n            *)\n                is_prime=1\n             \
    \   for ((j=2; j<digit; j++)); do\n                    if ((digit % j == 0));\
    \ then\n                        is_prime=0\n                        break\n  \
    \                  fi\n                done\n                ((is_prime == 1))\
    \ && ((count++))\n                ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    local -i i=0\n    local -i\
    \ len=${#hex_key}\n    local -i num=0\n    local -i num_dec=0\n    local -i num_hex=0\n\
    \    local -i num_oct=0\n    local -i num_bin=0\n    local -i num_dec_old=0\n\
    \    local -i num_hex_old=0\n    local -i num_oct_old=0\n    local -i num_bin_old=0\n\
    \    local -i num_dec_new=0\n    local -i num_hex_new=0\n    local -i num_oct_new=0\n\
    \    local -i num_bin_new=0\n    local -i num_dec_old=0\n    local -i num_hex_old=0\n\
    \    local -i num_oct_old=0\n    local -i num_bin_old=0\n    local -i num_dec_new=0\n\
    \    local -i num_hex_new=0\n    local -i num_oct_new=0\n    local -i num_bin_new=0\n\
    \    local -i num_dec_old=0\n    local -i num_hex_old=0\n    local -i num_oct_old=0\n\
    \    local -i num_bin_old=0\n    local -i num_dec_new=0\n    local -i num_hex_new=0\n\
    \    local -i num_oct_new=0\n    local -i num_bin_new=0\n    local -i num_dec_old=0\n\
    \    local -i num_hex_old=0\n    local -i num_oct_old=0\n    local -i num_bin_old=0\n\
    \    local -i num_dec_new=0\n    local -i num_hex_new=0\n    local -i num_oct_new=0\n\
    \    local -i num_bin_new=0\n    local -i num_dec_old=0\n    local -i num_hex_old=0\n\
    \    local -i num_oct_old=0\n    local -i num_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\t# Write your code here\n\t# To print results to the standard output you\
    \ can use echo\n\t# Example: echo \"Hello world!\"\n\techo \"1\"\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_digits=\"2 3 5 7 B D\"\n    local hex_key_prime_digit\n\
    \    for (( i=0; i<${hex_key_len}; i++ )); do\n        local hex_key_digit=${hex_key:$i:1}\n\
    \        for hex_key_prime_digit in ${hex_key_prime_digits}; do\n            if\
    \ [[ ${hex_key_digit} == ${hex_key_prime_digit} ]]; then\n                (( hex_key_prime_count++\
    \ ))\n            fi\n        done\n    done\n    echo ${hex_key_prime_count}\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n\tlocal prime_digits=(2 3 5 7 B D)\n\tlocal prime_count=0\n\tfor ((i=0;\
    \ i<${#hex_number}; i++)); do\n\t\tfor ((j=0; j<${#prime_digits[@]}; j++)); do\n\
    \t\t\tif [[ ${hex_number:$i:1} == ${prime_digits[$j]} ]]; then\n\t\t\t\tprime_count=$((prime_count+1))\n\
    \t\t\tfi\n\t\tdone\n\tdone\n\techo $prime_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed -E 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"1\"\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local -i digit=${hex_key:$i:1}\n        if [[ $digit -eq\
    \ 2 || $digit -eq 3 || $digit -eq 5 || $digit -eq 7 || $digit -eq 11 || $digit\
    \ -eq 13 ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [0-9] | tr -d [A-F] | wc -c\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # your code here\n  echo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_string=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n\tlocal prime_digits=(2 3 5 7 B D)\n\tlocal count=0\n\tfor digit in ${hex_digits[@]};\
    \ do\n\t\tif [[ $hex_string =~ $digit ]]; then\n\t\t\tfor prime in ${prime_digits[@]};\
    \ do\n\t\t\t\tif [[ $digit = $prime ]]; then\n\t\t\t\t\t((count++))\n\t\t\t\t\
    fi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # your code here\n  echo -n \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access argument\
    \ #n use $n\n    # To store your result into variable RESULT use RESULT=\"my result\"\
    \n    echo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal -i count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\
    \t\tlocal digit=${hex:$i:1}\n\t\tif [[ $digit == 2 || $digit == 3 || $digit ==\
    \ 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n\t\t\t(( count++ ))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | tr -d '0-9' | tr -d 'A-F' | wc -c\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=\"$1\"\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        local digit=\"${hex:$i:1}\"\n        case \"$digit\" in\n      \
    \      2|3|5|7|B|D)\n                ((count++))\n                ;;\n       \
    \ esac\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\t# your code here\n\techo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local -i count=0\n  local -i i=0\n  local -i length=${#hex_key}\n\
    \  local -i number\n  local -i prime\n  local -i remainder\n  local -i temp\n\
    \  local -i test\n  local -i value\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -iA array=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n  local -iA primes=(2 3\
    \ 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107\
    \ 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211\
    \ 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317\
    \ 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439\
    \ 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569\
    \ 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677\
    \ 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821\
    \ 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947\
    \ 953 967 971 977 981 983 991 997)\n  local -iA temp_array=(0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0)\n  for (( i=0; i<length; i++ )); do\n    case ${hex_key:i:1}\
    \ in\n      0) array[0]=1;;\n      1) array[1]=1;;\n      2) array[2]=1;;\n  \
    \    3) array[3]=1;;\n      4) array[4]=1;;\n      5) array[5]=1;;\n      6) array[6]=1;;\n\
    \      7) array[7]=1;;\n\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpi_n33_ku.sh: line 51: syntax error near unexpected token `}''\n/tmp/tmpi_n33_ku.sh:
    line 51: `}''\n"'
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i sum=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit =~ [2357BD] ]]; then\n\
    \            ((sum++))\n        fi\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for (( i=0; i<${#hex}; i++ ));\
    \ do\n        local -i digit=$(printf '%d' \"'${hex:$i:1}\")\n        if (( digit\
    \ == 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13\
    \ )); then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -i num=0\n    local -i prime=0\n    local -i rem=0\n    local -i sum=0\n   \
    \ local -i temp=0\n    local -i val=0\n    local -i x=0\n    local -i y=0\n  \
    \  local -i z=0\n    local -iA arr=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local\
    \ -iA primes=(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83\
    \ 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191\
    \ 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293\
    \ 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419\
    \ 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541\
    \ 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653\
    \ 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787\
    \ 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919\
    \ 929 937 941 947 953 967 971 977 983 991 997)\n    local -iA tempArr=(0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -iA tempArr2=(0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0)\n    local -iA tempArr3=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local\
    \ -iA tempArr4=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -iA tempArr5=(0 0\
    \ 0 0 0 0 0 0 0\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpw3io0m9b.sh: line 45: syntax error near unexpected token `(''\n/tmp/tmpw3io0m9b.sh:
    line 45: `candidate() {''\n/tmp/tmpw3io0m9b.sh: line 46: hex_key: command not
    found\n/tmp/tmpw3io0m9b.sh: line 47: syntax error near unexpected token `}''\n/tmp/tmpw3io0m9b.sh:
    line 47: `}''\n"'
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(\"0\" \"1\" \"2\" \"3\" \"\
    4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n    local\
    \ prime_digits=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n    local count=0\n    for\
    \ digit in ${hex_digits[@]}; do\n        if [[ \"${hex_string}\" == *\"${digit}\"\
    * ]]; then\n            for prime_digit in ${prime_digits[@]}; do\n          \
    \      if [[ \"${digit}\" == \"${prime_digit}\" ]]; then\n                   \
    \ count=$((count+1))\n                fi\n            done\n        fi\n    done\n\
    \    echo \"${count}\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_string=$1\n  local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n  local prime_digits=(2 3 5 7 B D)\n  local prime_count=0\n  for digit in\
    \ ${hex_digits[@]}; do\n    if [[ \"${hex_string}\" == *\"${digit}\"* ]]; then\n\
    \      for prime in ${prime_digits[@]}; do\n        if [[ \"${digit}\" == \"${prime}\"\
    \ ]]; then\n          ((prime_count++))\n        fi\n      done\n    fi\n  done\n\
    \  echo \"${prime_count}\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \tlocal prime_digits=(2 3 5 7 B D)\n\tlocal prime_count=0\n\tfor digit in ${hex_digits[@]};\
    \ do\n\t\tif [[ $hex_num =~ $digit ]]; then\n\t\t\tfor prime in ${prime_digits[@]};\
    \ do\n\t\t\t\tif [[ $digit = $prime ]]; then\n\t\t\t\t\tprime_count=$((prime_count+1))\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo $prime_count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex}; i++)); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == [2357BD] ]]; then\n\t\t\t((count++))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex}; i++)); do\n\t\t\
    if [[ ${hex:$i:1} =~ [2357BD] ]]; then\n\t\t\t((count++))\n\t\tfi\n\tdone\n\t\
    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal result=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\
    \tlocal digit=${hex:$i:1}\n\t\tcase $digit in\n\t\t\t2|3|5|7|B|D)\n\t\t\t\t((\
    \ result++ ))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\techo $result\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    for ((i=0; i<${#hex_key}; i++)); do\n        if [[ ${hex_key:$i:1} == \"\
    2\" ]]; then\n            ((count++))\n        elif [[ ${hex_key:$i:1} == \"3\"\
    \ ]]; then\n            ((count++))\n        elif [[ ${hex_key:$i:1} == \"5\"\
    \ ]]; then\n            ((count++))\n        elif [[ ${hex_key:$i:1} == \"7\"\
    \ ]]; then\n            ((count++))\n        elif [[ ${hex_key:$i:1} == \"B\"\
    \ ]]; then\n            ((count++))\n        elif [[ ${hex_key:$i:1} == \"D\"\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  echo \"1\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal hex_key_len=${#hex_key}\n\tlocal i=0\n\tlocal\
    \ count=0\n\tlocal hex_key_arr=()\n\tlocal hex_key_arr_len=0\n\tlocal hex_key_arr_len_half=0\n\
    \tlocal hex_key_arr_len_half_plus_one=0\n\tlocal hex_key_arr_len_half_minus_one=0\n\
    \tlocal hex_key_arr_len_half_minus_two=0\n\tlocal hex_key_arr_len_half_minus_three=0\n\
    \tlocal hex_key_arr_len_half_minus_four=0\n\tlocal hex_key_arr_len_half_minus_five=0\n\
    \tlocal hex_key_arr_len_half_minus_six=0\n\tlocal hex_key_arr_len_half_minus_seven=0\n\
    \tlocal hex_key_arr_len_half_minus_eight=0\n\tlocal hex_key_arr_len_half_minus_nine=0\n\
    \tlocal hex_key_arr_len_half_minus_ten=0\n\tlocal hex_key_arr_len_half_minus_eleven=0\n\
    \tlocal hex_key_arr_len_half_minus_twelve=0\n\tlocal hex_key_arr_len_half_minus_thirteen=0\n\
    \tlocal hex_key_arr_len_half_minus_fourteen=0\n\tlocal hex_key_arr_len_half_minus_fifteen=0\n\
    \tlocal hex_key_arr_len_half_minus_sixteen=0\n\tlocal hex_key_arr_len_half_minus_seventeen=0\n\
    \tlocal hex_key_arr_len_half_minus_eighteen=0\n\tlocal hex_key_arr_len_half_minus_nineteen=0\n\
    \tlocal hex_key_arr_len_half_minus_twenty=0\n\tlocal hex_key_arr_len_half_minus_twenty_one=0\n\
    \tlocal hex_key_arr_len_half_minus_twenty_two=0\n\tlocal hex_key_arr_len\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | sed 's/[^2-7B-D]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # write your code here\n    local hex_key=$1\n    local count=0\n   \
    \ for (( i=0; i<${#hex_key}; i++ )); do\n        local char=${hex_key:$i:1}\n\
    \        if [[ $char == \"2\" || $char == \"3\" || $char == \"5\" || $char ==\
    \ \"7\" || $char == \"B\" || $char == \"D\" ]]; then\n            (( count++ ))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex}\n\
    \    local -a hex_array=($(echo $hex | fold -w1))\n    for ((i=0; i<len; i++));\
    \ do\n        if [[ \"${hex_array[$i]}\" == \"2\" ]] || [[ \"${hex_array[$i]}\"\
    \ == \"3\" ]] || [[ \"${hex_array[$i]}\" == \"5\" ]] || [[ \"${hex_array[$i]}\"\
    \ == \"7\" ]] || [[ \"${hex_array[$i]}\" == \"B\" ]] || [[ \"${hex_array[$i]}\"\
    \ == \"D\" ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=$1\n    local count=0\n    for (( i=0; i<${#hex_num}; i++\
    \ )); do\n        local digit=${hex_num:$i:1}\n        case $digit in\n      \
    \      2|3|5|7|B|D)\n                (( count++ ))\n                ;;\n     \
    \   esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex_key}; i++ ));\
    \ do\n\t\tif [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n\t\t\tcount=$(( count +\
    \ 1 ))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#hex}\n\
    \tlocal -a hex_array\n\tlocal -a primes=(2 3 5 7 11 13)\n\tlocal -i primes_len=${#primes[@]}\n\
    \tlocal -i primes_i=0\n\tlocal -i primes_j=0\n\tlocal -i primes_k=0\n\tlocal -i\
    \ primes_l=0\n\tlocal -i primes_m=0\n\tlocal -i primes_n=0\n\tlocal -i primes_o=0\n\
    \tlocal -i primes_p=0\n\tlocal -i primes_q=0\n\tlocal -i primes_r=0\n\tlocal -i\
    \ primes_s=0\n\tlocal -i primes_t=0\n\tlocal -i primes_u=0\n\tlocal -i primes_v=0\n\
    \tlocal -i primes_w=0\n\tlocal -i primes_x=0\n\tlocal -i primes_y=0\n\tlocal -i\
    \ primes_z=0\n\tlocal -i primes_aa=0\n\tlocal -i primes_ab=0\n\tlocal -i primes_ac=0\n\
    \tlocal -i primes_ad=0\n\tlocal -i primes_ae=0\n\tlocal -i primes_af=0\n\tlocal\
    \ -i primes_ag=0\n\tlocal -i primes_ah=0\n\tlocal -i primes_ai=0\n\tlocal -i primes_aj=0\n\
    \tlocal -i primes_ak=0\n\tlocal -i primes_al=0\n\tlocal -i primes_am=0\n\tlocal\
    \ -i primes_an=0\n\tlocal -i primes_ao=0\n\tlocal -i primes_ap=0\n\tlocal -i primes_aq=0\n\
    \tlocal -i primes_ar=0\n\tlocal -i primes_as=0\n\tlocal -i primes_at=0\n\tlocal\
    \ -i primes_au=0\n\tlocal -i primes_av=\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local -i count=0\n  local -i i=0\n  local -i len=${#hex_key}\n\
    \  local -i digit\n  local -i prime\n  local -i is_prime\n  local -i is_hex\n\
    \  local -i is_digit\n  local -i is_upper\n  local -i is_lower\n  local -i is_alpha\n\
    \  local -i is_alnum\n  local -i is_space\n  local -i is_punct\n  local -i is_graph\n\
    \  local -i is_print\n  local -i is_cntrl\n  local -i is_xdigit\n  local -i is_blank\n\
    \  local -i is_ascii\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n\
    \  local -i is_digit\n  local -i is_digit\n  local -i is_digit\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [0-9] | grep -o [2-7ABD] | wc -l\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"\
    6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n  local primes=(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n  local count=0\n  for i in ${hex_digits[@]};\
    \ do\n    for j in ${primes[@]}; do\n      if [ \"$i\" == \"$j\" ]; then\n   \
    \     count=$((count+1))\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    case ${hex:$i:1} in\n\t\t\t[2357BD])\n\t\t\t\t(( count++ ))\n\t\t\t\t;;\n\t\t\
    esac\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal -i count=0\n\tfor ((i=0; i<${#1}; i++)); do\n\t\tlocal -i digit=${1:i:1}\n\
    \t\tif [[ $digit == 2 || $digit == 3 || $digit == 5 || $digit == 7 || $digit ==\
    \ 11 || $digit == 13 ]]; then\n\t\t\t((count++))\n\t\tfi\n\tdone\n\techo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        case ${hex:i:1} in\n            2|3|5|7|B|D)\n                ((count++))\n\
    \                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -a primes=(2 3 5 7 11 13)\n    local -a hex=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_primes=(${hex[@]:0:2} ${hex[@]:10:6})\n\
    \    local -a input=($(echo $1 | grep -o .))\n    for i in ${input[@]}; do\n \
    \       for j in ${hex_primes[@]}; do\n            if [[ $i == $j ]]; then\n \
    \               ((count++))\n            fi\n        done\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal hex_key_len=${#hex_key}\n\tlocal hex_key_prime_count=0\n\
    \tlocal hex_key_prime_digit=0\n\tlocal hex_key_prime_digit_decimal=0\n\tfor ((\
    \ i=0; i<$hex_key_len; i++ )); do\n\t\thex_key_prime_digit=${hex_key:$i:1}\n\t\
    \thex_key_prime_digit_decimal=$(echo \"ibase=16; $hex_key_prime_digit\" | bc)\n\
    \t\tif [[ $hex_key_prime_digit_decimal -eq 2 || $hex_key_prime_digit_decimal -eq\
    \ 3 || $hex_key_prime_digit_decimal -eq 5 || $hex_key_prime_digit_decimal -eq\
    \ 7 || $hex_key_prime_digit_decimal -eq 11 || $hex_key_prime_digit_decimal -eq\
    \ 13 ]]; then\n\t\t\thex_key_prime_count=$((hex_key_prime_count+1))\n\t\tfi\n\t\
    done\n\techo $hex_key_prime_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"1\"\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n  local prime_digits=(2 3 5 7 B D)\n  local prime_count=0\n  for digit in\
    \ ${hex_digits[@]}; do\n    if [[ $hex_number =~ $digit ]]; then\n      for prime\
    \ in ${prime_digits[@]}; do\n        if [[ $digit = $prime ]]; then\n        \
    \  ((prime_count++))\n        fi\n      done\n    fi\n  done\n  echo $prime_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ \"Hello world\"\n  echo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=\"$1\"\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i\
    \ len=${#hex_number}\n\tlocal -i num=0\n\tlocal -i prime=0\n\tlocal -i j=0\n\t\
    local -i is_prime=0\n\tlocal -i is_hex=0\n\tlocal -i is_hex_prime=0\n\tlocal -i\
    \ hex_prime_count=0\n\tlocal -i hex_prime_list=(2 3 5 7 11 13)\n\tlocal -i hex_prime_list_len=${#hex_prime_list[@]}\n\
    \tlocal -i hex_prime_list_num=0\n\tlocal -i hex_prime_list_num_len=0\n\tlocal\
    \ -i hex_prime_list_num_len_prime=0\n\tlocal -i hex_prime_list_num_len_prime_count=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex=0\n\tlocal -i hex_prime_list_num_len_prime_count_hex_prime=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list=0\n\tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list_len=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list_len_num=0\n\tlocal\
    \ -i hex_prime_list_num_len_prime_count_hex_prime_list_len_num_prime=0\n\tlocal\
    \ -i hex_prime_list_num_len_prime_count_hex_prime_list_len_num_prime_count=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list_len_num_prime_count_hex=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list_len_num_prime_count_hex_prime=0\n\
    \tlocal -i hex_prime_list_num_len_prime_count_hex_prime_list_len\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#hex}\n\
    \tfor ((i=0; i<len; i++)); do\n\t\tcase ${hex:i:1} in\n\t\t\t2|3|5|7|B|D)\n\t\t\
    \t\t((count++))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    0\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex_key}; i++ ));\
    \ do\n\t\tif [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n\t\t\tcount=$((count+1))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7ABD]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local count=0\n    for ((i=0; i<${#hex_number};\
    \ i++)); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit == \"\
    2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\"\
    \ || $digit == \"D\" ]]; then\n            ((count++))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=\"$1\"\n  local hex_key_len=${#hex_key}\n  local hex_key_primes=0\n\
    \  local hex_key_digit\n  for ((i=0; i<hex_key_len; i++)); do\n    hex_key_digit=${hex_key:i:1}\n\
    \    case $hex_key_digit in\n      2|3|5|7|B|D)\n        ((hex_key_primes++))\n\
    \        ;;\n    esac\n  done\n  echo $hex_key_primes\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local -i count=0\n    local -i i=0\n   \
    \ local -i len=${#hex_number}\n    local -i digit\n    local -i is_prime\n   \
    \ local -i j\n    for ((i=0; i<len; i++)); do\n        digit=${hex_number:i:1}\n\
    \        case $digit in\n            0|1|8)\n                is_prime=0\n    \
    \            ;;\n            2|3|5|7|B|D)\n                is_prime=1\n      \
    \          ;;\n            *)\n                is_prime=0\n                for\
    \ ((j=2; j<digit; j++)); do\n                    if ((digit % j == 0)); then\n\
    \                        is_prime=0\n                        break\n         \
    \           fi\n                done\n                ;;\n        esac\n     \
    \   ((is_prime == 1)) && ((count++))\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=$1\n\tlocal number_of_primes=0\n\tfor (( i=0; i<${#hex_number};\
    \ i++ )); do\n\t\tlocal digit=${hex_number:$i:1}\n\t\tif [[ $digit == \"2\" ||\
    \ $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" ||\
    \ $digit == \"D\" ]]; then\n\t\t\tnumber_of_primes=$((number_of_primes+1))\n\t\
    \tfi\n\tdone\n\techo $number_of_primes\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_str=\"$1\"\n    local -i count=0\n    local -i i=0\n    local\
    \ -i len=${#hex_str}\n    local -i num=0\n    local -i is_prime=0\n    local -i\
    \ j=0\n    local -i is_prime_flag=0\n    local -i is_prime_flag_2=0\n    local\
    \ -i is_prime_flag_3=0\n    local -i is_prime_flag_4=0\n    local -i is_prime_flag_5=0\n\
    \    local -i is_prime_flag_6=0\n    local -i is_prime_flag_7=0\n    local -i\
    \ is_prime_flag_8=0\n    local -i is_prime_flag_9=0\n    local -i is_prime_flag_10=0\n\
    \    local -i is_prime_flag_11=0\n    local -i is_prime_flag_12=0\n    local -i\
    \ is_prime_flag_13=0\n    local -i is_prime_flag_14=0\n    local -i is_prime_flag_15=0\n\
    \    local -i is_prime_flag_16=0\n    local -i is_prime_flag_17=0\n    local -i\
    \ is_prime_flag_18=0\n    local -i is_prime_flag_19=0\n    local -i is_prime_flag_20=0\n\
    \    local -i is_prime_flag_21=0\n    local -i is_prime_flag_22=0\n    local -i\
    \ is_prime_flag_23=0\n    local -i is_prime_flag_24=0\n    local -i is_prime_flag_25=0\n\
    \    local -i is_prime_flag_26=0\n    local -i is_prime_flag_27=0\n    local -i\
    \ is_prime_flag_28=0\n    local -i is_prime_flag_29=0\n    local -i is_prime_flag_30=0\n\
    \    local -i is_prime_flag_31=0\n    local -i is_prime_flag_32=0\n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal -i count=0\n\tfor ((i=0; i<${#1}; i++)); do\n\t\tcase ${1:i:1} in\n\
    \t\t\t[2357BD]) ((count++));;\n\t\tesac\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex_key}; i++)); do\n\
    \t\tif [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n\t\t\t((count++))\n\t\tfi\n\t\
    done\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local primes_count=0\n\
    \    local i=0\n    local hex_digit\n    for ((i=0; i<hex_key_len; i++)); do\n\
    \        hex_digit=${hex_key:$i:1}\n        if [[ \"$hex_digit\" == \"2\" || \"\
    $hex_digit\" == \"3\" || \"$hex_digit\" == \"5\" || \"$hex_digit\" == \"7\" ||\
    \ \"$hex_digit\" == \"B\" || \"$hex_digit\" == \"D\" ]]; then\n            ((primes_count++))\n\
    \        fi\n    done\n    echo $primes_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local count=0\n    for digit\
    \ in ${hex_digits[@]}; do\n        if [[ $hex_number =~ $digit ]]; then\n    \
    \        for prime_digit in ${prime_digits[@]}; do\n                if [[ $digit\
    \ = $prime_digit ]]; then\n                    count=$((count+1))\n          \
    \      fi\n            done\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local primes=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\
    \    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n        for (( j=0;\
    \ j<${#primes[@]}; j++ )); do\n            if [[ ${hex:$i:1} == ${primes[$j]}\
    \ ]]; then\n                count=$((count+1))\n            fi\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n    local prime_digits=(2 3 5 7 B D)\n    local count=0\n    for i in ${hex_digits[@]};\
    \ do\n        for j in ${prime_digits[@]}; do\n            if [[ $i == $j ]];\
    \ then\n                count=$((count+1))\n            fi\n        done\n   \
    \ done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i digit=0\n\
    \  local -i num=0\n  local -i is_prime=0\n  local -i j=0\n  local -i is_divisible=0\n\
    \  while [ $i -lt $len ]; do\n    digit=${1:$i:1}\n    case $digit in\n      0|1|2|3|4|5|6|7|8|9)\n\
    \        num=$digit\n        ;;\n      A)\n        num=10\n        ;;\n      B)\n\
    \        num=11\n        ;;\n      C)\n        num=12\n        ;;\n      D)\n\
    \        num=13\n        ;;\n      E)\n        num=14\n        ;;\n      F)\n\
    \        num=15\n        ;;\n    esac\n    is_prime=1\n    j=2\n    while [ $j\
    \ -lt $num ]; do\n      is_divisible=$((num % j))\n      if [ $is_divisible -eq\
    \ 0 ]; then\n        is_prime=0\n        break\n      fi\n      j=$((j + 1))\n\
    \    done\n    if [ $is_prime -eq 1 ]; then\n      count=$((count + 1))\n    fi\n\
    \    i=$((i + 1))\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_num=$1\n  local -i count=0\n  local -i i=0\n  local -i len=${#hex_num}\n\
    \  local -i num=0\n  local -i num_hex=0\n  local -i num_dec=0\n  local -i num_hex_dec=0\n\
    \  local -i num_hex_dec_mod=0\n  local -i num_hex_dec_mod_div=0\n  local -i num_hex_dec_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_mod_div=0\n  local -i num_hex_dec_mod_div_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div=0\n  local -i num_hex_dec_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div=0\n  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div=0\n  local -i\
    \ num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \  local -i num_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i num_hex_dec_mod_div_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\t(( count++ ))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tlocal i=0\n\tlocal len=${#hex}\n\tlocal\
    \ char\n\twhile [ $i -lt $len ]; do\n\t\tchar=${hex:$i:1}\n\t\tcase $char in\n\
    \t\t\t2|3|5|7|B|D)\n\t\t\t\tcount=$((count+1))\n\t\t\t\t;;\n\t\tesac\n\t\ti=$((i+1))\n\
    \tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_length=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_prime_digits=\"2 3 5 7 B D\"\n    local hex_key_digit\n   \
    \ for (( i=0; i<$hex_key_length; i++ )); do\n        hex_key_digit=${hex_key:$i:1}\n\
    \        if [[ $hex_key_prime_digits =~ $hex_key_digit ]]; then\n            ((hex_key_primes++))\n\
    \        fi\n    done\n    echo $hex_key_primes\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \tlocal prime_digits=(2 3 5 7 B D)\n\tlocal count=0\n\tfor i in ${hex_digits[@]};\
    \ do\n\t\tfor j in ${prime_digits[@]}; do\n\t\t\tif [ $i == $j ]; then\n\t\t\t\
    \tcount=$((count+1))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [0-9] | tr -d [A-F] | wc -c\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#1}\n\tlocal -i num=0\n\
    \tlocal -i prime=0\n\tlocal -i remainder=0\n\tlocal -i temp=0\n\tlocal -i temp2=0\n\
    \tlocal -i temp3=0\n\tlocal -i temp4=0\n\tlocal -i temp5=0\n\tlocal -i temp6=0\n\
    \tlocal -i temp7=0\n\tlocal -i temp8=0\n\tlocal -i temp9=0\n\tlocal -i temp10=0\n\
    \tlocal -i temp11=0\n\tlocal -i temp12=0\n\tlocal -i temp13=0\n\tlocal -i temp14=0\n\
    \tlocal -i temp15=0\n\tlocal -i temp16=0\n\tlocal -i temp17=0\n\tlocal -i temp18=0\n\
    \tlocal -i temp19=0\n\tlocal -i temp20=0\n\tlocal -i temp21=0\n\tlocal -i temp22=0\n\
    \tlocal -i temp23=0\n\tlocal -i temp24=0\n\tlocal -i temp25=0\n\tlocal -i temp26=0\n\
    \tlocal -i temp27=0\n\tlocal -i temp28=0\n\tlocal -i temp29=0\n\tlocal -i temp30=0\n\
    \tlocal -i temp31=0\n\tlocal -i temp32=0\n\tlocal -i temp33=0\n\tlocal -i temp34=0\n\
    \tlocal -i temp35=0\n\tlocal -i temp36=0\n\tlocal -i temp37=0\n\tlocal -i temp38=0\n\
    \tlocal -i temp39=0\n\tlocal -i temp40=0\n\tlocal -i temp41=0\n\tlocal -i temp42=0\n\
    \tlocal -i temp43=0\n\tlocal -i temp44=0\n\tlocal -i temp45=0\n\tlocal -i temp46=0\n\
    \tlocal -i temp47=0\n\tlocal -i temp48=0\n\tlocal -i temp49=0\n\tlocal -i temp50=0\n\
    \tlocal -i temp51=0\n\tlocal\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\t(( count++ ))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B\
    \ C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_num == *\"$digit\"* ]]; then\n\
    \            if [[ $prime_digits == *\"$digit\"* ]]; then\n                ((count++))\n\
    \            fi\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    local primes=\"2357BD\"\n    for\
    \ (( i=0; i<${#hex}; i++ )); do\n        if [[ $primes =~ ${hex:$i:1} ]]; then\n\
    \            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"\
    5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n\tlocal hex_primes=(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\tlocal count=0\n\tfor (( i=0; i<${#hex_num};\
    \ i++ )); do\n\t\tlocal digit=${hex_num:$i:1}\n\t\tfor (( j=0; j<${#hex_primes[@]};\
    \ j++ )); do\n\t\t\tif [[ ${hex_primes[$j]} == $digit ]]; then\n\t\t\t\t(( count++\
    \ ))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\t# Write your code here\n\t# To debug: echo \"Debug messages...\" >&2\n\t\
    echo \"$1\" | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit ==\
    \ \"B\" || $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"0\"\n        return\n    fi\n\
    \    local -i count=0\n    local -i len=${#1}\n    local -i i=0\n    local -i\
    \ num=0\n    local -i j=0\n    local -i flag=0\n    for ((i=0; i<len; i++)); do\n\
    \        num=0\n        case ${1:i:1} in\n            \"0\") num=0;;\n       \
    \     \"1\") num=1;;\n            \"2\") num=2;;\n            \"3\") num=3;;\n\
    \            \"4\") num=4;;\n            \"5\") num=5;;\n            \"6\") num=6;;\n\
    \            \"7\") num=7;;\n            \"8\") num=8;;\n            \"9\") num=9;;\n\
    \            \"A\") num=10;;\n            \"B\") num=11;;\n            \"C\")\
    \ num=12;;\n            \"D\") num=13;;\n            \"E\") num=14;;\n       \
    \     \"F\") num=15;;\n        esac\n        flag=0\n        for ((j=2; j<=num/2;\
    \ j++)); do\n            if [ $((num%j)) -eq 0 ]; then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [ $flag -eq 0\
    \ ]; then\n            count=$((count+1))\n        fi\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660344550
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_string =~ $digit ]]; then\n   \
    \         for prime in $prime_digits; do\n                if [[ $digit == $prime\
    \ ]]; then\n                    ((count++))\n                fi\n            done\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660344550
