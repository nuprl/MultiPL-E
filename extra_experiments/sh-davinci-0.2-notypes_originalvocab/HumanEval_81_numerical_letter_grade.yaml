name: HumanEval_81_numerical_letter_grade
language: sh
prompt: "#!/bin/bash\n# It is the last week of the semester and the teacher has to\
  \ give the grades\n# to students. The teacher has been making her own algorithm\
  \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
  # She has given you a list of GPAs for some students and you have to write \n# a\
  \ function that can output a list of letter grades using the following table:\n\
  # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A\
  \ \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7             \
  \   B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
  \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7       \
  \         D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>>\
  \ $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"\
  ', '\"A-\"']\nnumerical_letter_grade() {\n"
tests: "}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
  \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
  \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B\
  \ B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
completions: ["    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n\
    \    # You can use the following command to convert a string to a number\n   \
    \ # number=$(echo \"$string\" | bc -l)\n    # You can use the following command\
    \ to convert a number to a string\n    # string=$(printf \"%.2f\" \"$number\"\
    )\n    # You can use the following command to convert a string to an array\n \
    \   # array=($string)\n    # You can use the following command to convert an array\
    \ to a string\n    # string=$(printf '%s\\n' \"${array[@]}\")\n    # You can use\
    \ the following command to convert an array to a string\n    # string=$(printf\
    \ '%s\\n' \"${array[@]}\")\n    # You can use the following command to convert\
    \ a string to an array\n    # array=($string)\n    # You can use the following\
    \ command to convert an array to a string\n    # string=$(printf '%s\\n' \"${array[@]}\"\
    )\n    # You can use the following command to convert a string to an array\n \
    \   # array=($string)\n    # You can use the following command to convert an array\
    \ to a string\n    # string=$(printf '%s\\n' \"${array[@]}\")\n    # You can use\
    \ the following command to convert a string to an array\n    # array=($string)\n\
    \    # You can use the following command to convert an array to a string\n   \
    \ # string=$(printf '%s\\n' \"${array[@]}\")\n    # You can use the following\
    \ command to convert a string to an array\n    # array=($string)\n    # You can\
    \ use the following command to convert an array to a string\n    # string=$(printf\
    \ '%s\\n' \"${array[@]}\")\n    # You can use the following command to convert\
    \ a string to an array\n    # array=($string)\n    # You can use the following\
    \ command to convert an array to a string\n    # string=$(printf '%s\\n' \"${array[@]}\"\
    )\n    # You can use the following command to convert a string to an array\n \
    \   # array=($string)\n    # You can use the following command to convert an array\
    \ to a string\n    # string=$(printf", "    # Write your code here\n    # You\
    \ can use the following function to convert a number to a string\n    # echo $(number_to_string\
    \ $number)\n    # You can use the following function to convert a string to a\
    \ number\n    # echo $(string_to_number $string)\n    # You can use the following\
    \ function to compare two numbers\n    # echo $(compare_numbers $number1 $number2)\n\
    \    # You can use the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare two strings\n    # echo $(compare_strings\
    \ $string1 $string2)\n    # You can use the following function to compare two\
    \ strings\n    # echo $(compare_strings $string1 $string2)\n    # You can use\
    \ the following function to compare", "    if [ \"$1\" -ge 4.0 ]; then\n     \
    \   echo '\"A+\"'\n    elif [ \"$1\" -ge 3.7 ]; then\n        echo '\"A\"'\n \
    \   elif [ \"$1\" -ge 3.3 ]; then\n        echo '\"A-\"'\n    elif [ \"$1\" -ge\
    \ 3.0 ]; then\n        echo '\"B+\"'\n    elif [ \"$1\" -ge 2.7 ]; then\n    \
    \    echo '\"B\"'\n    elif [ \"$1\" -ge 2.3 ]; then\n        echo '\"B-\"'\n\
    \    elif [ \"$1\" -ge 2.0 ]; then\n        echo '\"C+\"'\n    elif [ \"$1\" -ge\
    \ 1.7 ]; then\n        echo '\"C\"'\n    elif [ \"$1\" -ge 1.3 ]; then\n     \
    \   echo '\"C-\"'\n    elif [ \"$1\" -ge 1.0 ]; then\n        echo '\"D+\"'\n\
    \    elif [ \"$1\" -ge 0.7 ]; then\n        echo '\"D\"'\n    elif [ \"$1\" -ge\
    \ 0.0 ]; then\n        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi",
  "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    local gpa=$1\n    if [ $gpa -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        echo \"A\"\n  \
    \  elif [ $gpa -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $gpa -ge 3.0 ];\
    \ then\n        echo \"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $gpa -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $gpa -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $gpa -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $gpa\
    \ -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $gpa -ge 0.7 ]; then\n    \
    \    echo \"D\"\n    elif [ $gpa -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [\
    \ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n   \
    \     echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    local gpa=$1\n    if [ $gpa -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        echo \"A\"\n  \
    \  elif [ $gpa -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $gpa -ge 3.0 ];\
    \ then\n        echo \"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $gpa -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $gpa -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $gpa -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $gpa\
    \ -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $gpa -ge 0.7 ]; then\n    \
    \    echo \"D\"\n    elif [ $gpa -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $(echo \"$1 > 4.0\" | bc) -eq 1 ]; then\n\
    \        echo \"A+\"\n    elif [ $(echo \"$1 > 3.7\" | bc) -eq 1 ]; then\n   \
    \     echo \"A\"\n    elif [ $(echo \"$1 > 3.3\" | bc) -eq 1 ]; then\n       \
    \ echo \"A-\"\n    elif [ $(echo \"$1 > 3.0\" | bc) -eq 1 ]; then\n        echo\
    \ \"B+\"\n    elif [ $(echo \"$1 > 2.7\" | bc) -eq 1 ]; then\n        echo \"\
    B\"\n    elif [ $(echo \"$1 > 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$1 > 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n   \
    \ elif [ $(echo \"$1 > 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n    elif\
    \ [ $(echo \"$1 > 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n    elif [ $(echo\
    \ \"$1 > 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"\
    $1 > 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$1 > 0.0\"\
    \ | bc) -eq 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n   \
    \ fi", "    local grade=$1\n    if [ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n\
    \        echo \"A+\"\n    elif [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n\
    \        echo \"A\"\n    elif [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n\
    \        echo \"A-\"\n    elif [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n\
    \        echo \"B+\"\n    elif [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n\
    \        echo \"B\"\n    elif [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n\
    \        echo \"B-\"\n    elif [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n\
    \        echo \"C+\"\n    elif [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n\
    \        echo \"C\"\n    elif [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n\
    \        echo \"C-\"\n    elif [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n\
    \        echo \"D+\"\n    elif [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n\
    \        echo \"D\"\n    elif [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge\
    \ 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge\
    \ 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    # Write your code here\n    # Hint: Use if-elif-else\n\
    \    # Hint: Use awk\n    # Hint: Use printf\n    # Hint: Use echo\n    # Hint:\
    \ Use sed\n    # Hint: Use tr\n    # Hint: Use bc\n    # Hint: Use echo\n    #\
    \ Hint: Use awk\n    # Hint: Use printf\n    # Hint: Use echo\n    # Hint: Use\
    \ sed\n    # Hint: Use tr\n    # Hint: Use bc\n    # Hint: Use echo\n    # Hint:\
    \ Use awk\n    # Hint: Use printf\n    # Hint: Use echo\n    # Hint: Use sed\n\
    \    # Hint: Use tr\n    # Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use\
    \ awk\n    # Hint: Use printf\n    # Hint: Use echo\n    # Hint: Use sed\n   \
    \ # Hint: Use tr\n    # Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use awk\n\
    \    # Hint: Use printf\n    # Hint: Use echo\n    # Hint: Use sed\n    # Hint:\
    \ Use tr\n    # Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use awk\n    #\
    \ Hint: Use printf\n    # Hint: Use echo\n    # Hint: Use sed\n    # Hint: Use\
    \ tr\n    # Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use awk\n    # Hint:\
    \ Use printf\n    # Hint: Use echo\n    # Hint: Use sed\n    # Hint: Use tr\n\
    \    # Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use awk\n    # Hint: Use\
    \ printf\n    # Hint: Use echo\n    # Hint: Use sed\n    # Hint: Use tr\n    #\
    \ Hint: Use bc\n    # Hint: Use echo\n    # Hint: Use awk\n    # Hint: Use printf\n\
    \    # Hint: Use echo\n    # Hint: Use sed\n    #", "    # TODO: Write your code\
    \ here\n    # HINT: You can use the following if-else statement\n    # if [ condition\
    \ ]; then\n    #   echo \"A+\"\n    # elif [ condition ]; then\n    #   echo \"\
    A\"\n    # else\n    #   echo \"D-\"\n    # fi\n    if [ $1 -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    if [ \"$1\" == \"4.0\" ]; then\n        echo \"A+\"\n    elif [ $(echo\
    \ \"$1 > 3.7\" | bc -l) -eq 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"\
    $1 > 3.3\" | bc -l) -eq 1 ]; then\n        echo \"A-\"\n    elif [ $(echo \"$1\
    \ > 3.0\" | bc -l) -eq 1 ]; then\n        echo \"B+\"\n    elif [ $(echo \"$1\
    \ > 2.7\" | bc -l) -eq 1 ]; then\n        echo \"B\"\n    elif [ $(echo \"$1 >\
    \ 2.3\" | bc -l) -eq 1 ]; then\n        echo \"B-\"\n    elif [ $(echo \"$1 >\
    \ 2.0\" | bc -l) -eq 1 ]; then\n        echo \"C+\"\n    elif [ $(echo \"$1 >\
    \ 1.7\" | bc -l) -eq 1 ]; then\n        echo \"C\"\n    elif [ $(echo \"$1 > 1.3\"\
    \ | bc -l) -eq 1 ]; then\n        echo \"C-\"\n    elif [ $(echo \"$1 > 1.0\"\
    \ | bc -l) -eq 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"$1 > 0.7\"\
    \ | bc -l) -eq 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$1 > 0.0\" |\
    \ bc -l) -eq 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    # TODO: Write your code here\n    # HINT: You can use the following\
    \ if statement to check if a number is\n    # greater than another number:\n \
    \   # if [[ $1 > $2 ]]; then\n    #     echo \"true\"\n    # else\n    #     echo\
    \ \"false\"\n    # fi\n    # HINT: You can use the following if statement to check\
    \ if a number is\n    # equal to another number:\n    # if [[ $1 == $2 ]]; then\n\
    \    #     echo \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n   \
    \ # HINT: You can use the following if statement to check if a number is\n   \
    \ # less than another number:\n    # if [[ $1 < $2 ]]; then\n    #     echo \"\
    true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # HINT: You can use\
    \ the following if statement to check if a number is\n    # greater than or equal\
    \ to another number:\n    # if [[ $1 -ge $2 ]]; then\n    #     echo \"true\"\n\
    \    # else\n    #     echo \"false\"\n    # fi\n    # HINT: You can use the following\
    \ if statement to check if a number is\n    # less than or equal to another number:\n\
    \    # if [[ $1 -le $2 ]]; then\n    #     echo \"true\"\n    # else\n    #  \
    \   echo \"false\"\n    # fi\n    # HINT: You can use the following if statement\
    \ to check if a number is\n    # not equal to another number:\n    # if [[ $1\
    \ -ne $2 ]]; then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\
    \n    # fi\n    # HINT: You can use the following if statement to check if a number\
    \ is\n    # equal to another number:\n    # if [[ $1 -eq $2 ]]; then\n    #  \
    \   echo \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # HINT:\
    \ You can use the following if statement to check if a number is\n    # less than\
    \ or equal to another number:\n    # if [[ $1 -le $2 ]];", "    local grade=$1\n\
    \    if [ \"$grade\" == \"4.0\" ]; then\n        echo \"A+\"\n    elif [ \"$grade\"\
    \ == \"3.7\" ]; then\n        echo \"A\"\n    elif [ \"$grade\" == \"3.3\" ];\
    \ then\n        echo \"A-\"\n    elif [ \"$grade\" == \"3.0\" ]; then\n      \
    \  echo \"B+\"\n    elif [ \"$grade\" == \"2.7\" ]; then\n        echo \"B\"\n\
    \    elif [ \"$grade\" == \"2.3\" ]; then\n        echo \"B-\"\n    elif [ \"\
    $grade\" == \"2.0\" ]; then\n        echo \"C+\"\n    elif [ \"$grade\" == \"\
    1.7\" ]; then\n        echo \"C\"\n    elif [ \"$grade\" == \"1.3\" ]; then\n\
    \        echo \"C-\"\n    elif [ \"$grade\" == \"1.0\" ]; then\n        echo \"\
    D+\"\n    elif [ \"$grade\" == \"0.7\" ]; then\n        echo \"D\"\n    elif [\
    \ \"$grade\" == \"0.0\" ]; then\n        echo \"D-\"\n    elif [ \"$grade\" ==\
    \ \"0.0\" ]; then\n        echo \"E\"\n    fi", "    local grade=$1\n    if [\
    \ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n    elif\
    \ [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n    elif\
    \ [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n    elif\
    \ [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n    elif\
    \ [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n    elif\
    \ [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n    elif\
    \ [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n    elif\
    \ [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n    elif\
    \ [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n    elif\
    \ [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n    elif\
    \ [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n    elif\
    \ [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [\
    \ $1 == 4.0 ]; then\n        echo \"A+\"\n    elif [ $(echo \"$1 > 3.7\" | bc\
    \ -l) == 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"$1 > 3.3\" | bc -l)\
    \ == 1 ]; then\n        echo \"A-\"\n    elif [ $(echo \"$1 > 3.0\" | bc -l) ==\
    \ 1 ]; then\n        echo \"B+\"\n    elif [ $(echo \"$1 > 2.7\" | bc -l) == 1\
    \ ]; then\n        echo \"B\"\n    elif [ $(echo \"$1 > 2.3\" | bc -l) == 1 ];\
    \ then\n        echo \"B-\"\n    elif [ $(echo \"$1 > 2.0\" | bc -l) == 1 ]; then\n\
    \        echo \"C+\"\n    elif [ $(echo \"$1 > 1.7\" | bc -l) == 1 ]; then\n \
    \       echo \"C\"\n    elif [ $(echo \"$1 > 1.3\" | bc -l) == 1 ]; then\n   \
    \     echo \"C-\"\n    elif [ $(echo \"$1 > 1.0\" | bc -l) == 1 ]; then\n    \
    \    echo \"D+\"\n    elif [ $(echo \"$1 > 0.7\" | bc -l) == 1 ]; then\n     \
    \   echo \"D\"\n    elif [ $(echo \"$1 > 0.0\" | bc -l) == 1 ]; then\n       \
    \ echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n  \
    \  if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"$grade\"\
    \ -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\" -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$grade\"\
    \ -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\" -ge 2.0 ]; then\n\
    \        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n        echo \"C\"\
    \n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$grade\"\
    \ -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\" -ge 0.7 ]; then\n\
    \        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n        echo \"D-\"\
    \n    else\n        echo \"E\"\n    fi", "    local gpa=$1\n    if (( $(echo \"\
    $gpa >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"$gpa\
    \ >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$gpa >=\
    \ 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$gpa >= 3.0\"\
    \ | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$gpa >= 2.7\" |\
    \ bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$gpa >= 2.3\" | bc\
    \ -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$gpa >= 2.0\" | bc -l)\
    \ )); then\n        echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc -l) ));\
    \ then\n        echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n\
    \        echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n \
    \       echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n  \
    \      echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n    \
    \    echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local gpa=$1\n \
    \   if [ $(echo \"$gpa >= 4.0\" | bc -l) -eq 1 ]; then\n        echo \"A+\"\n\
    \    elif [ $(echo \"$gpa >= 3.7\" | bc -l) -eq 1 ]; then\n        echo \"A\"\n\
    \    elif [ $(echo \"$gpa >= 3.3\" | bc -l) -eq 1 ]; then\n        echo \"A-\"\
    \n    elif [ $(echo \"$gpa >= 3.0\" | bc -l) -eq 1 ]; then\n        echo \"B+\"\
    \n    elif [ $(echo \"$gpa >= 2.7\" | bc -l) -eq 1 ]; then\n        echo \"B\"\
    \n    elif [ $(echo \"$gpa >= 2.3\" | bc -l) -eq 1 ]; then\n        echo \"B-\"\
    \n    elif [ $(echo \"$gpa >= 2.0\" | bc -l) -eq 1 ]; then\n        echo \"C+\"\
    \n    elif [ $(echo \"$gpa >= 1.7\" | bc -l) -eq 1 ]; then\n        echo \"C\"\
    \n    elif [ $(echo \"$gpa >= 1.3\" | bc -l) -eq 1 ]; then\n        echo \"C-\"\
    \n    elif [ $(echo \"$gpa >= 1.0\" | bc -l) -eq 1 ]; then\n        echo \"D+\"\
    \n    elif [ $(echo \"$gpa >= 0.7\" | bc -l) -eq 1 ]; then\n        echo \"D\"\
    \n    elif [ $(echo \"$gpa >= 0.0\" | bc -l) -eq 1 ]; then\n        echo \"D-\"\
    \n    else\n        echo \"E\"\n    fi", "    # This function takes a numerical\
    \ grade and returns the letter grade\n    # associated with it.\n    # Example:\n\
    \    # >>> numerical_letter_grade 4.0\n    # \"A+\"\n    # >>> numerical_letter_grade\
    \ 3.5\n    # \"A-\"\n    # >>> numerical_letter_grade 2.7\n    # \"B\"\n    #\
    \ >>> numerical_letter_grade 1.3\n    # \"C-\"\n    # >>> numerical_letter_grade\
    \ 0.7\n    # \"D\"\n    # >>> numerical_letter_grade 0.0\n    # \"D-\"\n    #\
    \ >>> numerical_letter_grade -0.1\n    # \"E\"\n    # >>> numerical_letter_grade\
    \ 4.1\n    # \"E\"\n    # >>> numerical_letter_grade \"hello\"\n    # \"E\"\n\
    \    # >>> numerical_letter_grade \"4.0\"\n    # \"A+\"\n    # >>> numerical_letter_grade\
    \ \"3.5\"\n    # \"A-\"\n    # >>> numerical_letter_grade \"2.7\"\n    # \"B\"\
    \n    # >>> numerical_letter_grade \"1.3\"\n    # \"C-\"\n    # >>> numerical_letter_grade\
    \ \"0.7\"\n    # \"D\"\n    # >>> numerical_letter_grade \"0.0\"\n    # \"D-\"\
    \n    # >>> numerical_letter_grade \"-0.1\"\n    # \"E\"\n    # >>> numerical_letter_grade\
    \ \"4.1\"\n    # \"E\"\n    # >>> numerical_letter_grade \"hello\"\n    # \"E\"\
    \n    # >>> numerical_letter_grade \"4.0\"\n    # \"A+\"\n    # >>> numerical_letter_grade\
    \ \"3.5\"\n    # \"A-\"\n    # >>> numerical_letter_grade \"2.7\"\n    # \"B\"\
    \n    # >>> numerical_letter_grade \"1.3\"\n    # \"C-\"\n    # >>> numerical_letter_grade\
    \ \"0.7\"\n    # \"D\"\n    # >>> numerical_letter_grade \"0.0\"\n    # \"D-\"\
    \n    # >>> numerical_letter_grade \"-0.1\"\n    # \"E\"\n   ", "    # Write your\
    \ code here\n    # Use the following command to output the result\n    # echo\
    \ \"[\\\"$letter_grade\\\"]\"", "    local gpa=$1\n    if [ \"$gpa\" -eq 4.0 ];\
    \ then\n        echo \"A+\"\n    elif [ \"$gpa\" -gt 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ \"$gpa\" -gt 3.3 ]; then\n        echo \"A-\"\n    elif [\
    \ \"$gpa\" -gt 3.0 ]; then\n        echo \"B+\"\n    elif [ \"$gpa\" -gt 2.7 ];\
    \ then\n        echo \"B\"\n    elif [ \"$gpa\" -gt 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ \"$gpa\" -gt 2.0 ]; then\n        echo \"C+\"\n    elif [\
    \ \"$gpa\" -gt 1.7 ]; then\n        echo \"C\"\n    elif [ \"$gpa\" -gt 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ \"$gpa\" -gt 1.0 ]; then\n        echo\
    \ \"D+\"\n    elif [ \"$gpa\" -gt 0.7 ]; then\n        echo \"D\"\n    elif [\
    \ \"$gpa\" -gt 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n\
    \    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n\
    \    # You can use the following variables:\n    # $1: the first argument\n  \
    \  # $2: the second argument\n    # ...\n    # $n: the nth argument\n    # $#:\
    \ the number of arguments\n    # $@: all arguments\n    # $*: all arguments\n\
    \    # $0: the name of the script\n    # $?: the exit status of the last command\n\
    \    # $$: the process ID of the current shell\n    # $!: the process ID of the\
    \ last background command\n    # $PS1: the value of the prompt\n    # $RANDOM:\
    \ a random number between 0 and 32767\n    # $SECONDS: the number of seconds since\
    \ the shell was started\n    # $LINENO: the current line number in the script\n\
    \    # $IFS: the Internal Field Separator that is used for word splitting after\
    \ expansion and to split lines into words with the read builtin command\n    #\
    \ $UID: the numeric, real user ID of the current user\n    # $EUID: the numeric,\
    \ effective user ID of the current user\n    # $HOSTNAME: the name of the current\
    \ host\n    # $PWD: the current working directory as set by the cd command\n \
    \   # $OLDPWD: the previous working directory as set by the cd command\n    #\
    \ $SHELL: the pathname of the shell\n    # $HOME: the home directory of the current\
    \ user\n    # $PATH: the search path for commands\n    # $MAIL: the name of the\
    \ user's mail file\n    # $MAILPATH: a colon-separated list of file names to check\
    \ for mail\n    # $MAILCHECK: how often (in seconds) to check for mail in the\
    \ files specified by $MAILPATH\n    # $LOGNAME: the login name of the user\n \
    \   # $HISTSIZE: the number of commands to remember in the command history\n \
    \   # $HISTFILE: the name of the file in which command history is saved\n    #\
    \ $HISTCONTROL: determines whether the history list is affected by duplicate entries\
    \ or commands starting with a space\n    # $HISTIGNORE: a colon-separated list\
    \ of patterns used to decide which command lines should be saved on the history\
    \ list\n    # $HOSTTYPE", "    local gpa=$1\n    if (( $(echo \"$gpa >= 4.0\"\
    \ | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"$gpa >= 3.7\" |\
    \ bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$gpa >= 3.3\" | bc\
    \ -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$gpa >= 3.0\" | bc -l)\
    \ )); then\n        echo \"B+\"\n    elif (( $(echo \"$gpa >= 2.7\" | bc -l) ));\
    \ then\n        echo \"B\"\n    elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n\
    \        echo \"B-\"\n    elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n \
    \       echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n  \
    \      echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n    \
    \    echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n     \
    \   echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n      \
    \  echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -gt 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -gt 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -gt 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -gt 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    local grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n\
    \        echo \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n\
    \        echo \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n\
    \        echo \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n\
    \        echo \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n\
    \        echo \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n\
    \        echo \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n\
    \        echo \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n\
    \        echo \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n\
    \        echo \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n\
    \        echo \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n\
    \        echo \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your\
    \ code here\n    # You can use the following variables:\n    # $1: The GPA of\
    \ the student\n    # $2: The letter grade of the student\n    # $3: The number\
    \ of students\n    # $4: The list of GPAs\n    # $5: The list of letter grades\n\
    \    # $6: The list of numerical letter grades\n    # $7: The list of numerical\
    \ letter grades with the letter grades\n    # $8: The list of numerical letter\
    \ grades with the letter grades and the number of students\n    # $9: The list\
    \ of numerical letter grades with the letter grades, the number of students, and\
    \ the GPAs\n    # $10: The list of numerical letter grades with the letter grades,\
    \ the number of students, the GPAs, and the letter grades\n    # $11: The list\
    \ of numerical letter grades with the letter grades, the number of students, the\
    \ GPAs, the letter grades, and the number of students\n    # $12: The list of\
    \ numerical letter grades with the letter grades, the number of students, the\
    \ GPAs, the letter grades, the number of students, and the GPAs\n    # $13: The\
    \ list of numerical letter grades with the letter grades, the number of students,\
    \ the GPAs, the letter grades, the number of students, the GPAs, and the letter\
    \ grades\n    # $14: The list of numerical letter grades with the letter grades,\
    \ the number of students, the GPAs, the letter grades, the number of students,\
    \ the GPAs, the letter grades, and the number of students\n    # $15: The list\
    \ of numerical letter grades with the letter grades, the number of students, the\
    \ GPAs, the letter grades, the number of students, the GPAs, the letter grades,\
    \ the number of students, and the GPAs\n    # $16: The list of numerical letter\
    \ grades with the letter grades, the number of students, the GPAs, the letter\
    \ grades, the number of students, the GPAs, the letter grades, the number of students,\
    \ the GPAs, and the letter grades\n    # $17: The list of numerical letter grades\
    \ with the letter grades, the number of students, the GPAs, the letter grades,\
    \ the number of students, the GPAs, the letter grades, the number of students,\
    \ the GPAs, the letter grades, and the number of students\n", "    # Write your\
    \ code here\n    # You can use the following variables:\n    # $1: The first argument\
    \ passed to the function\n    # $2: The second argument passed to the function\n\
    \    # $3: The third argument passed to the function\n    # $4: The fourth argument\
    \ passed to the function\n    # $5: The fifth argument passed to the function\n\
    \    # $#: The number of arguments passed to the function\n    # $@: All arguments\
    \ passed to the function\n    # $*: All arguments passed to the function\n   \
    \ # $?: The exit status of the last command\n    # $$: The process ID of the current\
    \ shell\n    # $!: The process ID of the last background command\n    # $0: The\
    \ name of the shell or shell script\n    # $_: The last argument of the previous\
    \ command\n    # $IFS: The Internal Field Separator that is used for word splitting\
    \ after\n    # expansion and to split lines into words with the read builtin command\n\
    \    # $PS1: The value of the primary prompt string\n    # $PS2: The value of\
    \ the secondary prompt string\n    # $PS3: The value of the select prompt string\n\
    \    # $PS4: The value of the debug prompt string\n    # $SECONDS: The number\
    \ of seconds since the shell was started\n    # $RANDOM: A random integer between\
    \ 0 and 32767\n    # $LINENO: The line number in the script of the current command\n\
    \    # $OLDPWD: The previous working directory\n    # $OPTARG: The value of the\
    \ last option argument processed by the getopts\n    # builtin command\n    #\
    \ $OPTIND: The index of the last option argument processed by the getopts\n  \
    \  # builtin command\n    # $OSTYPE: A string describing the operating system\n\
    \    # $MACHTYPE: A string that fully describes the system type on which Bash\
    \ is\n    # running\n    # $HOSTNAME: The name of the current host\n    # $HOSTTYPE:\
    \ A string describing the machine Bash is running on\n    # $PIPESTATUS: An array\
    \ variable containing a list of exit status values\n    # from the processes in\
    \ the most-recently-executed foreground pipeline\n    # $UID: The numeric, real\
    \ user ID", "    if [ \"$1\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif [\
    \ \"$1\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ \"$1\" -ge 3.0 ]; then\n        echo \"B+\"\n\
    \    elif [ \"$1\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge\
    \ 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$1\" -ge 2.0 ]; then\n      \
    \  echo \"C+\"\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ \"$1\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ];\
    \ then\n        echo \"D+\"\n    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    # Write your code here\n    # Use the following command\
    \ to output the grade:\n    # echo \"\\\"$grade\\\"\"\n    # Note that you need\
    \ to escape the double quotes\n    # and the dollar sign.\n    # For example,\
    \ if you want to output \"A+\", you need to\n    # write:\n    # echo \"\\\"A+\\\
    \"\"\n    # If you want to output $5, you need to write:\n    # echo \"\\\"\\\
    $5\\\"\"\n    # If you want to output \"A+$5\", you need to write:\n    # echo\
    \ \"\\\"A+\\$5\\\"\"\n    # Hint: You can use the following command to compare\n\
    \    # floating point numbers:\n    # if (( $(echo \"$a > $b\" | bc -l) )); then\n\
    \    #     echo \"$a is greater than $b\"\n    # fi\n    # Hint: You can use the\
    \ following command to compare\n    # floating point numbers:\n    # if (( $(echo\
    \ \"$a < $b\" | bc -l) )); then\n    #     echo \"$a is less than $b\"\n    #\
    \ fi\n    # Hint: You can use the following command to compare\n    # floating\
    \ point numbers:\n    # if (( $(echo \"$a == $b\" | bc -l) )); then\n    #   \
    \  echo \"$a is equal to $b\"\n    # fi\n    # Hint: You can use the following\
    \ command to compare\n    # floating point numbers:\n    # if (( $(echo \"$a >=\
    \ $b\" | bc -l) )); then\n    #     echo \"$a is greater than or equal to $b\"\
    \n    # fi\n    # Hint: You can use the following command to compare\n    # floating\
    \ point numbers:\n    # if (( $(echo \"$a <= $b\" | bc -l) )); then\n    #   \
    \  echo \"$a is less than or equal to $b\"\n    # fi\n    # Hint: You can use\
    \ the following command to compare\n    # floating point numbers:\n    # if ((\
    \ $(echo \"$a != $b\" | bc -l) )); then\n    #     echo \"$a is not equal to $b\"\
    \n    # fi\n    # Hint: You can use the following command to compare\n   ", " \
    \   local grade=$1\n    if (( $(echo \"$grade > 4.0\" | bc -l) )); then\n    \
    \    echo \"A+\"\n    elif (( $(echo \"$grade > 3.7\" | bc -l) )); then\n    \
    \    echo \"A\"\n    elif (( $(echo \"$grade > 3.3\" | bc -l) )); then\n     \
    \   echo \"A-\"\n    elif (( $(echo \"$grade > 3.0\" | bc -l) )); then\n     \
    \   echo \"B+\"\n    elif (( $(echo \"$grade > 2.7\" | bc -l) )); then\n     \
    \   echo \"B\"\n    elif (( $(echo \"$grade > 2.3\" | bc -l) )); then\n      \
    \  echo \"B-\"\n    elif (( $(echo \"$grade > 2.0\" | bc -l) )); then\n      \
    \  echo \"C+\"\n    elif (( $(echo \"$grade > 1.7\" | bc -l) )); then\n      \
    \  echo \"C\"\n    elif (( $(echo \"$grade > 1.3\" | bc -l) )); then\n       \
    \ echo \"C-\"\n    elif (( $(echo \"$grade > 1.0\" | bc -l) )); then\n       \
    \ echo \"D+\"\n    elif (( $(echo \"$grade > 0.7\" | bc -l) )); then\n       \
    \ echo \"D\"\n    elif (( $(echo \"$grade > 0.0\" | bc -l) )); then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n\
    \    # Use the following variables:\n    # $1 is the first argument\n    # $2\
    \ is the second argument\n    # ...\n    # $n is the nth argument\n    # $# is\
    \ the number of arguments\n    # $@ is an array of all the arguments\n    # $*\
    \ is a string of all the arguments\n    # $? is the exit status of the last command\n\
    \    # $$ is the process ID of the current shell\n    # $! is the process ID of\
    \ the last background command\n    # $0 is the name of the script\n    # $_ is\
    \ the last argument of the previous command\n    # $IFS is the Internal Field\
    \ Separator that is used for word splitting after expansion and to split lines\
    \ into words with the read builtin command\n    # $UID is the numeric, real user\
    \ ID of the current user\n    # $EUID is the numeric, effective user ID of the\
    \ current user\n    # $GROUPS is an array variable containing the list of groups\
    \ of which the current user is a member\n    # $PS4 is the value of the prompt\
    \ printed before the command line is echoed when the -x option is set\n    # $SECONDS\
    \ is an integer number of seconds the shell has been running\n    # $LINENO is\
    \ the line number in the script or shell function currently executing\n    # $RANDOM\
    \ returns a different random integer at each invocation\n    # $DIRSTACK is an\
    \ array variable containing the current contents of the directory stack\n    #\
    \ $BASH_SUBSHELL is the subshell level (a positive integer)\n    # $BASH_SOURCE\
    \ is an array variable whose members are the source filenames where the corresponding\
    \ shell function names in the FUNCNAME array variable are defined\n    # $BASH_LINENO\
    \ is an array variable whose members are the line numbers in source filenames\
    \ where the corresponding shell function names in the FUNCNAME array variable\
    \ are defined\n    # $BASH_REMATCH is an array variable whose members are assigned\
    \ by the =~ binary operator to the [[ conditional command\n    # $BASH_VERSINFO\
    \ is a readonly array variable whose members hold version information for this\
    \ instance of Bash\n    # $BASH_VERSION is a readonly variable whose value is\
    \ a string describing the version of this instance of Bash\n    # $COLUMNS", " \
    \   local grade=$1\n    if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n\
    \    elif [ \"$grade\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\"\
    \ -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n\
    \        echo \"B+\"\n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\
    \n    elif [ \"$grade\" -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\"\
    \ -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n\
    \        echo \"C\"\n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\
    \n    elif [ \"$grade\" -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\"\
    \ -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your\
    \ code here\n    # You can use the following command to convert a string to a\
    \ number:\n    # number=$(echo $string | bc -l)\n    # You can use the following\
    \ command to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.2f\" $number)\n\
    \    # You can use the following command to convert a number to a string:\n  \
    \  # string=$(printf \"%.2f\" $number)\n    # You can use the following command\
    \ to convert a number to a string:\n    # string=$(printf \"%.", "    local grade=$1\n\
    \    if [ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n\
    \    elif [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n\
    \    elif [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n\
    \    elif [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n\
    \    elif [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n\
    \    elif [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n\
    \    elif [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n\
    \    elif [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi", "    local grade=$1\n    if [ \"$grade\"\
    \ -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"$grade\" -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ \"$grade\" -ge 3.3 ]; then\n        echo \"A-\"\
    \n    elif [ \"$grade\" -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ \"$grade\"\
    \ -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$grade\" -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ \"$grade\" -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ \"$grade\" -ge 1.7 ]; then\n        echo \"C\"\n    elif [ \"$grade\"\
    \ -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$grade\" -ge 1.0 ]; then\n\
    \        echo \"D+\"\n    elif [ \"$grade\" -ge 0.7 ]; then\n        echo \"D\"\
    \n    elif [ \"$grade\" -ge 0.0 ]; then\n        echo \"D-\"\n    else\n     \
    \   echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n \
    \   elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your\
    \ code here\n    # You can use the following variables:\n    # $1: the first argument\n\
    \    # $2: the second argument\n    # ...\n    # $n: the nth argument\n    # $#:\
    \ the number of arguments\n    # $@: all the arguments\n    # $*: all the arguments\n\
    \    # $0: the name of the script\n    # $?: the exit status of the last command\n\
    \    # $$: the process ID of the current shell\n    # $!: the process ID of the\
    \ last background command\n    # $_: the last argument of the previous command\n\
    \    # $IFS: the field separator\n    # $-: the current options set for the shell\n\
    \    # $PS1: the value of the primary prompt string\n    # $PS2: the value of\
    \ the secondary prompt string\n    # $RANDOM: a random number between 0 and 32767\n\
    \    # $SECONDS: the number of seconds since the shell was started\n    # $LINENO:\
    \ the current line number in the script\n    # $OLDPWD: the previous working directory\n\
    \    # $PWD: the current working directory\n    # $REPLY: the default variable\
    \ for the read command\n    # $UID: the user ID of the current user\n    # $EUID:\
    \ the effective user ID of the current user\n    # $GROUPS: an array of groups\
    \ the current user is in\n    # $TMOUT: the timeout for the read command\n   \
    \ # $BASH: the bash version\n    # $BASH_VERSION: the bash version\n    # $BASH_VERSINFO:\
    \ an array of version information\n    # $BASH_SUBSHELL: the current subshell\
    \ level\n    # $BASH_SOURCE: an array containing source filenames\n    # $BASH_LINENO:\
    \ an array containing the line numbers in a script\n    # $BASH_ARGC: an array\
    \ containing the number of parameters in each frame\n    # $BASH_ARGV: an array\
    \ containing the parameters in each frame\n    # $BASH_COMMAND: the command currently\
    \ being executed\n    # $BASH_EXECUTION_STRING: the string argument passed to\
    \ the -c option\n    # $BASH_REMATCH: an array containing", "    if [ $1 -ge 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"\
    A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0\
    \ ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0\
    \ ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0\
    \ ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo\
    \ \"E\"\n    fi", "    # This function takes a numerical grade and returns the\
    \ letter grade\n    # associated with it.\n    # Example:\n    # >>> $(numerical_letter_grade\
    \ \"4.0\")\n    # \"A+\"\n    if [ \"$1\" -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ \"$1\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$1\" -ge\
    \ 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$1\" -ge 3.0 ]; then\n      \
    \  echo \"B+\"\n    elif [ \"$1\" -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ \"$1\" -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$1\" -ge 2.0 ];\
    \ then\n        echo \"C+\"\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ \"$1\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$1\"\
    \ -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$1\" -ge 0.7 ]; then\n  \
    \      echo \"D\"\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo \"D-\"\n  \
    \  else\n        echo \"E\"\n    fi", "    local gpa=$1\n    if (( $(echo \"$gpa\
    \ >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"$gpa >=\
    \ 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$gpa >= 3.3\"\
    \ | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$gpa >= 3.0\" |\
    \ bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$gpa >= 2.7\" | bc\
    \ -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$gpa >= 2.3\" | bc -l)\
    \ )); then\n        echo \"B-\"\n    elif (( $(echo \"$gpa >= 2.0\" | bc -l) ));\
    \ then\n        echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n\
    \        echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n  \
    \      echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n   \
    \     echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n    \
    \    echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n      \
    \  echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code\
    \ here\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n   \
    \ # You can use the following variables:\n    # $1 - the first argument\n    #\
    \ $2 - the second argument\n    # $3 - the third argument\n    # $4 - the fourth\
    \ argument\n    # $5 - the fifth argument\n    # $# - the number of arguments\n\
    \    # $@ - all arguments\n    # $* - all arguments\n    # $? - the exit status\
    \ of the last command\n    # $$ - the process ID of the current shell\n    # $!\
    \ - the process ID of the last background command\n    # $0 - the name of the\
    \ shell or shell script\n    # $_ - the underscore variable\n    # $IFS - the\
    \ Internal Field Separator that is used for word splitting after expansion and\
    \ to split lines into words with the read builtin command\n    # $UID - the numeric,\
    \ real user ID of the current user\n    # $EUID - the numeric, effective user\
    \ ID of the current user\n    # $GROUPS - an array variable containing the list\
    \ of groups of which the current user is a member\n    # $PS4 - the value of this\
    \ variable is expanded and the expanded value is the prompt printed before the\
    \ command line is echoed when the -x option is set\n    # $SECONDS - an integer\
    \ number of seconds since the shell was started\n    # $RANDOM - each time this\
    \ parameter is referenced, a random integer between 0 and 32767 is generated\n\
    \    # $LINENO - the line number in the script or shell function currently executing\n\
    \    # $OLDPWD - the previous working directory as set by the cd command\n   \
    \ # $DIRSTACK - an array variable containing the current contents of the directory\
    \ stack\n    # $MACHTYPE - a string that fully describes the system type on which\
    \ Bash is executing, in the standard GNU cpu-company-system format\n    # $HOSTNAME\
    \ - the name of the current host\n    # $HOSTTYPE - a string that describes the\
    \ machine Bash is running on\n    # $OSTYPE - a string describing the operating\
    \ system Bash is running on\n    # $BASH_VERSION - the version number of the current\
    \ instance of Bash\n    # $BASH_VERSINFO - a readonly array variable whose members\
    \ hold version information for this instance of Bash\n    # $FUNCNAME - the name\
    \ of any", "    # TODO: Write your code here\n    # HINT: You can use the following\
    \ if statement to check the grade\n    # if [ $1 -gt 4.0 ]; then\n    #     echo\
    \ \"A+\"\n    # fi\n    if [ $1 -gt 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n  \
    \      echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n\
    \    if [ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n\
    \    elif [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n\
    \    elif [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n\
    \    elif [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n\
    \    elif [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n\
    \    elif [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n\
    \    elif [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n\
    \    elif [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n       \
    \ echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1\
    \ -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n      \
    \  echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [\
    \ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n   \
    \     echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n   \
    \ # You can use the following code to convert a string to a number:\n    # number=$(echo\
    \ \"$1\" | bc -l)\n    # You can use the following code to convert a number to\
    \ a string:\n    # string=$(printf \"%.2f\" $1)\n    # You can use the following\
    \ code to convert a string to an array:\n    # array=($(echo $1 | tr \" \" \"\\\
    n\"))\n    # You can use the following code to convert an array to a string:\n\
    \    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\")\n    # You can use the\
    \ following code to convert a string to an array:\n    # array=($(echo $1 | tr\
    \ \" \" \"\\n\"))\n    # You can use the following code to convert an array to\
    \ a string:\n    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\")\n    # You\
    \ can use the following code to convert a string to an array:\n    # array=($(echo\
    \ $1 | tr \" \" \"\\n\"))\n    # You can use the following code to convert an\
    \ array to a string:\n    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\")\n\
    \    # You can use the following code to convert a string to an array:\n    #\
    \ array=($(echo $1 | tr \" \" \"\\n\"))\n    # You can use the following code\
    \ to convert an array to a string:\n    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\"\
    )\n    # You can use the following code to convert a string to an array:\n   \
    \ # array=($(echo $1 | tr \" \" \"\\n\"))\n    # You can use the following code\
    \ to convert an array to a string:\n    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\"\
    )\n    # You can use the following code to convert a string to an array:\n   \
    \ # array=($(echo $1 | tr \" \" \"\\n\"))\n    # You can use the following code\
    \ to convert an array to a string:\n    # string=$(printf \"\\\"%s\\\" \" \"${array[@]}\"\
    )\n    # You can use the following code to convert a string to an", "    local\
    \ grade=$1\n    if [ \"$grade\" -ge 4 ]; then\n        echo '\"A+\"'\n    elif\
    \ [ \"$grade\" -ge 3.7 ]; then\n        echo '\"A\"'\n    elif [ \"$grade\" -ge\
    \ 3.3 ]; then\n        echo '\"A-\"'\n    elif [ \"$grade\" -ge 3 ]; then\n  \
    \      echo '\"B+\"'\n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo '\"\
    B\"'\n    elif [ \"$grade\" -ge 2.3 ]; then\n        echo '\"B-\"'\n    elif [\
    \ \"$grade\" -ge 2 ]; then\n        echo '\"C+\"'\n    elif [ \"$grade\" -ge 1.7\
    \ ]; then\n        echo '\"C\"'\n    elif [ \"$grade\" -ge 1.3 ]; then\n     \
    \   echo '\"C-\"'\n    elif [ \"$grade\" -ge 1 ]; then\n        echo '\"D+\"'\n\
    \    elif [ \"$grade\" -ge 0.7 ]; then\n        echo '\"D\"'\n    elif [ \"$grade\"\
    \ -ge 0 ]; then\n        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi",
  "    local gpa=$1\n    if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n        echo\
    \ \"A+\"\n    elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n        echo \"\
    A\"\n    elif (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n        echo \"A-\"\
    \n    elif (( $(echo \"$gpa >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n\
    \    elif (( $(echo \"$gpa >= 2.7\" | bc -l) )); then\n        echo \"B\"\n  \
    \  elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n   \
    \ elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n    elif\
    \ (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n        echo \"C\"\n    elif ((\
    \ $(echo \"$gpa >= 1.3\" | bc -l) )); then\n        echo \"C-\"\n    elif (( $(echo\
    \ \"$gpa >= 1.0\" | bc -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"\
    $gpa >= 0.7\" | bc -l) )); then\n        echo \"D\"\n    elif (( $(echo \"$gpa\
    \ >= 0.0\" | bc -l) )); then\n        echo \"D-\"\n    else\n        echo \"E\"\
    \n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3 ]; then\n   \
    \     echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2 ]; then\n   \
    \     echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1 ]; then\n   \
    \     echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi",
  "    if [ $1 -eq 4 ]; then\n        echo \"A+\"\n    elif [ $1 -gt 3 ] && [ $1 -lt\
    \ 4 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3 ] && [ $1 -lt 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -gt 2 ] && [ $1 -lt 3 ]; then\n        echo\
    \ \"B+\"\n    elif [ $1 -gt 2 ] && [ $1 -lt 2.7 ]; then\n        echo \"B\"\n\
    \    elif [ $1 -gt 2 ] && [ $1 -lt 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -gt 1 ] && [ $1 -lt 2 ]; then\n        echo \"C+\"\n    elif [ $1 -gt 1\
    \ ] && [ $1 -lt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1 ] && [ $1\
    \ -lt 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 0 ] && [ $1 -lt 1 ];\
    \ then\n        echo \"D+\"\n    elif [ $1 -gt 0 ] && [ $1 -lt 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -gt 0 ] && [ $1 -lt 0.0 ]; then\n        echo\
    \ \"D-\"\n    elif [ $1 -eq 0 ]; then\n        echo \"E\"\n    fi", "    if [\
    \ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n   \
    \     echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    # TODO: Write your code here\n    # HINT: You\
    \ can use the following if-else statement:\n    # if [ condition ]; then\n   \
    \ #     echo \"A+\"\n    # elif [ condition ]; then\n    #     echo \"A\"\n  \
    \  # else\n    #     echo \"D-\"\n    # fi\n    if [ $1 -ge 4.0 ]; then\n    \
    \    echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    # Write your code here\n    # You can use the following variables:\n\
    \    # $1: the first argument\n    # $2: the second argument\n    # $3: the third\
    \ argument\n    # $4: the fourth argument\n    # $5: the fifth argument\n    #\
    \ $#: the number of arguments\n    # $@: all arguments\n    # $*: all arguments\n\
    \    # $?: the exit code of the last command\n    # $$: the process ID of the\
    \ current shell\n    # $!: the process ID of the last command\n    # $0: the name\
    \ of the shell or shell script\n    # $_: the last argument of the previous command\n\
    \    # $IFS: the Internal Field Separator that is used for word splitting after\n\
    \    # expansion and to split lines into words with the read builtin command\n\
    \    # $PS1: the value of the primary prompt string, which is displayed before\n\
    \    # the user enters a command\n    # $PS2: the value of the secondary prompt\
    \ string, which is displayed when\n    # a command needs more input\n    # $PS3:\
    \ the value of the select prompt string, which is used for the select\n    # builtin\n\
    \    # $PS4: the value of the debug prompt string, which is printed before each\n\
    \    # command bash displays during an execution trace\n    # $SECONDS: the number\
    \ of seconds since the shell was started\n    # $RANDOM: a random integer between\
    \ 0 and 32767\n    # $LINENO: the current line number in the Bash script\n   \
    \ # $OLDPWD: the previous working directory\n    # $PWD: the current working directory\n\
    \    # $REPLY: the default variable for the read builtin command\n    # $MACHTYPE:\
    \ a string that fully describes the system type on which Bash is\n    # running\n\
    \    # $HOSTNAME: the name of the current host\n    # $DIRSTACK: an array variable\
    \ containing the current contents of the\n    # directory stack\n    # $EUID:\
    \ the numeric effective user ID of the current user\n    # $UID: the numeric real\
    \ user ID of the current user\n    # $GROUPS: an array variable containing the\
    \ list of groups of which the\n    # current user is a member\n    # $BASH_VERSION:",
  "    # Write your code here\n    # You can use the following command to convert\
    \ a string to a floating point number\n    # local -r number=$(echo \"$1\" | bc\
    \ -l)\n    # You can use the following command to convert a floating point number\
    \ to a string\n    # local -r string=$(printf \"%.1f\" \"$1\")\n    # You can\
    \ use the following command to convert a floating point number to an integer\n\
    \    # local -r integer=$(printf \"%.0f\" \"$1\")\n    # You can use the following\
    \ command to compare two floating point numbers\n    # if (( $(echo \"$1 > $2\"\
    \ | bc -l) )); then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\
    \n    # fi\n    # You can use the following command to compare two integers\n\
    \    # if (( $1 > $2 )); then\n    #     echo \"true\"\n    # else\n    #    \
    \ echo \"false\"\n    # fi\n    # You can use the following command to compare\
    \ two strings\n    # if [[ \"$1\" > \"$2\" ]]; then\n    #     echo \"true\"\n\
    \    # else\n    #     echo \"false\"\n    # fi\n    # You can use the following\
    \ command to print a string\n    # echo \"\\\"$1\\\"\"\n    # You can use the\
    \ following command to print a list\n    # echo \"[$(printf \"%s, \" \"${@:2}\"\
    )]\"\n    # You can use the following command to print a list without the last\
    \ comma\n    # echo \"[$(printf \"%s\" \"${@:2}\")]\"\n    # You can use the following\
    \ command to print a list without the last comma and the last square bracket\n\
    \    # echo \"$(printf \"%s\" \"${@:2}\")\"\n    # You can use the following command\
    \ to print a list without the last comma and the last square bracket\n    # echo\
    \ \"$(printf \"%s\" \"${@:2}\")\"\n    # You can use the following command to\
    \ print a list without the last comma and the last square bracket\n    # echo\
    \ \"$(printf \"%s\" \"${@:2}\")\"\n    # You can use the following command to\
    \ print a list without the last comma and the last square bracket\n    #", " \
    \   # Write your code here\n    # You can use the following command to convert\
    \ a string to a number\n    # number=$(echo \"$string\" | bc -l)\n    # You can\
    \ use the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # You can use the following command to print an array\n\
    \    # echo ${array[@]}\n    # You can use the following command to print an array\
    \ with quotes\n    # echo ${array[@]/#/\\\"}\n    # You can use the following\
    \ command to print an array with quotes and commas\n    # echo ${array[@]/#/\\\
    \"},\n    # You can use the following command to print an array with quotes, commas,\
    \ and brackets\n    # echo [${array[@]/#/\\\"},]", "    # Write your code here\n\
    \    # Use the following command to output the result\n    # echo \"[\\\"$(echo\
    \ -n '\"')$(echo -n $letter_grade)$(echo -n '\"')\\\"]\"\n    # Example:\n   \
    \ # echo \"[\\\"$(echo -n '\"')$(echo -n A+)$(echo -n '\"')\\\"]\"\n    # Output:\n\
    \    # [\"A+\"]\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [\
    \ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n    \
    \    echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code\
    \ here\n    # You can use the following command to convert a string to a number:\n\
    \    # $((string))\n    # Example:\n    # >>> $((4.0))\n    # 4\n    # >>> $((3.7))\n\
    \    # 3\n    # >>> $((3.3))\n    # 3\n    # >>> $((3.0))\n    # 3\n    # >>>\
    \ $((2.7))\n    # 2\n    # >>> $((2.3))\n    # 2\n    # >>> $((2.0))\n    # 2\n\
    \    # >>> $((1.7))\n    # 1\n    # >>> $((1.3))\n    # 1\n    # >>> $((1.0))\n\
    \    # 1\n    # >>> $((0.7))\n    # 0\n    # >>> $((0.0))\n    # 0\n    # >>>\
    \ $((0.1))\n    # 0\n    # >>> $((0.2))\n    # 0\n    # >>> $((0.3))\n    # 0\n\
    \    # >>> $((0.4))\n    # 0\n    # >>> $((0.5))\n    # 0\n    # >>> $((0.6))\n\
    \    # 0\n    # >>> $((0.7))\n    # 0\n    # >>> $((0.8))\n    # 0\n    # >>>\
    \ $((0.9))\n    # 0\n    # >>> $((1.0))\n    # 1\n    # >>> $((1.1))\n    # 1\n\
    \    # >>> $((1.2))\n    # 1\n    # >>> $((1.3))\n    # 1\n    # >>> $((1.4))\n\
    \    # 1\n    # >>> $((1.5))\n    # 1\n    # >>> $((1.6))\n    # 1\n    # >>>\
    \ $((1.7))\n    # 1\n    # >>> $((1.8))\n    # 1\n    # >>> $((1.9))\n    # 1\n\
    \    # >>> $((2.0))\n    # 2\n    # >>> $((2.1))\n    # 2\n    # >>> $((2.2))\n\
    \    # 2", "    local gpa=$1\n    if [ $(echo \"$gpa > 4.0\" | bc) -eq 1 ]; then\n\
    \        echo \"A+\"\n    elif [ $(echo \"$gpa > 3.7\" | bc) -eq 1 ]; then\n \
    \       echo \"A\"\n    elif [ $(echo \"$gpa > 3.3\" | bc) -eq 1 ]; then\n   \
    \     echo \"A-\"\n    elif [ $(echo \"$gpa > 3.0\" | bc) -eq 1 ]; then\n    \
    \    echo \"B+\"\n    elif [ $(echo \"$gpa > 2.7\" | bc) -eq 1 ]; then\n     \
    \   echo \"B\"\n    elif [ $(echo \"$gpa > 2.3\" | bc) -eq 1 ]; then\n       \
    \ echo \"B-\"\n    elif [ $(echo \"$gpa > 2.0\" | bc) -eq 1 ]; then\n        echo\
    \ \"C+\"\n    elif [ $(echo \"$gpa > 1.7\" | bc) -eq 1 ]; then\n        echo \"\
    C\"\n    elif [ $(echo \"$gpa > 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\
    \n    elif [ $(echo \"$gpa > 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$gpa > 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n  \
    \  elif [ $(echo \"$gpa > 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n   \
    \ else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo\
    \ \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge\
    \ 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo\
    \ \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge\
    \ 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo\
    \ \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge\
    \ 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo\
    \ \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge\
    \ 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", " \
    \   # Write your code here\n    # You can use the following variables:\n    #\
    \ $1: the first argument\n    # $2: the second argument\n    # ...\n    # $n:\
    \ the nth argument\n    # $#: the number of arguments\n    # $@: all the arguments\n\
    \    # $*: all the arguments\n    # $0: the name of the script\n    # $?: the\
    \ exit status of the last command\n    # $$: the process ID of the current shell\n\
    \    # $!: the process ID of the last background command\n    # $_: the last argument\
    \ of the previous command\n    # $IFS: the field separator\n    # $-: the current\
    \ options set for the shell\n    # $PS1: the value of the prompt\n    # $PS2:\
    \ the value of the continuation prompt\n    # $RANDOM: a random number between\
    \ 0 and 32767\n    # $SECONDS: the number of seconds since the shell was started\n\
    \    # $LINENO: the current line number in the script\n    # $OLDPWD: the previous\
    \ working directory\n    # $PWD: the current working directory\n    # $REPLY:\
    \ the default variable for the read command\n    # $UID: the user ID of the user\
    \ running the script\n    # $EUID: the effective user ID of the user running the\
    \ script\n    # $GROUPS: an array of groups the user is in\n    # $BASH_VERSION:\
    \ the version of bash\n    # $BASH_VERSINFO: an array containing version information\n\
    \    # $BASH_SOURCE: an array containing source filenames\n    # $BASH_LINENO:\
    \ an array containing line numbers\n    # $BASH_COMMAND: the command currently\
    \ being executed\n    # $BASH_REMATCH: an array containing the results of the\
    \ last regex match\n    # $BASH_SUBSHELL: the current subshell level\n    # $BASH_EXECUTION_STRING:\
    \ the string argument passed to the -c option\n    # $BASH_ALIASES: an array of\
    \ aliases\n    # $BASH_ARGC: an array containing the number of parameters in each\
    \ frame\n    # $BASH_ARGV: an array containing the parameters in each frame\n\
    \    # $", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    # TODO: Implement this function\n    # Hint: You can use the following\
    \ code to check if a number is in a range\n    # if [ $1 -lt $2 ] && [ $1 -gt\
    \ $3 ]; then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\n\
    \    # fi\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -gt 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -gt 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -gt 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -gt 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    local grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n\
    \        echo \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n\
    \        echo \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n\
    \        echo \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n\
    \        echo \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n\
    \        echo \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n\
    \        echo \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n\
    \        echo \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n\
    \        echo \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n\
    \        echo \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n\
    \        echo \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n\
    \        echo \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # $1: numerical\
    \ grade\n    # return: letter grade\n    if [ $(echo \"$1 >= 4.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A+\"\n    elif [ $(echo \"$1 >= 3.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"$1 >= 3.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A-\"\n    elif [ $(echo \"$1 >= 3.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B+\"\n    elif [ $(echo \"$1 >= 2.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B\"\n    elif [ $(echo \"$1 >= 2.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B-\"\n    elif [ $(echo \"$1 >= 2.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C+\"\n    elif [ $(echo \"$1 >= 1.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C\"\n    elif [ $(echo \"$1 >= 1.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C-\"\n    elif [ $(echo \"$1 >= 1.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"$1 >= 0.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$1 >= 0.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "   \
    \ local grade=$1\n    if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n \
    \   elif [ \"$grade\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\"\
    \ -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n\
    \        echo \"B+\"\n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\
    \n    elif [ \"$grade\" -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\"\
    \ -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n\
    \        echo \"C\"\n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\
    \n    elif [ \"$grade\" -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\"\
    \ -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ \"$1\"\
    \ -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"$1\" -ge 3.7 ]; then\n  \
    \      echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n        echo \"A-\"\n  \
    \  elif [ \"$1\" -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ \"$1\" -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ \"$1\" -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"\
    $1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif [ \"$1\" -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ]; then\n        echo \"D+\"\n\
    \    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$1\" -ge\
    \ 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", " \
    \   local gpa=$1\n    if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n       \
    \ echo \"A+\"\n    elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n        echo\
    \ \"A\"\n    elif (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n        echo \"\
    A-\"\n    elif (( $(echo \"$gpa >= 3.0\" | bc -l) )); then\n        echo \"B+\"\
    \n    elif (( $(echo \"$gpa >= 2.7\" | bc -l) )); then\n        echo \"B\"\n \
    \   elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n  \
    \  elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n   \
    \ elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n        echo \"C\"\n    elif\
    \ (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n        echo \"C-\"\n    elif ((\
    \ $(echo \"$gpa >= 1.0\" | bc -l) )); then\n        echo \"D+\"\n    elif (( $(echo\
    \ \"$gpa >= 0.7\" | bc -l) )); then\n        echo \"D\"\n    elif (( $(echo \"\
    $gpa >= 0.0\" | bc -l) )); then\n        echo \"D-\"\n    else\n        echo \"\
    E\"\n    fi", "    if [ \"$1\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ \"$1\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ \"$1\" -ge 3.0 ]; then\n        echo \"B+\"\n\
    \    elif [ \"$1\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge\
    \ 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$1\" -ge 2.0 ]; then\n      \
    \  echo \"C+\"\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ \"$1\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ];\
    \ then\n        echo \"D+\"\n    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    # Write your code here\n    # You can use the following\
    \ code to convert a string to a number\n    # number=$(echo \"$1\" | bc -l)\n\
    \    # You can use the following code to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $1)\n    # You can use the following code to print a string\n    #\
    \ echo $string\n    # You can use the following code to print a list\n    # echo\
    \ \"[$string]\"\n    # You can use the following code to print a list of strings\n\
    \    # echo \"[\\\"$string\\\"]\"\n    # You can use the following code to print\
    \ a list of lists\n    # echo \"[[$string]]\"\n    # You can use the following\
    \ code to print a list of lists of strings\n    # echo \"[[\\\"$string\\\"]]\"\
    \n    # You can use the following code to print a list of lists of lists of strings\n\
    \    # echo \"[[[\\\"$string\\\"]]]\"\n    # You can use the following code to\
    \ print a list of lists of lists of lists of strings\n    # echo \"[[[[\\\"$string\\\
    \"]]]]\"\n    # You can use the following code to print a list of lists of lists\
    \ of lists of lists of strings\n    # echo \"[[[[[\\\"$string\\\"]]]]]\"\n   \
    \ # You can use the following code to print a list of lists of lists of lists\
    \ of lists of lists of strings\n    # echo \"[[[[[[\\\"$string\\\"]]]]]]\"\n \
    \   # You can use the following code to print a list of lists of lists of lists\
    \ of lists of lists of lists of strings\n    # echo \"[[[[[[[\\\"$string\\\"]]]]]]]\"\
    \n    # You can use the following code to print a list of lists of lists of lists\
    \ of lists of lists of lists of lists of strings\n    # echo \"[[[[[[[[\\\"$string\\\
    \"]]]]]]]]\"\n    # You can use the following code to print a list of lists of\
    \ lists of lists of lists of lists of lists of lists of lists of strings\n   \
    \ # echo \"[[[[[[[[[\\\"$string\\\"]]]]]]]]]\"\n    # You can use the following\
    \ code to print a list of lists of lists of lists of lists of lists of lists of\
    \ lists of lists of lists of strings\n    # echo \"[[[[[[[", "    local grade=$1\n\
    \    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n \
    \   elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n        echo \"A\"\n \
    \   elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n\
    \    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n\
    \    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n        echo \"B\"\n\
    \    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n\
    \    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n\
    \    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n        echo \"C\"\n\
    \    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n        echo \"C-\"\n\
    \    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n        echo \"D+\"\n\
    \    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n        echo \"D\"\n\
    \    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n       \
    \ echo \"A+\"\n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1\
    \ -gt 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n      \
    \  echo \"B+\"\n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [\
    \ $1 -gt 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n   \
    \     echo \"C+\"\n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -gt 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -gt 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    local grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n\
    \        echo \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n\
    \        echo \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n\
    \        echo \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n\
    \        echo \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n\
    \        echo \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n\
    \        echo \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n\
    \        echo \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n\
    \        echo \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n\
    \        echo \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n\
    \        echo \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n\
    \        echo \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge\
    \ 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge\
    \ 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    local gpa=$1\n    if [ $gpa -ge 4.0 ]; then\n   \
    \     echo \"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $gpa -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $gpa -ge 3.0 ]; then\n\
    \        echo \"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        echo \"B\"\n  \
    \  elif [ $gpa -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $gpa -ge 2.0 ];\
    \ then\n        echo \"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $gpa -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $gpa -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $gpa -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $gpa -ge 0.0 ]; then\n        echo \"D-\"\n    else\n    \
    \    echo \"E\"\n    fi", "    # Write your code here\n    # Hint: Use the following\
    \ command to convert a string to a float\n    # float_number=$(echo \"$1\" | awk\
    \ '{print $1 + 0}')\n    # Hint: Use the following command to convert a float\
    \ to a string\n    # string_number=$(printf \"%.1f\" $1)\n    # Hint: Use the\
    \ following command to convert a string to an integer\n    # integer_number=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ an integer to a string\n    # string_number=$(printf \"%d\" $1)\n    # Hint:\
    \ Use the following command to compare two floats\n    # if (( $(echo \"$1 > $2\"\
    \ | bc -l) )); then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\
    \n    # fi\n    # Hint: Use the following command to compare two integers\n  \
    \  # if (( $1 > $2 )); then\n    #     echo \"true\"\n    # else\n    #     echo\
    \ \"false\"\n    # fi\n    # Hint: Use the following command to compare two strings\n\
    \    # if [[ \"$1\" > \"$2\" ]]; then\n    #     echo \"true\"\n    # else\n \
    \   #     echo \"false\"\n    # fi\n    # Hint: Use the following command to compare\
    \ two floats\n    # if (( $(echo \"$1 > $2\" | bc -l) )); then\n    #     echo\
    \ \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # Hint: Use the\
    \ following command to compare two integers\n    # if (( $1 > $2 )); then\n  \
    \  #     echo \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n    #\
    \ Hint: Use the following command to compare two strings\n    # if [[ \"$1\" >\
    \ \"$2\" ]]; then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\
    \n    # fi\n    # Hint: Use the following command to compare two floats\n    #\
    \ if (( $(echo \"$1 > $2\" | bc -l) )); then\n", "    # Write your code here\n\
    \    # You can use the following variables:\n    # $1: the first argument\n  \
    \  # $2: the second argument\n    # $3: the third argument\n    # $4: the fourth\
    \ argument\n    # $5: the fifth argument\n    # $#: the number of arguments\n\
    \    # $@: all arguments\n    # $*: all arguments\n    # $0: the name of the script\n\
    \    # $?: the exit status of the last command\n    # $$: the process ID of the\
    \ current shell\n    # $!: the process ID of the last background command\n   \
    \ # $PS1: the primary prompt string\n    # $PS2: the secondary prompt string\n\
    \    # $IFS: the field separator\n    # $UID: the user ID of the current user\n\
    \    # $EUID: the effective user ID of the current user\n    # $RANDOM: a random\
    \ number between 0 and 32767\n    # $SECONDS: the number of seconds since the\
    \ shell was started\n    # $LINENO: the current line number in the script\n  \
    \  # $OLDPWD: the previous working directory\n    # $PWD: the current working\
    \ directory\n    # $MACHTYPE: the system type\n    # $HOSTNAME: the name of the\
    \ current host\n    # $HOSTTYPE: the machine type\n    # $OSTYPE: the operating\
    \ system\n    # $TMOUT: the default timeout for the read builtin\n    # $TMPDIR:\
    \ the directory used by the mktemp builtin\n    # $SHELLOPTS: a list of enabled\
    \ shell options\n    # $BASH: the file name of the current instance of Bash\n\
    \    # $BASH_VERSION: the version number of the current instance of Bash\n   \
    \ # $BASH_VERSINFO: a readonly array variable whose members hold version information\
    \ for this instance of Bash\n    # $BASH_SUBSHELL: the subshell level of the current\
    \ shell\n    # $BASH_SOURCE: an array variable whose members are the source filenames\
    \ where the corresponding shell function names in the FUNCNAME array variable\
    \ are defined\n    # $BASH_LINENO: an array variable whose members are the line\
    \ numbers in the source filenames where the corresponding shell function names\
    \ in the FUNC", "    local grade=$1\n    if [ $(echo \"$grade >= 4.0\" | bc) -eq\
    \ 1 ]; then\n        echo \"A+\"\n    elif [ $(echo \"$grade >= 3.7\" | bc) -eq\
    \ 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"$grade >= 3.3\" | bc) -eq\
    \ 1 ]; then\n        echo \"A-\"\n    elif [ $(echo \"$grade >= 3.0\" | bc) -eq\
    \ 1 ]; then\n        echo \"B+\"\n    elif [ $(echo \"$grade >= 2.7\" | bc) -eq\
    \ 1 ]; then\n        echo \"B\"\n    elif [ $(echo \"$grade >= 2.3\" | bc) -eq\
    \ 1 ]; then\n        echo \"B-\"\n    elif [ $(echo \"$grade >= 2.0\" | bc) -eq\
    \ 1 ]; then\n        echo \"C+\"\n    elif [ $(echo \"$grade >= 1.7\" | bc) -eq\
    \ 1 ]; then\n        echo \"C\"\n    elif [ $(echo \"$grade >= 1.3\" | bc) -eq\
    \ 1 ]; then\n        echo \"C-\"\n    elif [ $(echo \"$grade >= 1.0\" | bc) -eq\
    \ 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"$grade >= 0.7\" | bc) -eq\
    \ 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$grade >= 0.0\" | bc) -eq\
    \ 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "   \
    \ if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    # Write your code here\n    # Use the following\
    \ command to output the grade:\n    # echo \"\\\"$letter_grade\\\"\"\n    # For\
    \ example, if the grade is A, use the following command:\n    # echo \"\\\"A\\\
    \"\"\n    # You can use if statements, case statements or a combination of both.\n\
    \    # If you use if statements, there should be a maximum of 5 if statements.\n\
    \    # If you use case statements, there should be a maximum of 4 case statements.\n\
    \    # You can add additional functions if necessary.\n    # You can give all\
    \ the function names a prefix of your choice.\n    # You can write additional\
    \ code outside the function, but your function should\n    # be able to run without\
    \ it.\n    # You can use any number of pipes in your code.\n    # You can use\
    \ any number of pipes in your code.\n    # You can use any number of pipes in\
    \ your code.\n    # You can use any number of pipes in your code.\n    # You can\
    \ use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in your code.\n    # You\
    \ can use any number of pipes in your code.\n    # You can use any number of pipes\
    \ in your code.\n    # You can use any number of pipes in", "    local gpa=$1\n\
    \    if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n   \
    \ elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif\
    \ (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif ((\
    \ $(echo \"$gpa >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo\
    \ \"$gpa >= 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"\
    $gpa >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$gpa\
    \ >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$gpa >=\
    \ 1.7\" | bc -l) )); then\n        echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\"\
    \ | bc -l) )); then\n        echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" |\
    \ bc -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc\
    \ -l) )); then\n        echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l)\
    \ )); then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if\
    \ [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n \
    \       echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    local gpa=$1\n    if (( $(echo \"$gpa >= 4.0\"\
    \ | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"$gpa >= 3.7\" |\
    \ bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$gpa >= 3.3\" | bc\
    \ -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$gpa >= 3.0\" | bc -l)\
    \ )); then\n        echo \"B+\"\n    elif (( $(echo \"$gpa >= 2.7\" | bc -l) ));\
    \ then\n        echo \"B\"\n    elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n\
    \        echo \"B-\"\n    elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n \
    \       echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n  \
    \      echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n    \
    \    echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n     \
    \   echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n      \
    \  echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n\
    \    # You can use the following command to convert a string to a number\n   \
    \ # number=$(echo $string | bc -l)\n    # You can use the following command to\
    \ convert a number to a string\n    # string=$(printf \"%.2f\" $number)\n    #\
    \ You can use the following command to print the output\n    # echo \"[\\\"$string\\\
    \"]\"", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write your code here\n\
    \    # HINT: You can use the following if statement to check if a number is between\n\
    \    # two other numbers:\n    # if [[ $num -gt $lower_bound && $num -lt $upper_bound\
    \ ]]; then\n    #     echo \"Number is between $lower_bound and $upper_bound\"\
    \n    # fi\n    # You can also use the following if statement to check if a number\
    \ is greater\n    # than or equal to a number:\n    # if [[ $num -ge $lower_bound\
    \ ]]; then\n    #     echo \"Number is greater than or equal to $lower_bound\"\
    \n    # fi\n    # You can also use the following if statement to check if a number\
    \ is less than\n    # or equal to a number:\n    # if [[ $num -le $upper_bound\
    \ ]]; then\n    #     echo \"Number is less than or equal to $upper_bound\"\n\
    \    # fi\n    # You can also use the following if statement to check if a number\
    \ is equal to\n    # a number:\n    # if [[ $num -eq $bound ]]; then\n    #  \
    \   echo \"Number is equal to $bound\"\n    # fi\n    # You can also use the following\
    \ if statement to check if a number is not equal\n    # to a number:\n    # if\
    \ [[ $num -ne $bound ]]; then\n    #     echo \"Number is not equal to $bound\"\
    \n    # fi\n    # You can also use the following if statement to check if a number\
    \ is greater\n    # than a number:\n    # if [[ $num -gt $bound ]]; then\n   \
    \ #     echo \"Number is greater than $bound\"\n    # fi\n    # You can also use\
    \ the following if statement to check if a number is less than\n    # a number:\n\
    \    # if [[ $num -lt $bound ]]; then\n    #     echo \"Number is less than $bound\"\
    \n    # fi\n    # You can also use the following if statement to check if a number\
    \ is greater\n    # than or equal to a number:\n    # if [[ $num -ge $bound ]];\
    \ then\n    #     echo \"Number is greater than or equal to $bound\"\n    # fi\n\
    \    # You can also use", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n\
    \    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # YOUR CODE\
    \ HERE\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write your code here\n\
    \    # HINT: You can use the following if-else statement\n    # if [ condition\
    \ ]; then\n    #     # do something\n    # else\n    #     # do something else\n\
    \    # fi\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Your code here\n    #\
    \ Hint: Use the following command to convert a string to a float\n    # float_num=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a float to a string\n    # string_num=$(printf \"%.1f\" $1)\n    # Hint: Use\
    \ the following command to convert a string to an integer\n    # int_num=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ an integer to a string\n    # string_num=$(printf \"%d\" $1)\n    # Hint: Use\
    \ the following command to convert a string to a boolean\n    # boolean=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a boolean to a string\n    # string_boolean=$(printf \"%d\" $1)\n    # Hint:\
    \ Use the following command to convert a string to a character\n    # char=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a character to a string\n    # string_char=$(printf \"%d\" $1)\n    # Hint:\
    \ Use the following command to convert a string to a list\n    # list=$(echo \"\
    $1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a list to a string\n    # string_list=$(printf \"%d\" $1)\n    # Hint: Use the\
    \ following command to convert a string to a dictionary\n    # dict=$(echo \"\
    $1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a dictionary to a string\n    # string_dict=$(printf \"%d\" $1)\n    # Hint:\
    \ Use the following command to convert a string to a tuple\n    # tuple=$(echo\
    \ \"$1\" | awk '{print $1 + 0}')\n    # Hint: Use the following command to convert\
    \ a tuple to a string\n    # string_tuple=$(printf \"%d\" $1)\n", "    # Write\
    \ your code here\n    # Use the following command to output the result\n    #\
    \ echo \"[\\\"$letter_grade\\\"]\"\n    # where $letter_grade is the letter grade\
    \ you want to output\n    # For example, if you want to output \"A+\", use the\
    \ following command:\n    # echo \"[\\\"A+\\\"]\"\n    # Hint: You can use if-else\
    \ statements\n    # Hint: You can use awk to compare floating point numbers\n\
    \    # Hint: You can use awk to round floating point numbers\n    # Hint: You\
    \ can use awk to convert floating point numbers to integers\n    # Hint: You can\
    \ use awk to convert integers to strings\n    # Hint: You can use awk to concatenate\
    \ strings\n    # Hint: You can use awk to convert strings to arrays\n    # Hint:\
    \ You can use awk to convert arrays to strings\n    # Hint: You can use awk to\
    \ convert strings to floating point numbers\n    # Hint: You can use awk to convert\
    \ floating point numbers to strings\n    # Hint: You can use awk to convert strings\
    \ to integers\n    # Hint: You can use awk to convert integers to strings\n  \
    \  # Hint: You can use awk to convert strings to arrays\n    # Hint: You can use\
    \ awk to convert arrays to strings\n    # Hint: You can use awk to convert strings\
    \ to floating point numbers\n    # Hint: You can use awk to convert floating point\
    \ numbers to strings\n    # Hint: You can use awk to convert strings to integers\n\
    \    # Hint: You can use awk to convert integers to strings\n    # Hint: You can\
    \ use awk to convert strings to arrays\n    # Hint: You can use awk to convert\
    \ arrays to strings\n    # Hint: You can use awk to convert strings to floating\
    \ point numbers\n    # Hint: You can use awk to convert floating point numbers\
    \ to strings\n    # Hint: You can use awk to convert strings to integers\n   \
    \ # Hint: You can use awk to convert integers to strings\n    # Hint: You can\
    \ use awk to convert strings to arrays\n    # Hint: You can use awk to convert\
    \ arrays to strings\n    # Hint: You can use", "    if [ $1 -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    # Write your code here\n    # You can use the following variables:\n\
    \    # $1: the first argument\n    # $2: the second argument\n    # ...\n    #\
    \ $n: the nth argument\n    # $#: the number of arguments\n    # $@: all the arguments\n\
    \    # $*: all the arguments\n    # $0: the name of the script\n    # $?: the\
    \ exit status of the last command\n    # $$: the process ID of the current shell\n\
    \    # $!: the process ID of the last background command\n    # $_: the last argument\
    \ of the previous command\n    # $IFS: the field separator\n    # $-: the current\
    \ options set for the shell\n    # $PS1: the value of the prompt\n    # $PS2:\
    \ the value of the continuation prompt\n    # $RANDOM: a random number between\
    \ 0 and 32767\n    # $SECONDS: the number of seconds since the shell was started\n\
    \    # $LINENO: the current line number in the script\n    # $OLDPWD: the previous\
    \ working directory\n    # $PWD: the current working directory\n    # $REPLY:\
    \ the default variable for the read command\n    # $UID: the user ID of the user\
    \ running the script\n    # $EUID: the effective user ID of the user running the\
    \ script\n    # $GROUPS: the group ID of the user running the script\n    # $EGROUPS:\
    \ the effective group ID of the user running the script\n    # $BASH: the full\
    \ pathname used to execute the current instance of bash\n    # $BASH_VERSION:\
    \ the version number of the current instance of bash\n    # $BASH_VERSINFO: a\
    \ readonly array variable whose members hold version information for this instance\
    \ of bash\n    # $BASH_SUBSHELL: the subshell level of the current shell\n   \
    \ # $BASH_SOURCE: an array variable whose members are the source filenames where\
    \ the corresponding shell function names in the FUNCNAME array variable are defined\n\
    \    # $BASH_LINENO: an array variable whose members are the line numbers in the\
    \ source filenames where the corresponding shell function names in the FUNCNAME\
    \ array variable are defined\n    # $BASH_ARGC: an array variable whose members",
  "    # TODO: Write your code here\n    # HINT: You can use the if-elif-else statement\n\
    \    # HINT: You can use the bc command to do floating point arithmetic\n    #\
    \       e.g. echo \"4.0 > 3.7\" | bc -l\n    #       e.g. echo \"scale=2; 3.5/2\"\
    \ | bc -l\n    # HINT: You can use the printf command to format your output\n\
    \    #       e.g. printf \"%.2f\" 3.14159\n    # HINT: You can use the echo command\
    \ to output a string with double quotes\n    #       e.g. echo \"\\\"A+\\\"\"\n\
    \    # HINT: You can use the tr command to replace characters\n    #       e.g.\
    \ echo \"A+\" | tr \"+\" \"-\"\n    #       e.g. echo \"A+\" | tr -d \"+\"\n \
    \   # HINT: You can use the tr command to remove the last character of a string\n\
    \    #       e.g. echo \"A+\" | tr -d \"+\"\n    # HINT: You can use the tr command\
    \ to remove the first character of a string\n    #       e.g. echo \"A+\" | cut\
    \ -c 2-\n    # HINT: You can use the cut command to remove the first character\
    \ of a string\n    #       e.g. echo \"A+\" | cut -c 2-\n    # HINT: You can use\
    \ the cut command to remove the last character of a string\n    #       e.g. echo\
    \ \"A+\" | rev | cut -c 2- | rev\n    # HINT: You can use the rev command to reverse\
    \ a string\n    #       e.g. echo \"A+\" | rev\n    # HINT: You can use the rev\
    \ command to reverse a string\n    #       e.g. echo \"A+\" | rev\n    # HINT:\
    \ You can use the rev command to reverse a string\n    #       e.g. echo \"A+\"\
    \ | rev\n    # HINT: You can use the rev command to reverse a string\n    #  \
    \     e.g. echo \"A+\" | rev\n    # HINT: You can use the rev command to reverse\
    \ a string\n", "    # Write your code here\n    # Use the following command to\
    \ pass the output of this function to the\n    # next function:\n    # echo \"\
    $(numerical_letter_grade \"$1\")\"\n    echo \"\\\"A+\\\"\"", "    if [ $1 -ge\
    \ 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge\
    \ 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n  \
    \  elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Your code\
    \ goes here\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write your code\
    \ here\n    # HINT: You can use the following if statement to check if a number\
    \ is in a range\n    # if [ $1 -ge $2 ] && [ $1 -le $3 ]; then\n    #     echo\
    \ \"in range\"\n    # fi\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n \
    \   elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write\
    \ your code here\n    # HINT: You can use the following code to convert a string\
    \ to a number\n    # num=$(echo \"$1\" | bc -l)\n    # HINT: You can use the following\
    \ code to convert a number to a string\n    # str=$(printf \"%.0f\" $num)\n  \
    \  # HINT: You can use the following code to compare two numbers\n    # if ((\
    \ $(echo \"$num1 > $num2\" | bc -l) )); then\n    #     echo \"num1 is greater\
    \ than num2\"\n    # fi\n    # HINT: You can use the following code to compare\
    \ two strings\n    # if [ \"$str1\" \\> \"$str2\" ]; then\n    #     echo \"str1\
    \ is greater than str2\"\n    # fi\n    # HINT: You can use the following code\
    \ to compare two strings\n    # if [ \"$str1\" \\< \"$str2\" ]; then\n    #  \
    \   echo \"str1 is less than str2\"\n    # fi\n    # HINT: You can use the following\
    \ code to compare two strings\n    # if [ \"$str1\" == \"$str2\" ]; then\n   \
    \ #     echo \"str1 is equal to str2\"\n    # fi\n    # HINT: You can use the\
    \ following code to compare two strings\n    # if [ \"$str1\" != \"$str2\" ];\
    \ then\n    #     echo \"str1 is not equal to str2\"\n    # fi\n    # HINT: You\
    \ can use the following code to compare two strings\n    # if [ \"$str1\" \\>=\
    \ \"$str2\" ]; then\n    #     echo \"str1 is greater than or equal to str2\"\n\
    \    # fi\n    # HINT: You can use the following code to compare two strings\n\
    \    # if [ \"$str1\" \\<= \"$str2\" ]; then\n    #     echo \"str1 is less than\
    \ or equal to str2\"\n    # fi\n    # HINT: You can use the following code to\
    \ compare two strings\n    # if [ \"$str1\" == \"$str2\" ]; then\n    #     echo\
    \ \"str1 is equal to str2\"\n    # fi\n    # HINT: You can use the following code\
    \ to compare two", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n  \
    \      echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -eq 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ $1 -gt 3.7 ]; then\n        echo \"\
    A\"\n    elif [ $1 -gt 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -gt 3.0\
    \ ]; then\n        echo \"B+\"\n    elif [ $1 -gt 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $1 -gt 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -gt 2.0\
    \ ]; then\n        echo \"C+\"\n    elif [ $1 -gt 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $1 -gt 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 1.0\
    \ ]; then\n        echo \"D+\"\n    elif [ $1 -gt 0.7 ]; then\n        echo \"\
    D\"\n    elif [ $1 -gt 0.0 ]; then\n        echo \"D-\"\n    else\n        echo\
    \ \"E\"\n    fi", "    # Write your code here\n    # You can use the following\
    \ variables:\n    # $1: The first argument\n    # $2: The second argument\n  \
    \  # $3: The third argument\n    # $4: The fourth argument\n    # $5: The fifth\
    \ argument\n    # $@: All arguments\n    # $#: The number of arguments\n    #\
    \ $?: The exit status of the last command\n    # $$: The process ID of the current\
    \ shell\n    # $!: The process ID of the last background command\n    # $0: The\
    \ name of the shell or shell script\n    # $*: All arguments\n    # $_: The last\
    \ argument of the previous command\n    # $-: Flags passed to the shell\n    #\
    \ $PS1: The value of PS1\n    # $RANDOM: A random integer between 0 and 32767\n\
    \    # $SECONDS: The number of seconds since the shell was started\n    # $LINENO:\
    \ The current line number in the script\n    # $IFS: The Internal Field Separator\
    \ that is used for word splitting after\n    #       expansion and to split lines\
    \ into words with the read builtin\n    #       command\n    # $UID: The numeric,\
    \ real user ID of the current user\n    # $EUID: The numeric, effective user ID\
    \ of the current user\n    # $GROUPS: An array variable containing the list of\
    \ groups of which the\n    #          current user is a member\n    # $PPID: The\
    \ process ID of the shell's parent process\n    # $SHELL: The full pathname to\
    \ the shell or shell script being executed\n    # $SHLVL: The value of the shell\
    \ level (the number of nested shells)\n    # $HOME: The home directory of the\
    \ current user\n    # $PWD: The current working directory as set by the cd command\n\
    \    # $OLDPWD: The previous working directory as set by the cd command\n    #\
    \ $TMOUT: The default timeout for the read builtin command\n    # $TMPDIR: The\
    \ directory pathname used by the tmpfile and tmpdir shell\n    #          builtins\n\
    \    # $HISTCMD: The history number, or index in the history list, of the\n  \
    \  #           current command\n    # $HISTFILE: The name of the file", "    #\
    \ YOUR CODE HERE\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [\
    \ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n    \
    \    echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"\
    A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0\
    \ ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0\
    \ ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0\
    \ ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo\
    \ \"E\"\n    fi", "    # TODO: Write your code here\n    # HINT: You can use the\
    \ following if-else statement\n    # if [ condition ]; then\n    #     # do something\n\
    \    # else\n    #     # do something else\n    # fi\n    if [ \"$1\" -ge 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ \"$1\" -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ \"\
    $1\" -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ \"$1\" -ge 2.7 ]; then\n\
    \        echo \"B\"\n    elif [ \"$1\" -ge 2.3 ]; then\n        echo \"B-\"\n\
    \    elif [ \"$1\" -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$1\" -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ \"$1\" -ge 1.3 ]; then\n       \
    \ echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ \"$1\" -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$1\" -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n\
    \    if [ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n\
    \    elif [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n\
    \    elif [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n\
    \    elif [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n\
    \    elif [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n\
    \    elif [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n\
    \    elif [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n\
    \    elif [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi", "    # Write your code here\n    # You\
    \ can use the following variables:\n    # $1: the first argument\n    # $2: the\
    \ second argument\n    # $3: the third argument\n    # $4: the fourth argument\n\
    \    # $5: the fifth argument\n    # $#: the number of arguments\n    # $@: all\
    \ arguments\n    # $*: all arguments\n    # $?: the exit status of the last command\n\
    \    # $$: the process ID of the current shell\n    # $!: the process ID of the\
    \ last background command\n    # $0: the name of the shell or shell script\n \
    \   # $_: the last argument of the previous command\n    # $IFS: the Internal\
    \ Field Separator that is used for word splitting after\n    # expansion and to\
    \ split lines into words with the read builtin command\n    # $PS1: the value\
    \ of the primary prompt string\n    # $PS2: the value of the secondary prompt\
    \ string\n    # $RANDOM: generates a random integer between 0 and 32767 each time\
    \ it is\n    # referenced\n    # $SECONDS: the number of seconds since the shell\
    \ was started\n    # $LINENO: the line number in the script of the line being\
    \ executed\n    # $OLDPWD: the previous working directory\n    # $PWD: the current\
    \ working directory\n    # $REPLY: the default variable for the read builtin command\n\
    \    # $UID: the numeric, real user ID of the current user\n    # $EUID: the numeric,\
    \ effective user ID of the current user\n    # $GROUPS: an array variable containing\
    \ the list of groups of which the\n    # current user is a member\n    # $BASH_VERSION:\
    \ the version number of the current instance of Bash\n    # $BASH_VERSINFO: a\
    \ readonly array variable whose members hold version\n    # information for this\
    \ instance of Bash\n    # $BASH_SOURCE: an array variable whose members are the\
    \ source filenames\n    # where the corresponding shell function names in the\
    \ FUNCNAME array\n    # variable are defined\n    # $BASH_LINENO: an array variable\
    \ whose members are the line numbers in\n    # the source filenames where the\
    \ corresponding shell function names in the\n    # FUNCNAME array variable are\
    \ defined\n    #", "    local grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc\
    \ -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc\
    \ -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc\
    \ -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc\
    \ -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc\
    \ -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc\
    \ -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc\
    \ -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc\
    \ -l) )); then\n        echo \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc\
    \ -l) )); then\n        echo \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc\
    \ -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc\
    \ -l) )); then\n        echo \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc\
    \ -l) )); then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", " \
    \   # Your code here\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n  \
    \      echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n\
    \    if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"$grade\"\
    \ -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\" -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$grade\"\
    \ -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\" -ge 2.0 ]; then\n\
    \        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n        echo \"C\"\
    \n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$grade\"\
    \ -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\" -ge 0.7 ]; then\n\
    \        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n        echo \"D-\"\
    \n    else\n        echo \"E\"\n    fi", "    # TODO: Write your code here\n \
    \   # HINT: You can use the following if statement to check if a number is\n \
    \   # greater than another number:\n    # if [ $1 -gt $2 ]; then\n    #     echo\
    \ \"greater\"\n    # else\n    #     echo \"less\"\n    # fi\n    # HINT: You\
    \ can use the following if statement to check if a number is\n    # greater than\
    \ or equal to another number:\n    # if [ $1 -ge $2 ]; then\n    #     echo \"\
    greater\"\n    # else\n    #     echo \"less\"\n    # fi\n    # HINT: You can\
    \ use the following if statement to check if a number is\n    # less than another\
    \ number:\n    # if [ $1 -lt $2 ]; then\n    #     echo \"less\"\n    # else\n\
    \    #     echo \"greater\"\n    # fi\n    # HINT: You can use the following if\
    \ statement to check if a number is\n    # less than or equal to another number:\n\
    \    # if [ $1 -le $2 ]; then\n    #     echo \"less\"\n    # else\n    #    \
    \ echo \"greater\"\n    # fi\n    # HINT: You can use the following if statement\
    \ to check if a number is\n    # equal to another number:\n    # if [ $1 -eq $2\
    \ ]; then\n    #     echo \"equal\"\n    # else\n    #     echo \"not equal\"\n\
    \    # fi\n    # HINT: You can use the following if statement to check if a number\
    \ is\n    # not equal to another number:\n    # if [ $1 -ne $2 ]; then\n    #\
    \     echo \"not equal\"\n    # else\n    #     echo \"equal\"\n    # fi\n   \
    \ # HINT: You can use the following if statement to check if a number is\n   \
    \ # greater than another number and less than another number:\n    # if [ $1 -gt\
    \ $2 ] && [ $1 -lt $3 ]; then\n    #     echo \"greater than $2 and less than\
    \ $3\"\n    # else\n    #     echo \"not greater than $2 and less than $3\"\n\
    \    # fi\n    # HINT: You can use", "    local grade=$1\n    if (( $(echo \"\
    $grade >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo \"\
    $grade >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"$grade\
    \ >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$grade\
    \ >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$grade\
    \ >= 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$grade\
    \ >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$grade\
    \ >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$grade\
    \ >= 1.7\" | bc -l) )); then\n        echo \"C\"\n    elif (( $(echo \"$grade\
    \ >= 1.3\" | bc -l) )); then\n        echo \"C-\"\n    elif (( $(echo \"$grade\
    \ >= 1.0\" | bc -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"$grade\
    \ >= 0.7\" | bc -l) )); then\n        echo \"D\"\n    elif (( $(echo \"$grade\
    \ >= 0.0\" | bc -l) )); then\n        echo \"D-\"\n    else\n        echo \"E\"\
    \n    fi", "    if [ \"$1\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"\
    $1\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ \"$1\" -ge 3.0 ]; then\n        echo \"B+\"\n\
    \    elif [ \"$1\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge\
    \ 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$1\" -ge 2.0 ]; then\n      \
    \  echo \"C+\"\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ \"$1\" -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ];\
    \ then\n        echo \"D+\"\n    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\n  \
    \  elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge\
    \ 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge\
    \ 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    local gpa=$1\n    if [ $gpa -ge 4.0 ]; then\n   \
    \     echo \"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $gpa -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $gpa -ge 3.0 ]; then\n\
    \        echo \"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        echo \"B\"\n  \
    \  elif [ $gpa -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $gpa -ge 2.0 ];\
    \ then\n        echo \"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $gpa -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $gpa -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $gpa -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $gpa -ge 0.0 ]; then\n        echo \"D-\"\n    else\n    \
    \    echo \"E\"\n    fi", "    # Write your code here\n    # You can use the following\
    \ code to convert a string to a floating point number\n    # number=$(echo $1\
    \ | bc -l)\n    # You can use the following code to convert a floating point number\
    \ to a string\n    # string=$(printf \"%.1f\" $1)\n    # You can use the following\
    \ code to print a string\n    # echo $string\n    # You can use the following\
    \ code to print a list of strings\n    # echo \"[$string, $string]\"\n    # You\
    \ can use the following code to print a list of strings\n    # echo \"[$string,\
    \ $string]\"\n    # You can use the following code to print a list of strings\n\
    \    # echo \"[$string, $string]\"\n    # You can use the following code to print\
    \ a list of strings\n    # echo \"[$string, $string]\"\n    # You can use the\
    \ following code to print a list of strings\n    # echo \"[$string, $string]\"\
    \n    # You can use the following code to print a list of strings\n    # echo\
    \ \"[$string, $string]\"\n    # You can use the following code to print a list\
    \ of strings\n    # echo \"[$string, $string]\"\n    # You can use the following\
    \ code to print a list of strings\n    # echo \"[$string, $string]\"\n    # You\
    \ can use the following code to print a list of strings\n    # echo \"[$string,\
    \ $string]\"\n    # You can use the following code to print a list of strings\n\
    \    # echo \"[$string, $string]\"\n    # You can use the following code to print\
    \ a list of strings\n    # echo \"[$string, $string]\"\n    # You can use the\
    \ following code to print a list of strings\n    # echo \"[$string, $string]\"\
    \n    # You can use the following code to print a list of strings\n    # echo\
    \ \"[$string, $string]\"\n    # You can use the following code to print a list\
    \ of strings\n    # echo \"[$string, $string]\"\n    # You can use the following\
    \ code to print a list of strings\n    # echo \"[$string, $string]\"\n    # You\
    \ can use the following code to print a list of strings\n    # echo \"[$string,\
    \ $string]\"\n    # You can", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write\
    \ your code here\n    # You can use the following variables:\n    # $1: the first\
    \ argument\n    # $2: the second argument\n    # ...\n    # $n: the nth argument\n\
    \    # $#: the number of arguments\n    # $@: all arguments\n    # $*: all arguments\n\
    \    # $0: the name of the script\n    # $?: the exit status of the last command\n\
    \    # $$: the process ID of the script\n    # $!: the process ID of the last\
    \ command\n    # $_: the last argument of the last command\n    # $IFS: the field\
    \ separator\n    # $-: the flags currently set for the shell\n    # $PS1: the\
    \ primary prompt string\n    # $PS2: the secondary prompt string\n    # $RANDOM:\
    \ a random number between 0 and 32767\n    # $SECONDS: the number of seconds since\
    \ the shell was started\n    # $LINENO: the current line number in the script\n\
    \    # $OLDPWD: the previous working directory\n    # $PWD: the current working\
    \ directory\n    # $REPLY: the default variable for the read command\n    # $MACHTYPE:\
    \ the system type\n    # $HOSTNAME: the hostname\n    # $HOSTTYPE: the hardware\
    \ type\n    # $OSTYPE: the operating system\n    # $SHELL: the shell being used\n\
    \    # $BASH: the bash version\n    # $BASH_VERSION: the bash version\n    # $BASH_VERSINFO:\
    \ the bash version with extra information\n    # $BASH_SUBSHELL: the current subshell\
    \ level\n    # $BASH_SOURCE: the source filename of the script\n    # $BASH_LINENO:\
    \ the current line in the script\n    # $BASH_ARGC: the number of arguments in\
    \ the script\n    # $BASH_ARGV: the arguments in the script\n    # $BASH_EXECUTION_STRING:\
    \ the command argument to the -c option\n    # $BASH_REMATCH: the array variable\
    \ from the last regex match\n    # $BASH_COMMAND: the command currently being\
    \ executed\n    # $BASH_ALIASES: the defined aliases\n    #", "    # TODO: Write\
    \ your code here\n    # HINT: You can use the following if-else statement\n  \
    \  # if [ condition ]; then\n    #     # do something\n    # else\n    #     #\
    \ do something else\n    # fi\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # YOUR\
    \ CODE HERE\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge\
    \ 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n\
    \    # You can write additional functions if needed\n    # You can use the following\
    \ command to convert the string to an array\n    # arr=($(echo $1 | tr \" \" \"\
    \\n\"))\n    # echo ${arr[0]}\n    # echo ${arr[1]}\n    # echo ${arr[2]}\n  \
    \  # echo ${arr[3]}\n    # echo ${arr[4]}\n    # echo ${arr[5]}\n    # echo ${arr[6]}\n\
    \    # echo ${arr[7]}\n    # echo ${arr[8]}\n    # echo ${arr[9]}\n    # echo\
    \ ${arr[10]}\n    # echo ${arr[11]}\n    # echo ${arr[12]}\n    # echo ${arr[13]}\n\
    \    # echo ${arr[14]}\n    # echo ${arr[15]}\n    # echo ${arr[16]}\n    # echo\
    \ ${arr[17]}\n    # echo ${arr[18]}\n    # echo ${arr[19]}\n    # echo ${arr[20]}\n\
    \    # echo ${arr[21]}\n    # echo ${arr[22]}\n    # echo ${arr[23]}\n    # echo\
    \ ${arr[24]}\n    # echo ${arr[25]}\n    # echo ${arr[26]}\n    # echo ${arr[27]}\n\
    \    # echo ${arr[28]}\n    # echo ${arr[29]}\n    # echo ${arr[30]}\n    # echo\
    \ ${arr[31]}\n    # echo ${arr[32]}\n    # echo ${arr[33]}\n    # echo ${arr[34]}\n\
    \    # echo ${arr[35]}\n    # echo ${arr[36]}\n    # echo ${arr[37]}\n    # echo\
    \ ${arr[38]}\n    # echo ${arr[39]}\n    # echo ${arr[40]}\n    # echo ${arr[41]}\n\
    \    # echo ${arr[42]}\n    # echo ${arr[43]}\n    # echo ${arr[44]}\n    # echo\
    \ ${arr[45]}\n    # echo ${arr[46]}\n    # echo ${arr[47]}\n    # echo ${arr[48]}\n\
    \    # echo ${arr[49]}\n    # echo ${arr[50]}\n    #", "    local gpa=$1\n   \
    \ if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif\
    \ (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif ((\
    \ $(echo \"$gpa >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo\
    \ \"$gpa >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"\
    $gpa >= 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$gpa\
    \ >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$gpa >=\
    \ 2.0\" | bc -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\"\
    \ | bc -l) )); then\n        echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" |\
    \ bc -l) )); then\n        echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc\
    \ -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l)\
    \ )); then\n        echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) ));\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [\
    \ \"$1\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ \"$1\" -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n        echo \"A-\"\n\
    \    elif [ \"$1\" -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ \"$1\" -ge\
    \ 2.7 ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge 2.3 ]; then\n       \
    \ echo \"B-\"\n    elif [ \"$1\" -ge 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ \"$1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif [ \"$1\" -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ \"$1\" -ge 1.0 ]; then\n        echo \"D+\"\n\
    \    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$1\" -ge\
    \ 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", " \
    \   # This function takes a numerical grade and returns the letter grade\n   \
    \ # Example:\n    # >>> $(numerical_letter_grade \"4.0\")\n    # \"A+\"\n    #\
    \ >>> $(numerical_letter_grade \"3.7\")\n    # \"A\"\n    # >>> $(numerical_letter_grade\
    \ \"3.3\")\n    # \"A-\"\n    # >>> $(numerical_letter_grade \"3.0\")\n    # \"\
    B+\"\n    # >>> $(numerical_letter_grade \"2.7\")\n    # \"B\"\n    # >>> $(numerical_letter_grade\
    \ \"2.3\")\n    # \"B-\"\n    # >>> $(numerical_letter_grade \"2.0\")\n    # \"\
    C+\"\n    # >>> $(numerical_letter_grade \"1.7\")\n    # \"C\"\n    # >>> $(numerical_letter_grade\
    \ \"1.3\")\n    # \"C-\"\n    # >>> $(numerical_letter_grade \"1.0\")\n    # \"\
    D+\"\n    # >>> $(numerical_letter_grade \"0.7\")\n    # \"D\"\n    # >>> $(numerical_letter_grade\
    \ \"0.0\")\n    # \"D-\"\n    # >>> $(numerical_letter_grade \"-1.0\")\n    #\
    \ \"E\"\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n  \
    \  elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local gpa=$1\n\
    \    if [ $(echo \"$gpa >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n  \
    \  elif [ $(echo \"$gpa >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n   \
    \ elif [ $(echo \"$gpa >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n   \
    \ elif [ $(echo \"$gpa >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n   \
    \ elif [ $(echo \"$gpa >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n    elif\
    \ [ $(echo \"$gpa >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n    elif\
    \ [ $(echo \"$gpa >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n    elif\
    \ [ $(echo \"$gpa >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n    elif [\
    \ $(echo \"$gpa >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n    elif [\
    \ $(echo \"$gpa >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n    elif [\
    \ $(echo \"$gpa >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n    elif [ $(echo\
    \ \"$gpa >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n    else\n       \
    \ echo \"E\"\n    fi", "    # TODO: Write your code here\n    # HINT: You can\
    \ use the following if-else statement\n    # if [ condition ]; then\n    #   \
    \  echo \"A+\"\n    # elif [ condition ]; then\n    #     echo \"A\"\n    # else\n\
    \    #     echo \"E\"\n    # fi\n    if [ $1 -ge 4.0 ]; then\n        echo \"\
    A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3\
    \ ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"\
    B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3\
    \ ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"\
    C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3\
    \ ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"\
    D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0\
    \ ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    #\
    \ Write your code here\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n   \
    \ elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Implement\
    \ this function\n    # Hint: Use the if-elif-else statement\n    # Hint: Use the\
    \ bc command to do floating point arithmetic\n    # Hint: Use the echo command\
    \ to output the result\n    # Hint: Use the printf command to format the output\n\
    \    # Hint: Use the echo command to output the result\n    # Hint: Use the printf\
    \ command to format the output\n    # Hint: Use the echo command to output the\
    \ result\n    # Hint: Use the printf command to format the output\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the printf command\
    \ to format the output\n    # Hint: Use the echo command to output the result\n\
    \    # Hint: Use the printf command to format the output\n    # Hint: Use the\
    \ echo command to output the result\n    # Hint: Use the printf command to format\
    \ the output\n    # Hint: Use the echo command to output the result\n    # Hint:\
    \ Use the printf command to format the output\n    # Hint: Use the echo command\
    \ to output the result\n    # Hint: Use the printf command to format the output\n\
    \    # Hint: Use the echo command to output the result\n    # Hint: Use the printf\
    \ command to format the output\n    # Hint: Use the echo command to output the\
    \ result\n    # Hint: Use the printf command to format the output\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the printf command\
    \ to format the output\n    # Hint: Use the echo command to output the result\n\
    \    # Hint: Use the printf command to format the output\n    # Hint: Use the\
    \ echo command to output the result\n    # Hint: Use the printf command to format\
    \ the output\n    # Hint: Use the echo command to output the result\n    # Hint:\
    \ Use the printf command to format the output\n    # Hint: Use the echo command\
    \ to output the result\n    # Hint: Use the printf command to format the output\n\
    \    # Hint: Use the echo command to output the result\n    # Hint: Use the printf\
    \ command to format the output\n    # Hint: Use the echo command to output the\
    \ result\n    # Hint: Use the printf command to", "    # Write your code here\n\
    \    # You can use the following variables:\n    # $1: the numerical grade\n \
    \   # $2: the letter grade\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n\
    \    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n   \
    \ elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n   \
    \ elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n\
    \        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n   \
    \ elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [[ $1 -ge\
    \ 4.0 ]]; then\n        echo \"A+\"\n    elif [[ $1 -ge 3.7 ]]; then\n       \
    \ echo \"A\"\n    elif [[ $1 -ge 3.3 ]]; then\n        echo \"A-\"\n    elif [[\
    \ $1 -ge 3.0 ]]; then\n        echo \"B+\"\n    elif [[ $1 -ge 2.7 ]]; then\n\
    \        echo \"B\"\n    elif [[ $1 -ge 2.3 ]]; then\n        echo \"B-\"\n  \
    \  elif [[ $1 -ge 2.0 ]]; then\n        echo \"C+\"\n    elif [[ $1 -ge 1.7 ]];\
    \ then\n        echo \"C\"\n    elif [[ $1 -ge 1.3 ]]; then\n        echo \"C-\"\
    \n    elif [[ $1 -ge 1.0 ]]; then\n        echo \"D+\"\n    elif [[ $1 -ge 0.7\
    \ ]]; then\n        echo \"D\"\n    elif [[ $1 -ge 0.0 ]]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n    if [\
    \ $(echo \"$grade >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n    elif\
    \ [ $(echo \"$grade >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n    elif\
    \ [ $(echo \"$grade >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n    elif\
    \ [ $(echo \"$grade >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n    elif\
    \ [ $(echo \"$grade >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n    elif\
    \ [ $(echo \"$grade >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n    elif\
    \ [ $(echo \"$grade >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n    elif\
    \ [ $(echo \"$grade >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n    elif\
    \ [ $(echo \"$grade >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n    elif\
    \ [ $(echo \"$grade >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n    elif\
    \ [ $(echo \"$grade >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n    elif\
    \ [ $(echo \"$grade >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write\
    \ your code here\n    # You can use the following command to convert a string\
    \ to a float\n    # float=$(echo \"$1\" | bc -l)\n    # You can use the following\
    \ command to convert a float to a string\n    # string=$(printf \"%.2f\" $float)\n\
    \    # You can use the following command to print a string\n    # echo $string\n\
    \    # You can use the following command to print a list of strings\n    # echo\
    \ \"[$string, $string]\"\n    # You can use the following command to print a string\
    \ with double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use the following\
    \ command to print a string with double quotes\n    # echo \"\\\"$string\\\"\"\
    \n    # You can use the following command to print a string with double quotes\n\
    \    # echo \"\\\"$string\\\"\"\n    # You can use the following command to print\
    \ a string with double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use\
    \ the following command to print a string with double quotes\n    # echo \"\\\"\
    $string\\\"\"\n    # You can use the following command to print a string with\
    \ double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use the following\
    \ command to print a string with double quotes\n    # echo \"\\\"$string\\\"\"\
    \n    # You can use the following command to print a string with double quotes\n\
    \    # echo \"\\\"$string\\\"\"\n    # You can use the following command to print\
    \ a string with double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use\
    \ the following command to print a string with double quotes\n    # echo \"\\\"\
    $string\\\"\"\n    # You can use the following command to print a string with\
    \ double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use the following\
    \ command to print a string with double quotes\n    # echo \"\\\"$string\\\"\"\
    \n    # You can use the following command to print a string with double quotes\n\
    \    # echo \"\\\"$string\\\"\"\n    # You can use the following command to print\
    \ a string with double quotes\n    # echo \"\\\"$string\\\"\"\n    # You can use\
    \ the following command to print a string with double quotes\n    # echo \"\\\"\
    $string\\\"\"\n    # You can use the following", "    local gpa=$1\n    if ((\
    \ $(echo \"$gpa >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif (( $(echo\
    \ \"$gpa >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo \"\
    $gpa >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"$gpa\
    \ >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$gpa >=\
    \ 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$gpa >= 2.3\"\
    \ | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$gpa >= 2.0\" |\
    \ bc -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc\
    \ -l) )); then\n        echo \"C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l)\
    \ )); then\n        echo \"C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) ));\
    \ then\n        echo \"D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n\
    \        echo \"D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code\
    \ here\n    # Use the following command to output a letter grade:\n    # echo\
    \ \"\\\"$letter_grade\\\"\"\n    # For example, if the GPA is 3.7, the output\
    \ should be:\n    # echo \"\\\"A\\\"\"\n    # Hint: You can use if-else statements\
    \ and elif to solve this problem.\n    #       You can also use the following\
    \ command to convert a string to a \n    #       number:\n    #       number=$(echo\
    \ \"$string\" | bc -l)\n    #       For example, if string=\"3.7\", then number=3.7\n\
    \    #       You can use the following command to compare two numbers:\n    #\
    \       if (( $(echo \"$number1 > $number2\" | bc -l) )); then\n    #        \
    \   echo \"$number1 is greater than $number2\"\n    #       fi\n    #       For\
    \ example, if number1=3.7 and number2=3.3, then the output is:\n    #       3.7\
    \ is greater than 3.3\n    #       You can also use the following command to compare\
    \ two strings:\n    #       if [ \"$string1\" \\> \"$string2\" ]; then\n    #\
    \           echo \"$string1 is greater than $string2\"\n    #       fi\n    #\
    \       For example, if string1=\"3.7\" and string2=\"3.3\", then the output is:\n\
    \    #       3.7 is greater than 3.3\n    #       You can use the following command\
    \ to compare two strings:\n    #       if [ \"$string1\" \\> \"$string2\" ]; then\n\
    \    #           echo \"$string1 is greater than $string2\"\n    #       fi\n\
    \    #       For example, if string1=\"3.7\" and string2=\"3.3\", then the output\
    \ is:\n    #       3.7 is greater than 3.3\n    #       You can use the following\
    \ command to compare two strings:\n    #       if [ \"$string1\" \\> \"$string2\"\
    \ ]; then\n    #           echo \"$string1 is greater than $string2\"\n    # \
    \      fi\n    #       For example, if string1=\"3.7\" and string2=\"3.3\", then\
    \ the output is:\n    #", "    # Write your code here\n    # You can use the following\
    \ variables:\n    # $1: The first argument passed to the function\n    # $2: The\
    \ second argument passed to the function\n    # ...\n    # $n: The nth argument\
    \ passed to the function\n    # $#: The number of arguments passed to the function\n\
    \    # $@: All arguments passed to the function\n    # $*: All arguments passed\
    \ to the function\n    # $?: The exit status of the last command executed\n  \
    \  # $$: The process ID of the current shell\n    # $!: The process ID of the\
    \ last background command\n    # $0: The name of the shell or shell script\n \
    \   # $_: The underscore variable\n    # $IFS: The Internal Field Separator that\
    \ is used for word splitting after\n    # expansion and to split lines into words\
    \ with the read builtin command\n    # $PS1: The value of the primary prompt string,\
    \ stored in the PS1 variable\n    # $PS2: The value of the secondary prompt string,\
    \ stored in the PS2 variable\n    # $PS3: The value of the select prompt string,\
    \ stored in the PS3 variable\n    # $PS4: The value of the debug prompt string,\
    \ stored in the PS4 variable\n    # $SECONDS: The number of seconds since the\
    \ shell was started\n    # $RANDOM: Each time this parameter is referenced, a\
    \ random integer between\n    # 0 and 32767 is generated\n    # $LINENO: The line\
    \ number in the script or shell function currently\n    # executing\n    # $OLDPWD:\
    \ The previous working directory as set by the cd command\n    # $OPTARG: The\
    \ value of the last option argument processed by the getopts\n    # builtin command\n\
    \    # $OPTIND: The index of the last option argument processed by the getopts\n\
    \    # builtin command\n    # $OSTYPE: A string describing the operating system\
    \ Bash is running on\n    # $MACHTYPE: A string that fully describes the system\
    \ type on which Bash is\n    # running\n    # $HOSTNAME: The name of the current\
    \ host\n    # $HOSTTYPE: A string describing the machine Bash is running on\n\
    \    # $PIPESTATUS: An array variable containing a list of exit status", "   \
    \ # Write your code here\n    # You can use the following command to convert a\
    \ string to a number\n    # number=$(echo $1 | bc -l)\n    # You can use the following\
    \ command to convert a number to a string\n    # string=$(echo $1 | bc -l)\n \
    \   # You can use the following command to compare two numbers\n    # if [ \"\
    $(echo \"$1 > $2\" | bc -l)\" -eq 1 ]; then\n    #     echo \"1\"\n    # else\n\
    \    #     echo \"0\"\n    # fi\n    # You can use the following command to compare\
    \ two strings\n    # if [ \"$1\" == \"$2\" ]; then\n    #     echo \"1\"\n   \
    \ # else\n    #     echo \"0\"\n    # fi\n    # You can use the following command\
    \ to print a string\n    # echo $1\n    # You can use the following command to\
    \ print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $1\n    # You can use the following command\
    \ to print a list of strings\n    # echo $", "    # Write your code here\n   \
    \ # You can add more functions if you want\n    # You can also use external programs\n\
    \    # But remember to remove the \"exit 1\" line\n    # Do not use python\n \
    \   # Do not use python\n    # Do not use python\n    # Do not use python\n  \
    \  # Do not use python\n    # Do not use python\n    # Do not use python\n   \
    \ # Do not use python\n    # Do not use python\n    # Do not use python\n    #\
    \ Do not use python\n    # Do not use python\n    # Do not use python\n    # Do\
    \ not use python\n    # Do not use python\n    # Do not use python\n    # Do not\
    \ use python\n    # Do not use python\n    # Do not use python\n    # Do not use\
    \ python\n    # Do not use python\n    # Do not use python\n    # Do not use python\n\
    \    # Do not use python\n    # Do not use python\n    # Do not use python\n \
    \   # Do not use python\n    # Do not use python\n    # Do not use python\n  \
    \  # Do not use python\n    # Do not use python\n    # Do not use python\n   \
    \ # Do not use python\n    # Do not use python\n    # Do not use python\n    #\
    \ Do not use python\n    # Do not use python\n    # Do not use python\n    # Do\
    \ not use python\n    # Do not use python\n    # Do not use python\n    # Do not\
    \ use python\n    # Do not use python\n    # Do not use python\n    # Do not use\
    \ python\n    # Do not use python\n    # Do not use python\n    # Do not use python\n\
    \    # Do not use python\n    # Do not use python\n    # Do not use python\n \
    \   # Do not use python\n    # Do not use python\n    # Do not use python\n  \
    \  # Do not use python\n    # Do not use python\n    # Do not use python\n   \
    \ # Do not use python\n    # Do not use python\n    # Do not use python\n    #\
    \ Do not use python\n    # Do not use python\n    # Do not use python\n    # Do\
    \ not use python\n    # Do not use python\n    # Do not use python\n    # Do not\
    \ use python\n    #", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n  \
    \      echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Implement\
    \ this function\n    # This function should take in a numerical grade and return\
    \ a letter grade\n    # based on the table above.\n    # Hint: You can use the\
    \ if-elif-else structure to solve this problem.\n    # Hint: You can use the bc\
    \ command to do floating point arithmetic.\n    # Hint: You can use the echo command\
    \ to return a string.\n    # Hint: You can use the printf command to format a\
    \ string.\n    # Hint: You can use the cut command to remove the decimal part\
    \ of a number.\n    # Hint: You can use the test command to compare two numbers.\n\
    \    # Hint: You can use the test command to compare two strings.\n    # Hint:\
    \ You can use the test command to compare a number and a string.\n    # Hint:\
    \ You can use the test command to compare a string and a number.\n    # Hint:\
    \ You can use the test command to compare two numbers.\n    # Hint: You can use\
    \ the test command to compare two strings.\n    # Hint: You can use the test command\
    \ to compare a number and a string.\n    # Hint: You can use the test command\
    \ to compare a string and a number.\n    # Hint: You can use the test command\
    \ to compare two numbers.\n    # Hint: You can use the test command to compare\
    \ two strings.\n    # Hint: You can use the test command to compare a number and\
    \ a string.\n    # Hint: You can use the test command to compare a string and\
    \ a number.\n    # Hint: You can use the test command to compare two numbers.\n\
    \    # Hint: You can use the test command to compare two strings.\n    # Hint:\
    \ You can use the test command to compare a number and a string.\n    # Hint:\
    \ You can use the test command to compare a string and a number.\n    # Hint:\
    \ You can use the test command to compare two numbers.\n    # Hint: You can use\
    \ the test command to compare two strings.\n    # Hint: You can use the test command\
    \ to compare a number and a string.\n    # Hint: You can use the test command\
    \ to compare a string and a number.\n    # Hint: You can use the test command\
    \ to", "    # Write your code here\n    # You can use the following syntax to\
    \ append to an array:\n    # array+=(\"item\")\n    # You can use the following\
    \ syntax to print an array:\n    # printf '%s\\n' \"${array[@]}\"\n    # You can\
    \ use the following syntax to print an array without brackets:\n    # printf '[%s]\\\
    n' \"${array[@]}\"\n    # You can use the following syntax to print an array without\
    \ brackets and quotes:\n    # printf \"[%s]\\n\" \"${array[@]//\\\"}\"\n    #\
    \ You can use the following syntax to access command line arguments:\n    # $1\
    \ $2 $3 ...\n    # You can use the following syntax to access all command line\
    \ arguments:\n    # \"$@\"\n    # You can use the following syntax to access all\
    \ command line arguments as an array:\n    # \"${@}\"\n    # You can use the following\
    \ syntax to access the number of command line arguments:\n    # $#\n    # You\
    \ can use the following syntax to access the return value of the last command:\n\
    \    # $?\n    # You can use the following syntax to access the process id of\
    \ the current shell:\n    # $$\n    # You can use the following syntax to access\
    \ the exit status of the last command:\n    # $-\n    # You can use the following\
    \ syntax to access the name of the shell or shell script:\n    # $0\n    # You\
    \ can use the following syntax to access the options supplied to the shell:\n\
    \    # $-\n    # You can use the following syntax to access the number of positional\
    \ parameters:\n    # $#\n    # You can use the following syntax to access the\
    \ current line number in the Bash script:\n    # $LINENO\n    # You can use the\
    \ following syntax to access the current working directory:\n    # $PWD\n    #\
    \ You can use the following syntax to access the user's home directory:\n    #\
    \ $HOME\n    # You can use the following syntax to access the user's username:\n\
    \    # $USER\n    # You can use the following syntax to access the hostname:\n\
    \    # $HOSTNAME\n    # You can use the following syntax to access the exit status\
    \ of the last command:\n    # $?\n    # You", "    local grade=$1\n    if [ $grade\
    \ -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $grade -ge 3.7 ]; then\n  \
    \      echo \"A\"\n    elif [ $grade -ge 3.3 ]; then\n        echo \"A-\"\n  \
    \  elif [ $grade -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $grade -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $grade -ge 2.3 ]; then\n        echo\
    \ \"B-\"\n    elif [ $grade -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $grade\
    \ -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $grade -ge 1.3 ]; then\n   \
    \     echo \"C-\"\n    elif [ $grade -ge 1.0 ]; then\n        echo \"D+\"\n  \
    \  elif [ $grade -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $grade -ge 0.0\
    \ ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local\
    \ gpa=$1\n    if [ $gpa -eq 4.0 ]; then\n        echo \"A+\"\n    elif [ $gpa\
    \ -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $gpa -gt 3.3 ]; then\n     \
    \   echo \"A-\"\n    elif [ $gpa -gt 3.0 ]; then\n        echo \"B+\"\n    elif\
    \ [ $gpa -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $gpa -gt 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ $gpa -gt 2.0 ]; then\n        echo \"C+\"\n \
    \   elif [ $gpa -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $gpa -gt 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $gpa -gt 1.0 ]; then\n        echo \"\
    D+\"\n    elif [ $gpa -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $gpa -gt\
    \ 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", " \
    \   if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [\
    \ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n   \
    \     echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Fill\
    \ in this function\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n    # Hint: Use\
    \ the following command to convert a number to a string\n    # string=$(printf\
    \ \"%.2f\" $number)\n    # Hint: Use the following command to convert a string\
    \ to a number\n    # number=$(echo \"scale=2; $string\" | bc)\n", "    if [ $1\
    \ -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n      \
    \  echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [\
    \ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n   \
    \     echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write\
    \ your code here\n    # Hint: Use the following command to convert a string to\
    \ a float\n    # float_num=$(echo \"$1\" | awk '{print $1 + 0}')\n    # Hint:\
    \ Use the following command to convert a float to a string\n    # string_num=$(printf\
    \ \"%.1f\" $float_num)\n    # Hint: Use the following command to convert a string\
    \ to an integer\n    # int_num=$(echo \"$1\" | awk '{print $1 + 0}')\n    # Hint:\
    \ Use the following command to convert an integer to a string\n    # string_num=$(printf\
    \ \"%d\" $int_num)\n    # Hint: Use the following command to convert a string\
    \ to an array\n    # arr=($string_num)\n    # Hint: Use the following command\
    \ to convert an array to a string\n    # string_num=$(printf \"%s\" \"${arr[@]}\"\
    )\n    # Hint: Use the following command to convert a string to a list\n    #\
    \ list_num=$(echo \"$string_num\" | sed 's/ /\", \"/g')\n    # Hint: Use the following\
    \ command to convert a list to a string\n    # string_num=$(echo \"$list_num\"\
    \ | sed 's/\", \"/ /g')\n    # Hint: Use the following command to convert a string\
    \ to a dictionary\n    # dict_num=$(echo \"$string_num\" | sed 's/ /\": \"/g')\n\
    \    # Hint: Use the following command to convert a dictionary to a string\n \
    \   # string_num=$(echo \"$dict_num\" | sed 's/\": \"/ /g')\n    # Hint: Use the\
    \ following command to convert a string to a tuple\n    # tuple_num=$(echo \"\
    $string_num\" | sed 's/ /\", \"/g')\n    # Hint: Use the following command to\
    \ convert a tuple to a string\n    # string_num=$(echo \"$tuple_num\" | sed 's/\"\
    , \"/ /g')\n    # Hint: Use the following command to convert a string to a set\n\
    \    # set_num=$(echo \"$string_num\" | sed 's/ /\", \"/g')\n   ", "    local\
    \ grade=$1\n    if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ \"$grade\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\" -ge\
    \ 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n  \
    \      echo \"B+\"\n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\n\
    \    elif [ \"$grade\" -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\"\
    \ -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n\
    \        echo \"C\"\n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\
    \n    elif [ \"$grade\" -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\"\
    \ -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write\
    \ your code here\n    # HINT: You can use the following code to convert a string\
    \ to a number:\n    # num=$(echo $1 | bc -l)\n    # HINT: You can use the following\
    \ code to convert a number to a string:\n    # str=$(printf \"%.2f\" $1)\n   \
    \ # HINT: You can use the following code to compare two numbers:\n    # if ((\
    \ $(echo \"$1 > $2\" | bc -l) )); then\n    #     echo \"true\"\n    # else\n\
    \    #     echo \"false\"\n    # fi\n    # HINT: You can use the following code\
    \ to compare two strings:\n    # if [ \"$1\" == \"$2\" ]; then\n    #     echo\
    \ \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # HINT: You can\
    \ use the following code to compare two strings:\n    # if [ \"$1\" == \"$2\"\
    \ ]; then\n    #     echo \"true\"\n    # else\n    #     echo \"false\"\n   \
    \ # fi\n    # HINT: You can use the following code to compare two strings:\n \
    \   # if [ \"$1\" == \"$2\" ]; then\n    #     echo \"true\"\n    # else\n   \
    \ #     echo \"false\"\n    # fi\n    # HINT: You can use the following code to\
    \ compare two strings:\n    # if [ \"$1\" == \"$2\" ]; then\n    #     echo \"\
    true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # HINT: You can use\
    \ the following code to compare two strings:\n    # if [ \"$1\" == \"$2\" ]; then\n\
    \    #     echo \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n   \
    \ # HINT: You can use the following code to compare two strings:\n    # if [ \"\
    $1\" == \"$2\" ]; then\n    #     echo \"true\"\n    # else\n    #     echo \"\
    false\"\n    # fi\n    # HINT: You can use the following code to compare two strings:\n\
    \    # if [ \"$1\" == \"$2\" ]; then\n    #     echo \"true\"\n    #", "    local\
    \ grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n        echo\
    \ \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n        echo\
    \ \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n        echo\
    \ \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n        echo\
    \ \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n        echo\
    \ \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n        echo\
    \ \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n        echo\
    \ \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n        echo\
    \ \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n        echo\
    \ \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n        echo\
    \ \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n        echo\
    \ \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    local grade=$1\n    if ((\
    \ $(echo \"$grade >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif ((\
    \ $(echo \"$grade >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif ((\
    \ $(echo \"$grade >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif ((\
    \ $(echo \"$grade >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif ((\
    \ $(echo \"$grade >= 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif ((\
    \ $(echo \"$grade >= 2.3\" | bc -l) )); then\n        echo \"B-\"\n    elif ((\
    \ $(echo \"$grade >= 2.0\" | bc -l) )); then\n        echo \"C+\"\n    elif ((\
    \ $(echo \"$grade >= 1.7\" | bc -l) )); then\n        echo \"C\"\n    elif ((\
    \ $(echo \"$grade >= 1.3\" | bc -l) )); then\n        echo \"C-\"\n    elif ((\
    \ $(echo \"$grade >= 1.0\" | bc -l) )); then\n        echo \"D+\"\n    elif ((\
    \ $(echo \"$grade >= 0.7\" | bc -l) )); then\n        echo \"D\"\n    elif ((\
    \ $(echo \"$grade >= 0.0\" | bc -l) )); then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    # Use the table to convert the numerical grade\
    \ to a letter grade\n    # $1 is the numerical grade\n    # return the letter\
    \ grade\n    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n  \
    \      echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    # Write your code here\n    # Use the following variables to store\
    \ your output\n    # grade_letter_array=()\n    # grade_letter_array+=('\"A+\"\
    ')\n    # grade_letter_array+=('\"A\"')\n    # grade_letter_array+=('\"A-\"')\n\
    \    # grade_letter_array+=('\"B+\"')\n    # grade_letter_array+=('\"B\"')\n \
    \   # grade_letter_array+=('\"B-\"')\n    # grade_letter_array+=('\"C+\"')\n \
    \   # grade_letter_array+=('\"C\"')\n    # grade_letter_array+=('\"C-\"')\n  \
    \  # grade_letter_array+=('\"D+\"')\n    # grade_letter_array+=('\"D\"')\n   \
    \ # grade_letter_array+=('\"D-\"')\n    # grade_letter_array+=('\"E\"')\n    #\
    \ echo ${grade_letter_array[@]}", "    local grade=$1\n    if [ $grade -ge 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ $grade -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $grade -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $grade\
    \ -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $grade -ge 2.7 ]; then\n  \
    \      echo \"B\"\n    elif [ $grade -ge 2.3 ]; then\n        echo \"B-\"\n  \
    \  elif [ $grade -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $grade -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $grade -ge 1.3 ]; then\n        echo\
    \ \"C-\"\n    elif [ $grade -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $grade\
    \ -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $grade -ge 0.0 ]; then\n   \
    \     echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    gpa=$1\n    if\
    \ [ $(echo \"$gpa >= 4.0\" | bc) -eq 1 ]; then\n        echo \"A+\"\n    elif\
    \ [ $(echo \"$gpa >= 3.7\" | bc) -eq 1 ]; then\n        echo \"A\"\n    elif [\
    \ $(echo \"$gpa >= 3.3\" | bc) -eq 1 ]; then\n        echo \"A-\"\n    elif [\
    \ $(echo \"$gpa >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\n    elif [\
    \ $(echo \"$gpa >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n    elif [ $(echo\
    \ \"$gpa >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n    elif [ $(echo\
    \ \"$gpa >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n    elif [ $(echo\
    \ \"$gpa >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n    elif [ $(echo \"\
    $gpa >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n    elif [ $(echo \"$gpa\
    \ >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"$gpa\
    \ >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$gpa >=\
    \ 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\
    \n    fi", "    # YOUR CODE HERE\n    if [ \"$1\" -ge 4.0 ]; then\n        echo\
    \ '\"A+\"'\n    elif [ \"$1\" -ge 3.7 ]; then\n        echo '\"A\"'\n    elif\
    \ [ \"$1\" -ge 3.3 ]; then\n        echo '\"A-\"'\n    elif [ \"$1\" -ge 3.0 ];\
    \ then\n        echo '\"B+\"'\n    elif [ \"$1\" -ge 2.7 ]; then\n        echo\
    \ '\"B\"'\n    elif [ \"$1\" -ge 2.3 ]; then\n        echo '\"B-\"'\n    elif\
    \ [ \"$1\" -ge 2.0 ]; then\n        echo '\"C+\"'\n    elif [ \"$1\" -ge 1.7 ];\
    \ then\n        echo '\"C\"'\n    elif [ \"$1\" -ge 1.3 ]; then\n        echo\
    \ '\"C-\"'\n    elif [ \"$1\" -ge 1.0 ]; then\n        echo '\"D+\"'\n    elif\
    \ [ \"$1\" -ge 0.7 ]; then\n        echo '\"D\"'\n    elif [ \"$1\" -ge 0.0 ];\
    \ then\n        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi", "    local\
    \ gpa=$1\n    if [ $(echo \"$gpa >= 4.0\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"A+\"\n    elif [ $(echo \"$gpa >= 3.7\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"A\"\n    elif [ $(echo \"$gpa >= 3.3\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"A-\"\n    elif [ $(echo \"$gpa >= 3.0\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"B+\"\n    elif [ $(echo \"$gpa >= 2.7\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"B\"\n    elif [ $(echo \"$gpa >= 2.3\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"B-\"\n    elif [ $(echo \"$gpa >= 2.0\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"C+\"\n    elif [ $(echo \"$gpa >= 1.7\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"C\"\n    elif [ $(echo \"$gpa >= 1.3\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"C-\"\n    elif [ $(echo \"$gpa >= 1.0\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"D+\"\n    elif [ $(echo \"$gpa >= 0.7\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"D\"\n    elif [ $(echo \"$gpa >= 0.0\" | bc -l) -eq 1 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Write your code\
    \ here\n    # HINT: You can use the following if statement to check if a number\
    \ is\n    # greater than another number\n    # if [ \"$1\" -gt \"$2\" ]; then\n\
    \    #     echo \"$1 is greater than $2\"\n    # fi\n    if [ \"$1\" -gt \"4.0\"\
    \ ]; then\n        echo \"A+\"\n    elif [ \"$1\" -gt \"3.7\" ]; then\n      \
    \  echo \"A\"\n    elif [ \"$1\" -gt \"3.3\" ]; then\n        echo \"A-\"\n  \
    \  elif [ \"$1\" -gt \"3.0\" ]; then\n        echo \"B+\"\n    elif [ \"$1\" -gt\
    \ \"2.7\" ]; then\n        echo \"B\"\n    elif [ \"$1\" -gt \"2.3\" ]; then\n\
    \        echo \"B-\"\n    elif [ \"$1\" -gt \"2.0\" ]; then\n        echo \"C+\"\
    \n    elif [ \"$1\" -gt \"1.7\" ]; then\n        echo \"C\"\n    elif [ \"$1\"\
    \ -gt \"1.3\" ]; then\n        echo \"C-\"\n    elif [ \"$1\" -gt \"1.0\" ]; then\n\
    \        echo \"D+\"\n    elif [ \"$1\" -gt \"0.7\" ]; then\n        echo \"D\"\
    \n    elif [ \"$1\" -gt \"0.0\" ]; then\n        echo \"D-\"\n    else\n     \
    \   echo \"E\"\n    fi", "    # Write your code here\n    if [ $1 -ge 4.0 ]; then\n\
    \        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    local gpa=$1\n    if [ $gpa -ge 4.0 ]; then\n        echo \"A+\"\n\
    \    elif [ $gpa -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $gpa -ge 3.3\
    \ ]; then\n        echo \"A-\"\n    elif [ $gpa -ge 3.0 ]; then\n        echo\
    \ \"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $gpa\
    \ -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $gpa -ge 2.0 ]; then\n    \
    \    echo \"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $gpa -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $gpa -ge 1.0 ]; then\n\
    \        echo \"D+\"\n    elif [ $gpa -ge 0.7 ]; then\n        echo \"D\"\n  \
    \  elif [ $gpa -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"\
    E\"\n    fi", "    local gpa=$1\n    if [ $(echo \"$gpa >= 4.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A+\"\n    elif [ $(echo \"$gpa >= 3.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"$gpa >= 3.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"A-\"\n    elif [ $(echo \"$gpa >= 3.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B+\"\n    elif [ $(echo \"$gpa >= 2.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B\"\n    elif [ $(echo \"$gpa >= 2.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"B-\"\n    elif [ $(echo \"$gpa >= 2.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C+\"\n    elif [ $(echo \"$gpa >= 1.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C\"\n    elif [ $(echo \"$gpa >= 1.3\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"C-\"\n    elif [ $(echo \"$gpa >= 1.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D+\"\n    elif [ $(echo \"$gpa >= 0.7\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D\"\n    elif [ $(echo \"$gpa >= 0.0\" | bc -l) -eq\
    \ 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "   \
    \ if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi", "    # Write your code here\n    # You can use the\
    \ following variables:\n    # $1: The first argument passed to the function\n\
    \    # $2: The second argument passed to the function\n    # $3: The third argument\
    \ passed to the function\n    # $4: The fourth argument passed to the function\n\
    \    # $5: The fifth argument passed to the function\n    # $#: The number of\
    \ arguments passed to the function\n    # $@: All arguments passed to the function\n\
    \    # $?: The exit status of the last command\n    # $$: The process ID of the\
    \ current shell\n    # $USER: The username of the user running the script\n  \
    \  # $HOSTNAME: The hostname of the machine the script is running on\n    # $SECONDS:\
    \ The number of seconds since the script was started\n    # $RANDOM: Returns a\
    \ different random number each time is it referred to\n    # $LINENO: Returns\
    \ the current line number in the Bash script\n    # $BASH_VERSION: Returns the\
    \ version of Bash where the script is running\n    # $BASH_VERSINFO: Returns a\
    \ 6 element array with version information\n    # $PWD: The current working directory\
    \ as set by the cd command\n    # $MACHTYPE: Returns the system type on which\
    \ Bash is running\n    # $OSTYPE: Returns the operating system Bash is running\
    \ on\n    # $IFS: The Internal Field Separator that is used for word splitting\
    \ after\n    #       expansion and to split lines into words with the read builtin\n\
    \    #       command\n    # $DIRSTACK: An array variable containing the current\
    \ contents of the\n    #            directory stack\n    # $EUID: The numeric\
    \ effective user ID of the current user\n    # $UID: The numeric real user ID\
    \ of the current user\n    # $GROUPS: An array variable containing the list of\
    \ groups of which the\n    #          current user is a member\n    # $SHELLOPTS:\
    \ A colon-separated list of enabled shell options\n    # $BASH: The full pathname\
    \ used to execute the current instance of Bash\n    # $BASH_ENV: If this parameter\
    \ is set when Bash is invoked to execute a\n    #            shell script, its\
    \ value is expanded and used as the name of\n    #            a startup", "  \
    \  local grade=$1\n    if [ $grade -ge 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ $grade -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $grade -ge 3.3 ]; then\n\
    \        echo \"A-\"\n    elif [ $grade -ge 3.0 ]; then\n        echo \"B+\"\n\
    \    elif [ $grade -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $grade -ge\
    \ 2.3 ]; then\n        echo \"B-\"\n    elif [ $grade -ge 2.0 ]; then\n      \
    \  echo \"C+\"\n    elif [ $grade -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $grade -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $grade -ge 1.0 ];\
    \ then\n        echo \"D+\"\n    elif [ $grade -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ $grade -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    local gpa=$1\n    if [ $(echo \"$gpa > 4.0\" | bc)\
    \ -eq 1 ]; then\n        echo \"A+\"\n    elif [ $(echo \"$gpa > 3.7\" | bc) -eq\
    \ 1 ]; then\n        echo \"A\"\n    elif [ $(echo \"$gpa > 3.3\" | bc) -eq 1\
    \ ]; then\n        echo \"A-\"\n    elif [ $(echo \"$gpa > 3.0\" | bc) -eq 1 ];\
    \ then\n        echo \"B+\"\n    elif [ $(echo \"$gpa > 2.7\" | bc) -eq 1 ]; then\n\
    \        echo \"B\"\n    elif [ $(echo \"$gpa > 2.3\" | bc) -eq 1 ]; then\n  \
    \      echo \"B-\"\n    elif [ $(echo \"$gpa > 2.0\" | bc) -eq 1 ]; then\n   \
    \     echo \"C+\"\n    elif [ $(echo \"$gpa > 1.7\" | bc) -eq 1 ]; then\n    \
    \    echo \"C\"\n    elif [ $(echo \"$gpa > 1.3\" | bc) -eq 1 ]; then\n      \
    \  echo \"C-\"\n    elif [ $(echo \"$gpa > 1.0\" | bc) -eq 1 ]; then\n       \
    \ echo \"D+\"\n    elif [ $(echo \"$gpa > 0.7\" | bc) -eq 1 ]; then\n        echo\
    \ \"D\"\n    elif [ $(echo \"$gpa > 0.0\" | bc) -eq 1 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n   \
    \ # You can use the following function to convert a number to a string\n    #\
    \ echo $(number_to_string $1)\n    # You can use the following function to convert\
    \ a string to a number\n    # echo $(string_to_number $1)\n    # You can use the\
    \ following function to check if a string is a number\n    # echo $(is_number\
    \ $1)\n    # You can use the following function to check if a string is a number\n\
    \    # echo $(is_number $1)\n    # You can use the following function to check\
    \ if a string is a number\n    # echo $(is_number $1)\n    # You can use the following\
    \ function to check if a string is a number\n    # echo $(is_number $1)\n    #\
    \ You can use the following function to check if a string is a number\n    # echo\
    \ $(is_number $1)\n    # You can use the following function to check if a string\
    \ is a number\n    # echo $(is_number $1)\n    # You can use the following function\
    \ to check if a string is a number\n    # echo $(is_number $1)\n    # You can\
    \ use the following function to check if a string is a number\n    # echo $(is_number\
    \ $1)\n    # You can use the following function to check if a string is a number\n\
    \    # echo $(is_number $1)\n    # You can use the following function to check\
    \ if a string is a number\n    # echo $(is_number $1)\n    # You can use the following\
    \ function to check if a string is a number\n    # echo $(is_number $1)\n    #\
    \ You can use the following function to check if a string is a number\n    # echo\
    \ $(is_number $1)\n    # You can use the following function to check if a string\
    \ is a number\n    # echo $(is_number $1)\n    # You can use the following function\
    \ to check if a string is a number\n    # echo $(is_number $1)\n    # You can\
    \ use the following function to check if a string is a number\n    # echo $(is_number\
    \ $1)\n    # You can use the following function to check if a string is a number\n\
    \    # echo $(is_number $1", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\
    \n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\
    \n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ];\
    \ then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\
    \n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ];\
    \ then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\
    \n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    local\
    \ grade=$1\n    if [ \"$grade\" -ge 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ \"$grade\" -ge 3.7 ]; then\n        echo \"A\"\n    elif [ \"$grade\" -ge\
    \ 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$grade\" -ge 3.0 ]; then\n  \
    \      echo \"B+\"\n    elif [ \"$grade\" -ge 2.7 ]; then\n        echo \"B\"\n\
    \    elif [ \"$grade\" -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$grade\"\
    \ -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$grade\" -ge 1.7 ]; then\n\
    \        echo \"C\"\n    elif [ \"$grade\" -ge 1.3 ]; then\n        echo \"C-\"\
    \n    elif [ \"$grade\" -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$grade\"\
    \ -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"$grade\" -ge 0.0 ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge\
    \ 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo\
    \ \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge\
    \ 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge\
    \ 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo\
    \ \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n      \
    \  echo \"E\"\n    fi", "    if [ $1 -ge 4 ]; then\n        echo \"A+\"\n    elif\
    \ [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n  \
    \      echo \"A-\"\n    elif [ $1 -ge 3 ]; then\n        echo \"B+\"\n    elif\
    \ [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n  \
    \      echo \"B-\"\n    elif [ $1 -ge 2 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -ge 1 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -ge 0 ]; then\n    \
    \    echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the following command to convert a string\
    \ to a number:\n    # num=$(echo $1 | bc -l)\n    # Hint: You can use the following\
    \ command to convert a number to a string:\n    # str=$(printf \"%.2f\" $1)\n\
    \    # Hint: You can use the following command to compare two numbers:\n    #\
    \ if (( $(echo \"$1 > $2\" | bc -l) )); then\n    #     echo \"true\"\n    # else\n\
    \    #     echo \"false\"\n    # fi\n    # Hint: You can use the following command\
    \ to compare two strings:\n    # if [ \"$1\" == \"$2\" ]; then\n    #     echo\
    \ \"true\"\n    # else\n    #     echo \"false\"\n    # fi\n    # Hint: You can\
    \ use the following command to print a string:\n    # echo $1\n    # Hint: You\
    \ can use the following command to print a list:\n    # echo $1\n    # Hint: You\
    \ can use the following command to print a list of strings:\n    # echo $1\n \
    \   # Hint: You can use the following command to print a list of lists:\n    #\
    \ echo $1\n    # Hint: You can use the following command to print a list of lists\
    \ of strings:\n    # echo $1\n    # Hint: You can use the following command to\
    \ print a list of lists of lists:\n    # echo $1\n    # Hint: You can use the\
    \ following command to print a list of lists of lists of strings:\n    # echo\
    \ $1\n    # Hint: You can use the following command to print a list of lists of\
    \ lists of lists:\n    # echo $1\n    # Hint: You can use the following command\
    \ to print a list of lists of lists of lists of strings:\n    # echo $1\n    #\
    \ Hint: You can use the following command to print a list of lists of lists of\
    \ lists of lists:\n    # echo $1\n    # Hint: You can use the following command\
    \ to print a list of lists of lists of lists of lists of strings:\n    # echo\
    \ $1\n    # Hint: You can use the following command to print a", "    # Write\
    \ your code here\n    # You can use the following code to convert a string to\
    \ a number\n    # number=$(echo $1 | bc -l)\n    # You can use the following code\
    \ to convert a number to a string\n    # string=$(printf \"%.2f\" $1)\n    # You\
    \ can use the following code to print an array\n    # echo ${array[@]}\n    #\
    \ You can use the following code to print a string\n    # echo $string\n    #\
    \ You can use the following code to print a number\n    # echo $number\n    #\
    \ You can use the following code to print a string in double quotes\n    # echo\
    \ \"\\\"$string\\\"\"\n    # You can use the following code to print a string\
    \ in single quotes\n    # echo \"'$string'\"\n    # You can use the following\
    \ code to print a string in single quotes\n    # echo \"'$string'\"\n    # You\
    \ can use the following code to print a string in single quotes\n    # echo \"\
    '$string'\"\n    # You can use the following code to print a string in single\
    \ quotes\n    # echo \"'$string'\"\n    # You can use the following code to print\
    \ a string in single quotes\n    # echo \"'$string'\"\n    # You can use the following\
    \ code to print a string in single quotes\n    # echo \"'$string'\"\n    # You\
    \ can use the following code to print a string in single quotes\n    # echo \"\
    '$string'\"\n    # You can use the following code to print a string in single\
    \ quotes\n    # echo \"'$string'\"\n    # You can use the following code to print\
    \ a string in single quotes\n    # echo \"'$string'\"\n    # You can use the following\
    \ code to print a string in single quotes\n    # echo \"'$string'\"\n    # You\
    \ can use the following code to print a string in single quotes\n    # echo \"\
    '$string'\"\n    # You can use the following code to print a string in single\
    \ quotes\n    # echo \"'$string'\"\n    # You can use the following code to print\
    \ a string in single quotes\n    # echo \"'$string'\"\n    # You can use the following\
    \ code to print a string in single quotes\n    # echo \"'$string'\"\n    # You\
    \ can use the following code to print a string in single quotes\n    # echo \"\
    '$", "    # Write your code here\n    # Use the following command to output the\
    \ grade\n    # echo \"\\\"$GRADE\\\"\"\n    # Note that the grade should be in\
    \ quotes\n    # and the quotes should be escaped\n    # For example, if the grade\
    \ is A, the output should be \"\\\"A\\\"\"\n    # Hint: You can use if-elif-else\
    \ to solve this problem\n    #       You can also use case statement to solve\
    \ this problem\n    #       You can also use the following command to convert\
    \ a string to a number\n    #       NUMBER=$(echo \"$STRING\" | bc -l)\n    #\
    \       For example, if STRING=\"3.5\", then NUMBER=3.5\n    #       You can also\
    \ use the following command to compare two numbers\n    #       if (( $(echo \"\
    $NUMBER1 > $NUMBER2\" | bc -l) )); then\n    #           echo \"NUMBER1 is greater\
    \ than NUMBER2\"\n    #       fi\n    #       You can also use the following command\
    \ to compare two strings\n    #       if [ \"$STRING1\" = \"$STRING2\" ]; then\n\
    \    #           echo \"STRING1 is equal to STRING2\"\n    #       fi\n    # \
    \      You can also use the following command to compare two strings\n    #  \
    \     if [ \"$STRING1\" \\< \"$STRING2\" ]; then\n    #           echo \"STRING1\
    \ is less than STRING2\"\n    #       fi\n    #       You can also use the following\
    \ command to compare two strings\n    #       if [ \"$STRING1\" \\> \"$STRING2\"\
    \ ]; then\n    #           echo \"STRING1 is greater than STRING2\"\n    #   \
    \    fi\n    #       You can also use the following command to compare two strings\n\
    \    #       if [ \"$STRING1\" \\<= \"$STRING2\" ]; then\n    #           echo\
    \ \"STRING1 is less than or equal to STRING2\"\n    #       fi\n    #       You\
    \ can also use the following command to compare two strings\n    #       if [\
    \ \"$STRING1\" \\>= \"$STRING2\" ]; then\n    #           echo \"STRING1 is greater\
    \ than or equal to STRING2\"\n    #       fi\n    #", "    # Write your code here\n\
    \    # Use the following command to output the grade:\n    # echo \"\\\"$letter_grade\\\
    \"\"", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0 ]; then\n  \
    \      echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\n    elif\
    \ [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\n    elif\
    \ [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ]; then\n \
    \       echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\n    elif\
    \ [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ]; then\n \
    \       echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\n    elif\
    \ [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n  \
    \  fi", "    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"\
    A-\"\n    elif [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7\
    \ ]; then\n        echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"\
    B-\"\n    elif [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"\
    C-\"\n    elif [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"\
    D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your code here\n   \
    \ if [ $1 -ge 4.0 ]; then\n        echo '\"A+\"'\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo '\"A\"'\n    elif [ $1 -ge 3.3 ]; then\n        echo '\"A-\"'\n\
    \    elif [ $1 -ge 3.0 ]; then\n        echo '\"B+\"'\n    elif [ $1 -ge 2.7 ];\
    \ then\n        echo '\"B\"'\n    elif [ $1 -ge 2.3 ]; then\n        echo '\"\
    B-\"'\n    elif [ $1 -ge 2.0 ]; then\n        echo '\"C+\"'\n    elif [ $1 -ge\
    \ 1.7 ]; then\n        echo '\"C\"'\n    elif [ $1 -ge 1.3 ]; then\n        echo\
    \ '\"C-\"'\n    elif [ $1 -ge 1.0 ]; then\n        echo '\"D+\"'\n    elif [ $1\
    \ -ge 0.7 ]; then\n        echo '\"D\"'\n    elif [ $1 -ge 0.0 ]; then\n     \
    \   echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi", "    # Write your\
    \ code here\n    # Hint: Use the if-elif-else statement\n    if [ $1 -ge 4.0 ];\
    \ then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"A\"\
    \n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0 ];\
    \ then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"B\"\
    \n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0 ];\
    \ then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"C\"\
    \n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0 ];\
    \ then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"D\"\
    \n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"\
    E\"\n    fi", "    if [ $1 -eq 4.0 ]; then\n        echo \"A+\"\n    elif [ $1\
    \ -gt 3.7 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n       \
    \ echo \"A-\"\n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n    elif [\
    \ $1 -gt 2.7 ]; then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n    \
    \    echo \"B-\"\n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -gt 1.7 ]; then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n  \
    \      echo \"C-\"\n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n  \
    \      echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    if [ $1 -ge 4.0\
    \ ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n        echo \"\
    A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif [ $1 -ge 3.0\
    \ ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n        echo \"\
    B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif [ $1 -ge 2.0\
    \ ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n        echo \"\
    C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif [ $1 -ge 1.0\
    \ ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n        echo \"\
    D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n        echo\
    \ \"E\"\n    fi", "    # TODO: Write your code here\n    # HINT: You can use the\
    \ following if statement to check if a number is\n    # greater than another number:\n\
    \    # if [ \"$1\" -gt \"$2\" ]; then\n    #     echo \"$1 is greater than $2\"\
    \n    # fi\n    if [ \"$1\" -gt \"4.0\" ]; then\n        echo \"A+\"\n    elif\
    \ [ \"$1\" -gt \"3.7\" ]; then\n        echo \"A\"\n    elif [ \"$1\" -gt \"3.3\"\
    \ ]; then\n        echo \"A-\"\n    elif [ \"$1\" -gt \"3.0\" ]; then\n      \
    \  echo \"B+\"\n    elif [ \"$1\" -gt \"2.7\" ]; then\n        echo \"B\"\n  \
    \  elif [ \"$1\" -gt \"2.3\" ]; then\n        echo \"B-\"\n    elif [ \"$1\" -gt\
    \ \"2.0\" ]; then\n        echo \"C+\"\n    elif [ \"$1\" -gt \"1.7\" ]; then\n\
    \        echo \"C\"\n    elif [ \"$1\" -gt \"1.3\" ]; then\n        echo \"C-\"\
    \n    elif [ \"$1\" -gt \"1.0\" ]; then\n        echo \"D+\"\n    elif [ \"$1\"\
    \ -gt \"0.7\" ]; then\n        echo \"D\"\n    elif [ \"$1\" -gt \"0.0\" ]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi", "    # Write your\
    \ code here\n    # You can use the following function to convert a numerical grade\
    \ to a letter grade\n    # letter_grade $numerical_grade\n    # Example:\n   \
    \ # >>> letter_grade 4.0\n    # \"A+\"\n    # >>> letter_grade 3.5\n    # \"A-\"\
    \n    # >>> letter_grade 2.0\n    # \"C+\"\n    # >>> letter_grade 1.7\n    #\
    \ \"C-\"\n    # >>> letter_grade 0.0\n    # \"E\"\n    # >>> letter_grade 0.7\n\
    \    # \"D-\"\n    # >>> letter_grade 1.3\n    # \"C-\"\n    # >>> letter_grade\
    \ 2.3\n    # \"B-\"\n    # >>> letter_grade 3.3\n    # \"A-\"\n    # >>> letter_grade\
    \ 3.7\n    # \"A\"\n    # >>> letter_grade 4.0\n    # \"A+\"\n    # >>> letter_grade\
    \ 0.1\n    # \"E\"\n    # >>> letter_grade 0.6\n    # \"E\"\n    # >>> letter_grade\
    \ 0.8\n    # \"D-\"\n    # >>> letter_grade 1.2\n    # \"C-\"\n    # >>> letter_grade\
    \ 1.4\n    # \"C-\"\n    # >>> letter_grade 1.6\n    # \"C-\"\n    # >>> letter_grade\
    \ 1.8\n    # \"C-\"\n    # >>> letter_grade 2.2\n    # \"B-\"\n    # >>> letter_grade\
    \ 2.4\n    # \"B-\"\n    # >>> letter_grade 2.6\n    # \"B-\"\n    # >>> letter_grade\
    \ 2.8\n    # \"B-\"\n    # >>> letter_grade 3.2\n    # \"A-\"\n    # >>> letter_grade\
    \ 3.4\n    # \"A-\"\n    # >>> letter_grade 3.6\n    # \"A-\"\n    # >>> letter_grade\
    \ 3.8\n    # \"A\"\n    # >>> letter_grade 3.9\n    # \"A\"\n    # >>> letter_grade\
    \ 4.1\n    # \"A+\"\n    # >>> letter_grade 4.2\n    # \"A+\"\n"]
stop_tokens:
- "\n}"
