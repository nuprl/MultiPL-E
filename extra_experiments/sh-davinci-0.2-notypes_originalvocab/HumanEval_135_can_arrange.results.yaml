language: sh
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    for ((i=${#arr[@]}-2;\
    \ i>=0; i--)); do\n        if ((arr[i] >= arr[i+1])); then\n            continue\n\
    \        fi\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j]\
    \ < arr[i])); then\n                continue\n            fi\n            max_index=$j\n\
    \            break\n        done\n        break\n    done\n    echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ ${arr[i]} -gt $max_value ]]; then\n            max_value=${arr[i]}\n\
    \            max_index=$i\n        fi\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -lt ${arr[i]}\
    \ ]]; then\n                if [[ $j -gt $max_index ]]; then\n               \
    \     echo $i\n                    return\n                fi\n            fi\n\
    \        done\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgf5nh89_.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i max_i=0\n \
    \   local -i max_val=0\n    local -i min_val=0\n    local -i min_i=0\n    local\
    \ -i res=-1\n    for ((i=0; i<len; i++)); do\n        if ((arr[i] > max_val));\
    \ then\n            max_val=arr[i]\n            max_i=i\n        fi\n    done\n\
    \    for ((i=0; i<len; i++)); do\n        if ((arr[i] < min_val)); then\n    \
    \        min_val=arr[i]\n            min_i=i\n        fi\n    done\n    if ((max_i\
    \ > min_i)); then\n        res=$min_i\n    fi\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7x913vc.sh: line 21: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpi7x913vc.sh: line 27: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a array=($1)\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    local -i current_value=0\n    local -i current_index=0\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        current_value=${array[$i]}\n        current_index=$i\n  \
    \      for ((j=i+1; j<${#array[@]}; j++)); do\n            if [[ ${array[$j]}\
    \ -le $current_value ]]; then\n                if [[ $j -gt $max_index ]]; then\n\
    \                    max_index=$j\n                    max_value=${array[$j]}\n\
    \                fi\n            fi\n        done\n    done\n    echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=${#arr[@]}-1\n    local -i j\n    while ((i>0)); do\n        ((j=i-1))\n\
    \        while ((j>=0)); do\n            if ((arr[j]<=arr[i])); then\n       \
    \         ((j--))\n            else\n                break\n            fi\n \
    \       done\n        echo $j\n        ((i--))\n    done\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpfrpula45.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_i=0\n    local -i max_j=0\n    local -i max_diff=0\n    local -i diff=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n        \
    \    diff=${arr[j]}-${arr[i]}\n            if ((diff > max_diff)); then\n    \
    \            max_diff=$diff\n                max_i=$i\n                max_j=$j\n\
    \            fi\n        done\n    done\n    if ((max_diff == 0)); then\n    \
    \    echo \"-1\"\n    else\n        echo \"$max_i\"\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_idx=0\n\
    \    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n        if ((arr[i]\
    \ >= max)); then\n            max=arr[i]\n            max_idx=i\n        fi\n\
    \    done\n    echo \"$max_idx\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx48oivf_.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0iiumpot.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if ((\
    \ arr[j] < max )); then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        if (( max_index != i )); then\n       \
    \     arr[max_index]=${arr[i]}\n            arr[i]=$max\n        fi\n    done\n\
    \    for ((i=0; i<len-1; i++)); do\n        if (( arr[i] > arr[i+1] )); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjh1drtf0.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      echo \"$((i-1))\"\n      return\n    fi\n  done\n  echo \"-1\"\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local arr=($1)\n\
    \  local i=0\n  local j=0\n  local k=0\n  local max=0\n  local max_i=0\n  local\
    \ max_j=0\n  local max_k=0\n  local max_arr=()\n  local max_arr_i=()\n  local\
    \ max_arr_j=()\n  local max_arr_k=()\n  local max_arr_len=0\n  local max_arr_i_len=0\n\
    \  local max_arr_j_len=0\n  local max_arr_k_len=0\n  local len=${#arr[@]}\n  for\
    \ ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      for ((k=j+1;\
    \ k<len; k++)); do\n        if [[ ${arr[i]} -lt ${arr[j]} && ${arr[j]} -lt ${arr[k]}\
    \ ]]; then\n          max_arr[max_arr_len++]=${arr[i]}\n          max_arr_i[max_arr_i_len++]=$i\n\
    \          max_arr_j[max_arr_j_len++]=$j\n          max_arr_k[max_arr_k_len++]=$k\n\
    \        fi\n      done\n    done\n  done\n  if [[ $max_arr_len -eq 0 ]]; then\n\
    \    echo \"-1\"\n  else\n    max=${max_arr[0]}\n    max_i=${max_arr_i[0]}\n \
    \   max_j=${max_arr_j[0]}\n    max_k=${max_arr_k[0]}\n    for ((i=1; i<max_arr_len;\
    \ i++)); do\n      if [[ ${max_arr[i]} -gt $max ]]; then\n        max=${max_arr[i]}\n\
    \        max_i=${max_arr_i[i]}\n        max_j=${max_arr_j[i]}\n        max_k=${max_arr_k[i]}\n\
    \      fi\n    done\n    echo \"$max_k\"\n\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpjvrlirp6.sh: line 58: syntax error near unexpected token `}''\n/tmp/tmpjvrlirp6.sh:
    line 58: `}''\n"'
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i index=-1\n\
    \    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        if ((arr[i] >= max)); then\n\
    \            max=arr[i]\n            index=i\n        fi\n    done\n    echo \"\
    $index\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgk4pwye4.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local max_index=-1\n  local max_value=${arr[0]}\n  for ((i=1; i<${#arr[@]};\
    \ i++)); do\n    if ((arr[i] < max_value)); then\n      max_index=$i\n      max_value=${arr[i]}\n\
    \    fi\n  done\n  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpqoz0bog5.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i i\n    for ((i=${#arr[@]}-1;\
    \ i>=0; i--)); do\n        if (( arr[i] < arr[i-1] )); then\n            echo\
    \ \"$((i-1))\"\n            return\n        fi\n    done\n    echo \"-1\"\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local max_index=-1\n    for ((i=${#arr[@]}-1; i>0; i--)); do\n    \
    \    if ((arr[i] < arr[i-1])); then\n            max_index=$i\n        else\n\
    \            break\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i]>=max));\
    \ then\n      max=arr[i]\n      max_i=i\n    fi\n  done\n  echo $max_i\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzwu9ltl6.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i max_len_k=0\n\
    \    local -i max_len_l=0\n    local -i max_len_m=0\n    local -i max_len_n=0\n\
    \    local -i max_len_o=0\n    local -i max_len_p=0\n    local -i max_len_q=0\n\
    \    local -i max_len_r=0\n    local -i max_len_s=0\n    local -i max_len_t=0\n\
    \    local -i max_len_u=0\n    local -i max_len_v=0\n    local -i max_len_w=0\n\
    \    local -i max_len_x=0\n    local -i max_len_y=0\n    local -i max_len_z=0\n\
    \    local -i max_len_aa=0\n    local -i max_len_ab=0\n    local -i max_len_ac=0\n\
    \    local -i max_len_ad=0\n    local -i max_len_ae=0\n    local -i max_len_af=0\n\
    \    local -i max_len_ag=0\n    local -i max_len_ah=0\n    local -i max_len_ai=0\n\
    \    local -i max_len_aj=0\n    local -i max_len_ak=0\n    local -i max_len_al=0\n\
    \    local -i max_len_am=0\n    local -i max_len_an=0\n    local -i max_len_ao=0\n\
    \    local -i max_len_ap=0\n    local -i max_len_aq=0\n    local -i max_len_ar=0\n\
    \    local\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=${#arr[@]}-1\n  while ((i > 0)); do\n    ((arr[i] < arr[i-1])) &&\
    \ break\n    ((i--))\n  done\n  echo $i\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpbb8hawn4.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j]\
    \ < arr[i])); then\n        if ((j > max)); then\n          max=$j\n        fi\n\
    \      fi\n    done\n  done\n  if ((max == 0)); then\n    echo \"-1\"\n  else\n\
    \    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i\n  local -i j\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  for ((i=0; i<max_index;\
    \ i++)); do\n    for ((j=i+1; j<=max_index; j++)); do\n      if ((arr[j] < arr[i]));\
    \ then\n        echo $i\n        return\n      fi\n    done\n  done\n  echo -1\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpqnplhn8_.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if [[ ${arr[i]} -le $max_value ]];\
    \ then\n      max_index=$i\n      max_value=${arr[i]}\n    fi\n  done\n  echo\
    \ $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8wy77mk3.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_i=-1\n    local -i\
    \ max_j=-1\n    local -i max_diff=-1\n    local -i diff=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[j]\
    \ < arr[i])); then\n                diff=$((j-i))\n                if ((diff >\
    \ max_diff)); then\n                    max_diff=$diff\n                    max_i=$i\n\
    \                    max_j=$j\n                fi\n            fi\n        done\n\
    \    done\n    if ((max_i == -1)); then\n        echo -1\n    else\n        echo\
    \ $max_j\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ max=0\n    local -i max_i=0\n    local -i max_j=0\n    for ((i=0; i<len; i++));\
    \ do\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[j] < arr[i]));\
    \ then\n                if ((j-i > max)); then\n                    max=j-i\n\
    \                    max_i=i\n                    max_j=j\n                fi\n\
    \            fi\n        done\n    done\n    if ((max_i == 0 && max_j == 0));\
    \ then\n        echo -1\n    else\n        echo $max_i\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmple52dtwi.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i prev_value=0\n    for i in \"${!arr[@]}\"; do\n\
    \        if (( i > 0 )); then\n            prev_value=${arr[i-1]}\n          \
    \  if (( arr[i] <= prev_value )); then\n                if (( arr[i] > max_value\
    \ )); then\n                    max_value=${arr[i]}\n                    max_index=$i\n\
    \                fi\n            fi\n        fi\n    done\n    echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i\n  for ((i=${#arr[@]}-1; i>0; i--)); do\n    if ((arr[i] <\
    \ arr[i-1])); then\n      echo \"$i\"\n      return\n    fi\n  done\n  echo \"\
    -1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_i=-1\n  local -i max_j=-1\n\
    \  local -i max_diff=-1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1;\
    \ j<${#arr[@]}; j++)); do\n      if ((arr[j] < arr[i] && j - i > max_diff)); then\n\
    \        max_i=$i\n        max_j=$j\n        max_diff=$j-$i\n      fi\n    done\n\
    \  done\n  echo $max_j\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr\n  arr=($1)\n\
    \  local i\n  for ((i=${#arr[@]}-1; i>0; i--)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      echo $i\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local max_index=-1\n  local max_value=${arr[0]}\n  for ((i=1; i<${#arr[@]};\
    \ i++)); do\n    if [[ ${arr[i]} -le $max_value ]]; then\n      max_index=$i\n\
    \      max_value=${arr[i]}\n    fi\n  done\n  echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local max_index=0\n  local max_value=0\n  for\
    \ ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] < max_value)); then\n   \
    \   echo \"$max_index\"\n      return\n    fi\n    if ((arr[i] > max_value));\
    \ then\n      max_value=${arr[i]}\n      max_index=$i\n    fi\n  done\n  echo\
    \ \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwrdhae3e.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpwrdhae3e.sh: line 22: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_i=-1\n    local -i max_j=-1\n    local -i max_diff=-1\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[j]\
    \ < arr[i])); then\n                if ((j - i > max_diff)); then\n          \
    \          max_diff=j-i\n                    max_i=i\n                    max_j=j\n\
    \                fi\n            fi\n        done\n    done\n    if ((max_i ==\
    \ -1)); then\n        echo -1\n    else\n        echo $max_j\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value < max_value)); then\n\
    \            echo \"$max_index\"\n            return\n        fi\n        if ((curr_value\
    \ > max_value)); then\n            max_value=$curr_value\n            max_index=$i\n\
    \        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmplfnmnarh.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($@)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ max=0\n    local -i max_i=0\n    for ((i=len-1; i>=0; i--)); do\n        if\
    \ ((arr[i] >= max)); then\n            max=arr[i]\n            max_i=i\n     \
    \   fi\n    done\n    echo $max_i\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($@)\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max=0\n  \
    \  local -i n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        max=${arr[i]}\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -le max ]];\
    \ then\n                max=${arr[j]}\n                k=j\n            fi\n \
    \       done\n        if [[ k -gt 0 ]]; then\n            echo $k\n          \
    \  return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        max=${arr[i]}\n        max_index=$i\n\
    \        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( ${arr[j]} < max\
    \ )); then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        if (( max_index != i )); then\n           \
    \ arr[max_index]=${arr[i]}\n            arr[i]=$max\n        fi\n    done\n  \
    \  for ((i=0; i<${#arr[@]}-1; i++)); do\n        if (( ${arr[i]} > ${arr[i+1]}\
    \ )); then\n            echo $i\n            return\n        fi\n    done\n  \
    \  echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i n=${#arr[@]}\n  local -i max_index=-1\n  local\
    \ -i max_value=-1\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp06tyxzyf.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local k=0\n  local max_index=0\n  local max_value=0\n\
    \  local -a max_indices=()\n  local -a max_values=()\n  local -a max_indices_stack=()\n\
    \  local -a max_values_stack=()\n  local -a max_indices_queue=()\n  local -a max_values_queue=()\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    max_indices_stack=()\n    max_values_stack=()\n\
    \    max_indices_queue=()\n    max_values_queue=()\n    max_index=$i\n    max_value=${arr[$i]}\n\
    \    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[$j]} -gt $max_value\
    \ ]]; then\n        max_index=$j\n        max_value=${arr[$j]}\n      fi\n   \
    \   max_indices_stack+=($max_index)\n      max_values_stack+=($max_value)\n  \
    \    max_indices_queue+=($max_index)\n      max_values_queue+=($max_value)\n \
    \   done\n    for ((k=${#max_indices_stack[@]}-1; k>=0; k--)); do\n      max_indices+=(${max_indices_stack[$k]})\n\
    \      max_values+=(${max_values_stack[$k]})\n    done\n    for ((k=0; k<${#max_indices_queue[@]};\
    \ k++)); do\n      max_indices+=(${max_indices_queue[$k]})\n      max_values+=(${max_values_queue[$k]})\n\
    \    done\n  done\n  for ((i=0; i<${#max_indices[@]}; i++)); do\n    if [[ ${max_values[$i]}\
    \ -gt ${arr[$i]} ]]; then\n      echo \"${max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmps9_mf3zv.sh: line 65: unexpected EOF while looking for matching
    `"\''\n/tmp/tmps9_mf3zv.sh: line 69: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local max=0\n  local max_index=0\n  for ((i=${#arr[@]}-1;\
    \ i>=0; i--)); do\n    if ((arr[i] < max)); then\n      echo \"$max_index\"\n\
    \      return\n    fi\n    if ((arr[i] > max)); then\n      max=${arr[i]}\n  \
    \    max_index=$i\n    fi\n  done\n  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz52t3z5z.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpz52t3z5z.sh: line 22: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    for\
    \ ((i=${#arr[@]}-2; i>=0; i--)); do\n        for ((j=${#arr[@]}-1; j>i; j--));\
    \ do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                if [[\
    \ j -gt max_index ]]; then\n                    max_index=$j\n               \
    \ fi\n            fi\n        done\n    done\n    echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_idx=-1\n  local -i max_val=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] < max_val)); then\n\
    \      echo \"${max_idx}\"\n      return\n    fi\n    if ((arr[i] > max_val));\
    \ then\n      max_val=${arr[i]}\n      max_idx=${i}\n    fi\n  done\n  echo \"\
    -1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3h1ywny0.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmp3h1ywny0.sh: line 22: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=1\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    while (( i < len )); do\n \
    \       if (( arr[i] < arr[j] )); then\n            if (( arr[j] > max_value ));\
    \ then\n                max_value=${arr[j]}\n                max_index=${j}\n\
    \            fi\n        fi\n        (( i++ ))\n        (( j++ ))\n    done\n\
    \    echo \"${max_index}\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpubac29lp.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_index=-1\n    local -i max_value=-1\n    for ((i=n-1; i>=0; i--)); do\n\
    \        if ((arr[i] >= max_value)); then\n            max_value=arr[i]\n    \
    \        max_index=i\n        fi\n    done\n    echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuxy0ynhg.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value < max_value)); then\n\
    \            echo \"$max_index\"\n            return\n        fi\n        if ((curr_value\
    \ > max_value)); then\n            max_value=$curr_value\n            max_index=$i\n\
    \        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmplfnmnarh.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    max=${arr[i]}\n\
    \    max_i=$i\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] < max)); then\n\
    \        max=${arr[j]}\n        max_i=$j\n      fi\n    done\n    if ((max_i !=\
    \ i)); then\n      arr[max_i]=${arr[i]}\n      arr[i]=$max\n    fi\n  done\n \
    \ for ((i=1; i<len; i++)); do\n    if ((arr[i] < arr[i-1])); then\n      echo\
    \ $((i-1))\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3uzxyds9.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i prev_value=0\n  local -i curr_value=0\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    curr_value=${arr[i]}\n    if ((curr_value < prev_value)); then\n\
    \      if ((curr_value > max_value)); then\n        max_value=curr_value\n   \
    \     max_index=i\n      fi\n    fi\n    prev_value=curr_value\n  done\n  echo\
    \ \"$max_index\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvcjqxo5j.sh: line 20: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        if [[ ${arr[i]} -ge $max_value\
    \ ]]; then\n            max_value=${arr[i]}\n            max_index=$i\n      \
    \  fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpi54dd49i.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i res=-1\n    while (( i < n\
    \ )); do\n        j=$(( i + 1 ))\n        max=${arr[i]}\n        max_index=$i\n\
    \        while (( j < n )); do\n            if (( arr[j] < max )); then\n    \
    \            max=${arr[j]}\n                max_index=$j\n            fi\n   \
    \         j=$(( j + 1 ))\n        done\n        if (( max_index > i )); then\n\
    \            res=$max_index\n            break\n        fi\n        i=$(( i +\
    \ 1 ))\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xu611mx.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n \
    \       if ((arr[i] < arr[i+1])); then\n            for ((j=i+1; j<n; j++)); do\n\
    \                if ((arr[j] < arr[i+1])); then\n                    if ((arr[j]\
    \ > max_value)); then\n                        max_value=${arr[j]}\n         \
    \               max_index=$j\n                    fi\n                fi\n   \
    \         done\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyfz_1ib1.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j]\
    \ < arr[i])); then\n        if ((j > max)); then\n          max=$j\n        fi\n\
    \      fi\n    done\n  done\n  if ((max == 0)); then\n    echo -1\n  else\n  \
    \  echo $max\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i\n    for ((i=${#arr[@]}-1; i>0; i--)); do\n        if ((arr[i]\
    \ < arr[i-1])); then\n            echo \"$i\"\n            return\n        fi\n\
    \    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=${#arr[@]}-1\n  while (( i > 0 )); do\n    (( arr[i] < arr[i-1]\
    \ )) && break\n    (( i-- ))\n  done\n  echo \"$i\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpnorpgx16.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i arr_len=${#arr[@]}\n  for ((i=arr_len-1; i>=0; i--)); do\n    if [[\
    \ ${arr[i]} -le $max_value ]]; then\n      max_index=$i\n      max_value=${arr[i]}\n\
    \    fi\n  done\n  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmppwt3rlcd.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i result=-1\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] >\
    \ max)); then\n            max=${arr[i]}\n            max_index=$i\n        fi\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] < max)); then\n\
    \            min=${arr[i]}\n            min_index=$i\n            break\n    \
    \    fi\n    done\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] < max &&\
    \ arr[i] > min)); then\n            min=${arr[i]}\n            min_index=$i\n\
    \        fi\n    done\n    for ((i=min_index+1; i<n; i++)); do\n        if ((arr[i]\
    \ < min)); then\n            result=$i\n            break\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphqymg9nj.sh: line 22: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmphqymg9nj.sh: line 28: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n/tmp/tmphqymg9nj.sh: line 35:
    ((: 1 2 4 3 5: syntax error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local i=0\n    local j=0\n    local max_index=-1\n    local max_value=${arr[0]}\n\
    \    while (( i < ${#arr[@]} )); do\n        if (( arr[i] < max_value )); then\n\
    \            max_index=$i\n            max_value=${arr[i]}\n        fi\n     \
    \   (( i++ ))\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpddstmksn.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local k=0\n  local max_index=-1\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if\
    \ [[ ${arr[j]} -le ${arr[i]} ]]; then\n        if [[ $j -gt $max_index ]]; then\n\
    \          max_index=$j\n        fi\n      fi\n    done\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value < max_value)); then\n\
    \            echo \"$max_index\"\n            return\n        else\n         \
    \   max_value=$curr_value\n            max_index=$i\n        fi\n    done\n  \
    \  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsjjjm8ba.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n\
    \  local -i max_value=0\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -lt\
    \ max_value ]]; then\n      for ((j=i+1; j<len; j++)); do\n        if [[ ${arr[j]}\
    \ -lt ${arr[i]} ]]; then\n          if [[ $j -gt max_index ]]; then\n        \
    \    max_index=$j\n            max_value=${arr[j]}\n          fi\n        fi\n\
    \      done\n    else\n      max_value=${arr[i]}\n      max_index=$i\n    fi\n\
    \  done\n  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9755n043.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmp9755n043.sh: line 29: 1 2 4 3 5: syntax error
    in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local max_index=-1\n  for ((i=${#arr[@]}-1;\
    \ i>0; i--)); do\n    if ((arr[i] < arr[i-1])); then\n      for ((j=i-1; j>=0;\
    \ j--)); do\n        if ((arr[j] <= arr[i])); then\n          max_index=$j\n \
    \         break\n        fi\n      done\n      break\n    fi\n  done\n  echo \"\
    $max_index\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i max_index=-1\n\
    \  local -i max_value=0\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwfdvjovr.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=0 j=1\n  while (( j < ${#arr[@]} )); do\n    if (( arr[j] < arr[i]\
    \ )); then\n      (( i = j ))\n    fi\n    (( j++ ))\n  done\n  if (( i == ${#arr[@]}\
    \ - 1 )); then\n    echo \"-1\"\n  else\n    echo \"$i\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpm01smh_f.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i]\
    \ >= max_value)); then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n\
    \  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl38no83x.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local max_index=-1\n    for ((i=${#arr[@]}-1; i>0; i--)); do\n    \
    \    if ((arr[i] < arr[i-1])); then\n            max_index=$i\n        else\n\
    \            break\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n\
    \  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local\
    \ ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n\
    \  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local\
    \ av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n\
    \  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local\
    \ bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n\
    \  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local\
    \ br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n\
    \  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local\
    \ cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n  local cg=0\n  local ch=0\n\
    \  local ci=0\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_idx=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    max=${arr[i]}\n\
    \    max_idx=$i\n    for ((j=i+1; j<len; j++)); do\n      if (( arr[j] < max ));\
    \ then\n        max=${arr[j]}\n        max_idx=$j\n      fi\n    done\n    if\
    \ (( max_idx != i )); then\n      arr[max_idx]=${arr[i]}\n      arr[i]=$max\n\
    \    fi\n  done\n  for ((i=0; i<len-1; i++)); do\n    if (( arr[i] > arr[i+1]\
    \ )); then\n      echo $i\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxqo6omiq.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0 j=0\n    local -i max_i=0 max_j=0\n    local -i max_diff=0\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if ((arr[j] < arr[i])); then\n                if ((j - i > max_diff));\
    \ then\n                    max_diff=j-i\n                    max_i=i\n      \
    \              max_j=j\n                fi\n            fi\n        done\n   \
    \ done\n    if ((max_diff > 0)); then\n        echo \"$max_i\"\n    else\n   \
    \     echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\
    \  for ((i=len-1; i>=0; i--)); do\n    for ((j=i-1; j>=0; j--)); do\n      if\
    \ [[ ${arr[j]} -le ${arr[i]} ]]; then\n        if [[ $j -gt $max ]]; then\n  \
    \        max=$j\n        fi\n      fi\n    done\n  done\n  if [[ $max -eq 0 ]];\
    \ then\n    echo \"-1\"\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($@)\n\
    \    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        max=${arr[i]}\n        max_index=$i\n\
    \        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -le\
    \ $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        if [[ $max_index -ne $i ]]; then\n    \
    \        temp=${arr[i]}\n            arr[i]=${arr[max_index]}\n            arr[max_index]=$temp\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}-1; i++)); do\n        if [[\
    \ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local max=0\n  local max_index=0\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    max=${arr[i]}\n    max_index=$i\n    for ((j=i+1;\
    \ j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -le $max ]]; then\n        max=${arr[j]}\n\
    \        max_index=$j\n      fi\n    done\n    if [[ $max_index -ne $i ]]; then\n\
    \      echo $max_index\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i current_value=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    current_value=${arr[$i]}\n\
    \    if ((current_value > max_value)); then\n      max_value=$current_value\n\
    \      max_index=$i\n    fi\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n  \
    \  current_value=${arr[$i]}\n    if ((current_value < max_value)); then\n    \
    \  max_value=$current_value\n      max_index=$i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6exoi_hi.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if (( arr[i] <\
    \ arr[i-1] )); then\n      continue\n    fi\n    for ((j=i+1; j<len; j++)); do\n\
    \      if (( arr[j] < arr[i-1] )); then\n        break\n      fi\n      if ((\
    \ arr[j] > max_value )); then\n        max_value=${arr[j]}\n        max_index=$j\n\
    \      fi\n    done\n    if (( max_index > -1 )); then\n      echo \"$max_index\"\
    \n      return\n    fi\n  done\n  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnz7zw_yw.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    local -i prev_value=0\n    local -i curr_value=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        curr_value=${arr[$i]}\n        if ((curr_value >= prev_value));\
    \ then\n            if ((curr_value > max_value)); then\n                max_value=$curr_value\n\
    \                max_index=$i\n            fi\n        fi\n        prev_value=$curr_value\n\
    \    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpashgchv3.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a array=($1)\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    local -i n=${#array[@]}\n    for ((i=n-1; i>=0; i--)); do\n        if ((array[i]\
    \ >= max_value)); then\n            max_value=array[i]\n            max_index=i\n\
    \        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if ((\
    \ arr[j] < max )); then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        if (( max_index != i )); then\n       \
    \     arr[max_index]=${arr[i]}\n            arr[i]=$max\n        fi\n    done\n\
    \    for ((i=1; i<len; i++)); do\n        if (( arr[i] < arr[i-1] )); then\n \
    \           echo $((i-1))\n            return\n        fi\n    done\n    echo\
    \ -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb6f1u63q.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i\
    \ max_j=0\n    local -i max_diff=0\n    local -i diff=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[j]\
    \ < arr[i])); then\n                diff=$((arr[i] - arr[j]))\n              \
    \  if ((diff > max_diff)); then\n                    max_diff=$diff\n        \
    \            max_i=$i\n                    max_j=$j\n                fi\n    \
    \        fi\n        done\n    done\n    if ((max_diff == 0)); then\n        echo\
    \ -1\n    else\n        echo $max_j\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\
    \  local -i max_index=0\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i] >=\
    \ max)); then\n      max=arr[i]\n      max_index=i\n    fi\n    if ((arr[i] <\
    \ arr[i-1])); then\n      echo \"$max_index\"\n      return\n    fi\n  done\n\
    \  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5dnizfoy.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmp5dnizfoy.sh: line 23: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      if ((max_value < arr[i-1])); then\n        max_value=arr[i-1]\n\
    \        max_index=i-1\n      fi\n    fi\n  done\n  echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2bt6ap2f.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local len=${#arr[@]}\n  local max_index=-1\n  local max_value=${arr[0]}\n\
    \  while [ $i -lt $len ]; do\n    if [ ${arr[$i]} -lt $max_value ]; then\n   \
    \   max_index=$i\n      max_value=${arr[$i]}\n    fi\n    i=$((i+1))\n  done\n\
    \  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp_2cd0dd8.sh: line 18: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if ((arr[i] < arr[i-1])); then\n            if ((max_value < arr[i-1]));\
    \ then\n                max_value=arr[i-1]\n                max_index=i-1\n  \
    \          fi\n        fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz38cvu7v.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i i=${#arr[@]}\n    while ((i--)); do\n        if ((arr[i] <= arr[i-1]));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    for\
    \ ((i=${#arr[@]}-2; i>=0; i--)); do\n        for ((j=${#arr[@]}-1; j>i; j--));\
    \ do\n            if [[ ${arr[j]} -le ${arr[i]} ]]; then\n                if [[\
    \ j -gt max_index ]]; then\n                    max_index=$j\n               \
    \ fi\n            fi\n        done\n    done\n    echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i len=${#arr[@]}\n\
    \    local -i res=-1\n    for ((i=0; i<len; i++)); do\n        max=0\n       \
    \ for ((j=i+1; j<len; j++)); do\n            if (( arr[j] < arr[i] )); then\n\
    \                if (( arr[j] > max )); then\n                    max=arr[j]\n\
    \                    res=j\n                fi\n            fi\n        done\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local i=0\n  local max_index=-1\n  local max_value=${arr[0]}\n  for ((i=1;\
    \ i<${#arr[@]}; i++)); do\n    if ((arr[i] < max_value)); then\n      max_index=$i\n\
    \      max_value=${arr[i]}\n    fi\n  done\n  echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmppf0rgrj7.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        max_index=i\n        for ((j=i+1; j<len; j++)); do\n            if [[\
    \ ${arr[j]} -le $max ]]; then\n                max=${arr[j]}\n               \
    \ max_index=j\n            fi\n        done\n        if [[ $max_index -ne $i ]];\
    \ then\n            arr[max_index]=${arr[i]}\n            arr[i]=$max\n      \
    \  fi\n    done\n    for ((i=0; i<len-1; i++)); do\n        if [[ ${arr[i]} -gt\
    \ ${arr[i+1]} ]]; then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt_6858_w.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_i=-1\n    local -i max_j=-1\n    local -i max_diff=-1\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]}\
    \ -lt ${arr[i]} ]]; then\n                local -i diff=$((j-i))\n           \
    \     if [[ $diff -gt $max_diff ]]; then\n                    max_diff=$diff\n\
    \                    max_i=$i\n                    max_j=$j\n                fi\n\
    \            fi\n        done\n    done\n    if [[ $max_i -eq -1 ]]; then\n  \
    \      echo -1\n    else\n        echo $max_j\n    fi\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=($1)\n\
    \  local -i i=${#arr[@]}-1\n  while ((i > 0)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      echo $i\n      return\n    fi\n    ((i--))\n  done\n  echo -1\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i]\
    \ < max_value)); then\n      echo \"$max_index\"\n      return\n    fi\n    if\
    \ ((arr[i] > max_value)); then\n      max_value=arr[i]\n      max_index=i\n  \
    \  fi\n  done\n  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaeo5_gmd.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpaeo5_gmd.sh: line 23: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=1\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  while (( i < n )); do\n    if (( arr[i] < arr[j] ));\
    \ then\n      if (( arr[j] > max_value )); then\n        max_value=${arr[j]}\n\
    \        max_index=${j}\n      fi\n    fi\n    (( i++ ))\n    (( j++ ))\n  done\n\
    \  echo \"${max_index}\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6a0ei4yo.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i max_index=-1\n    for ((i=0; i<len-1; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if ((arr[j] <= arr[i] && j > max_index)); then\n    \
    \            max_index=$j\n            fi\n        done\n    done\n    echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n        if ((arr[i]\
    \ >= max)); then\n            max=arr[i]\n            max_index=i\n        fi\n\
    \    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnok61s0i.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i max_index=-1\n    for ((i=len-2; i>=0; i--)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [[ ${arr[j]} -le ${arr[i]} ]]; then\n            \
    \    if [[ j -gt max_index ]]; then\n                    max_index=$j\n      \
    \          fi\n            fi\n        done\n    done\n    echo $max_index\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local max_index=-1\n  local max_value=${arr[0]}\n  local\
    \ len=${#arr[@]}\n  while (( i < len )); do\n    if (( arr[i] < max_value ));\
    \ then\n      max_index=$i\n      max_value=${arr[i]}\n    fi\n    (( i++ ))\n\
    \  done\n  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61lz1yl2.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local i=0\n    local j=1\n    local max_index=-1\n    local max_value=${arr[0]}\n\
    \    while [ $j -lt ${#arr[@]} ]; do\n        if [ ${arr[$j]} -lt $max_value ];\
    \ then\n            max_index=$j\n            max_value=${arr[$j]}\n        fi\n\
    \        ((j++))\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpbpwsilx1.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n\
    \        if ((arr[i] >= max_value)); then\n            max_value=arr[i]\n    \
    \        max_index=i\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9j57j0gt.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr\n  arr=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n  local -i i\n  for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n    if ((arr[i] < arr[i-1])); then\n      echo \"$i\"\n      return\n  \
    \  fi\n  done\n  echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local arr=($@)\n\
    \    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n\
    \    local result=-1\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        if [[\
    \ ${arr[i]} -ge $max_value ]]; then\n            max_value=${arr[i]}\n       \
    \     max_index=$i\n        fi\n        if [[ ${arr[i]} -lt $max_value ]]; then\n\
    \            result=$i\n            break\n        fi\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a array=($@)\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    local -i current_value=0\n    local -i current_index=0\n    local -i length=${#array[@]}\n\
    \    for ((i=0; i<length; i++)); do\n        current_value=${array[i]}\n     \
    \   current_index=i\n        for ((j=i+1; j<length; j++)); do\n            if\
    \ [[ ${array[j]} -le current_value ]]; then\n                if [[ ${array[j]}\
    \ -gt max_value ]]; then\n                    max_value=${array[j]}\n        \
    \            max_index=j\n                fi\n            fi\n        done\n \
    \       if [[ max_index -ne -1 ]]; then\n            echo \"$max_index\"\n   \
    \         return\n        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0iiumpot.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_i=-1\n    local -i max_j=-1\n    local -i max_diff=-1\n    local -i diff=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n        \
    \    diff=${arr[j]}-${arr[i]}\n            if ((diff>0 && diff>max_diff)); then\n\
    \                max_i=$i\n                max_j=$j\n                max_diff=$diff\n\
    \            fi\n        done\n    done\n    if ((max_i==-1)); then\n        echo\
    \ -1\n    else\n        echo $max_j\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_i=-1\n    local -i\
    \ max_j=-1\n    local -i max_diff=-1\n    local -i diff=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[j]\
    \ < arr[i])); then\n                diff=$((arr[i] - arr[j]))\n              \
    \  if ((diff > max_diff)); then\n                    max_diff=$diff\n        \
    \            max_i=$i\n                    max_j=$j\n                fi\n    \
    \        fi\n        done\n    done\n    if ((max_i == -1)); then\n        echo\
    \ -1\n    else\n        echo $max_j\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i]\
    \ < arr[i-1])); then\n            for ((j=0; j<i; j++)); do\n                if\
    \ ((arr[j] < arr[i]) && ((arr[j] > max_value))); then\n                    max_value=arr[j]\n\
    \                    max_index=j\n                fi\n            done\n     \
    \   fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_q5mwopr.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i prev_value=0\n    local -i curr_value=0\n    local\
    \ -i curr_index=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        curr_value=${arr[$i]}\n\
    \        if ((curr_value > prev_value)); then\n            prev_value=$curr_value\n\
    \            max_value=$curr_value\n            max_index=$i\n        elif ((curr_value\
    \ < prev_value)); then\n            if ((curr_value > max_value)); then\n    \
    \            max_value=$curr_value\n                max_index=$i\n           \
    \ fi\n        fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgl7_ngqh.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=${#arr[@]}-1\n    while (( i > 0 )); do\n        if (( arr[i]\
    \ < arr[i-1] )); then\n            echo $(( i-1 ))\n            return\n     \
    \   fi\n        (( i-- ))\n    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpmjslodu9.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=0\n  local -i j=0\n  local -i max_i=-1\n  local -i max_j=-1\n  local\
    \ -i max_diff=-1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n      if ((arr[j] < arr[i] && j - i > max_diff)); then\n        max_i=$i\n\
    \        max_j=$j\n        max_diff=$j-$i\n      fi\n    done\n  done\n  echo\
    \ $max_j\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpkjmslc1s.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -lt\
    \ ${arr[i]} ]]; then\n        if [[ j -gt max_index ]]; then\n          max_index=$j\n\
    \        fi\n      fi\n    done\n  done\n  echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local arr=($@)\n\
    \    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n   \
    \ for ((i=len-1; i>=0; i--)); do\n        if [[ ${arr[i]} -ge $max ]]; then\n\
    \            max=${arr[i]}\n            j=$i\n        fi\n    done\n    if [[\
    \ $j -eq 0 ]]; then\n        echo -1\n    else\n        echo $j\n    fi\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  local -i value=0\n  for ((i=n-1; i>=0; i--)); do\n\
    \    value=${arr[i]}\n    if ((value > max_value)); then\n      max_value=$value\n\
    \      max_index=$i\n    fi\n  done\n  echo $max_index\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6wlc_eh.sh: line 20: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_val=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i] <\
    \ arr[i-1])); then\n            for ((j=i; j<${#arr[@]}; j++)); do\n         \
    \       if ((arr[j] < arr[i-1])); then\n                    if ((arr[j] > max_val));\
    \ then\n                        max_val=arr[j]\n                        max_index=j\n\
    \                    fi\n                fi\n            done\n            echo\
    \ \"$max_index\"\n            return\n        fi\n    done\n    echo \"-1\"\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1aaccvz8.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=0\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  local -i result=-1\n\n  for ((i=n-1; i>=0; i--));\
    \ do\n    if ((arr[i] >= max_value)); then\n      max_value=arr[i]\n      max_index=i\n\
    \    fi\n    if ((arr[i] < arr[i-1])); then\n      if ((max_index > i)); then\n\
    \        result=i\n        break\n      fi\n    fi\n  done\n\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnmgj4dyd.sh: line 21: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpnmgj4dyd.sh: line 25: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n\
    \        if ((arr[i] < max_value)); then\n            echo \"$max_index\"\n  \
    \          return\n        fi\n        if ((arr[i] > max_value)); then\n     \
    \       max_value=arr[i]\n            max_index=i\n        fi\n    done\n    echo\
    \ \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnt0r_x_n.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpnt0r_x_n.sh: line 23: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local i=0\n    local j=0\n    local max_index=-1\n    local max_value=-1\n\
    \    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        if ((arr[i] >= max_value));\
    \ then\n            max_value=${arr[i]}\n            max_index=$i\n        fi\n\
    \    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpp9hi36wm.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0iiumpot.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($@)\n\
    \    local -i i=0 j=0\n    local -i max=0\n    local -i len=${#arr[@]}\n    for\
    \ ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n           \
    \ if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                if [[ $j -gt $max ]];\
    \ then\n                    max=$j\n                fi\n            fi\n     \
    \   done\n    done\n    if [[ $max -eq 0 ]]; then\n        echo \"-1\"\n    else\n\
    \        echo \"$max\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr\n\
    \    local -i i j\n    IFS=' ' read -r -a arr <<< \"$1\"\n    for ((i=${#arr[@]}-1;\
    \ i>0; i--)); do\n        for ((j=i-1; j>=0; j--)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                echo \"$j\"\n                return\n\
    \            fi\n        done\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local max_index=-1\n  local max_value=${arr[0]}\n  for ((i=1;\
    \ i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -lt $max_value ]]; then\n     \
    \ max_index=$i\n      max_value=${arr[i]}\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ max_index=-1\n    local -i max_value=0\n    for ((i=0; i<len; i++)); do\n  \
    \      if ((arr[i] < arr[i-1])); then\n            if ((arr[i] > max_value));\
    \ then\n                max_value=arr[i]\n                max_index=i\n      \
    \      fi\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpqon1k0fv.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if ((arr[i] < arr[i+1])); then\n            for ((j=i+1; j<len; j++));\
    \ do\n                if ((arr[j] < arr[i+1]) && ((arr[j] > max_value))); then\n\
    \                    max_value=${arr[j]}\n                    max_index=$j\n \
    \               fi\n            done\n            echo \"$max_index\"\n      \
    \      return\n        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n   \
    \ can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpce5iz82q.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local arr=($@)\n\
    \    local i=0\n    local j=0\n    local k=0\n    local max=0\n    local max_i=0\n\
    \    local max_j=0\n    local max_k=0\n    local max_sum=0\n    local sum=0\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            for ((k=j+1; k<len; k++)); do\n              \
    \  sum=$((arr[i] + arr[j] + arr[k]))\n                if ((sum > max_sum)); then\n\
    \                    max_sum=$sum\n                    max_i=$i\n            \
    \        max_j=$j\n                    max_k=$k\n                fi\n        \
    \    done\n        done\n    done\n    echo \"$max_i $max_j $max_k\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local i=0\n    local j=0\n    local max_index=-1\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]}\
    \ -le ${arr[i]} ]]; then\n                if [[ $j -gt $max_index ]]; then\n \
    \                   max_index=$j\n                fi\n            fi\n       \
    \ done\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpkz505uo9.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max=0\n    local -i max_index=0\n    for ((i=n-1; i>=0; i--)); do\n     \
    \   if ((arr[i] >= max)); then\n            max=arr[i]\n            max_index=i\n\
    \        fi\n        arr[i]=max_index\n    done\n    for ((i=0; i<n; i++)); do\n\
    \        if ((arr[i] == i)); then\n            echo \"$i\"\n            return\n\
    \        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw2d41frj.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i max_i=-1\n\
    \  local -i max_j=-1\n  local -i max_diff=-1\n  for ((i=0; i<n; i++)); do\n  \
    \  for ((j=i+1; j<n; j++)); do\n      if ((arr[j] < arr[i])); then\n        if\
    \ ((j - i > max_diff)); then\n          max_diff=j-i\n          max_i=i\n    \
    \      max_j=j\n        fi\n      fi\n    done\n  done\n  if ((max_i == -1));\
    \ then\n    echo -1\n  else\n    echo $max_j\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_val=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if [[ ${arr[i]} -le $max_val ]];\
    \ then\n      echo $max_index\n      return\n    fi\n    max_val=${arr[i]}\n \
    \   max_index=$i\n  done\n  echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp698wj0p4.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmp698wj0p4.sh: line 22: 1 2 4 3 5: syntax error
    in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=0 j=0\n  for ((i=${#arr[@]}-1; i>0; i--)); do\n    ((arr[i]<arr[i-1]))\
    \ && break\n  done\n  ((i==0)) && echo -1 && return\n  for ((j=${#arr[@]}-1; j>=i;\
    \ j--)); do\n    ((arr[j]<arr[i-1])) && break\n  done\n  echo $j\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0avagj5e.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n/tmp/tmp0avagj5e.sh: line 19: arr: bad array subscript\n/tmp/tmp0avagj5e.sh:
    line 19: arr: bad array subscript\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_i=0\n\
    \    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n        if ((arr[i]\
    \ < arr[i-1])); then\n            max=arr[i]\n            max_i=i\n          \
    \  for ((j=i-1; j>=0; j--)); do\n                if ((arr[j] < max)); then\n \
    \                   max=arr[j]\n                    max_i=j\n                fi\n\
    \            done\n            echo \"$max_i\"\n            return\n        fi\n\
    \    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpych0qkud.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i max_index=-1\n    local -i max_value=${arr[0]}\n    local -i i\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -lt ${arr[i-1]}\
    \ ]]; then\n            if [[ ${arr[i]} -gt $max_value ]]; then\n            \
    \    max_index=$i\n                max_value=${arr[i]}\n            fi\n     \
    \   fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value < max_value)); then\n\
    \            echo $max_index\n            return\n        fi\n        if ((curr_value\
    \ > max_value)); then\n            max_value=$curr_value\n            max_index=$i\n\
    \        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmph6ajtzje.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n\
    \  local -i max_value=0\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i]>=max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwv8wb1me.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max=0\n    local -i max_index=0\n    for ((i=n-1; i>=0; i--)); do\n     \
    \   if ((arr[i] >= max)); then\n            max=arr[i]\n            max_index=i\n\
    \        fi\n        arr[i]=max_index\n    done\n    echo \"${arr[@]}\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkq6hwkop.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=0\n    local\
    \ -i max_value=0\n    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n\
    \        if [[ ${arr[i]} -ge $max_value ]]; then\n            max_value=${arr[i]}\n\
    \            max_index=i\n        fi\n        if [[ ${arr[i]} -lt $max_value ]];\
    \ then\n            echo $max_index\n            return\n        fi\n    done\n\
    \    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgs64rv9m.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpgs64rv9m.sh: line 23: [[: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_i=0\n\
    \    local -i n=${#arr[@]}\n    local -i res=-1\n    for ((i=n-1; i>=0; i--));\
    \ do\n        if ((arr[i] >= max)); then\n            max=arr[i]\n           \
    \ max_i=i\n        fi\n        if ((arr[i] < max)); then\n            res=$i\n\
    \            break\n        fi\n    done\n    echo $res\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6357iaj.sh: line 20: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpl6357iaj.sh: line 24: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local\
    \ -i max_index=-1\n    local -i max_value=-1\n    local -i curr_value=0\n    local\
    \ -i curr_index=0\n    for ((i=0; i<len; i++)); do\n        curr_value=${arr[i]}\n\
    \        curr_index=i\n        for ((j=i+1; j<len; j++)); do\n            if ((curr_value\
    \ > arr[j] && max_value < arr[j])); then\n                max_value=${arr[j]}\n\
    \                max_index=j\n            fi\n        done\n        if ((max_index\
    \ > curr_index)); then\n            echo \"$max_index\"\n            return\n\
    \        fi\n    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzrsz4cvz.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -le\
    \ ${arr[i]} ]]; then\n        if [[ $j -gt $max_index ]]; then\n          max_index=$j\n\
    \        fi\n      fi\n    done\n  done\n  echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i n=${#arr[@]}\n    for ((i=n-1; i>=0; i--)); do\n\
    \        if ((arr[i] >= max_value)); then\n            max_value=arr[i]\n    \
    \        max_index=i\n        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9j57j0gt.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0 j=0\n    local -i len=${#arr[@]}\n    local -i max_index=-1\n\
    \    local -i max_value=0\n    for ((i=len-1; i>=0; i--)); do\n        if ((arr[i]\
    \ >= max_value)); then\n            max_value=arr[i]\n            max_index=i\n\
    \        fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzajzq97z.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i\n    for ((i=${#arr[@]}-1; i>0; i--)); do\n        if ((arr[i]\
    \ < arr[i-1])); then\n            echo \"$i\"\n            return\n        fi\n\
    \    done\n    echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]}\
    \ -gt $max_value ]]; then\n            max_value=${arr[i]}\n            max_index=$i\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]}\
    \ -lt $max_value ]]; then\n            for ((j=i+1; j<${#arr[@]}; j++)); do\n\
    \                if [[ ${arr[j]} -ge ${arr[i]} ]]; then\n                    if\
    \ [[ $j -gt $max_index ]]; then\n                        max_index=$j\n      \
    \              fi\n                fi\n            done\n        fi\n    done\n\
    \    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprvjnykoq.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmprvjnykoq.sh: line 24: [[: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=($1)\n\
    \  local -i i=${#arr[@]}\n  while (( i-- > 0 )); do\n    if (( arr[i] < arr[i-1]\
    \ )); then\n      echo $i\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozpvxkb9.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343720
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ ${arr[i]} -le $max_value ]]; then\n            if [[ $i -gt $max_index\
    \ ]]; then\n                max_index=$i\n                max_value=${arr[i]}\n\
    \            fi\n        fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxmzlupct.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr\n  local\
    \ -i i\n  local -i j\n  local -i max_index\n  local -i max_value\n  local -i n\n\
    \  local -i result\n  arr=($@)\n  n=${#arr[@]}\n  result=-1\n  for ((i=n-1; i>=0;\
    \ i--)); do\n    max_index=-1\n    max_value=-1\n    for ((j=i+1; j<n; j++));\
    \ do\n      if ((arr[j] < arr[i] && arr[j] > max_value)); then\n        max_index=$j\n\
    \        max_value=${arr[j]}\n      fi\n    done\n    if ((max_index != -1));\
    \ then\n      result=$i\n      break\n    fi\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i max_index_prev=0\n\
    \    local -i max_index_prev_prev=0\n    local -i max_index_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if ((arr[i] >= max_value)); then\n\
    \      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjmblnjgs.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local arr=(\"$@\"\
    )\n  local i=0\n  local j=0\n  local max=0\n  local max_index=0\n  local max_index_prev=0\n\
    \  local max_index_prev_prev=0\n  local max_index_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i\
    \ max_j=0\n    local -i max_diff=0\n    local -i diff=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            diff=${arr[j]}-${arr[i]}\n\
    \            if ((diff > 0 && diff > max_diff)); then\n                max_diff=$diff\n\
    \                max_i=$i\n                max_j=$j\n            fi\n        done\n\
    \    done\n    if ((max_diff > 0)); then\n        echo $max_j\n    else\n    \
    \    echo -1\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i current_value=0\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        current_value=${array[$i]}\n        if ((current_value <\
    \ max_value)); then\n            if ((max_index == -1 || max_value < array[$max_index]));\
    \ then\n                max_index=$i\n            fi\n        else\n         \
    \   max_value=$current_value\n            max_index=-1\n        fi\n    done\n\
    \    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0jeikt86.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      if ((arr[i] > max_value)); then\n        max_value=arr[i]\n    \
    \    max_index=i\n      fi\n    fi\n  done\n  echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkvqzm9un.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -le\
    \ ${arr[i]} ]]; then\n        if [[ j -gt max_index ]]; then\n          max_index=$j\n\
    \        fi\n      fi\n    done\n  done\n  echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_idx=-1\n  local -i max_val=0\n\
    \  local -i curr_val=0\n  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    curr_val=${arr[i]}\n    if ((curr_val > max_val)); then\n      max_val=$curr_val\n\
    \      max_idx=$i\n    fi\n  done\n  for ((i=0; i<len; i++)); do\n    curr_val=${arr[i]}\n\
    \    if ((curr_val < max_val)); then\n      for ((j=i+1; j<len; j++)); do\n  \
    \      if ((arr[j] > curr_val)); then\n          max_idx=$j\n          max_val=${arr[j]}\n\
    \          break\n        fi\n      done\n    fi\n  done\n  echo $max_idx\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ee62bt0.sh: line 20: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    if [[ ${arr[i]} -le $max_value ]];\
    \ then\n      max_index=$i\n      max_value=${arr[i]}\n    fi\n  done\n  echo\
    \ $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8wy77mk3.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a array=($@)\n\
    \  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  for ((i=0; i<${#array[@]}; i++)); do\n    if ((array[i] < array[i-1])); then\n\
    \      for ((j=i-1; j>=0; j--)); do\n        if ((array[j] <= array[i])); then\n\
    \          if ((array[j] > max_value)); then\n            max_value=array[j]\n\
    \            max_index=j\n          fi\n        fi\n      done\n    fi\n  done\n\
    \  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local arr=($@)\n\
    \  local i=0\n  local j=0\n  local max_index=-1\n  local max_value=0\n  for ((i=${#arr[@]}-1;\
    \ i>=0; i--)); do\n    if [[ ${arr[i]} -ge $max_value ]]; then\n      max_value=${arr[i]}\n\
    \      max_index=$i\n    fi\n  done\n  echo $max_index\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#arr[@]}\n\
    \  local -i max=0\n  local -i max_index=0\n  local -i temp=0\n  for ((i=0; i<n;\
    \ i++)); do\n    max=${arr[i]}\n    max_index=i\n    for ((j=i+1; j<n; j++));\
    \ do\n      if [[ ${arr[j]} -lt max ]]; then\n        max=${arr[j]}\n        max_index=j\n\
    \      fi\n    done\n    temp=${arr[i]}\n    arr[i]=${arr[max_index]}\n    arr[max_index]=$temp\n\
    \  done\n  for ((k=0; k<n-1; k++)); do\n    if [[ ${arr[k]} -lt ${arr[k+1]} ]];\
    \ then\n      echo $k\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprrl975ir.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value >= max_value)); then\n\
    \            max_value=$curr_value\n            max_index=$i\n        fi\n   \
    \ done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhz9anuc.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=${#arr[@]}-1\n  while ((i > 0)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      echo \"$((i-1))\"\n      return\n    fi\n    ((i--))\n  done\n \
    \ echo \"-1\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_i=-1\n  local -i max_j=-1\n\
    \  local -i max_diff=-1\n  local -i diff=0\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      diff=$((arr[j] - arr[i]))\n\
    \      if ((diff > 0 && diff > max_diff)); then\n        max_diff=$diff\n    \
    \    max_i=$i\n        max_j=$j\n      fi\n    done\n  done\n  echo $max_j\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local -i i=${#arr[@]}-1\n  while ((i>0)); do\n    if ((arr[i]<arr[i-1])); then\n\
    \      ((i--))\n    else\n      break\n    fi\n  done\n  echo $i\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpcdqroyln.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n\
    \  local -i max_value=0\n  for ((i=len-1; i>=0; i--)); do\n    if ((arr[i] >=\
    \ max_value)); then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n\
    \  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsvf0epmd.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local ab=0\n \
    \   local ac=0\n    local ad=0\n    local ae=0\n    local af=0\n    local ag=0\n\
    \    local ah=0\n    local ai=0\n    local aj=0\n    local ak=0\n    local al=0\n\
    \    local am=0\n    local an=0\n    local ao=0\n    local ap=0\n    local aq=0\n\
    \    local ar=0\n    local as=0\n    local at=0\n    local au=0\n    local av=0\n\
    \    local aw=0\n    local ax=0\n    local ay=0\n    local az=0\n    local ba=0\n\
    \    local bb=0\n    local bc=0\n    local bd=0\n    local be=0\n    local bf=0\n\
    \    local bg=0\n    local bh=0\n    local bi=0\n    local bj=0\n    local bk=0\n\
    \    local bl=0\n    local bm=0\n    local bn=0\n    local bo=0\n    local bp=0\n\
    \    local bq=0\n    local br=0\n    local bs=0\n    local bt=0\n    local bu=0\n\
    \    local bv=0\n    local bw=0\n    local bx=0\n    local by=0\n    local bz=0\n\
    \    local ca=0\n    local cb=0\n    local cc=0\n    local cd=0\n    local ce=0\n\
    \    local cf=0\n    local cg=0\n    local ch=0\n    local ci=0\n\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=1\n  local max_i=-1\n  local max_j=-1\n  local max_diff=-1\n\
    \  local diff=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n      diff=$((arr[j] - arr[i]))\n      if ((diff > 0 && diff > max_diff));\
    \ then\n        max_diff=$diff\n        max_i=$i\n        max_j=$j\n      fi\n\
    \    done\n  done\n  echo $max_j\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if ((arr[i] < max_value));\
    \ then\n      continue\n    fi\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j]\
    \ < arr[i])); then\n        if ((arr[j] > max_value)); then\n          max_value=arr[j]\n\
    \          max_index=j\n        fi\n      fi\n    done\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoemxaly6.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_index=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    max=${arr[i]}\n   \
    \ max_index=$i\n    for ((j=i+1; j<n; j++)); do\n      if ((arr[j] < max)); then\n\
    \        max=${arr[j]}\n        max_index=$j\n      fi\n    done\n    if ((max_index\
    \ != i)); then\n      arr[max_index]=${arr[i]}\n      arr[i]=$max\n    fi\n  done\n\
    \  for ((i=1; i<n; i++)); do\n    if ((arr[i] < arr[i-1])); then\n      echo $((i-1))\n\
    \      return\n    fi\n  done\n  echo -1\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ug5xezx.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local i\n  for ((i=${#arr[@]}-1; i>0; i--)); do\n    if ((arr[i] < arr[i-1]));\
    \ then\n      echo $i\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp8v5l2ofu.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($@)\n\
    \    local i=0\n    local len=${#arr[@]}\n    local max_index=-1\n    local max_value=${arr[0]}\n\
    \    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -le $max_value ]; then\n\
    \            max_index=$i\n            max_value=${arr[$i]}\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if ((\
    \ arr[j] < max )); then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        if (( max_index != i )); then\n       \
    \     arr[max_index]=${arr[i]}\n            arr[i]=$max\n        fi\n    done\n\
    \    for ((i=0; i<len-1; i++)); do\n        if (( arr[i] > arr[i+1] )); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n    \
    \        if ((arr[j] <= arr[i])) && ((j > max_index)); then\n                max_index=$j\n\
    \            fi\n        done\n    done\n    echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp66sr6wke.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i max_index=-1\n  local -i max_value=0\n  local\
    \ -i n=${#arr[@]}\n  while (( i < n )); do\n    if (( arr[i] < max_value )); then\n\
    \      (( max_index = i - 1 ))\n      break\n    fi\n    (( max_value = arr[i]\
    \ ))\n    (( i++ ))\n  done\n  echo \"$max_index\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphtxj9yi2.sh: line 18: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmphtxj9yi2.sh: line 22: ((: 1 2 4 3 5: syntax
    error in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i curr_value=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    curr_value=${arr[i]}\n\
    \    if ((curr_value > max_value)); then\n      max_value=$curr_value\n      max_index=$i\n\
    \    fi\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    curr_value=${arr[i]}\n\
    \    if ((curr_value < max_value)); then\n      for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n        if ((curr_value < ${arr[j]})); then\n          max_index=$j\n  \
    \        max_value=${arr[j]}\n          break\n        fi\n      done\n    fi\n\
    \  done\n  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxln6fu5_.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=($1)\n\
    \    local -i i=${#arr[@]}-1\n    while ((i > 0)); do\n        if ((arr[i] < arr[i-1]));\
    \ then\n            echo $i\n            return\n        fi\n        ((i--))\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=${#arr[@]}-1; i>=0; i--));\
    \ do\n        curr_value=${arr[i]}\n        if ((curr_value < max_value)); then\n\
    \            echo $max_index\n            return\n        fi\n        if ((curr_value\
    \ > max_value)); then\n            max_value=$curr_value\n            max_index=$i\n\
    \        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmph6ajtzje.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]}\
    \ -lt max_value ]]; then\n      if [[ ${arr[i]} -gt ${arr[max_index]} ]]; then\n\
    \        max_index=$i\n        max_value=${arr[i]}\n      fi\n    else\n     \
    \ max_index=$i\n      max_value=${arr[i]}\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpifqnsnf_.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpifqnsnf_.sh: line 26: 1 2 4 3 5: syntax error
    in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=${#arr[@]}-1\n    while ((i > 0)); do\n        if ((arr[i] < arr[i-1]));\
    \ then\n            echo $((i-1))\n            return\n        fi\n        ((i--))\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpxvdp6zjp.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i arr_len=${#arr[@]}\n    for ((i=arr_len-2; i>=0;\
    \ i--)); do\n        if ((arr[i] >= arr[i+1])); then\n            continue\n \
    \       fi\n        max_value=${arr[i+1]}\n        max_index=i+1\n        for\
    \ ((j=i+2; j<arr_len; j++)); do\n            if ((arr[j] > max_value)); then\n\
    \                max_value=${arr[j]}\n                max_index=j\n          \
    \  fi\n        done\n        break\n    done\n    echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_index=-1\n    local -i max_value=0\n    local -i curr_value=0\n    local\
    \ -i curr_index=0\n    for ((i=n-1; i>=0; i--)); do\n        curr_value=${arr[i]}\n\
    \        curr_index=i\n        if ((curr_value > max_value)); then\n         \
    \   max_value=curr_value\n            max_index=curr_index\n        fi\n    done\n\
    \    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5kyevx9s.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=${#arr[@]}-1\n  local -i j\n  while (( i > 0 )); do\n    ((\
    \ j = i - 1 ))\n    while (( j >= 0 )); do\n      if (( arr[j] <= arr[i] )); then\n\
    \        (( j-- ))\n      else\n        break\n      fi\n    done\n    (( i--\
    \ ))\n  done\n  echo \"${j}\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_idx=0\n    local -i\
    \ max_val=0\n    local -i curr_val=0\n    local -i last_val=0\n    local -i len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        curr_val=${arr[i]}\n        if ((curr_val\
    \ > max_val)); then\n            max_val=$curr_val\n            max_idx=$i\n \
    \       fi\n        if ((i > 0)); then\n            last_val=${arr[i-1]}\n   \
    \         if ((last_val > curr_val)); then\n                echo \"$max_idx\"\n\
    \                return\n            fi\n        fi\n    done\n    echo \"-1\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmy6chkb_.sh: line 21: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if ((arr[i] < arr[i+1]));\
    \ then\n      if ((arr[i] > max_value)); then\n        max_value=arr[i]\n    \
    \    max_index=i\n      fi\n    fi\n  done\n  echo $max_index\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprp7g1n1t.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if (( arr[i] <\
    \ arr[i-1] )); then\n      if (( arr[i] > max_value )); then\n        max_value=arr[i]\n\
    \        max_index=i\n      fi\n    fi\n  done\n  echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp15hpxnev.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i\
    \ max_j=0\n    local -i max_diff=0\n    local -i curr_diff=0\n    local -i arr_len=${#arr[@]}\n\
    \    for ((i=0; i<arr_len; i++)); do\n        for ((j=i+1; j<arr_len; j++)); do\n\
    \            curr_diff=${arr[j]}-${arr[i]}\n            if ((curr_diff > max_diff));\
    \ then\n                max_diff=$curr_diff\n                max_i=$i\n      \
    \          max_j=$j\n            fi\n        done\n    done\n    if ((max_diff\
    \ > 0)); then\n        echo \"$max_j\"\n    else\n        echo \"-1\"\n    fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -n arr=$1\n\
    \  local i=0\n  local j=0\n  local max_index=-1\n  local max_value=0\n  for i\
    \ in \"${!arr[@]}\"; do\n    if (( i > 0 )); then\n      if (( arr[i] <= arr[i-1]\
    \ )); then\n        if (( arr[i] > max_value )); then\n          max_value=${arr[i]}\n\
    \          max_index=$i\n        fi\n      fi\n    fi\n  done\n  echo $max_index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmphztx9as6.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i max_index=-1\n\
    \  local -i max_value=0\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwfdvjovr.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -le\
    \ ${arr[i]} ]]; then\n        if [[ $j -gt $max_index ]]; then\n          max_index=$j\n\
    \        fi\n      fi\n    done\n  done\n  echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_i=-1\n    local -i max_j=-1\n    local -i max_diff=-1\n    local -i diff=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n        \
    \    diff=${arr[j]}-${arr[i]}\n            if ((diff>0 && diff>max_diff)); then\n\
    \                max_i=$i\n                max_j=$j\n                max_diff=$diff\n\
    \            fi\n        done\n    done\n    if ((max_i>=0)); then\n        echo\
    \ $max_j\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local\
    \ -i max_index_prev_prev=0\n    local -i max_index_prev_prev_prev=0\n    local\
    \ -i max_index_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=${#arr[@]}-1\n    while (( i > 0 )); do\n        (( arr[i]\
    \ < arr[i-1] )) && break\n        (( i-- ))\n    done\n    echo \"$i\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if (( arr[j] <= arr[i]\
    \ )); then\n        if (( j > max_index )); then\n          max_index=$j\n   \
    \     fi\n      fi\n    done\n  done\n  echo \"$max_index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i len=${#arr[@]}\n    for ((i=len-1; i>=0; i--));\
    \ do\n        if ((arr[i] >= max_value)); then\n            max_value=arr[i]\n\
    \            max_index=i\n        fi\n    done\n    echo \"$max_index\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpysb1rgmm.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local\
    \ -i max_index=-1\n    local -i max_value=0\n    local -i temp_value=0\n    for\
    \ ((i=n-1; i>=0; i--)); do\n        temp_value=${arr[i]}\n        if ((temp_value\
    \ < max_value)); then\n            max_index=i\n            max_value=temp_value\n\
    \        fi\n    done\n    echo \"$max_index\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1q7uqa5_.sh: line 20: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local j=0\n  local max=0\n  local max_index=0\n  for ((i=${#arr[@]}-1;\
    \ i>=0; i--)); do\n    if [[ ${arr[i]} -ge $max ]]; then\n      max=${arr[i]}\n\
    \      max_index=$i\n    fi\n  done\n  echo $max_index\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy9_9yk5w.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if ((arr[j] < arr[i])); then\n                if ((j > max)); then\n\
    \                    max=$j\n                fi\n            fi\n        done\n\
    \    done\n    if ((max == 0)); then\n        echo -1\n    else\n        echo\
    \ $max\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i max_index=-1\n  local -i i\n  local -i j\n  for ((i=1; i<${#arr[@]};\
    \ i++)); do\n    if ((arr[i] < arr[i-1])); then\n      for ((j=i-1; j>=0; j--));\
    \ do\n        if ((arr[i] >= arr[j])); then\n          max_index=$j\n        \
    \  break\n        fi\n      done\n      break\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]} -le\
    \ ${arr[i]} ]]; then\n        if [[ j -gt max_index ]]; then\n          max_index=$j\n\
    \        fi\n      fi\n    done\n  done\n  echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i max_index=-1\n    local\
    \ -i max_value=0\n    local -i curr_value=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        curr_value=${arr[i]}\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if (( ${arr[j]} <= curr_value )); then\n                if ((\
    \ ${arr[j]} > max_value )); then\n                    max_value=${arr[j]}\n  \
    \                  max_index=j\n                fi\n            fi\n        done\n\
    \        if (( max_index != -1 )); then\n            echo $max_index\n       \
    \     return\n        fi\n    done\n    echo $max_index\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xki4th8.sh: line 19: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i max_index=-1\n  local -i max_value=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < max_value));\
    \ then\n      for ((j=i; j>max_index; j--)); do\n        if ((arr[j] < arr[i]));\
    \ then\n          max_index=$j\n          max_value=arr[j]\n        fi\n     \
    \ done\n    else\n      max_index=$i\n      max_value=arr[i]\n    fi\n  done\n\
    \  echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpblpcz9qk.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n/tmp/tmpblpcz9qk.sh: line 28: 1 2 4 3 5: syntax error
    in expression (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i max_index=-1\n\
    \  local -i max_value=-1\n  for ((i=n-1; i>=0; i--)); do\n    if ((arr[i] >= max_value));\
    \ then\n      max_value=arr[i]\n      max_index=i\n    fi\n  done\n  echo \"$max_index\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hn4ou9l.sh: line 19: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -n arr=$1\n\
    \    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i max_i=-1\n\
    \    local -i max_j=-1\n    local -i max_diff=-1\n    local -i diff=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            diff=${arr[j]}-${arr[i]}\n\
    \            if ((diff>0 && diff>max_diff)); then\n                max_i=$i\n\
    \                max_j=$j\n                max_diff=$diff\n            fi\n  \
    \      done\n    done\n    echo $max_j\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpug8shhvz.sh: line 12: local: `1 2 4 3 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660343721
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\ncan_arrange() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0 j=0\n    local -i max_index=-1\n    local -i max_value=0\n\
    \    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        if ((arr[i] >= max_value));\
    \ then\n            max_value=arr[i]\n            max_index=i\n        fi\n  \
    \  done\n    echo $max_index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffl54l6n.sh: line 17: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")\n'''
  stdout: b''
  timestamp: 1660343721
