language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    else\n      echo \"error: invalid character\
    \ '$char'\"\n      return 1\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return 0\n    fi\n  done\n  if (( count == 0 )); then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local c=${brackets:$i:1}\n    if [[ $c == \"<\" ]]; then\n  \
    \    stack+=($c)\n    elif [[ $c == \">\" ]]; then\n      if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n        echo \"false\"\n        return\n      fi\n      unset stack[${#stack[@]}-1]\n\
    \    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=($c)\n        elif [[ $c == \">\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} == 0 ]]; then\n             \
    \   echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} == 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $c == \">\" ]];\
    \ then\n            if [[ -z $stack ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            stack=${stack%?}\n      \
    \  fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local -i count=0\n  for ((\
    \ i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n      ((count++))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      ((count--))\n    fi\n    if ((count < 0)); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if ((count == 0)); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      stack=\"$stack<\"\n    else\n      if [[ -z \"$stack\" ]]; then\n     \
    \   echo \"false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n\
    \    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      stack=\"$stack$char\"\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack$bracket\"\n    elif [[\
    \ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n       \
    \ echo \"false\"\n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n\
    \  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      count=$(( count + 1 ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n     \
    \ echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n        if\
    \ [[ $char == \"<\" ]]; then\n            (( count++ ))\n        elif [[ $char\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ < 0 ]]; then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if [[ $count == 0 ]]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open=0\n  local close=0\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\" == \"\
    <\" ]]; then\n      ((open++))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]];\
    \ then\n      ((close++))\n    fi\n  done\n  if [[ $open -eq $close ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  local bracket\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n    if\
    \ [[ $bracket == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ \"$bracket\" == \"\
    <\" ]]; then\n      stack+=($bracket)\n    elif [[ \"$bracket\" == \">\" ]]; then\n\
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n\
    \  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_count=0\n  local close_count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n      open_count=$((open_count+1))\n    elif [[ ${brackets:$i:1} ==\
    \ \">\" ]]; then\n      close_count=$((close_count+1))\n    fi\n  done\n  if [[\
    \ $open_count -eq $close_count ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ $char == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n        if [[ $close_count -gt $open_count ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count > 0 )); then\n        echo \"false\"\n    else\n        echo\
    \ \"true\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            count=$(( count + 1 ))\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            count=$(( count - 1\
    \ ))\n        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local -i count=0\n  for ((\
    \ i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            break\n        fi\n    done\n    if (( count == 0 )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ $stack == \"\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack:0:-1}\n        fi\n    done\n    if [[ $stack == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack+=($bracket)\n        elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  local i=0\n \
    \ local len=${#brackets}\n  while [ $i -lt $len ]; do\n    local char=${brackets:$i:1}\n\
    \    if [ \"$char\" == \"<\" ]; then\n      stack+=($char)\n    elif [ \"$char\"\
    \ == \">\" ]; then\n      if [ ${#stack[@]} -eq 0 ]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\"\
    )\n    fi\n    i=$(($i + 1))\n  done\n  if [ ${#stack[@]} -eq 0 ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == '<' ]]; then\n      (( count++ ))\n\
    \    else\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ \"$count\" -lt 0 ]]; then\n            echo \"false\"\n       \
    \     return\n        fi\n    done\n    if [[ \"$count\" -eq 0 ]]; then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$(( open_count\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n           \
    \ close_count=$(( close_count + 1 ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            return 1\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        else\n\
    \            echo \"error: invalid character: $char\"\n            return 1\n\
    \        fi\n        if (( count < 0 )); then\n            echo \"false\"\n  \
    \          return 0\n        fi\n    done\n    if (( count == 0 )); then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      return 1\n    fi\n\
    \  done\n  if (( count == 0 )); then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local bracket_stack=()\n  \
    \  for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            bracket_stack+=(\"<\")\n\
    \        elif [[ $bracket == \">\" ]]; then\n            if [[ ${#bracket_stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset bracket_stack[${#bracket_stack[@]}-1]\n      \
    \  fi\n    done\n    if [[ ${#bracket_stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"${stack}<\"\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            if [[ \"$stack\" ==\
    \ \"\" ]]; then\n                echo \"false\"\n                return\n    \
    \        fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack:0:-1}\n \
    \       fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=(\"$c\")\n        elif [[ $c == \">\"\
    \ ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count > 0 )); then\n    echo \"false\"\n\
    \  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ \"\
    $char\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      return 1\n    fi\n\
    \  done\n  if (( count == 0 )); then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local bracket_stack=\"\"\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      bracket_stack=\"$bracket_stack<\"\
    \n    elif [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$bracket_stack\"\
    \ ]]; then\n        echo \"false\"\n        return\n      fi\n      bracket_stack=\"\
    ${bracket_stack%?}\"\n    fi\n  done\n  if [[ -z \"$bracket_stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n\
    \            open_count=$((open_count + 1))\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            close_count=$((close_count + 1))\n        fi\n     \
    \   if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\n\
    \            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open_count=$((open_count+1))\n        elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n     \
    \   if [[ $c == \"<\" ]]; then\n            count=$(( count + 1 ))\n        elif\
    \ [[ $c == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n  \
    \      if [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            count=$(( count + 1 ))\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            count=$(( count - 1\
    \ ))\n        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if (( count < 0 )); then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n  \
    \      elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    brackets=$1\n    stack=()\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            stack+=($i)\n\
    \        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n        if\
    \ [[ $char == \"<\" ]]; then\n            count=$((count+1))\n        elif [[\
    \ $char == \">\" ]]; then\n            count=$((count-1))\n        fi\n      \
    \  if [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open_count=$((open_count+1))\n        elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_brackets=$((open_brackets\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    local\
    \ i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_count=0\n  local close_count=0\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    local char=${brackets:$i:1}\n   \
    \ if [[ $char == \"<\" ]]; then\n      open_count=$((open_count + 1))\n    elif\
    \ [[ $char == \">\" ]]; then\n      close_count=$((close_count + 1))\n    fi\n\
    \    if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\n     \
    \ return\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local closed_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n\
    \            open_count=$((open_count + 1))\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            closed_count=$((closed_count + 1))\n        else\n \
    \           echo \"false\"\n            return\n        fi\n        if [[ $closed_count\
    \ -gt $open_count ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $open_count -eq $closed_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$((open_count+1))\n\
    \        else\n            close_count=$((close_count+1))\n        fi\n      \
    \  if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local bracket_stack=()\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            bracket_stack+=(\"\
    $bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[\
    \ ${#bracket_stack[@]} -eq 0 ]]; then\n                echo \"false\"\n      \
    \          return\n            fi\n            unset bracket_stack[${#bracket_stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#bracket_stack[@]} -eq 0 ]]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open_count++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ == 0 ]]; then\n                echo \"false\"\n                return\n    \
    \        fi\n            unset stack[-1]\n        fi\n    done\n    if [[ \"${#stack[@]}\"\
    \ == 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=(\"<\")\n    elif [[ $bracket == \">\" ]]; then\n      if\
    \ [[ ${#stack[@]} == 0 ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    fi\n  done\n \
    \ if [[ ${#stack[@]} == 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ \"\
    $c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$c\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    brackets=\"$1\"\n    # TODO: implement this function\n\
    \    # Hint: use the `tr` command to replace all \"<\" with \"1\" and all \">\"\
    \ with \"-1\"\n    # Hint: use the `bc` command to compute the sum of the resulting\
    \ string\n    # Hint: use the `test` command to check if the sum is 0\n    # Hint:\
    \ use the `echo` command to return \"true\" or \"false\"\n    # Hint: use the\
    \ `$()` syntax to capture the output of a command\n    # Hint: use the `$?` syntax\
    \ to capture the exit status of a command\n    # Hint: use the `exit` command\
    \ to return a value from a bash function\n    # Hint: use the `return` command\
    \ to return a value from a bash function\n    # Hint: use the `local` keyword\
    \ to declare a local variable\n    # Hint: use the `read` command to read a string\
    \ into a variable\n    # Hint: use the `-r` option to `read` to prevent backslash\
    \ interpretation\n    # Hint: use the `-p` option to `read` to prompt the user\
    \ for input\n    # Hint: use the `-s` option to `read` to prevent echoing input\n\
    \    # Hint: use the `-n` option to `read` to limit the number of characters read\n\
    \    # Hint: use the `-t` option to `read` to limit the time to read input\n \
    \   # Hint: use the `-d` option to `read` to specify a delimiter\n    # Hint:\
    \ use the `-a` option to `read` to read into an array\n    # Hint: use the `-u`\
    \ option to `read` to read from a file descriptor\n    # Hint: use the `-e` option\
    \ to `read` to use readline\n    # Hint: use the `-i` option to `read` to use\
    \ a default value\n    # Hint: use the `-k` option to `read` to use key bindings\n\
    \    # Hint: use the `-o` option to `read` to use readline options\n    # Hint:\
    \ use the `-A` option to `read` to use readline variables\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ \"\
    $bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n\
    \  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    local\
    \ bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=${brackets:$i:1}\n    if [[ $char\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $char == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n        if\
    \ [[ $char == \"<\" ]]; then\n            count=$((count+1))\n        elif [[\
    \ $char == \">\" ]]; then\n            count=$((count-1))\n        fi\n      \
    \  if [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$char\" == \"\
    >\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n   \
    \     return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      count=$(( count + 1 ))\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt\
    \ 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n\
    \  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ \"$bracket\" == \"\
    <\" ]]; then\n      stack+=(\"$bracket\")\n    elif [[ \"$bracket\" == \">\" ]];\
    \ then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n    \
    \    return\n      fi\n      unset stack[-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ \"$count\" -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ \"$count\" -eq 0\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ $char\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket == \">\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local c=${brackets:$i:1}\n    if [[ $c == \"<\" ]]; then\n \
    \     stack+=($c)\n    elif [[ $c == \">\" ]]; then\n      if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"false\"\n        return\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  local bracket\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n    if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n      stack+=($bracket)\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n\
    \  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            (( count++ ))\n  \
    \      elif [[ \"$bracket\" == \">\" ]]; then\n            (( count-- ))\n   \
    \     else\n            echo \"error: invalid bracketing\"\n            return\
    \ 1\n        fi\n        if (( count < 0 )); then\n            echo \"false\"\n\
    \            return 0\n        fi\n    done\n    if (( count == 0 )); then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ \"$count\" -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  [[ \"$count\" -eq 0 ]]\
    \ && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=0\n  local\
    \ close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      open_brackets=$(( open_brackets + 1 ))\n    else\n\
    \      close_brackets=$(( close_brackets + 1 ))\n    fi\n    if [[ $close_brackets\
    \ -gt $open_brackets ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if [[ $open_brackets -eq $close_brackets ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack+=($bracket)\n        elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=($c)\n        elif [[ $c == \">\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    else\n      echo \"error: invalid character\
    \ '$char'\"\n      return 1\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return 0\n    fi\n  done\n  if (( count == 0 )); then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack$char\"\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ \"$char\" == \">\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ \"$stack\" == \"\
    \" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    local\
    \ char\n    for (( i=0; i<${#brackets}; i++ )); do\n        char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n \
    \       elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ == 0 ]]; then\n                echo \"false\"\n                return\n    \
    \        fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n \
    \   if [[ \"${#stack[@]}\" == 0 ]]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local bracket_stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      bracket_stack=\"$bracket_stack<\"\
    \n    elif [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$bracket_stack\"\
    \ ]]; then\n        echo \"false\"\n        return\n      fi\n      bracket_stack=\"\
    ${bracket_stack:1}\"\n    fi\n  done\n  if [[ -z \"$bracket_stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    else\n      echo \"error: invalid character\
    \ '$char'\"\n      return 1\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return 0\n    fi\n  done\n  if (( count == 0 )); then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339646
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660339647
