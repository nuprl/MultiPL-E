name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n      \
    \  echo \"-1\"\n    else\n        local i=$x\n        while [ $i -le $y ]; do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        return\n            fi\n            i=$((i + 1))\n        done\n    \
    \    echo \"-1\"\n    fi", "    # TODO: implement this function\n    x=$1\n  \
    \  y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\n    else\n        for\
    \ (( i=$x; i<=$y; i++ )); do\n            if [ $(( $i % 2 )) -eq 0 ]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "   \
    \ local x=$1\n    local y=$2\n    local max_even=-1\n    for i in $(seq $x $y);\
    \ do\n        if [ $(($i % 2)) -eq 0 ]; then\n            max_even=$i\n      \
    \  fi\n    done\n    echo $max_even", "    local x=$1\n    local y=$2\n    local\
    \ max=$x\n    local i\n    for ((i=x+1; i<=y; i++)); do\n        if ((i % 2 ==\
    \ 0)) && ((i > max)); then\n            max=$i\n        fi\n    done\n    if ((max\
    \ % 2 == 0)); then\n        echo $max\n    else\n        echo -1\n    fi", " \
    \   local x=$1\n    local y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n\
    \        if [ $((num % 2)) -eq 0 ]; then\n            echo $num\n            return\n\
    \        fi\n        num=$((num + 1))\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $x $y); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++));\
    \ do\n        if ((i%2==0)); then\n            echo $i\n            return\n \
    \       fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ local x=\"$1\"\n    local y=\"$2\"\n    local result=-1\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            result=$i\n        fi\n\
    \    done\n    echo \"$result\"", "    local x=$1\n    local y=$2\n    if [ $x\
    \ -gt $y ]; then\n        echo \"-1\"\n    else\n        echo $(seq $x $y | grep\
    \ -E \"^[0-9]+[02468]$\" | tail -n 1)\n    fi", "    local x=\"$1\"\n    local\
    \ y=\"$2\"\n    local max_even=-1\n    for i in $(seq \"$x\" \"$y\"); do\n   \
    \     if [ $((i % 2)) -eq 0 ] && [ $i -gt $max_even ]; then\n            max_even=$i\n\
    \        fi\n    done\n    echo \"$max_even\"", "    local x=$1\n    local y=$2\n\
    \    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 ==\
    \ 0)); then\n            result=$i\n        fi\n    done\n    echo $result", " \
    \   local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i%2==0)); then\n            echo $i\n            return\n      \
    \  fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i=$x\n\
    \    local max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0\
    \ ]; then\n            max=$i\n        fi\n        i=$((i + 1))\n    done\n  \
    \  echo $max", "    local x=\"$1\"\n    local y=\"$2\"\n    local result=\"-1\"\
    \n    if [ \"$x\" -le \"$y\" ]; then\n        for i in $(seq \"$x\" \"$y\"); do\n\
    \            if [ \"$((i % 2))\" -eq 0 ]; then\n                result=\"$i\"\n\
    \            fi\n        done\n    fi\n    echo \"$result\"", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "    local\
    \ x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y\
    \ ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ];\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "  local x=$1\n  local y=$2\n  local i\n\
    \  for ((i=$x; i<=$y; i++)); do\n    if ((i % 2 == 0)); then\n      echo $i\n\
    \      return\n    fi\n  done\n  echo -1", "    local x=$1\n    local y=$2\n \
    \   local i\n    for ((i=$x; i<=$y; i++)); do\n        if [[ $((i % 2)) -eq 0\
    \ ]]; then\n            echo $i\n            return\n        fi\n    done\n  \
    \  echo -1", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "   \
    \ if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n  \
    \          echo \"-1\"\n        fi\n    else\n        for ((i=$2; i>=$1; i--));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n   \
    \             break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            if ((i > max)); then\n         \
    \       max=$i\n            fi\n        fi\n    done\n    echo $max", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator % to get\
    \ the remainder of\n    # a division. For example:\n    # >>> $(echo \"$((10 %\
    \ 2))\")\n    # \"0\"\n    # >>> $(echo \"$((11 % 2))\")\n    # \"1\"\n    # >>>\
    \ $(echo \"$((-1 % 2))\")\n    # \"-1\"\n    # >>> $(echo \"$((-2 % 2))\")\n \
    \   # \"0\"\n    # >>> $(echo \"$((-3 % 2))\")\n    # \"-1\"\n    # >>> $(echo\
    \ \"$((-4 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((-5 % 2))\")\n    # \"-1\"\
    \n    # >>> $(echo \"$((-6 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((-7 % 2))\"\
    )\n    # \"-1\"\n    # >>> $(echo \"$((-8 % 2))\")\n    # \"0\"\n    # >>> $(echo\
    \ \"$((-9 % 2))\")\n    # \"-1\"\n    # >>> $(echo \"$((-10 % 2))\")\n    # \"\
    0\"\n    # >>> $(echo \"$((-11 % 2))\")\n    # \"-1\"\n    # >>> $(echo \"$((-12\
    \ % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((-13 % 2))\")\n    # \"-1\"\n  \
    \  # >>> $(echo \"$((-14 % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((-15 % 2))\"\
    )\n    # \"-1\"\n    # >>> $(echo \"$((-16 % 2))\")\n    # \"0\"\n    # >>> $(echo\
    \ \"$((-17 % 2))\")\n    # \"-1\"\n    # >>> $(echo \"$((-18 % 2))\")\n    # \"\
    0\"\n    # >>> $(echo \"$((-19 % 2))\")\n    # \"-1\"\n    # >>> $(echo \"$((-20\
    \ % 2))\")\n    # \"0\"\n    # >>> $(echo \"$((-21 % 2))\")\n    # \"-1\"\n  \
    \  # >>> $(echo \"$((-22 % 2))\")\n    #", "  local x=$1\n  local y=$2\n  local\
    \ i\n  local max=-1\n  for ((i=x; i<=y; i++)); do\n    if ((i % 2 == 0)); then\n\
    \      max=$i\n    fi\n  done\n  echo $max", "    # TODO: Write your code here\n\
    \    # Hint: You can use the modulo operator.\n    # For example:\n    # $(( 12\
    \ % 2 ))\n    # 0\n    # $(( 13 % 2 ))\n    # 1\n    # $(( 14 % 2 ))\n    # 0\n\
    \    # $(( 15 % 2 ))\n    # 1\n    # $(( 16 % 2 ))\n    # 0\n    # $(( 17 % 2\
    \ ))\n    # 1\n    # $(( 18 % 2 ))\n    # 0\n    # $(( 19 % 2 ))\n    # 1\n  \
    \  # $(( 20 % 2 ))\n    # 0\n    # $(( 21 % 2 ))\n    # 1\n    # $(( 22 % 2 ))\n\
    \    # 0\n    # $(( 23 % 2 ))\n    # 1\n    # $(( 24 % 2 ))\n    # 0\n    # $((\
    \ 25 % 2 ))\n    # 1\n    # $(( 26 % 2 ))\n    # 0\n    # $(( 27 % 2 ))\n    #\
    \ 1\n    # $(( 28 % 2 ))\n    # 0\n    # $(( 29 % 2 ))\n    # 1\n    # $(( 30\
    \ % 2 ))\n    # 0\n    # $(( 31 % 2 ))\n    # 1\n    # $(( 32 % 2 ))\n    # 0\n\
    \    # $(( 33 % 2 ))\n    # 1\n    # $(( 34 % 2 ))\n    # 0\n    # $(( 35 % 2\
    \ ))\n    # 1\n    # $(( 36 % 2 ))\n    # 0\n    # $(( 37 % 2 ))\n    # 1\n  \
    \  # $(( 38 % 2 ))\n    # 0\n    # $(( 39 % 2 ))\n    # 1\n    # $(( 40 % 2 ))\n\
    \    # 0\n    # $(( 41 % 2 ))\n    # 1\n    # $(( 42 % 2 ))\n    # 0\n    # $((\
    \ 43 % 2 ))\n    # 1\n    # $(( 44 % 2 ))\n    # 0\n    # $(( 45 % 2 ))\n    #\
    \ 1\n    # $(( 46 % 2 ))\n    # 0\n    # $(( 47 % 2 ))\n    # 1\n    # $(( 48\
    \ % 2 ))\n    # 0\n", "    local x=$1\n    local y=$2\n    local result=-1\n \
    \   for ((i=$x; i<=$y; i++)); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n  \
    \          result=$i\n        fi\n    done\n    echo $result", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    if [\
    \ $x -gt $y ]; then\n        echo -1\n    elif [ $x -eq $y ]; then\n        if\
    \ [ $((x % 2)) -eq 0 ]; then\n            echo $x\n        else\n            echo\
    \ -1\n        fi\n    else\n        for i in $(seq $x $y); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    if [[ $x -gt $y ]]; then\n        echo -1\n    elif\
    \ [[ $x -eq $y ]]; then\n        if [[ $x -eq 0 ]]; then\n            echo 0\n\
    \        elif [[ $x -eq 1 ]]; then\n            echo -1\n        elif [[ $x -eq\
    \ 2 ]]; then\n            echo 2\n        elif [[ $x -eq 3 ]]; then\n        \
    \    echo -1\n        elif [[ $x -eq 4 ]]; then\n            echo 4\n        elif\
    \ [[ $x -eq 5 ]]; then\n            echo -1\n        elif [[ $x -eq 6 ]]; then\n\
    \            echo 6\n        elif [[ $x -eq 7 ]]; then\n            echo -1\n\
    \        elif [[ $x -eq 8 ]]; then\n            echo 8\n        elif [[ $x -eq\
    \ 9 ]]; then\n            echo -1\n        elif [[ $x -eq 10 ]]; then\n      \
    \      echo 10\n        elif [[ $x -eq 11 ]]; then\n            echo -1\n    \
    \    elif [[ $x -eq 12 ]]; then\n            echo 12\n        elif [[ $x -eq 13\
    \ ]]; then\n            echo -1\n        elif [[ $x -eq 14 ]]; then\n        \
    \    echo 14\n        elif [[ $x -eq 15 ]]; then\n            echo -1\n      \
    \  elif [[ $x -eq 16 ]]; then\n            echo 16\n        elif [[ $x -eq 17\
    \ ]]; then\n            echo -1\n        elif [[ $x -eq 18 ]]; then\n        \
    \    echo 18\n        elif [[ $x -eq 19 ]]; then\n            echo -1\n      \
    \  elif [[ $x -eq 20 ]]; then\n            echo 20\n        elif [[ $x -eq 21\
    \ ]]; then\n            echo -1\n        elif [[ $x -eq 22 ]]; then\n        \
    \    echo 22\n        elif [[ $x -eq 23 ]]; then\n            echo -1\n      \
    \  elif [[ $x -eq 24 ]]; then\n            echo 24\n        elif [[ $x -eq 25\
    \ ]]; then\n            echo -1\n        elif [[ $x -eq 26 ]]; then\n", "    local\
    \ x=$1\n    local y=$2\n    local max=$x\n    if [ $x -lt $y ]; then\n       \
    \ max=$y\n    fi\n    while [ $max -ge $x ]; do\n        if [ $((max % 2)) -eq\
    \ 0 ]; then\n            echo $max\n            return\n        fi\n        max=$((max\
    \ - 1))\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n\
    \    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
    \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            if [ $i -gt\
    \ $max ]; then\n                max=$i\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ i\n    local max=-1\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 ==\
    \ 0)); then\n            if ((i > max)); then\n                max=$i\n      \
    \      fi\n        fi\n    done\n    echo $max", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ];\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local result=-1\n    for i in $(seq\
    \ $x $y); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "    local x=$1\n    local y=$2\n  \
    \  local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n    \
    \        echo $i\n            return\n        fi\n    done\n    echo -1", "  \
    \  local x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\
    \n    elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n      \
    \      echo \"$x\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        local i=$x\n        while [ $i -le $y ]; do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo \"$i\"\n                break\n    \
    \        fi\n            i=$((i + 1))\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if [[\
    \ $((i % 2)) == 0 ]]; then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n   \
    \     echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0\
    \ ]; then\n            echo \"$x\"\n        else\n            echo \"-1\"\n  \
    \      fi\n    else\n        for i in $(seq $x $y); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo \"$i\"\n                break\n  \
    \          fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the modulo operator to check if a number\
    \ is even.\n    # For example:\n    # >>> $((\"10\" % 2))\n    # \"0\"\n    #\
    \ >>> $((\"11\" % 2))\n    # \"1\"\n    # >>> $((\"-1\" % 2))\n    # \"-1\"\n\
    \    # >>> $((\"0\" % 2))\n    # \"0\"\n    # >>> $((\"1\" % 2))\n    # \"1\"\n\
    \    # >>> $((\"2\" % 2))\n    # \"0\"\n    # >>> $((\"-2\" % 2))\n    # \"0\"\
    \n    # >>> $((\"-3\" % 2))\n    # \"-1\"\n    # >>> $((\"-4\" % 2))\n    # \"\
    0\"\n    # >>> $((\"-5\" % 2))\n    # \"-1\"\n    # >>> $((\"-6\" % 2))\n    #\
    \ \"0\"\n    # >>> $((\"-7\" % 2))\n    # \"-1\"\n    # >>> $((\"-8\" % 2))\n\
    \    # \"0\"\n    # >>> $((\"-9\" % 2))\n    # \"-1\"\n    # >>> $((\"-10\" %\
    \ 2))\n    # \"0\"\n    # >>> $((\"-11\" % 2))\n    # \"-1\"\n    # >>> $((\"\
    -12\" % 2))\n    # \"0\"\n    # >>> $((\"-13\" % 2))\n    # \"-1\"\n    # >>>\
    \ $((\"-14\" % 2))\n    # \"0\"\n    # >>> $((\"-15\" % 2))\n    # \"-1\"\n  \
    \  # >>> $((\"-16\" % 2))\n    # \"0\"\n    # >>> $((\"-17\" % 2))\n    # \"-1\"\
    \n    # >>> $((\"-18\" % 2))\n    # \"0\"\n    # >>> $((\"-19\" % 2))\n    # \"\
    -1\"\n    # >>> $((\"-20\" % 2))\n    # \"0\"\n    # >>> $((\"-21\" % 2))\n  \
    \  # \"-1\"\n    # >>> $((\"-22\" % 2))\n", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n  \
    \          echo $i\n            return\n        fi\n    done\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if [ $((i%2)) -eq 0 ]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ max=$x\n    for ((i = x + 1; i <= y; i++)); do\n        if ((i % 2 == 0)) &&\
    \ ((i > max)); then\n            max=$i\n        fi\n    done\n    if ((max %\
    \ 2 == 0)); then\n        echo $max\n    else\n        echo -1\n    fi", "   \
    \ if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            if ((i > max)); then\n    \
    \            max=$i\n            fi\n        fi\n    done\n    echo $max", " \
    \   local x=$1\n    local y=$2\n    local num=$x\n    while [[ $num -le $y ]];\
    \ do\n        if [[ $((num % 2)) -eq 0 ]]; then\n            echo $num\n     \
    \       return\n        fi\n        ((num++))\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i=0\n    local\
    \ max=-1\n    for ((i=x; i<=y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n\
    \            if [ $i -gt $max ]; then\n                max=$i\n            fi\n\
    \        fi\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ z=$x\n    while [ $z -le $y ]; do\n        if [ $((z % 2)) -eq 0 ]; then\n \
    \           echo $z\n            return\n        fi\n        z=$((z + 1))\n  \
    \  done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n        \
    \    return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local i\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if\
    \ ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n    echo\
    \ $result", "  local x=$1\n  local y=$2\n  local i=0\n  local max=-1\n  for ((i=x;\
    \ i<=y; i++)); do\n    if ((i%2==0)); then\n      if ((i>max)); then\n       \
    \ max=$i\n      fi\n    fi\n  done\n  echo $max", "    local x=$1\n    local y=$2\n\
    \    local max_even=-1\n    for i in $(seq $x $y); do\n        if [ $(($i % 2))\
    \ -eq 0 ]; then\n            max_even=$i\n        fi\n    done\n    echo $max_even",
  "    local x=$1\n    local y=$2\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if [[ $((i%2)) -eq 0 ]] && [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    echo $max", "    if [[ $1 -gt $2 ]]; then\n       \
    \ echo \"-1\"\n    else\n        for ((i = $1; i <= $2; i++)); do\n          \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if\
    \ [ $x -gt $y ]; then\n        echo -1\n    elif [ $x -eq $y ]; then\n       \
    \ if [ $((x % 2)) -eq 0 ]; then\n            echo $x\n        else\n         \
    \   echo -1\n        fi\n    else\n        local i=$x\n        while [ $i -le\
    \ $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n            i=$((i + 1))\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n          \
    \  return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n\
    \        if [ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        for i in $(seq $x $y);\
    \ do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo \"$i\"\n\
    \                break\n            fi\n        done\n    fi", "    if [[ $1 -lt\
    \ $2 ]]; then\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n    else\n        for i in $(seq $2 $1); do\n           \
    \ if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                return\n\
    \            fi\n        done\n    fi\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i=0\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n    \
    \    if ((i % 2 == 0)); then\n            if ((i > max)); then\n             \
    \   max=$i\n            fi\n        fi\n    done\n    echo $max", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i\
    \ % 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # To debug your program, you can replace echo with\
    \ cat, like this\n    # cat debug.log\n    echo \"14\"", "    x=$1\n    y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n\
    \        if [ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        for i in $(seq $x $y);\
    \ do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo \"$i\"\n\
    \                break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo \"$i\"\n            return\n        fi\n    done\n  \
    \  echo \"-1\"", "    local x=$1\n    local y=$2\n    local i=$x\n    while [\
    \ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n\
    \            return\n        fi\n        i=$((i + 1))\n    done\n    echo -1",
  "    local x=$1\n    local y=$2\n    local i=$x\n    while [[ $i -le $y ]]; do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n        ((i++))\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for\
    \ ((i=$1; i<=$2; i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n      \
    \          echo $i\n                break\n            fi\n        done\n    fi",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ num=$x\n    while [[ $num -le $y ]]; do\n        if [[ $((num % 2)) -eq 0 ]];\
    \ then\n            echo $num\n            return\n        fi\n        ((num++))\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n \
    \           return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if [[ $((i%2)) -eq\
    \ 0 ]]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local num=$x\n    while [\
    \ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n            echo\
    \ $num\n            return\n        fi\n        num=$((num + 1))\n    done\n \
    \   echo -1", "  if [[ $1 -le $2 ]]; then\n    for (( i=$1; i<=$2; i++ )); do\n\
    \      if [[ $((i%2)) -eq 0 ]]; then\n        echo $i\n        return\n      fi\n\
    \    done\n  fi\n  echo -1", "    local x=$1\n    local y=$2\n    if [ $x -gt\
    \ $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [\
    \ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n          \
    \  echo \"-1\"\n        fi\n    else\n        local i=$x\n        while [ $i -le\
    \ $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo \"\
    $i\"\n                break\n            fi\n            i=$((i + 1))\n      \
    \  done\n    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n        \
    \    return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 ==\
    \ 0)); then\n            result=$i\n        fi\n    done\n    echo $result", " \
    \   # TODO: Write your code here\n    # Please use the following syntax to call\
    \ the function:\n    # >>> $(choose_num \"x\" \"y\")\n    # where x and y are\
    \ positive integers.\n    # This is an example of how you can call the function:\n\
    \    # >>> $(choose_num \"12\" \"15\")\n    # \"14\"\n    # >>> $(choose_num \"\
    13\" \"12\")\n    # \"-1\"\n    # Hint: You can use the modulo operator to check\
    \ if a number is even.\n    # For example:\n    # >>> $(echo \"10 % 2\")\n   \
    \ # \"0\"\n    # >>> $(echo \"11 % 2\")\n    # \"1\"\n    # >>> $(echo \"12 %\
    \ 2\")\n    # \"0\"\n    # >>> $(echo \"13 % 2\")\n    # \"1\"\n    # >>> $(echo\
    \ \"14 % 2\")\n    # \"0\"\n    # >>> $(echo \"15 % 2\")\n    # \"1\"\n    # >>>\
    \ $(echo \"16 % 2\")\n    # \"0\"\n    # >>> $(echo \"17 % 2\")\n    # \"1\"\n\
    \    # >>> $(echo \"18 % 2\")\n    # \"0\"\n    # >>> $(echo \"19 % 2\")\n   \
    \ # \"1\"\n    # >>> $(echo \"20 % 2\")\n    # \"0\"\n    # >>> $(echo \"21 %\
    \ 2\")\n    # \"1\"\n    # >>> $(echo \"22 % 2\")\n    # \"0\"\n    # >>> $(echo\
    \ \"23 % 2\")\n    # \"1\"\n    # >>> $(echo \"24 % 2\")\n    # \"0\"\n    # >>>\
    \ $(echo \"25 % 2\")\n    # \"1\"\n    # >>> $(echo \"26 % 2\")\n    # \"0\"\n\
    \    # >>> $(echo \"27 % 2\")\n    # \"1\"\n    # >>> $(echo \"28 % 2\")\n   \
    \ # \"0\"\n    # >>> $(echo \"29 % 2\")\n    # \"1\"\n    # >>> $(echo \"30 %\
    \ 2\")\n    # \"0\"\n    # >>> $(echo \"31 % 2\")\n    # \"1\"\n    # >>> $(",
  "    local x=\"$1\"\n    local y=\"$2\"\n    local i\n    for ((i = x; i <= y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo \"$i\"\n            return\n\
    \        fi\n    done\n    echo \"-1\"", "    local x=$1\n    local y=$2\n   \
    \ local num=$x\n    while [ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0\
    \ ]; then\n            echo $num\n            return\n        fi\n        num=$((num\
    \ + 1))\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local max=$x\n\
    \    for i in $(seq $x $y); do\n        if [ $((i % 2)) -eq 0 ] && [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n    done\n    if [ $max -eq $x ]; then\n\
    \        echo -1\n    else\n        echo $max\n    fi", "    local x=$1\n    local\
    \ y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $((x % 2))\
    \ -eq 0 ]; then\n        echo $x\n    else\n        echo $((x + 1))\n    fi",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n  \
    \  else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
    \ ]; then\n                echo $i\n                break\n            fi\n  \
    \      done\n    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local\
    \ max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            if [ $i -gt $max ]; then\n                max=$i\n            fi\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo $max", "    # TODO: implement\
    \ this function\n    # Hint: use the modulo operator %\n    # Hint: use the if-then-else\
    \ statement\n    # Hint: use the for loop\n    # Hint: use the if-then-else statement\n\
    \    # Hint: use the for loop\n    # Hint: use the if-then-else statement\n  \
    \  # Hint: use the for loop\n    # Hint: use the if-then-else statement\n    #\
    \ Hint: use the for loop\n    # Hint: use the if-then-else statement\n    # Hint:\
    \ use the for loop\n    # Hint: use the if-then-else statement\n    # Hint: use\
    \ the for loop\n    # Hint: use the if-then-else statement\n    # Hint: use the\
    \ for loop\n    # Hint: use the if-then-else statement\n    # Hint: use the for\
    \ loop\n    # Hint: use the if-then-else statement\n    # Hint: use the for loop\n\
    \    # Hint: use the if-then-else statement\n    # Hint: use the for loop\n  \
    \  # Hint: use the if-then-else statement\n    # Hint: use the for loop\n    #\
    \ Hint: use the if-then-else statement\n    # Hint: use the for loop\n    # Hint:\
    \ use the if-then-else statement\n    # Hint: use the for loop\n    # Hint: use\
    \ the if-then-else statement\n    # Hint: use the for loop\n    # Hint: use the\
    \ if-then-else statement\n    # Hint: use the for loop\n    # Hint: use the if-then-else\
    \ statement\n    # Hint: use the for loop\n    # Hint: use the if-then-else statement\n\
    \    # Hint: use the for loop\n    # Hint: use the if-then-else statement\n  \
    \  # Hint: use the for loop\n    # Hint: use the if-then-else statement\n    #\
    \ Hint: use the for loop\n    # Hint: use the if-then-else statement\n    # Hint:\
    \ use the for loop\n    # Hint: use the if-then", "    local x=$1\n    local y=$2\n\
    \    local i=0\n    local max=-1\n    for ((i=$x; i<=$y; i++)); do\n        if\
    \ ((i % 2 == 0)); then\n            if ((i > max)); then\n                max=$i\n\
    \            fi\n        fi\n    done\n    echo $max", "    local x=$1\n    local\
    \ y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n        if [ $((num %\
    \ 2)) -eq 0 ]; then\n            echo $num\n            return\n        fi\n \
    \       num=$((num + 1))\n    done\n    echo -1", "  local x=$1\n  local y=$2\n\
    \  local i\n  for ((i=x; i<=y; i++)); do\n    if ((i%2==0)); then\n      echo\
    \ $i\n      return\n    fi\n  done\n  echo -1", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n  \
    \          echo $i\n            return\n        fi\n    done\n    echo -1", " \
    \   local x=$1\n    local y=$2\n    local num=$x\n    while [ $num -le $y ]; do\n\
    \        if [ $((num % 2)) -eq 0 ]; then\n            echo $num\n            return\n\
    \        fi\n        num=$((num + 1))\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local max=$x\n    if [ $x -lt $y ]; then\n        max=$y\n\
    \    fi\n    for i in $(seq $x $max); do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                return\n            fi\n        done\n\
    \        echo \"-1\"\n    fi", "    local x=$1\n    local y=$2\n    local result=-1\n\
    \    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n         \
    \   result=$i\n        fi\n    done\n    echo $result", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local num=$x\n    while [ $num -le\
    \ $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n            echo $num\n \
    \           return\n        fi\n        num=$((num + 1))\n    done\n    echo \"\
    -1\"", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ result=-1\n    for i in $(seq $x $y); do\n        if [[ $((i % 2)) -eq 0 ]];\
    \ then\n            result=$i\n        fi\n    done\n    echo $result", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    local x=$1\n    local y=$2\n    if (( x > y )); then\n\
    \        echo -1\n    else\n        for (( i = x; i <= y; i++ )); do\n       \
    \     if (( i % 2 == 0 )); then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            max=$i\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $max", "    local x=$1\n    local y=$2\n    local i=0\n    local max=-1\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ if ((i > max)); then\n                max=$i\n            fi\n        fi\n \
    \   done\n    echo $max", "    local x=$1\n    local y=$2\n    local i\n    local\
    \ max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n  \
    \          if ((i > max)); then\n                max=$i\n            fi\n    \
    \    fi\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ num=$x\n    while [ $num -le $y ]; do\n        if [ $((num % 2)) -eq 0 ]; then\n\
    \            echo $num\n            return\n        fi\n        num=$((num + 1))\n\
    \    done\n    echo -1", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n   \
    \     echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0\
    \ ]; then\n            echo \"$x\"\n        else\n            echo \"-1\"\n  \
    \      fi\n    else\n        for i in $(seq $x $y); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo \"$i\"\n                break\n  \
    \          fi\n        done\n    fi", "    local x=\"$1\"\n    local y=\"$2\"\n\
    \    local i\n    for ((i = x; i <= y; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            echo \"$i\"\n            return\n        fi\n    done\n    echo \"\
    -1\"", "    local x=$1\n    local y=$2\n    local result=-1\n    for i in $(seq\
    \ $x $y); do\n        if [ $((i % 2)) -eq 0 ]; then\n            result=$i\n \
    \       fi\n    done\n    echo $result", "    local x=$1\n    local y=$2\n   \
    \ local result=-1\n    for (( i = x; i <= y; i++ )); do\n        if (( i % 2 ==\
    \ 0 )); then\n            result=$i\n        fi\n    done\n    echo $result",
  "    local x=$1\n    local y=$2\n    local max=-1\n    for i in $(seq $x $y); do\n\
    \        if [ $((i % 2)) -eq 0 ] && [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n    done\n    echo $max", "    local x=$1\n    local y=$2\n    local\
    \ res=-1\n    for i in $(seq $x $y); do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            res=$i\n        fi\n    done\n    echo $res", "    local x=$1\n \
    \   local y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if\
    \ [[ $((i%2)) -eq 0 ]]; then\n            result=$i\n        fi\n    done\n  \
    \  echo $result", "    local x=$1\n    local y=$2\n    local i\n    local max_even=-1\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ if ((i > max_even)); then\n                max_even=$i\n            fi\n   \
    \     fi\n    done\n    echo $max_even", "    local x=$1\n    local y=$2\n   \
    \ if [[ $x -gt $y ]]; then\n        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n\
    \        if [[ $x -eq 0 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 1 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 2 ]]; then\n\
    \            echo \"2\"\n        elif [[ $x -eq 3 ]]; then\n            echo \"\
    -1\"\n        elif [[ $x -eq 4 ]]; then\n            echo \"4\"\n        elif\
    \ [[ $x -eq 5 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 6 ]];\
    \ then\n            echo \"6\"\n        elif [[ $x -eq 7 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $x -eq 8 ]]; then\n            echo \"8\"\n  \
    \      elif [[ $x -eq 9 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $x -eq 11 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 12 ]]; then\n            echo\
    \ \"12\"\n        elif [[ $x -eq 13 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 14 ]]; then\n            echo \"14\"\n        elif [[ $x -eq\
    \ 15 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 16 ]]; then\n \
    \           echo \"16\"\n        elif [[ $x -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $x -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $x -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $x -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $x -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 24 ]];", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    x=$1\n    y=$2\n    for i in $(seq $x $y); do\n        if [ $(($i\
    \ % 2)) -eq 0 ]; then\n            echo $i\n            return\n        fi\n \
    \   done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i=$x\n    while [ $i -le $y ]; do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            echo $i\n            return\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n\
    \        if [ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        local i=$x\n        while\
    \ [ $i -le $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n             \
    \   echo \"$i\"\n                break\n            fi\n            ((i++))\n\
    \        done\n    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local\
    \ max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            if [ $i -gt $max ]; then\n                max=$i\n            fi\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo $max", "    # Write your\
    \ code here\n    # You can use the following command to print your output:\n \
    \   # echo \"Your output\"\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n\
    \    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo\
    \ \"0\"\n        elif [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"\
    4\"\n        elif [ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 6 ]; then\n            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"\
    8\"\n        elif [ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 10 ]; then\n            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"\
    12\"\n        elif [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 14 ]; then\n            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"\
    16\"\n        elif [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 18 ]; then\n            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"\
    20\"\n        elif [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 22 ]; then\n            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"\
    24\"\n        el", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x;\
    \ i<=$y; i++)); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    # TODO: implement\
    \ this function\n    # Hint: use the modulo operator\n    # Hint: use the expr\
    \ command\n    # Hint: use the if command\n    # Hint: use the for command\n \
    \   # Hint: use the echo command\n    # Hint: use the break command\n    # Hint:\
    \ use the continue command\n    # Hint: use the return command\n    # Hint: use\
    \ the test command\n    # Hint: use the [ command\n    # Hint: use the -eq operator\n\
    \    # Hint: use the -gt operator\n    # Hint: use the -lt operator\n    # Hint:\
    \ use the -ne operator\n    # Hint: use the -o operator\n    # Hint: use the -a\
    \ operator\n    # Hint: use the -z operator\n    # Hint: use the -n operator\n\
    \    # Hint: use the -e operator\n    # Hint: use the -d operator\n    # Hint:\
    \ use the -f operator\n    # Hint: use the -r operator\n    # Hint: use the -w\
    \ operator\n    # Hint: use the -x operator\n    # Hint: use the -s operator\n\
    \    # Hint: use the -t operator\n    # Hint: use the -o operator\n    # Hint:\
    \ use the -a operator\n    # Hint: use the -z operator\n    # Hint: use the -n\
    \ operator\n    # Hint: use the -e operator\n    # Hint: use the -d operator\n\
    \    # Hint: use the -f operator\n    # Hint: use the -r operator\n    # Hint:\
    \ use the -w operator\n    # Hint: use the -x operator\n    # Hint: use the -s\
    \ operator\n    # Hint: use the -t operator\n    # Hint: use the -o operator\n\
    \    # Hint: use the -a operator\n    # Hint: use the -z operator\n    # Hint:\
    \ use the -n operator\n    # Hint: use the -e operator\n    # Hint: use the -d\
    \ operator\n    # Hint: use the -f operator\n    # Hint: use the -r operator\n\
    \    # Hint:", "    local x=$1\n    local y=$2\n    local i\n    local max=-1\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ if ((i > max)); then\n                max=$i\n            fi\n        fi\n \
    \   done\n    echo $max", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n   \
    \ elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo\
    \ $1\n        else\n            echo -1\n        fi\n    else\n        for ((i=$2;\
    \ i>=$1; i--)); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif\
    \ [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n            echo\
    \ \"$x\"\n        else\n            echo \"-1\"\n        fi\n    else\n      \
    \  local i=$x\n        while [ $i -le $y ]; do\n            if [ $((i % 2)) -eq\
    \ 0 ]; then\n                echo \"$i\"\n                break\n            fi\n\
    \            i=$((i + 1))\n        done\n    fi", "    local x=$1\n    local y=$2\n\
    \    local i\n    for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ];\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n       \
    \         echo $i\n                return\n            fi\n        done\n    \
    \    echo \"-1\"\n    fi", "    local x=$1\n    local y=$2\n    local result=-1\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ result=$i\n        fi\n    done\n    echo $result", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local result=$x\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)) && ((i > result)); then\n            result=$i\n\
    \        fi\n    done\n    if ((result == x)); then\n        echo \"-1\"\n   \
    \ else\n        echo $result\n    fi", "    local x=\"$1\"\n    local y=\"$2\"\
    \n    local i\n    for ((i = x; i <= y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo \"$i\"\n            return\n        fi\n    done\n  \
    \  echo \"-1\"", "    local x=$1\n    local y=$2\n    local result=-1\n    for\
    \ ((i=x; i<=y; i++)); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "    local x=$1\n    local y=$2\n  \
    \  local i\n    for ((i=x; i<=y; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n\
    \            echo \"$i\"\n            return\n        fi\n    done\n    echo \"\
    -1\"", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for\
    \ ((i=$1; i<=$2; i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n      \
    \          echo $i\n                break\n            fi\n        done\n    fi",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n \
    \       if ((i%2==0)); then\n            echo $i\n            return\n       \
    \ fi\n    done\n    echo -1", "    # TODO: Implement this function\n    # Hint:\
    \ Use the modulo operator to check if a number is even\n    # Hint: Use the bc\
    \ command to perform floating point arithmetic\n    # Hint: Use the echo command\
    \ to return a value\n    # Hint: Use the if-then-else statement to check if a\
    \ number is even\n    # Hint: Use the if-then-else statement to check if a number\
    \ is in the range [x, y]\n    # Hint: Use the if-then-else statement to check\
    \ if a number is the biggest\n    # Hint: Use the if-then-else statement to check\
    \ if there's no such number\n    # Hint: Use the if-then-else statement to return\
    \ a value\n    # Hint: Use the if-then-else statement to return a value\n    #\
    \ Hint: Use the if-then-else statement to return a value\n    # Hint: Use the\
    \ if-then-else statement to return a value\n    # Hint: Use the if-then-else statement\
    \ to return a value\n    # Hint: Use the if-then-else statement to return a value\n\
    \    # Hint: Use the if-then-else statement to return a value\n    # Hint: Use\
    \ the if-then-else statement to return a value\n    # Hint: Use the if-then-else\
    \ statement to return a value\n    # Hint: Use the if-then-else statement to return\
    \ a value\n    # Hint: Use the if-then-else statement to return a value\n    #\
    \ Hint: Use the if-then-else statement to return a value\n    # Hint: Use the\
    \ if-then-else statement to return a value\n    # Hint: Use the if-then-else statement\
    \ to return a value\n    # Hint: Use the if-then-else statement to return a value\n\
    \    # Hint: Use the if-then-else statement to return a value\n    # Hint: Use\
    \ the if-then-else statement to return a value\n    # Hint: Use the if-then-else\
    \ statement to return a value\n    # Hint: Use the if-then-else statement to return\
    \ a value\n    # Hint: Use the if-then-else statement to return a value\n    #",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[\
    \ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n  \
    \          fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if\
    \ [[ $x -gt $y ]]; then\n        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n\
    \        if [[ $x%2 -eq 0 ]]; then\n            echo \"$x\"\n        else\n  \
    \          echo \"-1\"\n        fi\n    else\n        local i=$x\n        while\
    \ [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n               \
    \ echo \"$i\"\n                break\n            fi\n            i=$((i+1))\n\
    \        done\n    fi", "    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n    \
    \    echo \"-1\"\n    else\n        for i in $(seq $x $y); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    x=$1\n    y=$2\n    if [ $x -gt $y\
    \ ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $x $y); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    x=$1\n    y=$2\n \
    \   if [ $x -gt $y ]; then\n        return -1\n    fi\n    for i in $(seq $x $y);\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n           \
    \ return\n        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n\
    \    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            result=$i\n        fi\n    done\n    echo $result", "    local\
    \ x=$1\n    local y=$2\n    if [ $x -gt $y ]; then\n        echo \"-1\"\n    elif\
    \ [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq 0 ]; then\n            echo\
    \ \"$x\"\n        else\n            echo \"-1\"\n        fi\n    else\n      \
    \  local i=$x\n        local max_even=-1\n        while [ $i -le $y ]; do\n  \
    \          if [ $((i % 2)) -eq 0 ]; then\n                max_even=$i\n      \
    \      fi\n            i=$((i + 1))\n        done\n        echo \"$max_even\"\n\
    \    fi", "    local x=$1\n    local y=$2\n    if [[ $x -gt $y ]]; then\n    \
    \    echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n        if [[ $x -eq 0 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 1 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 2 ]]; then\n            echo \"2\"\n        elif\
    \ [[ $x -eq 3 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 4 ]];\
    \ then\n            echo \"4\"\n        elif [[ $x -eq 5 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $x -eq 6 ]]; then\n            echo \"6\"\n  \
    \      elif [[ $x -eq 7 ]]; then\n            echo \"-1\"\n        elif [[ $x\
    \ -eq 8 ]]; then\n            echo \"8\"\n        elif [[ $x -eq 9 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $x -eq 10 ]]; then\n            echo\
    \ \"10\"\n        elif [[ $x -eq 11 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $x -eq\
    \ 13 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 14 ]]; then\n \
    \           echo \"14\"\n        elif [[ $x -eq 15 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $x -eq 16 ]]; then\n            echo \"16\"\n      \
    \  elif [[ $x -eq 17 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq\
    \ 18 ]]; then\n            echo \"18\"\n        elif [[ $x -eq 19 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $x -eq 20 ]]; then\n            echo\
    \ \"20\"\n        elif [[ $x -eq 21 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $x -eq 22 ]]; then\n            echo \"22\"\n        elif [[ $x -eq\
    \ 23 ]]; then\n            echo \"-1\"\n        elif [[ $x -eq 24 ]];", "    if\
    \ [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for (( i=$1; i<=$2;\
    \ i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if ((i % 2 == 0)); then\n            echo $i\n            return\n        fi\n\
    \    done\n    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n \
    \           return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    if [[ $x -gt $y ]]; then\n        echo -1\n    elif [[ $x -eq $y ]];\
    \ then\n        if [[ $x%2 -eq 0 ]]; then\n            echo $x\n        else\n\
    \            echo -1\n        fi\n    else\n        local i=$x\n        while\
    \ [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n               \
    \ echo $i\n                break\n            fi\n            ((i++))\n      \
    \  done\n    fi", "    local x=$1\n    local y=$2\n    local max_even=-1\n   \
    \ for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if\
    \ ((i > max_even)); then\n                max_even=$i\n            fi\n      \
    \  fi\n    done\n    echo $max_even", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if [ $x -gt\
    \ $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [\
    \ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n          \
    \  echo \"-1\"\n        fi\n    else\n        local i=$x\n        local max=-1\n\
    \        while [ $i -le $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                max=$i\n            fi\n            i=$((i + 1))\n        done\n\
    \        echo \"$max\"\n    fi", "    local x=$1\n    local y=$2\n    if [ $x\
    \ -gt $y ]; then\n        echo -1\n    else\n        for i in $(seq $x $y); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        return\n            fi\n        done\n        echo -1\n    fi", "   \
    \ x=$1\n    y=$2\n    if [[ $x -gt $y ]]; then\n        echo \"-1\"\n    elif\
    \ [[ $x -eq $y ]]; then\n        if [[ $x -eq 0 ]]; then\n            echo \"\
    0\"\n        elif [[ $x%2 -eq 0 ]]; then\n            echo \"$x\"\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        for i in $(seq $x $y);\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n   \
    \             break\n            fi\n        done\n    fi", "    # Write your\
    \ code here\n    # To print results to the standard output you can use echo\n\
    \    # To debug your program, you can insert echos like this\n    # echo \"Debug\
    \ messages...\" >&2\n    x=$1\n    y=$2\n    if [ $x -gt $y ]; then\n        echo\
    \ \"-1\"\n    else\n        if [ $x -eq $y ]; then\n            if [ $(($x % 2))\
    \ -eq 0 ]; then\n                echo \"$x\"\n            else\n             \
    \   echo \"-1\"\n            fi\n        else\n            if [ $(($x % 2)) -eq\
    \ 0 ]; then\n                echo \"$x\"\n            else\n                echo\
    \ \"$(($x + 1))\"\n            fi\n        fi\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            echo $i\n            return\n  \
    \      fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    if [[\
    \ $x -gt $y ]]; then\n        echo \"-1\"\n    elif [[ $x -eq $y ]]; then\n  \
    \      if [[ $x%2 -eq 0 ]]; then\n            echo \"$x\"\n        else\n    \
    \        echo \"-1\"\n        fi\n    else\n        local i=$x\n        while\
    \ [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n               \
    \ echo \"$i\"\n                break\n            fi\n            ((i++))\n  \
    \      done\n    fi", "    # TODO: implement this function\n    # Hint: you can\
    \ use the modulo operator % to check if a number is even\n    # or odd.\n    #\
    \ Hint: you can use the bc command to perform floating point arithmetic.\n   \
    \ # Hint: you can use the echo command to return a value.\n    # Hint: you can\
    \ use the seq command to generate a list of numbers.\n    # Hint: you can use\
    \ the sort command to sort a list of numbers.\n    # Hint: you can use the head\
    \ command to get the first element of a list.\n    # Hint: you can use the tail\
    \ command to get all but the first element of a list.\n    # Hint: you can use\
    \ the wc command to count the number of elements in a list.\n    # Hint: you can\
    \ use the test command to check if a file exists.\n    # Hint: you can use the\
    \ test command to check if a file is empty.\n    # Hint: you can use the test\
    \ command to check if a string is empty.\n    # Hint: you can use the test command\
    \ to check if a string is not empty.\n    # Hint: you can use the test command\
    \ to check if a string is equal to another string.\n    # Hint: you can use the\
    \ test command to check if a string is not equal to another string.\n    # Hint:\
    \ you can use the test command to check if a number is equal to another number.\n\
    \    # Hint: you can use the test command to check if a number is not equal to\
    \ another number.\n    # Hint: you can use the test command to check if a number\
    \ is greater than another number.\n    # Hint: you can use the test command to\
    \ check if a number is greater than or equal to another number.\n    # Hint: you\
    \ can use the test command to check if a number is less than another number.\n\
    \    # Hint: you can use the test command to check if a number is less than or\
    \ equal to another number.\n    # Hint: you can use the test command to check\
    \ if a number is positive.\n    # Hint: you can use the test command to check\
    \ if a number is negative.\n    # Hint: you can use the test command to check\
    \ if a number is zero.\n    # H", "    local x=$1\n    local y=$2\n    local i\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo\
    \ $i\n            return\n        fi\n    done\n    echo -1", "    local x=$1\n\
    \    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n     \
    \   i=$((i + 1))\n    done\n    echo $max", "    if [[ $1 -ge $2 ]]; then\n  \
    \      echo -1\n    else\n        for (( i=$1; i<=$2; i++ )); do\n           \
    \ if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if\
    \ [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $((x % 2)) -eq 0 ]; then\n\
    \        echo $x\n    else\n        echo $((x + 1))\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "  if [[ $1 -lt $2 ]]; then\n    for i in\
    \ $(seq $1 $2); do\n      if [[ $((i % 2)) -eq 0 ]]; then\n        echo $i\n \
    \       return\n      fi\n    done\n  fi\n  echo -1", "    # TODO: Write your\
    \ code here\n    # Please use the $1 and $2 variables to access the arguments\
    \ passed to the function\n    # Hint: You can use the modulo operator (%) to check\
    \ if a number is even\n    # Hint: You can use the bc command to do floating point\
    \ arithmetic\n    # Hint: You can use the echo command to return a value\n   \
    \ # Hint: You can use the return command to return an integer value\n    # Hint:\
    \ You can use the test command to check if a number is greater than or equal to\
    \ another number\n    # Hint: You can use the test command to check if a number\
    \ is less than or equal to another number\n    # Hint: You can use the test command\
    \ to check if a number is equal to another number\n    # Hint: You can use the\
    \ test command to check if a number is not equal to another number\n    # Hint:\
    \ You can use the test command to check if a number is greater than another number\n\
    \    # Hint: You can use the test command to check if a number is less than another\
    \ number\n    # Hint: You can use the test command to check if a number is even\n\
    \    # Hint: You can use the test command to check if a number is odd\n    # Hint:\
    \ You can use the test command to check if a number is positive\n    # Hint: You\
    \ can use the test command to check if a number is negative\n    # Hint: You can\
    \ use the test command to check if a number is zero\n    # Hint: You can use the\
    \ test command to check if a number is non-zero\n    # Hint: You can use the test\
    \ command to check if a string is empty\n    # Hint: You can use the test command\
    \ to check if a string is non-empty\n    # Hint: You can use the test command\
    \ to check if a string is equal to another string\n    # Hint: You can use the\
    \ test command to check if a string is not equal to another string\n    # Hint:\
    \ You can use the test command to check if a string is greater than another string\n\
    \    # Hint: You can use the test command to check if a string is less than another\
    \ string\n    # Hint: You can use the test command to check if a file exists\n\
    \    # Hint: You can use", "    local x=$1\n    local y=$2\n    local i\n    for\
    \ ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n \
    \           return\n        fi\n    done\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    if [[ $x -gt $y ]]; then\n        echo -1\n    elif [[ $x -eq $y ]];\
    \ then\n        if [[ $x%2 -eq 0 ]]; then\n            echo $x\n        else\n\
    \            echo -1\n        fi\n    else\n        local i=$x\n        while\
    \ [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n               \
    \ echo $i\n                break\n            fi\n            i=$((i+1))\n   \
    \     done\n    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x;\
    \ i<=y; i++)); do\n        if ((i%2==0)); then\n            echo $i\n        \
    \    return\n        fi\n    done\n    echo -1", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"-1\"\n    else\n        for ((i=$1; i<=$2; i++)); do\n       \
    \     if [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ result=-1\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            result=$i\n        fi\n    done\n    echo $result", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i\
    \ % 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    local x=$1\n    local y=$2\n    local i\n    for ((i=x; i<=y;\
    \ i++)); do\n        if ((i%2==0)); then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    local x=$1\n    local y=$2\n    local res=-1\n    if [ $x -gt $y ]; then\n\
    \        echo \"$res\"\n        return\n    fi\n    for i in $(seq $x $y); do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            res=$i\n        fi\n    done\n\
    \    echo \"$res\"", "    local x=$1\n    local y=$2\n    local result=-1\n  \
    \  if [ $x -le $y ]; then\n        for i in $(seq $x $y); do\n            if [\
    \ $((i % 2)) -eq 0 ]; then\n                result=$i\n            fi\n      \
    \  done\n    fi\n    echo $result", "    x=$1\n    y=$2\n    if [ $x -gt $y ];\
    \ then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n        if [ $((x %\
    \ 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n            echo \"\
    -1\"\n        fi\n    else\n        for i in $(seq $x $y); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo \"$i\"\n                break\n\
    \            fi\n        done\n    fi", "    x=$1\n    y=$2\n    if [ $x -gt $y\
    \ ]; then\n        echo -1\n    else\n        for (( i=$x; i<=$y; i++ )); do\n\
    \            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n          \
    \      break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if [[ $((i%2)) -eq\
    \ 0 ]]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    local max=-1\n   \
    \ for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if\
    \ ((i > max)); then\n                max=$i\n            fi\n        fi\n    done\n\
    \    echo $max", "    # TODO: Implement this function\n    # Hint: You can use\
    \ the modulo operator % to check if a number is even.\n    # For example:\n  \
    \  # >>> $(echo \"10 % 2\")\n    # \"0\"\n    # >>> $(echo \"11 % 2\")\n    #\
    \ \"1\"\n    # >>> $(echo \"12 % 2\")\n    # \"0\"\n    # >>> $(echo \"13 % 2\"\
    )\n    # \"1\"\n    # >>> $(echo \"14 % 2\")\n    # \"0\"\n    # >>> $(echo \"\
    15 % 2\")\n    # \"1\"\n    # >>> $(echo \"16 % 2\")\n    # \"0\"\n    # >>> $(echo\
    \ \"17 % 2\")\n    # \"1\"\n    # >>> $(echo \"18 % 2\")\n    # \"0\"\n    # >>>\
    \ $(echo \"19 % 2\")\n    # \"1\"\n    # >>> $(echo \"20 % 2\")\n    # \"0\"\n\
    \    # >>> $(echo \"21 % 2\")\n    # \"1\"\n    # >>> $(echo \"22 % 2\")\n   \
    \ # \"0\"\n    # >>> $(echo \"23 % 2\")\n    # \"1\"\n    # >>> $(echo \"24 %\
    \ 2\")\n    # \"0\"\n    # >>> $(echo \"25 % 2\")\n    # \"1\"\n    # >>> $(echo\
    \ \"26 % 2\")\n    # \"0\"\n    # >>> $(echo \"27 % 2\")\n    # \"1\"\n    # >>>\
    \ $(echo \"28 % 2\")\n    # \"0\"\n    # >>> $(echo \"29 % 2\")\n    # \"1\"\n\
    \    # >>> $(echo \"30 % 2\")\n    # \"0\"\n    # >>> $(echo \"31 % 2\")\n   \
    \ # \"1\"\n    # >>> $(echo \"32 % 2\")\n    # \"0\"\n    # >>> $(echo \"33 %\
    \ 2\")\n    # \"1\"\n    # >>> $(echo \"34 % 2\")\n    # \"0\"\n    # >>> $(echo\
    \ \"35 % 2\")\n    # \"1\"\n    # >>> $(echo \"36 % 2\")\n    # \"0\"\n    # >>>\
    \ $(echo \"37 % 2\")\n    # \"1", "    local x=$1\n    local y=$2\n    if [ $x\
    \ -gt $y ]; then\n        echo \"-1\"\n    else\n        local i=$x\n        while\
    \ [ $i -le $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n             \
    \   echo $i\n                break\n            fi\n            i=$((i + 1))\n\
    \        done\n    fi"]
stop_tokens:
- "\n}"
