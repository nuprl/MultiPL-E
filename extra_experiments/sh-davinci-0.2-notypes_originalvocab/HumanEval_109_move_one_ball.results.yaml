language: sh
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted_arr=($(echo ${arr[@]} | tr ' '\
    \ '\\n' | sort -n))\n    local -a shifted_arr=($(echo ${arr[@]} | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_2=($(echo ${arr[@]} | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_3=($(echo ${arr[@]}\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_4=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_5=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_6=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_7=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_8=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_9=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_10=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_11=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_12=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpnxa1mn36.sh: line 37: unexpected EOF while looking for matching
    `''''\n/tmp/tmpnxa1mn36.sh: line 54: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local -i min=0\n  \
    \  local -i min_index=0\n    local -i flag=0\n    if [[ $n -eq 0 ]]; then\n  \
    \      echo \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++)); do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++));\
    \ do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        sorted_arr[k]=$min\n\
    \        k=$k+1\n        if [[ $min_index -ne $i ]]; then\n            flag=1\n\
    \        fi\n    done\n    if [[ $flag -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpjxvm0r33.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmpjxvm0r33.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmpjxvm0r33.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=${arr[0]}\n    local -i max=${arr[0]}\n    local -i flag=0\n\
    \    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n  \
    \          min=${arr[i]}\n        fi\n        if [[ ${arr[i]} -gt $max ]]; then\n\
    \            max=${arr[i]}\n        fi\n    done\n    if [[ $min -eq $max ]];\
    \ then\n        echo \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++));\
    \ do\n        if [[ ${arr[i]} -eq $min ]]; then\n            flag=1\n        \
    \    break\n        fi\n    done\n    if [[ $flag -eq 0 ]]; then\n        echo\
    \ \"false\"\n        return\n    fi\n    for ((i=0; i<n; i++)); do\n        if\
    \ [[ ${arr[i]} -eq $max ]]; then\n            flag=0\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]; then\n        echo \"false\"\n  \
    \      return\n    fi\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]}\
    \ -eq $min ]]; then\n            for ((j=i+1; j<n; j++)); do\n               \
    \ if [[ ${arr[j]} -gt $min ]]; then\n                    echo \"false\"\n    \
    \                return\n                fi\n            done\n        fi\n  \
    \  done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0il7khwn.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmp0il7khwn.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmp0il7khwn.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<n; i++))\n\
    \    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n       \
    \         arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n   \
    \     done\n    done\n    for ((k=0; k<n; k++))\n    do\n        if [[ ${arr[k]}\
    \ -ne $((k+1)) ]]\n        then\n            flag=1\n            break\n     \
    \   fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -n))\n    local -a shifted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n\
    \ | tail -n +2))\n    shifted+=(${sorted[0]})\n    if [[ \"${sorted[@]}\" == \"\
    ${shifted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    for (( i=0; i<len; i++\
    \ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n        do\n            if\
    \ [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for (( k=0; k<len; k++ ))\n    do\n        if [[\
    \ ${arr[k]} -ne $((k+1)) ]]\n        then\n            flag=1\n            break\n\
    \        fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local max=0\n    local flag=0\n    if [ $n\
    \ -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n    for ((i=0;\
    \ i<n; i++)); do\n        min=${arr[$i]}\n        max=${arr[$i]}\n        for\
    \ ((j=i+1; j<n; j++)); do\n            if [ ${arr[$j]} -lt $min ]; then\n    \
    \            min=${arr[$j]}\n            fi\n            if [ ${arr[$j]} -gt $max\
    \ ]; then\n                max=${arr[$j]}\n            fi\n        done\n    \
    \    if [ $min -ne ${arr[$i]} ]; then\n            for ((k=i+1; k<n; k++)); do\n\
    \                if [ ${arr[$k]} -eq $min ]; then\n                    flag=1\n\
    \                    break\n                fi\n            done\n           \
    \ if [ $flag -eq 1 ]; then\n                echo \"true\"\n                return\n\
    \            fi\n        fi\n        if [ $max -ne ${arr[$i]} ]; then\n      \
    \      for ((k=i+1; k<n; k++)); do\n                if [ ${arr[$k]} -eq $max ];\
    \ then\n                    flag=1\n                    break\n              \
    \  fi\n            done\n            if [ $flag -eq 1 ]; then\n              \
    \  echo \"true\"\n                return\n            fi\n        fi\n    done\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmppab3yyb4.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmppab3yyb4.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmppab3yyb4.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n   \n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp4imm0v5k.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n        \
    \    then\n                flag=1\n                break\n            fi\n   \
    \     done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=(\"$@\")\n    local len=${#arr[@]}\n    if [[ $len -eq 0 ]];\
    \ then\n        echo \"true\"\n        return\n    fi\n    local i=0\n    local\
    \ j=0\n    while [[ $i -lt $len ]]; do\n        j=$((i+1))\n        while [[ $j\
    \ -lt $len ]]; do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]}\
    \ ]]\n            then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$tmp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n\
    \    local -i ff\n    local -i gg\n    local -i hh\n    local -i ii\n    local\
    \ -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n\
    \    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local\
    \ -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n\
    \    local -i xx\n    local -i yy\n    local -i zz\n    local -i aaa\n    local\
    \ -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n\
    \    local -i ggg\n    local -i hhh\n    local -i iii\n    local -i jjj\n    local\
    \ -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n\
    \    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local\
    \ -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n\
    \    local -i yyy\n    local -i zzz\n    local -i aaaa\n    local -i bbbb\n  \
    \  local -i cccc\n    local -i dddd\n    local -i eeee\n    local -i f\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n  \
    \      for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]}\
    \ ]]\n            then\n                flag=1\n                break\n      \
    \      fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n  \
    \  local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local\
    \ -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n\
    \    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i\
    \ flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n\
    \    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local\
    \ -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n\
    \    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local\
    \ -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n\
    \    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local\
    \ -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n\
    \    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local\
    \ -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n\
    \    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local\
    \ -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local -i flag46\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ count=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            count=$((count+1))\n            if [[ $count\
    \ -gt 1 ]]\n            then\n                flag=1\n                break\n\
    \            fi\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp70c8tyw1.sh: line 34: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=\"$1\"\n    local -a arr=($arr)\n    local -a sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted=(\"${shifted[@]}\" \"${sorted[0]}\"\
    )\n    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted_arr=($(echo \"${arr[@]}\" | tr\
    \ ' ' '\\n' | sort -n))\n    local -a shifted_arr=($(echo \"${arr[@]}\" | tr '\
    \ ' '\\n' | sort -n | tail -n +2))\n    shifted_arr+=(${sorted_arr[0]})\n    if\
    \ [[ \"${sorted_arr[@]}\" == \"${shifted_arr[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i sorted=0\n\
    \    local -i shift_count=0\n    local -i max_shift_count=0\n    local -i max_shift_count_index=0\n\
    \    local -i max_shift_count_value=0\n    local -i max_shift_count_value_index=0\n\
    \    local -i max_shift_count_value_index_prev=0\n    local -i max_shift_count_value_index_next=0\n\
    \    local -i max_shift_count_value_index_prev_value=0\n    local -i max_shift_count_value_index_next_value=0\n\
    \    local -i max_shift_count_value_index_prev_value_index=0\n    local -i max_shift_count_value_index_next_value_index=0\n\
    \    local -i max_shift_count_value_index_prev_value_index_prev=0\n    local -i\
    \ max_shift_count_value_index_next_value_index_next=0\n    local -i max_shift_count_value_index_prev_value_index_prev_value=0\n\
    \    local -i max_shift_count_value_index_next_value_index_next_value=0\n    local\
    \ -i max_shift_count_value_index_prev_value_index_prev_value_index=0\n    local\
    \ -i max_shift_count_value_index_next_value_index_next_value_index=0\n    local\
    \ -i max_shift_count_value_index_prev_value_index_prev_value_index_prev=0\n  \
    \  local -i max_shift_count_value_index_next_value_index_next_value_index_next=0\n\
    \    local -i max_shift_count_value_index_prev_value_index_prev_value_index_prev_value=0\n\
    \    local -i max_shift_count_value_index\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ temp=0\n    local -i count=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n\
    \    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n\
    \                min=${arr[j]}\n                min_index=$j\n            fi\n\
    \        done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n    \
    \    arr[min_index]=$temp\n    done\n    for ((i=0; i<n-1; i++))\n    do\n   \
    \     if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n        then\n            flag=1\n \
    \           break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpitxoaqkw.sh: line 35: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342479
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local -i count=0\n\
    \    local -i min_index=0\n    local -i max_index=0\n    local -i temp=0\n   \
    \ local -i temp_index=0\n    local -i temp_count=0\n    local -i temp_flag=0\n\
    \    local -i temp_min=0\n    local -i temp_max=0\n    local -i temp_min_index=0\n\
    \    local -i temp_max_index=0\n    local -i temp_i=0\n    local -i temp_j=0\n\
    \    local -i temp_n=0\n    local -i temp_arr=()\n    local -i arr_copy=()\n \
    \   local -i arr_copy_index=0\n    if [[ $n -eq 0 ]]; then\n        echo \"true\"\
    \n        return\n    fi\n    for (( i=0; i<n; i++ )); do\n        arr_copy[i]=${arr[i]}\n\
    \    done\n    for (( i=0; i<n; i++ )); do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for (( j=i+1; j<n; j++ )); do\n            if [[ ${arr[j]} -lt $min ]];\
    \ then\n                min=${arr[j]}\n                min_index=$j\n        \
    \    fi\n        done\n        arr[min_index]=${arr[i]}\n        arr[i]=$min\n\
    \    done\n    for (( i=0; i<n; i++ )); do\n        if [[ $i -eq 0 ]]; then\n\
    \            min=${arr[i]}\n            min_index=$i\n            max=${arr[i]}\n\
    \            max_index=$i\n            continue\n        fi\n        if [[ ${arr[i]}\
    \ -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n   \
    \     fi\n        if [[ ${arr[i]} -\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpsvwws0g8.sh: line 79: conditional binary operator expected\n/tmp/tmpsvwws0g8.sh:
    line 79: syntax error near `-''\n/tmp/tmpsvwws0g8.sh: line 79: `        if [[
    ${arr[i]} -''\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n          \
    \  then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local count=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n  \
    \      for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n            then\n                count=$((count+1))\n       \
    \     fi\n        done\n    done\n    if [[ $count -eq 0 ]]\n    then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i count=0\n    local -i flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            flag=1\n                break\n            fi\n        done\n   \
    \     if [[ $flag -eq 1 ]]\n        then\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local temp=0\n    local\
    \ flag=0\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=0; j<${#arr[@]}-1;\
    \ j++))\n        do\n            if [ ${arr[j]} -gt ${arr[j+1]} ]\n          \
    \  then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n                flag=1\n            fi\n    \
    \    done\n        if [ $flag -eq 0 ]\n        then\n            break\n     \
    \   fi\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local\
    \ -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n\
    \    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i\
    \ flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n\
    \    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local\
    \ -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n\
    \    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local\
    \ -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n\
    \    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local\
    \ -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n\
    \    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local\
    \ -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n\
    \    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local\
    \ -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local -i flag46\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i min\n    local\
    \ -i min_index\n    local -i max\n    local -i max_index\n    local -i count\n\
    \    local -i flag\n    IFS=' ' read -r -a arr <<< \"$1\"\n    n=${#arr[@]}\n\
    \    if (( n == 0 )); then\n        echo \"true\"\n        return\n    fi\n  \
    \  min=${arr[0]}\n    min_index=0\n    max=${arr[0]}\n    max_index=0\n    for\
    \ (( i=1; i<n; i++ )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n\
    \            min_index=i\n        fi\n        if (( arr[i] > max )); then\n  \
    \          max=${arr[i]}\n            max_index=i\n        fi\n    done\n    if\
    \ (( min_index == 0 )); then\n        echo \"true\"\n        return\n    fi\n\
    \    if (( max_index == n-1 )); then\n        echo \"true\"\n        return\n\
    \    fi\n    if (( min_index == n-1 )); then\n        echo \"false\"\n       \
    \ return\n    fi\n    count=0\n    for (( i=min_index+1; i<n; i++ )); do\n   \
    \     if (( arr[i] < arr[i-1] )); then\n            count=$(( count + 1 ))\n \
    \       fi\n    done\n    if (( count == 0 )); then\n        echo \"true\"\n \
    \       return\n    fi\n    count=0\n    for (( i=min_index+1; i<n; i++ )); do\n\
    \        if (( arr[i] > arr[i-1] )); then\n            count=$(( count + 1 ))\n\
    \        fi\n    done\n    if (( count == 0 )); then\n        echo \"true\"\n\
    \        return\n    fi\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local temp=0\n    local flag=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        min=${arr[i]}\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                k=$j\n            fi\n        done\n\
    \        if [[ $k -ne $i ]]\n        then\n            temp=${arr[i]}\n      \
    \      arr[i]=${arr[k]}\n            arr[k]=$temp\n            flag=1\n      \
    \  fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local -i count=0\n\
    \    local -i count1=0\n    local -i count2=0\n    local -i count3=0\n    local\
    \ -i count4=0\n    local -i count5=0\n    local -i count6=0\n    local -i count7=0\n\
    \    local -i count8=0\n    local -i count9=0\n    local -i count10=0\n    local\
    \ -i count11=0\n    local -i count12=0\n    local -i count13=0\n    local -i count14=0\n\
    \    local -i count15=0\n    local -i count16=0\n    local -i count17=0\n    local\
    \ -i count18=0\n    local -i count19=0\n    local -i count20=0\n    local -i count21=0\n\
    \    local -i count22=0\n    local -i count23=0\n    local -i count24=0\n    local\
    \ -i count25=0\n    local -i count26=0\n    local -i count27=0\n    local -i count28=0\n\
    \    local -i count29=0\n    local -i count30=0\n    local -i count31=0\n    local\
    \ -i count32=0\n    local -i count33=0\n    local -i count34=0\n    local -i count35=0\n\
    \    local -i count36=0\n    local -i count37=0\n    local -i count38=0\n    local\
    \ -i count39=0\n    local -i count40=0\n    local -i count41=0\n    local -i count42=0\n\
    \    local -i count43=0\n    local -i count44=0\n    local -i count45=0\n    local\
    \ -i count46=0\n    local -i count47=0\n    local -i count48=0\n    local -i count49=0\n\
    \   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpyfkreynd.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local min_index=0\n    local temp=0\n   \
    \ local flag=0\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n \
    \       min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n        \
    \    if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    arr=($1)\n    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    for ((i=0; i<$len; i++)); do\n       \
    \ if [ $i -eq 0 ]; then\n            if [ ${arr[$i]} -gt ${arr[$i+1]} ]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \    elif [ $i -eq $((len-1)) ]; then\n            if [ ${arr[$i]} -lt ${arr[$i-1]}\
    \ ]; then\n                echo \"false\"\n                return\n          \
    \  fi\n        else\n            if [ ${arr[$i]} -lt ${arr[$i-1]} ] || [ ${arr[$i]}\
    \ -gt ${arr[$i+1]} ]; then\n                echo \"false\"\n                return\n\
    \            fi\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -a arr_copy\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n\
    \    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        arr_copy[i]=${arr[i]}\n\
    \    done\n    sorted_arr=($(printf \"%s\\n\" \"${arr_copy[@]}\" | sort -n))\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -ne ${sorted_arr[i]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ for ((i=0; i<n; i++))\n        do\n            if [[ ${arr[i]} -eq ${sorted_arr[0]}\
    \ ]]\n            then\n                for ((j=i; j<n; j++))\n              \
    \  do\n                    if [[ ${arr[j]} -ne ${sorted_arr[j-i]} ]]\n       \
    \             then\n                        flag=1\n                        break\n\
    \                    fi\n                done\n                if [[ $flag -eq\
    \ 0 ]]\n                then\n                    echo \"true\"\n            \
    \        return\n                fi\n            fi\n        done\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpwm1k973u.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmpwm1k973u.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmpwm1k973u.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted_arr=($(echo \"${arr[@]}\" | tr\
    \ ' ' '\\n' | sort -n))\n    local -a shifted_arr=($(echo \"${arr[@]}\" | tr '\
    \ ' '\\n' | sort -n | tail -n +2))\n    shifted_arr+=(${sorted_arr[0]})\n    if\
    \ [[ \"${sorted_arr[@]}\" == \"${shifted_arr[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=1\n\
    \    local flag=0\n    while [ $i -lt $len ]\n    do\n        if [ $j -eq $len\
    \ ]\n        then\n            j=0\n        fi\n        if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]\n        then\n            flag=1\n            break\n        fi\n       \
    \ i=$((i+1))\n        j=$((j+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i n=0\n\
    \    local -i temp=0\n    local -i flag=0\n    arr=($1)\n    n=${#arr[@]}\n  \
    \  for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        for\
    \ ((i=0; i<n-1; i++))\n        do\n            for ((j=0; j<n-i-1; j++))\n   \
    \         do\n                if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n           \
    \     then\n                    temp=${arr[j]}\n                    arr[j]=${arr[j+1]}\n\
    \                    arr[j+1]=$temp\n                fi\n            done\n  \
    \      done\n        for ((i=0; i<n-1; i++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]\n            then\n                echo \"false\"\n     \
    \           return\n            fi\n        done\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' '\
    \ '\\n' | sort -n))\n    local -a shifted=($(echo \"${arr[@]}\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' '))\n    local -a shifted_sorted=($(echo \"${shifted[@]}\"\
    \ | tr ' ' '\\n' | sort -n))\n    if [[ \"${sorted[@]}\" == \"${arr[@]}\" ]];\
    \ then\n        echo \"true\"\n    elif [[ \"${shifted_sorted[@]}\" == \"${sorted[@]}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=$(echo $arr | wc -w)\n    local arr_sorted=$(echo\
    \ $arr | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local arr_sorted_len=$(echo\
    \ $arr_sorted | wc -w)\n    if [ $arr_len -ne $arr_sorted_len ]; then\n      \
    \  echo \"false\"\n        return\n    fi\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local flag=0\n    for ((i=0; i<$arr_len; i++)); do\n        if [\
    \ ${arr[$i]} -ne ${arr_sorted[$i]} ]; then\n            flag=1\n            break\n\
    \        fi\n    done\n    if [ $flag -eq 0 ]; then\n        echo \"true\"\n \
    \       return\n    fi\n    for ((i=0; i<$arr_len; i++)); do\n        for ((j=0;\
    \ j<$arr_len; j++)); do\n            if [ ${arr[$j]} -eq ${arr_sorted[$i]} ];\
    \ then\n                temp=$j\n                break\n            fi\n     \
    \   done\n        if [ $temp -ne $i ]; then\n            echo \"false\"\n    \
    \        return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpwgxb90nr.sh: line 37: [: too many arguments\n/tmp/tmpwgxb90nr.sh:
    line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh: line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh:
    line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh: line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh:
    line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh: line 48: [: too many arguments\n/tmp/tmpwgxb90nr.sh:
    line 48: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($@)\n    local -i len=${#arr[@]}\n    local -i i=0\n  \
    \  local -i j=0\n    local -i count=0\n    local -i max=0\n    local -i min=0\n\
    \    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i\
    \ flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n\
    \    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i\
    \ flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n\
    \    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local\
    \ -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n\
    \    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local\
    \ -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n\
    \    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local\
    \ -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n\
    \    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local\
    \ -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n\
    \    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local\
    \ -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n\
    \    local -i flag49=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i flag=0\n \
    \   local -i count=0\n    local -i temp=0\n    local -i temp1=0\n    local -i\
    \ temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n\
    \    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i\
    \ temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n\
    \    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local\
    \ -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n\
    \    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local\
    \ -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n\
    \    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local\
    \ -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n\
    \    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local\
    \ -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n\
    \    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local\
    \ -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n\
    \    local -i temp48=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i min=0\n\
    \    local -i max=0\n    local -i min_index=0\n    local -i max_index=0\n    local\
    \ -i min_index_2=0\n    local -i max_index_2=0\n    local -i flag=0\n    local\
    \ -i flag_2=0\n    local -i flag_3=0\n    local -i flag_4=0\n    local -i flag_5=0\n\
    \    local -i flag_6=0\n    local -i flag_7=0\n    local -i flag_8=0\n    local\
    \ -i flag_9=0\n    local -i flag_10=0\n    local -i flag_11=0\n    local -i flag_12=0\n\
    \    local -i flag_13=0\n    local -i flag_14=0\n    local -i flag_15=0\n    local\
    \ -i flag_16=0\n    local -i flag_17=0\n    local -i flag_18=0\n    local -i flag_19=0\n\
    \    local -i flag_20=0\n    local -i flag_21=0\n    local -i flag_22=0\n    local\
    \ -i flag_23=0\n    local -i flag_24=0\n    local -i flag_25=0\n    local -i flag_26=0\n\
    \    local -i flag_27=0\n    local -i flag_28=0\n    local -i flag_29=0\n    local\
    \ -i flag_30=0\n    local -i flag_31=0\n    local -i flag_32=0\n    local -i flag_33=0\n\
    \    local -i flag_34=0\n    local -i flag_35=0\n    local -i flag_36=0\n    local\
    \ -i flag_37=0\n    local -i flag_38=0\n    local -i flag_39=0\n    local\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpzxpweeb2.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i N=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_idx=0\n    local -i\
    \ max_idx=0\n    local -i min_idx_prev=0\n    local -i max_idx_prev=0\n    local\
    \ -i min_idx_prev_prev=0\n    local -i max_idx_prev_prev=0\n    local -i min_idx_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev=0\n    local -i min_idx_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev=0\n    local -i min_idx_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev=0\n    local -i min_idx_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev=0\n    local -i min_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev_prev=0\n    local -i min_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ min_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  \
    \  local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp4nirs8ft.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i min=0\n    local -i temp=0\n\
    \    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=i\n     \
    \   for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt ${arr[min]}\
    \ ]]\n            then\n                min=$j\n            fi\n        done\n\
    \        if [[ $min -ne $i ]]\n        then\n            temp=${arr[i]}\n    \
    \        arr[i]=${arr[min]}\n            arr[min]=$temp\n            flag=1\n\
    \        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=$(echo $arr | wc -w)\n    local arr_sorted=$(echo\
    \ $arr | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local arr_sorted_len=$(echo\
    \ $arr_sorted | wc -w)\n    if [[ $arr_len -eq 0 ]]; then\n        echo \"true\"\
    \n    elif [[ $arr_len -eq $arr_sorted_len ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=${arr[0]}\n    local min_index=0\n    local flag=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt\
    \ $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=\"$1\"\n    local arr_len=$(echo \"$arr\" | wc -w)\n    local\
    \ arr_max=$(echo \"$arr\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    local arr_min=$(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n | head -n 1)\n    local arr_min_index=$(echo\
    \ \"$arr\" | tr ' ' '\\n' | grep -n \"$arr_min\" | cut -d ':' -f 1)\n    local\
    \ arr_max_index=$(echo \"$arr\" | tr ' ' '\\n' | grep -n \"$arr_max\" | cut -d\
    \ ':' -f 1)\n    if [ \"$arr_len\" -eq 0 ]; then\n        echo \"true\"\n    elif\
    \ [ \"$arr_len\" -eq 1 ]; then\n        echo \"true\"\n    elif [ \"$arr_len\"\
    \ -eq 2 ]; then\n        if [ \"$arr_min\" -le \"$arr_max\" ]; then\n        \
    \    echo \"true\"\n        else\n            echo \"false\"\n        fi\n   \
    \ elif [ \"$arr_min_index\" -eq 1 ]; then\n        if [ \"$arr_max_index\" -eq\
    \ \"$arr_len\" ]; then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i min=0\n\
    \    local -i max=0\n    local -i min_index=0\n    local -i max_index=0\n    local\
    \ -i min_index_prev=0\n    local -i max_index_prev=0\n    local -i min_index_prev_prev=0\n\
    \    local -i max_index_prev_prev=0\n    local -i min_index_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp4g41jvva.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n  local arr=(\"$@\")\n  local len=${#arr[@]}\n  local i=0\n  local j=0\n\
    \  local temp=0\n  local flag=0\n  for ((i=0; i<len; i++))\n  do\n    for ((j=i+1;\
    \ j<len; j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n \
    \       temp=${arr[i]}\n        arr[i]=${arr[j]}\n        arr[j]=$temp\n     \
    \   flag=1\n      fi\n    done\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local sorted_arr=$(echo $arr | tr \" \" \"\\n\" | sort\
    \ -n | tr \"\\n\" \" \")\n    if [[ $arr == $sorted_arr ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -a arr_copy\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmps3z2yy4k.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i\
    \ j=0\n  local -i k=0\n  local -i min=0\n  local -i min_index=0\n  local -i flag=0\n\
    \  for ((i=0; i<len; i++))\n  do\n    min=${arr[i]}\n    min_index=$i\n    for\
    \ ((j=i+1; j<len; j++))\n    do\n      if [[ ${arr[j]} -lt $min ]]\n      then\n\
    \        min=${arr[j]}\n        min_index=$j\n      fi\n    done\n    if [[ $min_index\
    \ -ne $i ]]\n    then\n      flag=1\n      break\n    fi\n  done\n  if [[ $flag\
    \ -eq 1 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    read -a arr <<< \"$1\"\n    local -i i=0\n    local\
    \ -i j=0\n    local -i n=${#arr[@]}\n    local -i cnt=0\n    local -i flag=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n\
    \        then\n            cnt=$((cnt+1))\n        fi\n    done\n    if [[ $cnt\
    \ -gt 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local min_index=0\n    local temp=0\n   \
    \ for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[j]} -lt\
    \ $min ]\n            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n\
    \        arr[min_index]=$temp\n    done\n    for ((k=0; k<len-1; k++))\n    do\n\
    \        if [ ${arr[k]} -gt ${arr[k+1]} ]\n        then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    arr=($@)\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"true\"\n\
    \        return\n    fi\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if\
    \ [ ${arr[$i]} -gt ${arr[$((i+1))]} ]; then\n            echo \"false\"\n    \
    \        return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n  \
    \  local -i j=0\n    local -i k=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n       \
    \     if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            for ((k=min_index; k>i; k--))\n       \
    \     do\n                arr[k]=${arr[k-1]}\n            done\n            arr[i]=$min\n\
    \        fi\n    done\n    for ((i=0; i<len-1; i++))\n    do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]\n        then\n            flag=1\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -i n\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpgvm8a7gr.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i count\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    if [ $n -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n  \
    \  for ((i=0; i<n-1; i++)); do\n        if [ ${arr[i]} -gt ${arr[i+1]} ]; then\n\
    \            count=$((count+1))\n        fi\n    done\n    if [ $count -eq 0 ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    if [ $count -gt 1 ];\
    \ then\n        echo \"false\"\n        return\n    fi\n    for ((i=0; i<n-1;\
    \ i++)); do\n        if [ ${arr[i]} -gt ${arr[i+1]} ]; then\n            for ((j=i+1;\
    \ j<n; j++)); do\n                if [ ${arr[j]} -lt ${arr[i]} ]; then\n     \
    \               flag=1\n                    break\n                fi\n      \
    \      done\n            if [ $flag -eq 1 ]; then\n                echo \"false\"\
    \n                return\n            fi\n            for ((k=i+1; k<n; k++));\
    \ do\n                if [ ${arr[k]} -gt ${arr[i]} ]; then\n                 \
    \   echo \"false\"\n                    return\n                fi\n         \
    \   done\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -i i\n    local -i\
    \ j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local\
    \ -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i aa\n    local -i bb\n    local -i cc\n  \
    \  local -i dd\n    local -i ee\n    local -i ff\n    local -i gg\n    local -i\
    \ hh\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n   \
    \ local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local -i\
    \ qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n   \
    \ local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local -i\
    \ zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n\
    \    local -i eee\n    local -i fff\n    local -i ggg\n    local -i hhh\n    local\
    \ -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n\
    \    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local\
    \ -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n\
    \    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local\
    \ -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -i dddd\n    local\
    \ -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmptrt9ge6w.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=(\"$@\")\n    local n=${#arr[@]}\n    local i=0\n    local\
    \ j=0\n    local temp=0\n    local flag=0\n    for (( i=0; i<n; i++ ))\n    do\n\
    \        for (( j=i+1; j<n; j++ ))\n        do\n            if [[ ${arr[$i]} -gt\
    \ ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n         \
    \       arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n                flag=1\n\
    \            fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i temp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n;\
    \ i++))\n    do\n        for ((j=0; j<n-i-1; j++))\n        do\n            if\
    \ [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n\
    \                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n        \
    \    fi\n        done\n    done\n    for ((k=0; k<n-1; k++))\n    do\n       \
    \ if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=(\"$@\")\n    local i=0\n    local j=0\n    local k=0\n   \
    \ local n=${#arr[@]}\n    local flag=0\n    for ((i=0; i<n; i++))\n    do\n  \
    \      for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                flag=1\n                break\n      \
    \      fi\n        done\n        if [[ $flag -eq 1 ]]\n        then\n        \
    \    break\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j n\n    arr=($1)\n    n=${#arr[@]}\n  \
    \  for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n          \
    \  if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                echo \"true\"\n   \
    \             return\n            fi\n        done\n    done\n    echo \"false\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i len\n    local -i min\n  \
    \  local -i max\n    local -i min_index\n    local -i max_index\n    local -i\
    \ temp\n    local -i flag=0\n    arr=($@)\n    len=${#arr[@]}\n    if [ $len -eq\
    \ 0 ]; then\n        echo \"true\"\n        return\n    fi\n    min=${arr[0]}\n\
    \    max=${arr[0]}\n    for ((i=1; i<len; i++)); do\n        if [ ${arr[i]} -lt\
    \ $min ]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n\
    \        if [ ${arr[i]} -gt $max ]; then\n            max=${arr[i]}\n        \
    \    max_index=$i\n        fi\n    done\n    if [ $min_index -eq 0 ]; then\n \
    \       echo \"true\"\n        return\n    fi\n    if [ $max_index -eq 0 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    for ((i=0; i<len; i++));\
    \ do\n        if [ $i -eq $min_index ]; then\n            continue\n        fi\n\
    \        if [ ${arr[i]} -lt $min ]; then\n            echo \"false\"\n       \
    \     return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp6_g404d5.sh: line 55: [: -eq: unary operator expected\n'''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -a temp_arr\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i count=0\n\
    \    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i\
    \ flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n\
    \    local -i flag48=0\n    local\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpxjtmvn07.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n  local arr=$1\n  local arr_len=${#arr[@]}\n  local i=0\n  local j=0\n  local\
    \ temp=0\n  local flag=0\n  for (( i=0; i<$arr_len; i++ ))\n  do\n    for (( j=i+1;\
    \ j<$arr_len; j++ ))\n    do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n     \
    \ then\n        temp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n        arr[$j]=$temp\n\
    \        flag=1\n      fi\n    done\n  done\n  if [[ $flag -eq 0 ]]\n  then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ n=${#arr[@]}\n    local temp=0\n    local flag=0\n    for (( i=0; i<n; i++ ))\n\
    \    do\n        for (( j=i+1; j<n; j++ ))\n        do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n     \
    \           arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n            fi\n\
    \        done\n    done\n    for (( k=0; k<n; k++ ))\n    do\n        if [[ ${arr[$k]}\
    \ -ne $k+1 ]]\n        then\n            flag=1\n            break\n        fi\n\
    \    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j k\n    local -i N\n    local -i flag\n\
    \    arr=($@)\n    N=${#arr[@]}\n    flag=0\n    for ((i=0; i<N-1; i++)); do\n\
    \        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            flag=1\n      \
    \      break\n        fi\n    done\n    if [[ $flag -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ temp=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n    done\n  \
    \  for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n    else\n       \
    \ echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe2qwc2q0.sh: line 34: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i temp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        flag=0\n        for ((j=0; j<n-i-1;\
    \ j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n        \
    \    then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n                flag=1\n            fi\n    \
    \    done\n        if [[ $flag -eq 0 ]]\n        then\n            break\n   \
    \     fi\n    done\n    for ((k=0; k<n-1; k++))\n    do\n        if [[ ${arr[k]}\
    \ -gt ${arr[k+1]} ]]\n        then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    arr=($1)\n    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    for (( i=0; i<$len; i++ )); do\n     \
    \   if [ $i -eq $((len-1)) ]; then\n            echo \"true\"\n            return\n\
    \        fi\n        if [ ${arr[$i]} -gt ${arr[$((i+1))]} ]; then\n          \
    \  echo \"false\"\n            return\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i max=0\n    local -i min=0\n    local -i flag=0\n    local\
    \ -i count=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n\
    \    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local\
    \ -i flag49=0\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmph51i2_7h.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local count=0\n    local flag=0\n    for (( i=0; i<$len; i++ ))\n    do\n\
    \        for (( j=i+1; j<$len; j++ ))\n        do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]\n            then\n                flag=1\n              \
    \  break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n       \
    \ then\n            break\n        fi\n        count=$((count+1))\n    done\n\
    \    if [[ $count -eq $len ]]\n    then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    if [ $len -eq 0 ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    for (( i=0; i<$len; i++ )); do\n     \
    \   for (( j=0; j<$len-1; j++ )); do\n            if [ ${arr[$j]} -gt ${arr[$j+1]}\
    \ ]; then\n                tmp=${arr[$j]}\n                arr[$j]=${arr[$j+1]}\n\
    \                arr[$j+1]=$tmp\n                flag=1\n            fi\n    \
    \    done\n        if [ $flag -eq 0 ]; then\n            echo \"true\"\n     \
    \       return\n        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -a sorted\n    local -i i\n    local -i j\n \
    \   local -i k\n    local -i n\n    local -i flag\n    local -i temp\n    arr=($1)\n\
    \    sorted=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n      \
    \  for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<n; k++))\n    do\n        if [[ ${arr[k]} -ne ${sorted[k]} ]]\n   \
    \     then\n            flag=1\n            break\n        fi\n    done\n    if\
    \ [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo\
    \ \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j k\n    local -i n\n    local -i flag\n\
    \    read -a arr <<< \"$1\"\n    n=${#arr[@]}\n    if [[ $n -eq 0 ]]; then\n \
    \       echo \"true\"\n        return\n    fi\n    for ((i=0; i<n-1; i++)); do\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                flag=1\n                break\n            fi\n  \
    \      done\n        if [[ $flag -eq 1 ]]; then\n            break\n        fi\n\
    \    done\n    if [[ $flag -eq 0 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    for ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                flag=0\n\
    \                for ((k=0; k<n; k++)); do\n                    if [[ ${arr[k]}\
    \ -gt ${arr[j]} ]]; then\n                        flag=1\n                   \
    \     break\n                    fi\n                done\n                if\
    \ [[ $flag -eq 0 ]]; then\n                    echo \"true\"\n               \
    \     return\n                fi\n            fi\n        done\n    done\n   \
    \ echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n\
    \    local -i n=${#arr[@]}\n    local -i flag=0\n    for ((i=0; i<n; i++))\n \
    \   do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                flag=1\n               \
    \ break\n            fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n  \
    \  then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i max=0\n \
    \   local -i max_index=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n   \
    \ do\n        if [[ ${arr[i]} -lt $min ]]\n        then\n            min=${arr[i]}\n\
    \            min_index=$i\n        fi\n    done\n    for ((i=0; i<n; i++))\n \
    \   do\n        if [[ ${arr[i]} -gt $max ]]\n        then\n            max=${arr[i]}\n\
    \            max_index=$i\n        fi\n    done\n    if [[ $min_index -eq 0 ]]\n\
    \    then\n        flag=1\n    fi\n    if [[ $flag -eq 0 ]]\n    then\n      \
    \  for ((i=0; i<n; i++))\n        do\n            if [[ ${arr[i]} -gt $min ]]\n\
    \            then\n                if [[ $i -lt $min_index ]]\n              \
    \  then\n                    flag=1\n                    break\n             \
    \   fi\n            fi\n        done\n    fi\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        for ((i=0; i<n; i++))\n        do\n            if [[ ${arr[i]} -lt $max\
    \ ]]\n            then\n                if [[ $i -gt $max_index ]]\n         \
    \       then\n                    flag=1\n                    break\n        \
    \        fi\n            fi\n        done\n    fi\n    if [[ $flag -eq 0 ]]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp73bwgdtu.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i count=0\n    while [ $i -lt $n ]; do\n       \
    \ if [ $i -eq $((n-1)) ]; then\n            break\n        fi\n        if [ ${arr[$i]}\
    \ -gt ${arr[$((i+1))]} ]; then\n            count=$((count+1))\n        fi\n \
    \       i=$((i+1))\n    done\n    if [ $count -gt 1 ]; then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i len=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i flag=0\n    for (( i=0; i<len; i++ ))\n\
    \    do\n        for (( j=i+1; j<len; j++ ))\n        do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]\n            then\n                flag=1\n              \
    \  break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n       \
    \ then\n            break\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n  \
    \  then\n        echo \"true\"\n    else\n        for (( k=j+1; k<len; k++ ))\n\
    \        do\n            if [[ ${arr[$j]} -gt ${arr[$k]} ]]\n            then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \    done\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp_fkv3pu1.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmp_fkv3pu1.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmp_fkv3pu1.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n  local arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local j=0\n  local\
    \ flag=0\n  local temp=0\n  for ((i=0; i<len; i++))\n  do\n    for ((j=i+1; j<len;\
    \ j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[j]}\n        arr[j]=$temp\n        flag=1\n      fi\n  \
    \  done\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=\"$1\"\n    local arr_len=$(echo \"$arr\" | wc -w)\n    local\
    \ arr_min=$(echo \"$arr\" | tr ' ' '\\n' | sort -n | head -n 1)\n    local arr_max=$(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    local arr_min_index=$(echo\
    \ \"$arr\" | tr ' ' '\\n' | awk '{print NR, $0}' | grep \"$arr_min\" | cut -d\
    \ ' ' -f 1)\n    local arr_max_index=$(echo \"$arr\" | tr ' ' '\\n' | awk '{print\
    \ NR, $0}' | grep \"$arr_max\" | cut -d ' ' -f 1)\n    if [ \"$arr_len\" -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ \"$arr_len\" -eq 1 ]; then\n    \
    \    echo \"true\"\n    elif [ \"$arr_min_index\" -eq 1 ]; then\n        echo\
    \ \"true\"\n    elif [ \"$arr_max_index\" -eq \"$arr_len\" ]; then\n        echo\
    \ \"true\"\n    elif [ \"$arr_min_index\" -gt \"$arr_max_index\" ]; then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpjwnc2d2f.sh: line 34: [: 1\n4: integer expression expected\n/tmp/tmpjwnc2d2f.sh:
    line 36: [: 3\n5: integer expression expected\n/tmp/tmpjwnc2d2f.sh: line 38: [:
    1\n4: integer expression expected\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i result=1\n\
    \    local -i temp=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1;\
    \ j<n; j++))\n        do\n            if [[ ${sorted_arr[i]} -gt ${sorted_arr[j]}\
    \ ]]\n            then\n                temp=${sorted_arr[i]}\n              \
    \  sorted_arr[i]=${sorted_arr[j]}\n                sorted_arr[j]=$temp\n     \
    \       fi\n        done\n    done\n    for ((i=0; i<n; i++))\n    do\n      \
    \  if [[ ${arr[i]} -ne ${sorted_arr[i]} ]]\n        then\n            result=0\n\
    \            break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmppsjz93y3.sh: line 45: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$@\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i min=0\n    local -i max=0\n    local -i min_index=0\n \
    \   local -i max_index=0\n    local -i flag=0\n    local -i flag1=0\n    local\
    \ -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i count=0\n    local -i max=0\n\
    \    local -i max_index=0\n    local -i flag=0\n    local -i flag2=0\n    local\
    \ -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n\
    \    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i\
    \ flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n\
    \    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local\
    \ -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n\
    \    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local\
    \ -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n\
    \    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local\
    \ -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n\
    \    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local\
    \ -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n\
    \    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local\
    \ -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n\
    \    local -i flag49\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n       \
    \         arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n   \
    \     done\n    done\n    for ((k=0; k<len; k++))\n    do\n        if [[ ${arr[k]}\
    \ -ne $((k+1)) ]]\n        then\n            flag=1\n            break\n     \
    \   fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i flag=0\n    for ((i=0; i<N; i++))\n \
    \   do\n        for ((j=i+1; j<N; j++))\n        do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]\n            then\n                flag=1\n              \
    \  break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n       \
    \ then\n            break\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n  \
    \  then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n        \
    \    then\n                flag=1\n                break\n            fi\n   \
    \     done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' '\
    \ '\\n' | sort -n))\n    local -a shifted=($(echo \"${arr[@]}\" | tr ' ' '\\n'\
    \ | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n    if [[ \"${sorted[@]}\"\
    \ == \"${shifted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[$i]} -gt\
    \ ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n         \
    \       arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n                flag=1\n\
    \            fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local count=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=0; j<n-1;\
    \ j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n        \
    \    then\n                count=$((count+1))\n            fi\n        done\n\
    \        if [[ $count -eq 0 ]]\n        then\n            echo \"true\"\n    \
    \        return\n        fi\n        count=0\n        arr=(${arr[@]:1} ${arr[0]})\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]\n            then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n                flag=1\n            fi\n     \
    \   done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr=(\"${arr[@]}\")\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n=${#arr[@]}\n    local -i min\n\
    \    local -i min_index\n    local -i temp\n    local -i flag=0\n    for ((i=0;\
    \ i<n-1; i++))\n    do\n        min=${sorted_arr[i]}\n        min_index=$i\n \
    \       for ((j=i+1; j<n; j++))\n        do\n            if [[ ${sorted_arr[j]}\
    \ -lt $min ]]\n            then\n                min=${sorted_arr[j]}\n      \
    \          min_index=$j\n            fi\n        done\n        temp=${sorted_arr[i]}\n\
    \        sorted_arr[i]=${sorted_arr[min_index]}\n        sorted_arr[min_index]=$temp\n\
    \    done\n    for ((k=0; k<n; k++))\n    do\n        if [[ ${arr[k]} -ne ${sorted_arr[k]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp6_7xcaot.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmp6_7xcaot.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmp6_7xcaot.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local sorted_arr=$(echo $arr | tr \" \" \"\\n\" | sort\
    \ -n | tr \"\\n\" \" \")\n    if [[ $arr == $sorted_arr ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -i i\n    local -i\
    \ j\n    local -i k\n    local -i n\n    local -i m\n    local -i flag\n    local\
    \ -i count\n    local -i max\n    local -i min\n    local -i min_index\n    local\
    \ -i max_index\n    local -i temp\n    local -i temp_index\n    local -i temp_count\n\
    \    local -i temp_flag\n    local -i temp_max\n    local -i temp_min\n    local\
    \ -i temp_min_index\n    local -i temp_max_index\n    n=${#arr[@]}\n    if [[\
    \ $n -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n    sorted_arr=($(printf\
    \ \"%s\\n\" \"${arr[@]}\" | sort -n))\n    for ((i=0; i<n; i++)); do\n       \
    \ if [[ ${arr[i]} -ne ${sorted_arr[i]} ]]; then\n            break\n        fi\n\
    \    done\n    if [[ $i -eq $n ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    flag=0\n    count=0\n    max=${arr[0]}\n    min=${arr[0]}\n    min_index=0\n\
    \    max_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -gt $max\
    \ ]]; then\n            max=${arr[i]}\n            max_index=$i\n        fi\n\
    \        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n      \
    \      min_index=$i\n        fi\n    done\n    if [[ $min_index -eq 0 ]]; then\n\
    \        for ((i=0; i<n; i++)); do\n            if [[ ${arr[i]} -gt $min ]]; then\n\
    \                flag=1\n                break\n            fi\n        done\n\
    \        if [[ $flag -eq 0 ]]; then\n            echo \"true\"\n            return\n\
    \        fi\n    fi\n    if [[ $max_index -eq\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphqiq0jd7.sh: line 88: unexpected argument `newline'' to conditional
    binary operator\n/tmp/tmphqiq0jd7.sh: line 88: syntax error near `-eq''\n/tmp/tmphqiq0jd7.sh:
    line 88: `    if [[ $max_index -eq''\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -n))\n    local -a shifted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n\
    \ | tail -n +2))\n    shifted+=(${sorted[0]})\n    if [[ \"${sorted[@]}\" == \"\
    ${shifted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local min_index=0\n    local temp=0\n   \
    \ local flag=0\n    for (( i=0; i<len; i++ ))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for (( j=i+1; j<len; j++ ))\n        do\n     \
    \       if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local count=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n  \
    \      for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n            then\n                count=$((count+1))\n       \
    \     fi\n        done\n    done\n    if [[ $count -eq 0 ]]\n    then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -n))\n    local -a shifted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n\
    \ | tail -n +2 | head -n -1))\n    if [[ \"${arr[@]}\" == \"${sorted[@]}\" ]];\
    \ then\n        echo \"true\"\n    elif [[ \"${arr[@]}\" == \"${shifted[@]}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i count=0\n    local -i min=0\n    local -i max=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n\
    \   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpkeoog4ru.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i temp=0\n\
    \    local -i flag=0\n    for ((i=0; i<N; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<N; j++))\n        do\n         \
    \   if [ ${arr[j]} -lt $min ]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n    done\n  \
    \  for ((i=0; i<N-1; i++))\n    do\n        if [ ${arr[i]} -gt ${arr[i+1]} ]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [ $flag -eq 1 ]\n    then\n        echo \"false\"\n    else\n        echo\
    \ \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local -i count=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -lt ${arr[min]} ]]\n\
    \        then\n            min=$i\n        fi\n    done\n    for ((i=0; i<n; i++))\n\
    \    do\n        if [[ ${arr[i]} -gt ${arr[max]} ]]\n        then\n          \
    \  max=$i\n        fi\n    done\n    if [[ $min -eq $max ]]\n    then\n      \
    \  echo \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++))\n    do\n\
    \        if [[ $i -eq $min ]]\n        then\n            continue\n        fi\n\
    \        if [[ ${arr[i]} -lt ${arr[min]} ]]\n        then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    for ((i=0; i<n; i++))\n\
    \    do\n        if [[ $i -eq $max ]]\n        then\n            continue\n  \
    \      fi\n        if [[ ${arr[i]} -gt ${arr[max]} ]]\n        then\n        \
    \    echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i N=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ count=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            flag=1\n            count=$((count+1))\n\
    \            arr[min_index]=${arr[i]}\n            arr[i]=$min\n        fi\n \
    \   done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp84yb1b8c.sh: line 34: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a sorted_arr\n    local -i i=0\n    local\
    \ -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i max=0\n\
    \    local -i min_index=0\n    local -i max_index=0\n    local -i flag=0\n   \
    \ local -i count=0\n    local -i flag_1=0\n    local -i flag_2=0\n    local -i\
    \ flag_3=0\n    local -i flag_4=0\n    local -i flag_5=0\n    local -i flag_6=0\n\
    \    local -i flag_7=0\n    local -i flag_8=0\n    local -i flag_9=0\n    local\
    \ -i flag_10=0\n    local -i flag_11=0\n    local -i flag_12=0\n    local -i flag_13=0\n\
    \    local -i flag_14=0\n    local -i flag_15=0\n    local -i flag_16=0\n    local\
    \ -i flag_17=0\n    local -i flag_18=0\n    local -i flag_19=0\n    local -i flag_20=0\n\
    \    local -i flag_21=0\n    local -i flag_22=0\n    local -i flag_23=0\n    local\
    \ -i flag_24=0\n    local -i flag_25=0\n    local -i flag_26=0\n    local -i flag_27=0\n\
    \    local -i flag_28=0\n    local -i flag_29=0\n    local -i flag_30=0\n    local\
    \ -i flag_31=0\n    local -i flag_32=0\n    local -i flag_33=0\n    local -i flag_34=0\n\
    \    local -i flag_35=0\n    local -i flag_36=0\n    local -i flag_37=0\n    local\
    \ -i flag_38=0\n    local -i flag_39=0\n    local -i flag_40=0\n    local -i flag_41=0\n\
    \    local -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpc6vf8vbj.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local -i count=0\n\
    \    local -i k=0\n    local -i temp=0\n    local -i index=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp8qa_d2wp.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    if [ $n -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n  \
    \  flag=0\n    for ((i=0; i<n-1; i++)); do\n        if [ ${arr[i]} -gt ${arr[i+1]}\
    \ ]; then\n            flag=1\n            break\n        fi\n    done\n    if\
    \ [ $flag -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n    for\
    \ ((i=0; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if\
    \ [ ${arr[i]} -gt ${arr[j]} ]; then\n                tmp=${arr[i]}\n         \
    \       arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n      \
    \  done\n    done\n    flag=0\n    for ((i=0; i<n-1; i++)); do\n        if [ ${arr[i]}\
    \ -gt ${arr[i+1]} ]; then\n            flag=1\n            break\n        fi\n\
    \    done\n    if [ $flag -eq 0 ]; then\n        echo \"true\"\n        return\n\
    \    fi\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i count=0\n    local -i max=0\n    local -i min=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n\
    \    local -i flag50\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpef4szc94.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=${arr[0]}\n    local -i max=${arr[0]}\n    local -i min_index=0\n\
    \    local -i max_index=0\n    local -i flag=0\n    local -i count=0\n    for\
    \ ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n         \
    \   min=${arr[i]}\n            min_index=$i\n        fi\n        if [[ ${arr[i]}\
    \ -gt $max ]]; then\n            max=${arr[i]}\n            max_index=$i\n   \
    \     fi\n    done\n    if [[ $min_index -eq 0 ]]; then\n        flag=1\n    fi\n\
    \    if [[ $max_index -eq $((n-1)) ]]; then\n        flag=1\n    fi\n    if [[\
    \ $flag -eq 0 ]]; then\n        echo \"false\"\n        return\n    fi\n    for\
    \ ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $max ]]; then\n         \
    \   count=$((count+1))\n        fi\n    done\n    if [[ $count -eq $((n-1)) ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffh6m5iy.sh: line 27: local: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]\n            then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n                flag=1\n            fi\n     \
    \   done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=0\n\
    \    local -i temp=0\n    local -i flag=0\n    local -i count=0\n    local -i\
    \ flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n\
    \    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i\
    \ flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n\
    \    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local\
    \ -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n\
    \    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local\
    \ -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n\
    \    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local\
    \ -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n\
    \    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local\
    \ -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n\
    \    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local\
    \ -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n\
    \    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n    local\
    \ -i flag50=0\n    local -i flag51=\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ flag=0\n    if [[ $len -eq 0 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    for ((i=0; i<len; i++)); do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -lt $min ]];\
    \ then\n                min=${arr[j]}\n                min_index=$j\n        \
    \    fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n   \
    \     echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqjfvo8m.sh: line 36: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i min=0\n  \
    \  local -i max=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp6o7ks7uk.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i len=${#arr[@]}\n\
    \    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n  \
    \  for ((i=0; i<len; i++)); do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -lt $min ]];\
    \ then\n                min=${arr[j]}\n                min_index=$j\n        \
    \    fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            arr[min_index]=${arr[i]}\n\
    \            arr[i]=$min\n        fi\n    done\n    for ((i=0; i<len-1; i++));\
    \ do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($@)\n    local -i len=${#arr[@]}\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local\
    \ -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local\
    \ zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j k\n    local -i N\n    local -i flag=0\n\
    \    arr=($@)\n    N=${#arr[@]}\n    for ((i=0; i<N-1; i++))\n    do\n       \
    \ for ((j=i+1; j<N; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                flag=1\n                break\n      \
    \      fi\n        done\n        if [[ $flag -eq 1 ]]\n        then\n        \
    \    break\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($@)\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i count=0\n    local -i max=0\n    local -i min=0\n\
    \    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i\
    \ flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n\
    \    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i\
    \ flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n\
    \    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local\
    \ -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n\
    \    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local\
    \ -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n\
    \    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local\
    \ -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n\
    \    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local\
    \ -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n\
    \    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local\
    \ -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n\
    \    local -i flag\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i max=0\n    local -i flag=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -lt ${arr[min]} ]]\n\
    \        then\n            min=$i\n        fi\n    done\n    for ((i=0; i<n; i++))\n\
    \    do\n        if [[ ${arr[i]} -gt ${arr[max]} ]]\n        then\n          \
    \  max=$i\n        fi\n    done\n    if [[ $min -eq $max ]]\n    then\n      \
    \  echo \"true\"\n        return 0\n    fi\n    for ((i=0; i<n; i++))\n    do\n\
    \        if [[ $i -eq $min ]]\n        then\n            continue\n        fi\n\
    \        if [[ ${arr[i]} -lt ${arr[min]} ]]\n        then\n            echo \"\
    false\"\n            return 0\n        fi\n    done\n    for ((i=0; i<n; i++))\n\
    \    do\n        if [[ $i -eq $max ]]\n        then\n            continue\n  \
    \      fi\n        if [[ ${arr[i]} -gt ${arr[max]} ]]\n        then\n        \
    \    echo \"false\"\n            return 0\n        fi\n    done\n    echo \"true\"\
    \n    return 0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmed_ltz8.sh: line 33: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n/tmp/tmpmed_ltz8.sh: line 40: [[: 3 4 5 1 2: syntax
    error in expression (error token is "4 5 1 2")\n/tmp/tmpmed_ltz8.sh: line 33:
    [[: 3 5 10 1 2: syntax error in expression (error token is "5 10 1 2")\n/tmp/tmpmed_ltz8.sh:
    line 40: [[: 3 5 10 1 2: syntax error in expression (error token is "5 10 1 2")\n/tmp/tmpmed_ltz8.sh:
    line 33: [[: 4 3 1 2: syntax error in expression (error token is "3 1 2")\n/tmp/tmpmed_ltz8.sh:
    line 40: [[: 4 3 1 2: syntax error in expression (error token is "3 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($@)\n    local -a sorted=($(echo ${arr[@]} | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n\
    \    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n        if [[ ${arr[i]}\
    \ -ne ${sorted[i]} ]]\n        then\n            flag=1\n            break\n \
    \       fi\n    done\n    if [[ flag -eq 0 ]]\n    then\n        echo \"true\"\
    \n        return\n    fi\n    for ((i=0; i<len; i++))\n    do\n        for ((j=0;\
    \ j<len; j++))\n        do\n            if [[ ${arr[j]} -eq ${sorted[i]} ]]\n\
    \            then\n                for ((k=0; k<len; k++))\n                do\n\
    \                    if [[ ${arr[k]} -eq ${shifted[j]} ]]\n                  \
    \  then\n                        shifted[k]=${shifted[j-1]}\n                \
    \        shifted[j-1]=${shifted[j]}\n                        shifted[j]=${shifted[j+1]}\n\
    \                        shifted[j+1]=${shifted[k]}\n                        break\n\
    \                    fi\n                done\n                break\n       \
    \     fi\n        done\n    done\n    flag=0\n    for ((i=0; i<len; i++))\n  \
    \  do\n        if [[ ${shifted[i]} -ne ${sorted[i]} ]]\n        then\n       \
    \     flag=1\n            break\n        fi\n    done\n    if [[ flag -eq 0 ]]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i count=0\n    local -i flag=0\n    local\
    \ -i temp=0\n    local -i min=0\n    local -i index=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpd9ileeq7.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    if [[ $len -eq 0 ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    local i=0\n    local j=0\n\
    \    local min=${arr[0]}\n    local min_index=0\n    for ((i=1; i<len; i++));\
    \ do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n \
    \           min_index=$i\n        fi\n    done\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ $i -eq $min_index ]]; then\n            continue\n        fi\n\
    \        if [[ ${arr[i]} -lt $min ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<$len; i++))\n    do\n  \
    \      for ((j=i+1; j<$len; j++))\n        do\n            if [ ${arr[$i]} -gt\
    \ ${arr[$j]} ]\n            then\n                temp=${arr[$i]}\n          \
    \      arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n                flag=1\n\
    \            fi\n        done\n    done\n    if [ $flag -eq 0 ]\n    then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    local temp=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i count=0\n    local -i flag=0\n\
    \    local -i temp=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i\
    \ flag3=0\n    local -i flag4=0\n    if [ $len -eq 0 ]; then\n        echo \"\
    true\"\n        return\n    fi\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [ ${arr[i]} -gt ${arr[j]} ]; then\n       \
    \         temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<len; i++)); do\n   \
    \     if [ ${arr[i]} -ne $i ]; then\n            flag=1\n            break\n \
    \       fi\n    done\n    if [ $flag -eq 0 ]; then\n        echo \"true\"\n  \
    \      return\n    fi\n    for ((i=0; i<len; i++)); do\n        if [ ${arr[i]}\
    \ -eq $i ]; then\n            count=$((count+1))\n        fi\n    done\n    if\
    \ [ $count -eq $len ]; then\n        echo \"true\"\n        return\n    fi\n \
    \   for ((i=0; i<len; i++)); do\n        if [ ${arr[i]} -eq $i ]; then\n     \
    \       flag1=1\n        fi\n        if [ ${arr[i]} -eq $((i+1)) ]; then\n   \
    \         flag2=1\n        fi\n        if [ ${arr[i]} -eq $((i+2)) ]; then\n \
    \           flag3=1\n        fi\n        if [ ${arr[i]} -eq $((i+3)) ]; then\n\
    \            flag4=1\n        fi\n    done\n    if [ $flag1 -eq 1 ] && [ $flag2\
    \ -eq 1 ] && [ $flag3 -eq\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp94ocl653.sh: line 83: syntax error near unexpected token `}''\n/tmp/tmp94ocl653.sh:
    line 83: `}''\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n                flag=1\n            fi\n       \
    \ done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i min=0\n  \
    \  local -i max=0\n    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpusrojf0q.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1;\
    \ j<len; j++ ))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n    \
    \        then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    for\
    \ (( i=0; i<len-1; i++ ))\n    do\n        if [ ${arr[i]} -gt ${arr[i+1]} ]\n\
    \        then\n            echo \"false\"\n            return\n        fi\n  \
    \  done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[$i]} -gt\
    \ ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n         \
    \       arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n                flag=1\n\
    \            fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i temp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        flag=0\n        for ((j=0; j<n-i-1;\
    \ j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n        \
    \    then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n                flag=1\n            fi\n    \
    \    done\n        if [[ $flag -eq 0 ]]\n        then\n            break\n   \
    \     fi\n    done\n    for ((k=0; k<n-1; k++))\n    do\n        if [[ ${arr[k]}\
    \ -gt ${arr[k+1]} ]]\n        then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=$(echo $arr | wc -w)\n    local arr_sorted=$(echo\
    \ $arr | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local arr_sorted_len=$(echo\
    \ $arr_sorted | wc -w)\n    if [ $arr_len -ne $arr_sorted_len ]; then\n      \
    \  echo \"false\"\n        return\n    fi\n    local i=0\n    while [ $i -lt $arr_len\
    \ ]; do\n        if [ $(echo $arr | cut -d ' ' -f $((i+1))) -ne $(echo $arr_sorted\
    \ | cut -d ' ' -f $((i+1))) ]; then\n            echo \"false\"\n            return\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i i\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( arr[i] > arr[i+1] )); then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i len=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n       \
    \     if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            flag=1\n            break\n        fi\n\
    \    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local min=0\n    local min_index=0\n    local temp=0\n    local flag=0\n\
    \    if [ $len -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n\
    \    for ((i=0; i<len; i++)); do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [ ${arr[j]} -lt $min ];\
    \ then\n                min=${arr[j]}\n                min_index=$j\n        \
    \    fi\n        done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n\
    \        arr[min_index]=$temp\n        if [ $i -ne $min_index ]; then\n      \
    \      flag=1\n        fi\n    done\n    if [ $flag -eq 1 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local\
    \ zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n  \
    \  local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    local temp=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local N=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    local temp=0\n    local result=\"true\"\n    if [ $N -eq\
    \ 0 ]; then\n        result=\"true\"\n    else\n        for ((i=0; i<N; i++));\
    \ do\n            for ((j=i+1; j<N; j++)); do\n                if [ ${arr[i]}\
    \ -gt ${arr[j]} ]; then\n                    temp=${arr[i]}\n                \
    \    arr[i]=${arr[j]}\n                    arr[j]=$temp\n                    flag=1\n\
    \                fi\n            done\n            if [ $flag -eq 0 ]; then\n\
    \                result=\"true\"\n                break\n            else\n  \
    \              result=\"false\"\n            fi\n        done\n    fi\n    echo\
    \ $result\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i min_index=0\n    local -i flag=0\n    for ((i=0;\
    \ i<n; i++))\n    do\n        min=${arr[i]}\n        min_index=i\n        for\
    \ ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n \
    \           then\n                min=${arr[j]}\n                min_index=j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1;\
    \ j<len; j++ ))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n  \
    \          then\n                flag=1\n                break\n            fi\n\
    \        done\n        if [[ flag -eq 1 ]]\n        then\n            break\n\
    \        fi\n    done\n    if [[ flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local N=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<N; i++))\n    do\n        for ((j=i+1; j<N;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                flag=1\n                break\n            fi\n     \
    \   done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n    \
    \    fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=$(echo $arr | wc -w)\n    local arr_sorted=$(echo\
    \ $arr | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local arr_sorted_len=$(echo\
    \ $arr_sorted | wc -w)\n    if [[ $arr_len -eq 0 ]]; then\n        echo \"true\"\
    \n    elif [[ $arr_len -eq $arr_sorted_len ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i flag=0\n    local -i temp=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n            \
    \    temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((k=0; k<n-1; k++))\n    do\n\
    \        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    arr=($1)\n    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    for ((i=0; i<$len; i++)); do\n       \
    \ if [ ${arr[$i]} -gt ${arr[$((i+1))]} ]; then\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    local temp=0\n    for (( i=0; i<$len; i++ ))\n    do\n\
    \        for (( j=i+1; j<$len; j++ ))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n       \
    \         arr[i]=${arr[j]}\n                arr[j]=$temp\n                flag=1\n\
    \            fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=${#arr[@]}\n    local i=0\n    local\
    \ j=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<$arr_len; i++))\n\
    \    do\n        for ((j=i+1; j<$arr_len; j++))\n        do\n            if [[\
    \ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n\
    \                arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n         \
    \       flag=1\n            fi\n        done\n    done\n    if [[ $flag -eq 0\
    \ ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local temp=0\n    local\
    \ flag=0\n    local size=${#arr[@]}\n    for (( i=0; i<$size; i++ ))\n    do\n\
    \        for (( j=0; j<$size-1; j++ ))\n        do\n            if [[ ${arr[j]}\
    \ -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n     \
    \           arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n             \
    \   flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n     \
    \   then\n            echo \"true\"\n            return\n        fi\n    done\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=${#arr[@]}\n    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n       \
    \         arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n   \
    \     done\n    done\n    for ((k=0; k<len; k++))\n    do\n        if [[ ${arr[k]}\
    \ -ne $((k+1)) ]]\n        then\n            flag=1\n            break\n     \
    \   fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i flag=0\n    local -i flag2=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -lt ${arr[min]} ]]\n\
    \        then\n            min=$i\n        fi\n    done\n    for ((i=0; i<n; i++))\n\
    \    do\n        if [[ ${arr[i]} -gt ${arr[max]} ]]\n        then\n          \
    \  max=$i\n        fi\n    done\n    if [[ $min -eq $max ]]\n    then\n      \
    \  echo \"true\"\n        return 0\n    fi\n    for ((i=0; i<n; i++))\n    do\n\
    \        if [[ ${arr[i]} -lt ${arr[min]} ]]\n        then\n            min=$i\n\
    \        fi\n    done\n    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]}\
    \ -gt ${arr[max]} ]]\n        then\n            max=$i\n        fi\n    done\n\
    \    if [[ $min -eq $max ]]\n    then\n        echo \"true\"\n        return 0\n\
    \    fi\n    if [[ $min -lt $max ]]\n    then\n        for ((i=min; i<max; i++))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n            then\n\
    \                flag=1\n                break\n            fi\n        done\n\
    \        if [[ $flag -eq 0 ]]\n        then\n            echo \"true\"\n     \
    \       return 0\n        fi\n    fi\n    if [[ $min -gt $max ]]\n    then\n \
    \       for ((i=min; i<n; i++))\n        do\n            if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n            then\n                flag=1\n                break\n      \
    \      fi\n        done\n        if [[ $flag -eq 0 ]]\n        then\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpo2v2ozm8.sh: line 98: syntax error near unexpected token `}''\n/tmp/tmpo2v2ozm8.sh:
    line 98: `}''\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i o\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i N=${#arr[@]}\n    local -i flag=0\n \
    \   local -i count=0\n    local -i temp=0\n    local -i temp_count=0\n    local\
    \ -i temp_flag=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local -i temp_N=0\n\
    \    local -i temp_count=0\n    local -i temp_flag=0\n    local -i temp_j=0\n\
    \    local -i temp_i=0\n    local -i temp_N=0\n    local -i temp_count=0\n   \
    \ local -i temp_flag=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local\
    \ -i temp_N=0\n    local -i temp_count=0\n    local -i temp_flag=0\n    local\
    \ -i temp_j=0\n    local -i temp_i=0\n    local -i temp_N=0\n    local -i temp_count=0\n\
    \    local -i temp_flag=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local\
    \ -i temp_N=0\n    local -i temp_count=0\n    local -i temp_flag=0\n    local\
    \ -i temp_j=0\n    local -i temp_i=0\n    local -i temp_N=0\n    local -i temp_count=0\n\
    \    local -i temp_flag=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local\
    \ -i temp_N=0\n    local -i temp_count=0\n    local -i temp_flag=0\n    local\
    \ -i temp_j=0\n    local -i temp_i=0\n    local -i temp_N=0\n    local -i temp_count=0\n\
    \    local -i temp_flag=0\n    local -i temp_j=0\n   \n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=${#arr[@]}\n    local i=0\n    local\
    \ j=0\n    local min=0\n    local min_index=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<$arr_len; i++ ))\n    do\n        min=${arr[$i]}\n        min_index=$i\n\
    \        for (( j=$i; j<$arr_len; j++ ))\n        do\n            if [[ ${arr[$j]}\
    \ -lt $min ]]\n            then\n                min=${arr[$j]}\n            \
    \    min_index=$j\n            fi\n        done\n        temp=${arr[$i]}\n   \
    \     arr[$i]=${arr[$min_index]}\n        arr[$min_index]=$temp\n        if [[\
    \ $min_index -gt $i ]]\n        then\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi1bw0djx.sh: line 38: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]\n            then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n                flag=1\n            fi\n     \
    \   done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -a arr_copy\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local\
    \ -i max=0\n    local -i min_index=0\n    local -i max_index=0\n    local -i flag=0\n\
    \    local -i count=0\n    local -i flag_1=0\n    local -i flag_2=0\n    local\
    \ -i flag_3=0\n    local -i flag_4=0\n    local -i flag_5=0\n    local -i flag_6=0\n\
    \    local -i flag_7=0\n    local -i flag_8=0\n    local -i flag_9=0\n    local\
    \ -i flag_10=0\n    local -i flag_11=0\n    local -i flag_12=0\n    local -i flag_13=0\n\
    \    local -i flag_14=0\n    local -i flag_15=0\n    local -i flag_16=0\n    local\
    \ -i flag_17=0\n    local -i flag_18=0\n    local -i flag_19=0\n    local -i flag_20=0\n\
    \    local -i flag_21=0\n    local -i flag_22=0\n    local -i flag_23=0\n    local\
    \ -i flag_24=0\n    local -i flag_25=0\n    local -i flag_26=0\n    local -i flag_27=0\n\
    \    local -i flag_28=0\n    local -i flag_29=0\n    local -i flag_30=0\n    local\
    \ -i flag_31=0\n    local -i flag_32=0\n    local -i flag_33=0\n    local -i flag_34=0\n\
    \    local -i flag_35=0\n    local -i flag_36=0\n    local -i flag_37=0\n    local\
    \ -i flag_38=0\n    local -i flag_39=0\n    local -i flag_40=0\n    local -i flag_\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: 'b"/tmp/tmp0jo4p947.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i count=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            count=$((count+1))\n\
    \            if [[ $count -gt 1 ]]\n            then\n                flag=1\n\
    \                break\n            fi\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i temp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    if [[ $n -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n\
    \    for ((i=0; i<n-1; i++)); do\n        flag=0\n        for ((j=0; j<n-i-1;\
    \ j++)); do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]; then\n          \
    \      temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n\
    \                flag=1\n            fi\n        done\n        if [[ $flag -eq\
    \ 0 ]]; then\n            break\n        fi\n    done\n    for ((k=0; k<n-1; k++));\
    \ do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\
    \    local -i flag=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n\
    \    local -i flag50=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpd_ev15iu.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i flag=0\n\
    \    local -i temp=0\n    local -i count=0\n    local -i flag_1=0\n    local -i\
    \ flag_2=0\n    local -i flag_3=0\n    local -i flag_4=0\n    local -i flag_5=0\n\
    \    local -i flag_6=0\n    local -i flag_7=0\n    local -i flag_8=0\n    local\
    \ -i flag_9=0\n    local -i flag_10=0\n    local -i flag_11=0\n    local -i flag_12=0\n\
    \    local -i flag_13=0\n    local -i flag_14=0\n    local -i flag_15=0\n    local\
    \ -i flag_16=0\n    local -i flag_17=0\n    local -i flag_18=0\n    local -i flag_19=0\n\
    \    local -i flag_20=0\n    local -i flag_21=0\n    local -i flag_22=0\n    local\
    \ -i flag_23=0\n    local -i flag_24=0\n    local -i flag_25=0\n    local -i flag_26=0\n\
    \    local -i flag_27=0\n    local -i flag_28=0\n    local -i flag_29=0\n    local\
    \ -i flag_30=0\n    local -i flag_31=0\n    local -i flag_32=0\n    local -i flag_33=0\n\
    \    local -i flag_34=0\n    local -i flag_35=0\n    local -i flag_36=0\n    local\
    \ -i flag_37=0\n    local -i flag_38=0\n    local -i flag_39=0\n    local -i flag_40=0\n\
    \    local -i flag_41=0\n    local -i flag_42=0\n    local -i flag_43=0\n   \n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n \
    \   local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n\
    \    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n\
    \    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n\
    \    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n\
    \    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n\
    \    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local\
    \ eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n\
    \    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local\
    \ nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n\
    \    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local\
    \ www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n\
    \    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0\n    local\
    \ f\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=\" \" read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i min\n    local -i min_index\n    local -i max\n    local -i\
    \ max_index\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            arr[min_index]=${arr[i]}\n            arr[i]=$min\n\
    \        fi\n    done\n    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]\n        then\n            flag=1\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local N=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local min=0\n    local min_index=0\n    local temp=0\n   \
    \ local flag=0\n    for ((i=0; i<N; i++))\n    do\n        min=${arr[i]}\n   \
    \     min_index=$i\n        for ((j=i+1; j<N; j++))\n        do\n            if\
    \ [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i len=${#arr[@]}\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local\
    \ -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n\
    \    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local\
    \ -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n\
    \    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local\
    \ -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n\
    \    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local\
    \ -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n\
    \    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local\
    \ -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n\
    \    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local\
    \ -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n\
    \    local -i zzz\n    local -i aaaa\n    local -i bbbb\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n        \
    \    then\n                flag=1\n                break\n            fi\n   \
    \     done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342479
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local arr_len=$(echo $arr | wc -w)\n    local i=0\n\
    \    local j=0\n    local temp=0\n    local flag=0\n    for (( i=0; i<$arr_len;\
    \ i++ ))\n    do\n        for (( j=0; j<$arr_len-1; j++ ))\n        do\n     \
    \       if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n               \
    \ temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n\
    \                flag=1\n            fi\n        done\n        if [[ $flag -eq\
    \ 0 ]]\n        then\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33evnlpg.sh: line 34: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n/tmp/tmp33evnlpg.sh: line 34: [[: 3 5 10 1 2: syntax
    error in expression (error token is "5 10 1 2")\n/tmp/tmp33evnlpg.sh: line 34:
    [[: 4 3 1 2: syntax error in expression (error token is "3 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i count=0\n    local -i i=0\n    local\
    \ -i j=0\n    local -i len=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i temp_index=0\n    local -i temp_count=0\n \
    \   local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=i\n        for ((j=i+1; j<len; j++))\n        do\n        \
    \    if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            count=$((count+1))\n        fi\n\
    \    done\n    for ((i=0; i<len-1; i++))\n    do\n        if [[ ${arr[i]} -gt\
    \ ${arr[i+1]} ]]\n        then\n            flag=1\n            break\n      \
    \  fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    local count=0\n    for\
    \ ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n            \
    \    temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((k=0; k<len; k++))\n    do\n\
    \        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n        \
    \    then\n                flag=1\n                break\n            fi\n   \
    \     done\n        if [[ $flag -eq 1 ]]\n        then\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    if [[ $len -eq 0 ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    local i=0\n    local j=0\n\
    \    local min=${arr[0]}\n    local min_index=0\n    while [[ $i -lt $len ]];\
    \ do\n        if [[ ${arr[$i]} -lt $min ]]; then\n            min=${arr[$i]}\n\
    \            min_index=$i\n        fi\n        i=$((i+1))\n    done\n    i=0\n\
    \    while [[ $i -lt $len ]]; do\n        if [[ $i -eq $min_index ]]; then\n \
    \           i=$((i+1))\n            continue\n        fi\n        if [[ ${arr[$i]}\
    \ -lt $min ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \        i=$((i+1))\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(echo ${arr[@]} | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n\
    \ | tail -n +2))\n    shifted+=(${arr[0]})\n    if [[ \"${arr[@]}\" == \"${sorted[@]}\"\
    \ ]] || [[ \"${shifted[@]}\" == \"${sorted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i count\n    local -i flag\n    local -i temp\n    read -a\
    \ arr <<< \"$1\"\n    n=${#arr[@]}\n    if [[ $n -eq 0 ]]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++)); do\n        count=0\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                count=$((count+1))\n            fi\n        done\n\
    \        if [[ $count -eq $((n-i-1)) ]]; then\n            flag=1\n          \
    \  for ((k=i+1; k<n; k++)); do\n                if [[ ${arr[k]} -lt ${arr[k-1]}\
    \ ]]; then\n                    flag=0\n                    break\n          \
    \      fi\n            done\n            if [[ $flag -eq 1 ]]; then\n        \
    \        echo \"true\"\n                return\n            fi\n        fi\n \
    \   done\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"true\"\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=$1\n    local -a arr_copy\n    local -a arr_sorted\n    local\
    \ -a arr_sorted_copy\n    local -i i=0\n    local -i j=0\n    local -i k=0\n \
    \   local -i l=0\n    local -i n=0\n    local -i m=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i\
    \ dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i\
    \ hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i\
    \ bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local\
    \ -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local\
    \ -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local flag=0\n    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]\n        then\n            flag=1\n            break\n  \
    \      fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i min=0\n    local -i min_index=0\n    local -i max=0\n \
    \   local -i max_index=0\n    local -i flag=0\n    local -i flag1=0\n    local\
    \ -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(echo ${arr[@]} | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n\
    \    local -a temp=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i h\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n\
    \    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n\
    \    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n\
    \    local -i ooo=0\n    local -i ppp=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpm8j0jgb7.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i count\n\
    \    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n    if [ $n -eq 0 ]; then\n\
    \        echo \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++)); do\n\
    \        count=0\n        for ((j=i+1; j<n; j++)); do\n            if [ ${arr[i]}\
    \ -gt ${arr[j]} ]; then\n                count=$((count+1))\n            fi\n\
    \        done\n        if [ $count -gt 1 ]; then\n            flag=1\n       \
    \     break\n        fi\n    done\n    if [ $flag -eq 1 ]; then\n        echo\
    \ \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=(\"${arr[@]}\")\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i flag=0\n\
    \    local -i temp=0\n    local -i temp1=0\n    local -i temp2=0\n    local -i\
    \ temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n\
    \    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i\
    \ temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n\
    \    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local\
    \ -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n\
    \    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local\
    \ -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n\
    \    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local\
    \ -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n\
    \    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local\
    \ -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n\
    \    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local\
    \ -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48=0\n\
    \    local -i temp49=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt\
    \ $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyir2syg5.sh: line 33: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n          \
    \  then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n            fi\n        done\n    done\n    if\
    \ [ ${arr[0]} -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i flag=0\n    if [ $n -eq 0 ]; then\n       \
    \ echo \"true\"\n        return\n    fi\n    for ((i=0; i<n; i++)); do\n     \
    \   min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n\
    \            if [ ${arr[j]} -lt $min ]; then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n    done\n  \
    \  for ((k=0; k<n-1; k++)); do\n        if [ ${arr[k]} -gt ${arr[k+1]} ]; then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 1 ]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqhhp4px.sh: line 38: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")\n'''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local arr=($@)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    local flag2=0\n    local\
    \ flag3=0\n    local flag4=0\n    local flag5=0\n    local flag6=0\n    local\
    \ flag7=0\n    local flag8=0\n    local flag9=0\n    local flag10=0\n    local\
    \ flag11=0\n    local flag12=0\n    local flag13=0\n    local flag14=0\n    local\
    \ flag15=0\n    local flag16=0\n    local flag17=0\n    local flag18=0\n    local\
    \ flag19=0\n    local flag20=0\n    local flag21=0\n    local flag22=0\n    local\
    \ flag23=0\n    local flag24=0\n    local flag25=0\n    local flag26=0\n    local\
    \ flag27=0\n    local flag28=0\n    local flag29=0\n    local flag30=0\n    local\
    \ flag31=0\n    local flag32=0\n    local flag33=0\n    local flag34=0\n    local\
    \ flag35=0\n    local flag36=0\n    local flag37=0\n    local flag38=0\n    local\
    \ flag39=0\n    local flag40=0\n    local flag41=0\n    local flag42=0\n    local\
    \ flag43=0\n    local flag44=0\n    local flag45=0\n    local flag46=0\n    local\
    \ flag47=0\n    local flag48=0\n    local flag49=0\n    local flag50=0\n    local\
    \ flag51=0\n    local flag52=0\n    local flag53=0\n    local flag54=0\n    local\
    \ flag55=0\n    local flag56=0\n    local flag57=0\n    local flag58=0\n    local\
    \ flag59=0\n    local flag60=0\n    local flag61=0\n    local flag62=0\n    local\
    \ flag63=0\n    local flag64=0\n    local flag65=0\n    local flag66=0\n    local\
    \ flag67=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ count=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=i\n        for ((j=i+1; j<n; j++))\n        do\n          \
    \  if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            count=$((count+1))\n            if [[ $count\
    \ -gt 1 ]]\n            then\n                flag=1\n                break\n\
    \            fi\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a sorted=($(echo ${arr[@]} | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' ' '))\n    local -a shifted_arr=($(echo ${shifted[@]} | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' '))\n    local -a shifted_arr_rev=($(echo ${shifted[@]}\
    \ | tr ' ' '\\n' | sort -n | tac | tr '\\n' ' '))\n    if [[ ${arr[@]} == ${sorted[@]}\
    \ ]]; then\n        echo \"true\"\n    elif [[ ${arr[@]} == ${shifted_arr[@]}\
    \ ]]; then\n        echo \"true\"\n    elif [[ ${arr[@]} == ${shifted_arr_rev[@]}\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660342480
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i max=0\n    local -i min=0\n    local -i flag=0\n    local\
    \ -i count=0\n    for ((i=0; i<n; i++))\n    do\n        if [[ ${arr[i]} -lt ${arr[i+1]}\
    \ ]]\n        then\n            flag=1\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"true\"\n        return\n    fi\n    for ((i=0;\
    \ i<n; i++))\n    do\n        max=${arr[i]}\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [[ ${arr[j]} -gt $max ]]\n            then\n     \
    \           max=${arr[j]}\n            fi\n        done\n        if [[ $max -eq\
    \ ${arr[i]} ]]\n        then\n            count=$count+1\n        fi\n    done\n\
    \    if [[ $count -eq $n ]]\n    then\n        echo \"false\"\n        return\n\
    \    fi\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n        for\
    \ ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n \
    \           then\n                min=${arr[j]}\n            fi\n        done\n\
    \        if [[ $min -eq ${arr[i]} ]]\n        then\n            count=$count+1\n\
    \        fi\n    done\n    if [[ $count -eq $n ]]\n    then\n        echo \"false\"\
    \n        return\n    fi\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpap30s481.sh: line 24: local: `3 4 5 1 2'': invalid variable name
    for name reference\n/tmp/tmpap30s481.sh: line 24: local: `3 5 10 1 2'': invalid
    variable name for name reference\n/tmp/tmpap30s481.sh: line 24: local: `4 3 1
    2'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660342480
