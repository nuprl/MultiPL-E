name: HumanEval_68_pluck
language: sh
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n#\
  \ >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n\
  # []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the first\
  \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
  \ 10000\n# * 0 <= node.value\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local nodes=($1)\n  local min_even_index=\n  local min_even_value=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node %\
    \ 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      elif [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min=\n  local min_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n  \
    \  local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      min=0\n    \
    \  min_index=$i\n      break\n    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]];\
    \ then\n      if [[ -z $min ]] || [[ $node -lt $min ]]; then\n        min=$node\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo '[]'\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($@)\n  local min=10000\n  local index=0\n  local i=0\n  for node in \"\
    ${nodes[@]}\"; do\n    if [[ $((node % 2)) == 0 ]] && [[ $node -lt $min ]]; then\n\
    \      min=$node\n      index=$i\n    fi\n    i=$((i + 1))\n  done\n  if [[ $min\
    \ == 10000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_index=${#nodes[@]}\n  local\
    \ -i min_value=${nodes[0]}\n  local -i i=0\n  for n in \"${nodes[@]}\"; do\n \
    \   if ((n % 2 == 0)); then\n      if ((n < min_value)); then\n        min_value=$n\n\
    \        min_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if ((min_index\
    \ == ${#nodes[@]})); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "    local nodes=($@)\n    local smallest_value=\n\
    \    local smallest_index=\n    for ((i=0; i<${#nodes[@]}; i++)); do\n       \
    \ if [[ \"${nodes[$i]}\" =~ ^[0-9]+$ ]]; then\n            if [[ \"${nodes[$i]}\"\
    \ -eq 0 ]] || [[ \"${nodes[$i]}\" -ge 2 && \"${nodes[$i]}\"%2 -eq 0 ]]; then\n\
    \                if [[ -z \"$smallest_value\" ]] || [[ \"${nodes[$i]}\" -lt \"\
    $smallest_value\" ]]; then\n                    smallest_value=\"${nodes[$i]}\"\
    \n                    smallest_index=\"$i\"\n                fi\n            fi\n\
    \        fi\n    done\n    if [[ -z \"$smallest_value\" ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n    fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local smallest_value=\n  local smallest_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_value=0\n\
    \      smallest_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ ${nodes[$i]}\
    \ -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n        smallest_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "  local nodes=($1)\n  local evens=()\n  local even_indexes=()\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n      even_indexes+=(\"$i\")\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $(( ${nodes[$i]}\
    \ % 2 )) -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      even_indexes+=(\"\
    $i\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n\
    \  else\n    local min_even=${evens[0]}\n    local min_even_index=${even_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[$i]}\n        min_even_index=${even_indexes[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "  local nodes=($@)\n  local min=10000\n  local min_index=10000\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n  \
    \    echo \"[\\\"0\\\", \\\"$i\\\"]\"\n      return\n    fi\n    if [[ ${nodes[$i]}\
    \ -lt $min && ${nodes[$i]} -gt 0 && $((${nodes[$i]} % 2)) -eq 0 ]]; then\n   \
    \   min=${nodes[$i]}\n      min_index=$i\n    fi\n  done\n  if [[ $min -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_value=\n  local smallest_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value\
    \ ]]; then\n        smallest_value=$node\n        smallest_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local evens=()\n  local evens_idx=()\n  local\
    \ idx=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      evens+=($node)\n      evens_idx+=($idx)\n    fi\n    ((idx++))\n\
    \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local\
    \ min_even=${evens[0]}\n    local min_even_idx=${evens_idx[0]}\n    for idx in\
    \ \"${!evens[@]}\"; do\n      if [[ ${evens[$idx]} -lt $min_even ]]; then\n  \
    \      min_even=${evens[$idx]}\n        min_even_idx=${evens_idx[$idx]}\n    \
    \  fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_idx\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local -a evens=()\n    local -a even_indexes=()\n\
    \    local -a even_values=()\n    local -a even_indices=()\n    local -a even_index_indices=()\n\
    \    local -a even_index_values=()\n    local -a even_index_indices_sorted=()\n\
    \    local -a even_index_values_sorted=()\n    local -a even_index_indices_sorted_unique=()\n\
    \    local -a even_index_values_sorted_unique=()\n    local -a even_index_indices_sorted_unique_sorted=()\n\
    \    local -a even_index_values_sorted_unique_sorted=()\n    local -a even_index_indices_sorted_unique_sorted_sorted=()\n\
    \    local -a even_index_values_sorted_unique_sorted_sorted=()\n    local -a even_index_indices_sorted_unique_sorted_sorted_sorted=()\n\
    \    local -a even_index_values_sorted_unique_sorted_sorted_sorted=()\n    local\
    \ -a even_index_indices_sorted_unique_sorted_sorted_sorted_sorted=()\n    local\
    \ -a even_index_values_sorted_unique_sorted_sorted_sorted_sorted=()\n    local\
    \ -a even_index_indices_sorted_unique_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a even_index_values_sorted_unique_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a even_index_indices_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a even_index_values_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a even_index_indices_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted",
  "  local nodes=(\"$@\")\n  local smallest_value=\n  local smallest_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $node\
    \ -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n      break\n\
    \    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ -z $smallest_value ]];\
    \ then\n      smallest_value=$node\n      smallest_index=$i\n    elif [[ $node\
    \ -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ $node -lt $smallest_value ]]; then\n \
    \     smallest_value=$node\n      smallest_index=$i\n    fi\n  done\n  if [[ -z\
    \ $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min=10000\n\
    \  local min_index=10000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if (( ${nodes[$i]}\
    \ % 2 == 0 && ${nodes[$i]} < $min )); then\n      min=${nodes[$i]}\n      min_index=$i\n\
    \    fi\n  done\n  if (( $min == 10000 )); then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "    local nodes=$1\n  \
    \  local min_even_value=\n    local min_even_index=\n    local index=0\n    for\
    \ node in $nodes; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n           \
    \ if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n     \
    \           min_even_value=$node\n                min_even_index=$index\n    \
    \        fi\n        fi\n        index=$((index + 1))\n    done\n    if [[ -z\
    \ $min_even_value ]]; then\n        echo '[]'\n    else\n        echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n\
    \  local -a evens=()\n  local -a evens_index=()\n  local -a result=()\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      evens+=($node)\n      evens_index+=($i)\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
    \    local min_even_index=${evens_index[0]}\n    for i in \"${!evens[@]}\"; do\n\
    \      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_index=${evens_index[$i]}\n      fi\n    done\n    result+=($min_even)\n\
    \    result+=($min_even_index)\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\
    \"]\"\n  fi", "  local -a nodes=($@)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n\
    \      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((i++))\n  done\n\
    \  if [[ $min_even_value -eq 10000000000 ]]; then\n    echo '[]'\n  else\n   \
    \ echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local\
    \ min_even_value=10000\n  local min_even_index=10000\n  local index=0\n  for node\
    \ in $nodes; do\n    if [ $((node % 2)) -eq 0 ] && [ $node -lt $min_even_value\
    \ ]; then\n      min_even_value=$node\n      min_even_index=$index\n    fi\n \
    \   index=$((index + 1))\n  done\n  if [ $min_even_value -eq 10000 ]; then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local evens=()\n  local even_index=()\n\
    \  local even_min=()\n  local even_min_index=()\n  local even_min_index_value=()\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      evens+=($node)\n      even_index+=($index)\n    fi\n    index=$((index\
    \ + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    even_min=${evens[0]}\n    even_min_index=0\n    for i in \"${!evens[@]}\"\
    ; do\n      if [[ ${evens[$i]} -lt $even_min ]]; then\n        even_min=${evens[$i]}\n\
    \        even_min_index=$i\n      fi\n    done\n    even_min_index_value=${even_index[$even_min_index]}\n\
    \    echo \"[\\\"$even_min\\\", \\\"$even_min_index_value\\\"]\"\n  fi", "  local\
    \ -n array=$1\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#array[@]}; i++)); do\n    local value=${array[$i]}\n    if [[ $((value\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=\"$1\"\n  local smallest_value=\"\"\n  local smallest_index=\"\"\n  local\
    \ index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n  \
    \    if [ -z \"$smallest_value\" ] || [ $node -lt $smallest_value ]; then\n  \
    \      smallest_value=$node\n        smallest_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [ -z \"$smallest_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -i min_even_value=100000000\n  local -i min_even_index=100000000\n  local -i\
    \ min_even_count=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif (( node == min_even_value )); then\n        min_even_count+=1\n  \
    \    fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_count > 0 )); then\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n   \
    \ echo \"[]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local\
    \ min_even_index=\n  local i=0\n  for node in $nodes; do\n    if [ $((node % 2))\
    \ -eq 0 ]; then\n      if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value\
    \ ]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $smallest_even_value ]] || [[ $node -lt $smallest_even_value ]];\
    \ then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local\
    \ -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\";\
    \ do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 100000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n\
    \  local -i min_even_value=9999999999\n  local -i min_even_index=9999999999\n\
    \  local -i n=${#nodes[@]}\n  while (( i < n )); do\n    local -i node=${nodes[i]}\n\
    \    if (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   (( i++ ))\n  done\n  if (( min_even_value == 9999999999 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local min_index=0\n  local min_value=0\n\
    \  local index=0\n  for node in $nodes; do\n    if (( node % 2 == 0 )); then\n\
    \      if (( min_value == 0 || node < min_value )); then\n        min_value=$node\n\
    \        min_index=$index\n      fi\n    fi\n    (( index++ ))\n  done\n  if ((\
    \ min_value == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n\
    \  local smallest_even_index=\n  local smallest_even_value_index=\n  local node_value=\n\
    \  local node_index=\n  for node_index in \"${!nodes[@]}\"; do\n    node_value=\"\
    ${nodes[$node_index]}\"\n    if [[ \"$node_value\" =~ ^[0-9]+$ ]]; then\n    \
    \  if [[ \"$node_value\" -eq 0 ]] || [[ \"$node_value\" -ge 2 && \"$node_value\"\
    %2 -eq 0 ]]; then\n        if [[ -z \"$smallest_even_value\" ]] || [[ \"$node_value\"\
    \ -lt \"$smallest_even_value\" ]]; then\n          smallest_even_value=\"$node_value\"\
    \n          smallest_even_index=\"$node_index\"\n        fi\n      fi\n    fi\n\
    \  done\n  if [[ -z \"$smallest_even_value\" ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n \
    \ fi", "  local nodes=(\"$@\")\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local evens=\"$(echo \"$nodes\" | tr ' ' '\\n' | grep -E\
    \ '^[0-9]+$' | grep -E '^[02468]$')\"\n  local min_even=\"$(echo \"$evens\" |\
    \ sort -n | head -n 1)\"\n  local min_even_index=\"$(echo \"$nodes\" | tr ' '\
    \ '\\n' | grep -n -E \"^$min_even$\" | head -n 1 | cut -d ':' -f 1)\"\n  if [\
    \ -z \"$min_even\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] ||\
    \ [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n      \
    \  min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n  local\
    \ -i index=0\n  local -i value\n  for value in \"${nodes[@]}\"; do\n    if [[\
    \ $((value % 2)) -eq 0 ]]; then\n      if [[ $value -lt $min_even_value ]]; then\n\
    \        min_even_value=$value\n        min_even_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 10000000000 ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value\n  local smallest_even_value_index\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even ]] || [[ $node -lt $min_even\
    \ ]]; then\n        min_even=$node\n        min_even_index=$i\n      fi\n    fi\n\
    \  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local\
    \ evens=()\n  local evens_indexes=()\n  local i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indexes+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_indexes[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=${evens_indexes[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "  declare -a nodes=($1)\n  declare -a evens\n  declare -a odds\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \    else\n      odds+=($node)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    declare -a evens_sorted=($(printf \"%s\\\
    n\" \"${evens[@]}\" | sort -n))\n    declare -a odds_sorted=($(printf \"%s\\n\"\
    \ \"${odds[@]}\" | sort -n))\n    declare -a nodes_sorted=($(printf \"%s\\n\"\
    \ \"${nodes[@]}\" | sort -n))\n    declare -a evens_sorted_indexes\n    declare\
    \ -a odds_sorted_indexes\n    for even in \"${evens_sorted[@]}\"; do\n      evens_sorted_indexes+=($(printf\
    \ \"%s\\n\" \"${nodes_sorted[@]}\" | grep -n \"$even\" | cut -d: -f1))\n    done\n\
    \    for odd in \"${odds_sorted[@]}\"; do\n      odds_sorted_indexes+=($(printf\
    \ \"%s\\n\" \"${nodes_sorted[@]}\" | grep -n \"$odd\" | cut -d: -f1))\n    done\n\
    \    declare -a evens_sorted_indexes_sorted=($(printf \"%s\\n\" \"${evens_sorted_indexes[@]}\"\
    \ | sort -n))\n    declare -a odds_sorted_indexes_sorted=($(printf \"%s\\n\" \"\
    ${odds_sorted_indexes[@]}\" | sort -n))\n    declare -a evens_sorted_indexes_sorted_filtered\n\
    \    declare -a odds_sorted_indexes_sorted_filtered\n    for even_index in \"\
    ${evens_sorted_indexes_sorted[@]}\"; do\n      if [[ $(printf \"%", "  local -a\
    \ nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local min_even=0\n  local min_even_index=0\n\
    \  for i in \"${nodes[@]}\"; do\n    if [[ $((i % 2)) -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      evens_index[$j]=$k\n      ((j++))\n    fi\n    ((k++))\n  done\n  if [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_even_index=${evens_index[0]}\n  for i in \"${evens[@]}\"; do\n    if [[\
    \ $i -lt $min_even ]]; then\n      min_even=$i\n      min_even_index=${evens_index[$j]}\n\
    \    fi\n    ((j++))\n  done\n  result[0]=$min_even\n  result[1]=$min_even_index\n\
    \  echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"", "  local nodes=($@)\n\
    \  local min=\n  local min_index=\n  local i=\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min=0\n      min_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      if [[ -z $min ]] || [[ ${nodes[$i]} -lt $min ]]; then\n        min=${nodes[$i]}\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local -a evens=()\n    for node in \"${nodes[@]}\"\
    ; do\n        if (( node % 2 == 0 )); then\n            evens+=($node)\n     \
    \   fi\n    done\n    if (( ${#evens[@]} == 0 )); then\n        echo \"[]\"\n\
    \    else\n        local smallest=${evens[0]}\n        local smallest_index=0\n\
    \        for (( i = 1; i < ${#evens[@]}; i++ )); do\n            if (( evens[i]\
    \ < smallest )); then\n                smallest=${evens[i]}\n                smallest_index=$i\n\
    \            fi\n        done\n        echo \"[\\\"$smallest\\\", \\\"$smallest_index\\\
    \"]\"\n    fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\n  local\
    \ smallest_even_value_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ \"$node\" =~ ^[0-9]+$ ]]; then\n      if [[ \"$node\" -eq 0 ]]; then\n\
    \        smallest_even_value=\"$node\"\n        smallest_even_value_index=\"$i\"\
    \n        break\n      elif [[ \"$node\" -gt 0 ]] && [[ \"$node\" -lt \"$smallest_even_value\"\
    \ ]] && [[ \"$((node % 2))\" -eq 0 ]]; then\n        smallest_even_value=\"$node\"\
    \n        smallest_even_value_index=\"$i\"\n      fi\n    fi\n    i=$((i + 1))\n\
    \  done\n  if [[ -z \"$smallest_even_value\" ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"\
    ]\"\n  fi", "  local -a nodes=($@)\n  local -a evens\n  local -a evens_indexes\n\
    \  local -a evens_indexes_sorted\n  local -a evens_sorted\n  local -a evens_sorted_indexes\n\
    \  local -a evens_sorted_indexes_sorted\n  local -a evens_sorted_sorted\n  local\
    \ -a evens_sorted_sorted_indexes\n  local -a evens_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted_sorted_sorted\n  local -a evens_sorted_sorted_sorted_indexes\n\
    \  local -a evens_sorted_sorted_sorted_indexes_sorted\n  local -a evens_sorted_sorted_sorted_sorted\n\
    \  local -a evens_sorted_sorted_sorted_sorted_indexes\n  local -a evens_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted\n  local -a evens_sorted_sorted_sorted_sorted_sorted_indexes\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n  local -a\
    \ evens_sorted_sorted_sorted_sorted_sorted_sorted\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n \
    \ local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  local -a\
    \ evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \  local -a evens_sorted", "    local nodes=(\"$@\")\n    local min_even_value=\n\
    \    local min_even_value_index=\n    for ((i=0; i<${#nodes[@]}; i++)); do\n \
    \       local node=${nodes[$i]}\n        if [[ $node -eq 0 ]]; then\n        \
    \    min_even_value=0\n            min_even_value_index=$i\n            break\n\
    \        elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n         \
    \   if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n   \
    \             min_even_value=$node\n                min_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n    fi", "    local -a nodes=($1)\n    local -i\
    \ min_index=0\n    local -i min_value=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i min_found=0\n    local -i min_even_found=0\n    while (( i < n ));\
    \ do\n        if (( nodes[i] < min_value )); then\n            min_value=nodes[i]\n\
    \            min_index=i\n            min_found=1\n        elif (( nodes[i] ==\
    \ min_value )); then\n            min_found=1\n        fi\n        if (( nodes[i]\
    \ % 2 == 0 && (nodes[i] < min_value || min_even_found == 0) )); then\n       \
    \     min_value=nodes[i]\n            min_index=i\n            min_even_found=1\n\
    \        fi\n        (( i++ ))\n    done\n    if (( min_found == 0 )); then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n    fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_value_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_value_index=$index\n  \
    \    fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local -a nodes=($@)\n  local -i min_even_value=\n\
    \  local -i min_even_index=\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i node_value=\n  local -i node_index=\n  local -i min_even_value_found=0\n\
    \  while (( i < n )); do\n    node_value=${nodes[i]}\n    if (( node_value % 2\
    \ == 0 )); then\n      if (( min_even_value_found == 0 )); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n        min_even_value_found=1\n      elif (( node_value\
    \ < min_even_value )); then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value_found == 0 ));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n", "    local -a nodes=($1)\n    local -a evens\n    local -a\
    \ even_indexes\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i min_even=0\n    local -i min_even_index=0\n    local -i num_evens=0\n   \
    \ local -i num_nodes=${#nodes[@]}\n    local -i node=0\n    local -i node_index=0\n\
    \    local -i num_even_indexes=0\n    local -i num_nodes=${#nodes[@]}\n    local\
    \ -i node=0\n    local -i node_index=0\n    local -i num_even_indexes=0\n    local\
    \ -i num_nodes=${#nodes[@]}\n    local -i node=0\n    local -i node_index=0\n\
    \    local -i num_even_indexes=0\n    local -i num_nodes=${#nodes[@]}\n    local\
    \ -i node=0\n    local -i node_index=0\n    local -i num_even_indexes=0\n    local\
    \ -i num_nodes=${#nodes[@]}\n    local -i node=0\n    local -i node_index=0\n\
    \    local -i num_even_indexes=0\n    local -i num_nodes=${#nodes[@]}\n    local\
    \ -i node=0\n    local -i node_index=0\n    local -i num_even_indexes=0\n    local\
    \ -i num_nodes=${#nodes[@]}\n    local -i node=0\n    local -i node_index=0\n\
    \    local -i num_even_indexes=0\n    local -i num_nodes=${#nodes[@]}\n    local\
    \ -i node=0\n    local -i node_index=0\n    local -i num_even_indexes=0\n    local\
    \ -i num_nodes=${#nodes[@]}\n    local -i node=0\n    local -i node_index=0\n\
    \    local -i num_even_index", "  local nodes=(\"$@\")\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  local index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value ]]\
    \ || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n   \
    \     smallest_index=$index\n      fi\n    fi\n    index=$((index + 1))\n  done\n\
    \  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=$1\n  local\
    \ evens=$(echo $nodes | tr ' ' '\\n' | grep -E '^[02468]$' | sort -n)\n  local\
    \ smallest_even=$(echo $evens | cut -d ' ' -f 1)\n  local smallest_even_index=$(echo\
    \ $nodes | tr ' ' '\\n' | grep -n $smallest_even | cut -d ':' -f 1)\n  if [ -z\
    \ \"$smallest_even\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even\\\
    \", \\\"$smallest_even_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local\
    \ -a evens=()\n  local -a even_indices=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i value=0\n  local -i index=0\n  local -i len=${#nodes[@]}\n\
    \  if [[ $len -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0;\
    \ i<len; i++)); do\n    value=${nodes[$i]}\n    if [[ $((value % 2)) -eq 0 ]];\
    \ then\n      evens+=(\"$value\")\n      even_indices+=(\"$i\")\n    fi\n  done\n\
    \  len=${#evens[@]}\n  if [[ $len -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  min_value=${evens[0]}\n  min_index=0\n  for ((i=1; i<len; i++)); do\n\
    \    value=${evens[$i]}\n    if [[ $value -lt $min_value ]]; then\n      min_value=$value\n\
    \      min_index=$i\n    fi\n  done\n  index=${even_indices[$min_index]}\n  echo\
    \ \"[\\\"$min_value\\\", \\\"$index\\\"]\"", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n    local\
    \ node=${nodes[$i]}\n    if [[ $(( node % 2 )) -eq 0 ]]; then\n      if [[ -z\
    \ $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n \
    \ local -a evens_index=()\n  local -a result=()\n  local i=0\n  for node in \"\
    ${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \      evens_index+=($i)\n    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n  \
    \  local min_even_index=${evens_index[0]}\n    for i in \"${!evens[@]}\"; do\n\
    \      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_index=${evens_index[$i]}\n      fi\n    done\n    result+=($min_even)\n\
    \    result+=($min_even_index)\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_value_index=\"\"\n  local index=0\n  for node in $nodes; do\n\
    \    if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ $node -lt $smallest_even_value ]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      fi\n    fi\n    index=$((index\
    \ + 1))\n  done\n  if [ -z \"$smallest_even_value\" ]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n  local evens_indexes=()\n\
    \  local smallest_even_index=0\n  local smallest_even_value=0\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      evens+=($node)\n      evens_indexes+=($i)\n    fi\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    smallest_even_value=${evens[0]}\n\
    \    smallest_even_index=${evens_indexes[0]}\n    for ((i=1; i<${#evens[@]}; i++));\
    \ do\n      local even=${evens[$i]}\n      local even_index=${evens_indexes[$i]}\n\
    \      if [[ $even -lt $smallest_even_value ]]; then\n        smallest_even_value=$even\n\
    \        smallest_even_index=$even_index\n      fi\n    done\n    echo \"[\\\"\
    $smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min=10000\n  local min_index=10000\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if ((${nodes[$i]} % 2 == 0 && ${nodes[$i]} < $min)); then\n      min=${nodes[$i]}\n\
    \      min_index=$i\n    fi\n  done\n  if (($min == 10000)); then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "    local\
    \ nodes=\"$1\"\n    local smallest_value=\"\"\n    local smallest_index=\"\"\n\
    \    local index=0\n    for node in $nodes; do\n        if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n            if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value\
    \ ]]; then\n                smallest_value=$node\n                smallest_index=$index\n\
    \            fi\n        fi\n        index=$((index + 1))\n    done\n    if [[\
    \ -z $smallest_value ]]; then\n        echo \"[]\"\n    else\n        echo \"\
    [\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n    fi", "  local nodes=\"\
    $1\"\n  local smallest_value=\"\"\n  local smallest_index=\"\"\n  local i=0\n\
    \  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if [ -z\
    \ \"$smallest_value\" ] || [ $node -lt $smallest_value ]; then\n        smallest_value=$node\n\
    \        smallest_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [\
    \ -z \"$smallest_value\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     evens+=(\"$node\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    local min=${evens[0]}\n    local min_index=0\n \
    \   for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min ]]; then\n\
    \        min=${evens[$i]}\n        min_index=$i\n      fi\n    done\n    echo\
    \ \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "  local nodes=($@)\n  local\
    \ smallest_value=\n  local smallest_index=\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      smallest_value=0\n\
    \      smallest_index=$i\n      break\n    elif [[ $node -gt 0 ]] && [[ $node%2\
    \ -eq 0 ]] && [[ -z $smallest_value ]]; then\n      smallest_value=$node\n   \
    \   smallest_index=$i\n    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[\
    \ $node -lt $smallest_value ]]; then\n      smallest_value=$node\n      smallest_index=$i\n\
    \    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "   \
    \ local -a nodes=($1)\n    local -i i=0\n    local -i min_index=0\n    local -i\
    \ min_value=0\n    local -i min_even_value=0\n    local -i min_even_index=0\n\
    \    local -i found_even=0\n    for i in \"${!nodes[@]}\"; do\n        if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n            min_value=0\n            min_index=$i\n        \
    \    break\n        fi\n        if [[ ${nodes[$i]} -lt $min_value ]]; then\n \
    \           min_value=${nodes[$i]}\n            min_index=$i\n        fi\n   \
    \     if [[ ${nodes[$i]} -eq 2 ]]; then\n            min_even_value=2\n      \
    \      min_even_index=$i\n            found_even=1\n            break\n      \
    \  fi\n        if [[ ${nodes[$i]} -gt 2 ]] && [[ ${nodes[$i]} -lt $min_even_value\
    \ ]] && [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n            min_even_value=${nodes[$i]}\n\
    \            min_even_index=$i\n            found_even=1\n        fi\n    done\n\
    \    if [[ $found_even -eq 1 ]]; then\n        echo \"[\\\"$min_even_value\\\"\
    , \\\"$min_even_index\\\"]\"\n    else\n        echo \"[\\\"$min_value\\\", \\\
    \"$min_index\\\"]\"\n    fi", "    local -a nodes=($1)\n    local -a evens=()\n\
    \    local -a evens_index=()\n    local -a result=()\n    local i=0\n    for node\
    \ in \"${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n       \
    \     evens+=($node)\n            evens_index+=($i)\n        fi\n        i=$((i\
    \ + 1))\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        result=()\n\
    \    else\n        local min=${evens[0]}\n        local min_index=0\n        for\
    \ i in \"${!evens[@]}\"; do\n            if [[ ${evens[$i]} -lt $min ]]; then\n\
    \                min=${evens[$i]}\n                min_index=$i\n            fi\n\
    \        done\n        result=($min ${evens_index[$min_index]})\n    fi\n    echo\
    \ \"${result[@]}\"", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  for (( i=0; i<${#nodes[@]}; i++ )); do\n    local node=${nodes[$i]}\n    if\
    \ (( node % 2 == 0 )); then\n      if [[ -z $min_even_value ]]; then\n       \
    \ min_even_value=$node\n        min_even_index=$i\n      elif (( node < min_even_value\
    \ )); then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($@)\n  local -i min_index=${#nodes[@]}\n  local -i min_value=${nodes[0]}\n\
    \  local -i index=0\n  local -i value\n  for value in ${nodes[@]}; do\n    if\
    \ (( value % 2 == 0 && value < min_value )); then\n      min_value=$value\n  \
    \    min_index=$index\n    fi\n    (( index++ ))\n  done\n  if (( min_value %\
    \ 2 == 0 )); then\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local\
    \ min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_value_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n  \
    \    min_even_value=0\n      min_even_value_index=$i\n      break\n    elif [[\
    \ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "    local -a nodes=($*)\n    local -i min_index=0\n\
    \    local -i min_value=0\n    local -i i=0\n    local -i len=${#nodes[@]}\n \
    \   local -i value\n    local -i index\n    local -i min_even_value=0\n    local\
    \ -i min_even_index=0\n    local -i found_even=0\n    for ((i=0; i<len; i++));\
    \ do\n        value=${nodes[i]}\n        if ((value < min_value)); then\n    \
    \        min_value=$value\n            min_index=$i\n        fi\n        if ((value\
    \ % 2 == 0 && value < min_even_value)); then\n            min_even_value=$value\n\
    \            min_even_index=$i\n            found_even=1\n        fi\n    done\n\
    \    if ((found_even)); then\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    else\n        echo \"[]\"\n    fi", "  local -a nodes=($1)\n  local\
    \ -i min_even_value=10000\n  local -i min_even_index=10000\n  local -i i=0\n \
    \ for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node\
    \ -lt $min_even_value ]]; then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n    \
    \  min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\
    \"\n  local smallest_even_value_index=\"\"\n  local index=0\n  for node in $nodes;\
    \ do\n    if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ $node -lt $smallest_even_value ]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      fi\n    fi\n    index=$((index\
    \ + 1))\n  done\n  if [ -z \"$smallest_even_value\" ]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "    local nodes=($1)\n    local min_even_value=10000\n    local\
    \ min_even_index=10000\n    local i=0\n    for node in ${nodes[@]}; do\n     \
    \   if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ $node -lt $min_even_value\
    \ ]]; then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        i=$((i + 1))\n    done\n    if [[ $min_even_value\
    \ -eq 10000 ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "    local nodes=($1)\n    local evens=()\n\
    \    local evens_indexes=()\n    local evens_indexes_sorted=()\n    local evens_sorted=()\n\
    \    local smallest_even_index=()\n    local smallest_even=()\n    for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n        if [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n\
    \            evens+=(${nodes[$i]})\n            evens_indexes+=($i)\n        fi\n\
    \    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n\
    \        evens_sorted=($(printf \"%s\\n\" \"${evens[@]}\" | sort -n))\n      \
    \  smallest_even=${evens_sorted[0]}\n        evens_indexes_sorted=($(printf \"\
    %s\\n\" \"${evens_indexes[@]}\" | sort -n))\n        smallest_even_index=${evens_indexes_sorted[0]}\n\
    \        echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n   \
    \ fi", "  local -a nodes=($1)\n  local -i min=10000\n  local -i min_index=10000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]] && [[ $node -lt $min ]]; then\n      min=$node\n      min_index=$i\n  \
    \  fi\n    i+=1\n  done\n  if [[ $min -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local min_even_value=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=$node\n     \
    \   min_even_index=$i\n      elif [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n  done\n\
    \  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_found=0\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if ((nodes[i] < min_value)); then\n      min_value=nodes[i]\n\
    \      min_index=i\n    fi\n    if ((nodes[i] % 2 == 0)); then\n      if ((min_even_found\
    \ == 0)); then\n        min_even_value=nodes[i]\n        min_even_index=i\n  \
    \      min_even_found=1\n      elif ((nodes[i] < min_even_value)); then\n    \
    \    min_even_value=nodes[i]\n        min_even_index=i\n      fi\n    fi\n  done\n\
    \  if ((min_even_found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    ${min_even_value}\\\", \\\"${min_even_index}\\\"]\"\n  fi", "    local -a nodes=($1)\n\
    \    local -a evens=()\n    local -a evens_index=()\n    local -a result=()\n\
    \    local i=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2))\
    \ -eq 0 ]]; then\n            evens+=($node)\n            evens_index+=($i)\n\
    \        fi\n        i=$((i + 1))\n    done\n    if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n    else\n        local min_even=${evens[0]}\n  \
    \      local min_even_index=${evens_index[0]}\n        for i in \"${!evens[@]}\"\
    ; do\n            if [[ ${evens[$i]} -lt $min_even ]]; then\n                min_even=${evens[$i]}\n\
    \                min_even_index=${evens_index[$i]}\n            fi\n        done\n\
    \        result+=(\"$min_even\")\n        result+=(\"$min_even_index\")\n    \
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n    fi", "  local\
    \ -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i index=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0))\
    \ && ((node < min_even_value)); then\n      min_even_value=$node\n      min_even_index=$index\n\
    \    fi\n    ((index++))\n  done\n  if ((min_even_value == 1000000000)); then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\"\"\n  local min_even_value_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_value_index=$index\n  \
    \    fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\"\
    \"\n  local smallest_even_value_index=\"\"\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      smallest_even_value=0\n\
    \      smallest_even_value_index=$i\n      break\n    elif [[ $node -gt 0 ]] &&\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[\
    \ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local\
    \ min_even_value=\n  local min_even_index=\n  local index=0\n  for node in $nodes;\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]\
    \ || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n   \
    \     min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n  done\n\
    \  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local smallest_value=\"\"\n  local smallest_index=\"\"\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_value=0\n \
    \     smallest_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_value ]]; then\n   \
    \     smallest_value=${nodes[$i]}\n        smallest_index=$i\n      elif [[ ${nodes[$i]}\
    \ -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n        smallest_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n    fi\n\
    \    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\
    \n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n    done\n    result+=(\"\\\"$min_even\\\"\")\n    result+=(\"\\\"\
    $min_even_index\\\"\")\n    echo \"[${result[@]}]\"\n  fi", "  local nodes=$1\n\
    \  local evens=$(echo $nodes | tr ' ' '\\n' | grep -E '^[0-9]+$' | grep -E '^[02468]$')\n\
    \  local min=$(echo $evens | tr ' ' '\\n' | sort -n | head -n 1)\n  local indexes=$(echo\
    \ $nodes | tr ' ' '\\n' | grep -n -E \"^$min$\" | cut -d: -f1)\n  local min_index=$(echo\
    \ $indexes | tr ' ' '\\n' | sort -n | head -n 1)\n  if [ -z \"$min\" ]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[ $node\
    \ -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n     \
    \   smallest_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n\
    \  local min_even_value_index=\n  local i=0\n  for node in $nodes; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      elif [[ $node -lt\
    \ $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local min_value=\n  local min_index=\n  local index=0\n\
    \  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[\
    \ -z $min_value ]] || [[ $node -lt $min_value ]]; then\n        min_value=$node\n\
    \        min_index=$index\n      fi\n    fi\n    index=$((index + 1))\n  done\n\
    \  if [[ -z $min_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  # Write your code here\n  # Use echo to print\
    \ to stdout, eg:\n  # echo \"Hello world\"\n  local nodes=(\"$@\")\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n\
    \        min_even_value=${nodes[$i]}\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "    local -a nodes=(\"$@\")\n\
    \    local -i min_value=0\n    local -i min_index=0\n    local -i i=0\n    local\
    \ -i n=${#nodes[@]}\n    local -i node_value=0\n    local -i is_first_even=1\n\
    \    for ((i=0; i<n; i++)); do\n        node_value=${nodes[i]}\n        if ((node_value\
    \ % 2 == 0)); then\n            if ((is_first_even == 1)); then\n            \
    \    min_value=$node_value\n                min_index=$i\n                is_first_even=0\n\
    \            elif ((node_value < min_value)); then\n                min_value=$node_value\n\
    \                min_index=$i\n            fi\n        fi\n    done\n    if ((is_first_even\
    \ == 1)); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n    fi", "  local nodes=$1\n  local min_even_value=\n\
    \  local min_even_value_index=\n  local i=0\n  for node in $nodes; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n \
    \       min_even_value=$node\n        min_even_value_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -a evens=()\n  local -a even_indexes=()\n  local -a result=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local min=0\n  local min_index=0\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n\
    \      even_indexes[$j]=$i\n      j=$((j+1))\n    elif [[ $((${nodes[$i]} % 2))\
    \ -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n      even_indexes[$j]=$i\n  \
    \    j=$((j+1))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    min=${evens[0]}\n    min_index=0\n    for ((k=1; k<${#evens[@]};\
    \ k++)); do\n      if [[ ${evens[$k]} -lt $min ]]; then\n        min=${evens[$k]}\n\
    \        min_index=$k\n      fi\n    done\n    result[0]=$min\n    result[1]=${even_indexes[$min_index]}\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local nodes=(\"\
    $@\")\n  local min_even_value=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=$1\n\
    \  local smallest_value=\"\"\n  local smallest_index=\"\"\n  local index=0\n \
    \ for node in $nodes; do\n    if [[ $node -eq 0 ]]; then\n      smallest_value=0\n\
    \      smallest_index=$index\n      break\n    elif [[ $node -gt 0 ]] && [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ $smallest_value -eq \"\" ]] || [[ $node -lt\
    \ $smallest_value ]]; then\n        smallest_value=$node\n        smallest_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $smallest_value -eq\
    \ \"\" ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\"\
    , \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=($@)\n  local evens=()\n \
    \ local smallest_even=\n  local smallest_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n\
    \      evens+=(\"${nodes[$i]}\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    smallest_even=${evens[0]}\n    smallest_even_index=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $smallest_even\
    \ ]]; then\n        smallest_even=${evens[$i]}\n        smallest_even_index=$i\n\
    \      fi\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[ $node\
    \ -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n     \
    \   smallest_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n\
    \  local evens_indexes=()\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indexes+=($i)\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    local min_even=${evens[0]}\n    local min_even_index=${evens_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      local even=${evens[$i]}\n   \
    \   local even_index=${evens_indexes[$i]}\n      if [[ $even -lt $min_even ]];\
    \ then\n        min_even=$even\n        min_even_index=$even_index\n      fi\n\
    \    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", " \
    \   local -a nodes=($@)\n    local -i i=0\n    local -i min_even_value=100000000\n\
    \    local -i min_even_index=0\n    local -i min_even_count=0\n    local -i node_count=${#nodes[@]}\n\
    \    while (( i < node_count )); do\n        local -i node=${nodes[$i]}\n    \
    \    if (( node % 2 == 0 )); then\n            if (( node < min_even_value ));\
    \ then\n                min_even_value=$node\n                min_even_index=$i\n\
    \                min_even_count=1\n            elif (( node == min_even_value\
    \ )); then\n                (( min_even_count++ ))\n            fi\n        fi\n\
    \        (( i++ ))\n    done\n    if (( min_even_count > 0 )); then\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    else\n        echo\
    \ \"[]\"\n    fi", "    local -a nodes=($1)\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=10000000000\n    local -i i=0\n    for node in \"\
    ${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            if\
    \ [[ $node -lt $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    if [[ $min_even_value -eq 10000000000 ]]; then\n      \
    \  echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "    local -a nodes=($1)\n    local -i i=0\n    local -i min_index=${#nodes[@]}\n\
    \    local -i min_value=${nodes[0]}\n    local -i min_even=${nodes[0]}\n    local\
    \ -i even_found=0\n    for ((i=0; i<${#nodes[@]}; i++)); do\n        if ((nodes[i]\
    \ % 2 == 0)); then\n            even_found=1\n            if ((nodes[i] < min_even));\
    \ then\n                min_even=${nodes[i]}\n                min_index=$i\n \
    \           fi\n        fi\n    done\n    if ((even_found == 0)); then\n     \
    \   echo \"[]\"\n    else\n        echo \"[\\\"$min_even\\\", \\\"$min_index\\\
    \"]\"\n    fi", "  local nodes=($@)\n  local smallest_value=\n  local smallest_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    local node=${nodes[$i]}\n    if [[ $node\
    \ -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n      break\n\
    \    elif [[ $node -gt 0 && $node%2 -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ || $node -lt $smallest_value ]]; then\n        smallest_value=$node\n      \
    \  smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local -i min_even_value=0\n  local\
    \ -i min_even_index=0\n  local -i min_even_count=0\n  local -i i=0\n  local -i\
    \ n=0\n  local -i value=0\n  local -i count=0\n  local -i is_even=0\n  local -i\
    \ is_min_even=0\n  local -i is_first_even=0\n  for n in \"${nodes[@]}\"; do\n\
    \    value=${n}\n    is_even=$((value % 2))\n    if [[ $is_even -eq 0 ]]; then\n\
    \      if [[ $is_first_even -eq 0 ]]; then\n        min_even_value=$value\n  \
    \      min_even_index=$i\n        min_even_count=1\n        is_first_even=1\n\
    \      else\n        if [[ $value -lt $min_even_value ]]; then\n          min_even_value=$value\n\
    \          min_even_index=$i\n          min_even_count=1\n        elif [[ $value\
    \ -eq $min_even_value ]]; then\n          min_even_count=$((min_even_count + 1))\n\
    \        fi\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ $is_first_even\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\"\
    , \\\"$min_even_index\\\"]\"\n  fi", "    local nodes=($1)\n    local min_even_value=\n\
    \    local min_even_index=\n    local i=0\n    for node in \"${nodes[@]}\"; do\n\
    \        if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    if [[ -z $min_even_value ]]; then\n        echo \"[]\"\n\
    \    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n    fi", "    local -a nodes=(\"$@\")\n    local -i min_index=0\n    local -i\
    \ min_value=0\n    local -i i=0\n    local -i len=${#nodes[@]}\n    local -i value=0\n\
    \    local -i min_even_index=0\n    local -i min_even_value=0\n    local -i found_even=0\n\
    \    for ((i=0; i<len; i++)); do\n        value=${nodes[i]}\n        if ((value\
    \ % 2 == 0)); then\n            if ((found_even == 0)); then\n               \
    \ min_even_index=$i\n                min_even_value=$value\n                found_even=1\n\
    \            elif ((value < min_even_value)); then\n                min_even_index=$i\n\
    \                min_even_value=$value\n            fi\n        fi\n        if\
    \ ((value < min_value)); then\n            min_index=$i\n            min_value=$value\n\
    \        fi\n    done\n    if ((found_even == 0)); then\n        echo \"[]\"\n\
    \    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n    fi", "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n \
    \ local -i i=0\n  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n\
    \  local -i min_index=100000000\n  local -i min_value=100000000\n  local -i node_value\n\
    \  local -i node_index\n  local -i is_even\n  for node in \"${nodes[@]}\"; do\n\
    \    node_value=$node\n    node_index=$i\n    is_even=$((node_value % 2))\n  \
    \  if [[ $is_even -eq 0 ]]; then\n      if [[ $node_value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node_value\n        min_even_index=$node_index\n\
    \      elif [[ $node_value -eq $min_even_value ]]; then\n        if [[ $node_index\
    \ -lt $min_even_index ]]; then\n          min_even_index=$node_index\n       \
    \ fi\n      fi\n    fi\n    if [[ $node_value -lt $min_value ]]; then\n      min_value=$node_value\n\
    \      min_index=$node_index\n    elif [[ $node_value -eq $min_value ]]; then\n\
    \      if [[ $node_index -lt $min_index ]]; then\n        min_index=$node_index\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ $min_even_value -eq 100000000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n  local\
    \ evens_indexes=()\n  local smallest_even\n  local smallest_even_index\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n\
    \      evens+=(\"${nodes[$i]}\")\n      evens_indexes+=(\"$i\")\n    elif [[ \"\
    $(( ${nodes[$i]} % 2 ))\" -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n  \
    \    evens_indexes+=(\"$i\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    smallest_even=\"${evens[0]}\"\n    smallest_even_index=\"\
    ${evens_indexes[0]}\"\n    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ \"\
    ${evens[$i]}\" -lt \"$smallest_even\" ]]; then\n        smallest_even=\"${evens[$i]}\"\
    \n        smallest_even_index=\"${evens_indexes[$i]}\"\n      fi\n    done\n \
    \   echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n  fi", " \
    \ local nodes=\"$@\"\n  local smallest_value=\"\"\n  local smallest_index=\"\"\
    \n  local index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n\
    \      if [ -z \"$smallest_value\" ] || [ $node -lt $smallest_value ]; then\n\
    \        smallest_value=$node\n        smallest_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [ -z \"$smallest_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n  local evens_indexes=()\n\
    \  local smallest_even\n  local smallest_even_index\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n      evens_indexes+=(\"$i\")\n    elif [[ \"$((nodes[$i] % 2))\" -eq 0 ]];\
    \ then\n      evens+=(\"${nodes[$i]}\")\n      evens_indexes+=(\"$i\")\n    fi\n\
    \  done\n  if [[ \"${#evens[@]}\" -eq 0 ]]; then\n    echo \"[]\"\n  else\n  \
    \  smallest_even=\"${evens[0]}\"\n    smallest_even_index=\"${evens_indexes[0]}\"\
    \n    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ \"${evens[$i]}\" -lt \"\
    $smallest_even\" ]]; then\n        smallest_even=\"${evens[$i]}\"\n        smallest_even_index=\"\
    ${evens_indexes[$i]}\"\n      fi\n    done\n    echo \"[\\\"$smallest_even\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi", "    local -a nodes=(\"$@\")\n    local\
    \ -a evens=()\n    local -i i=0\n    local -i min_index=0\n    local -i min_value=0\n\
    \    local -i value=0\n    local -i index=0\n    local -i len=${#nodes[@]}\n \
    \   if [ \"$len\" -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n\
    \    while [ \"$i\" -lt \"$len\" ]; do\n        value=${nodes[$i]}\n        if\
    \ [ \"$((value % 2))\" -eq 0 ]; then\n            evens+=(\"$value\")\n      \
    \  fi\n        i=$((i + 1))\n    done\n    if [ \"${#evens[@]}\" -eq 0 ]; then\n\
    \        echo \"[]\"\n        return\n    fi\n    min_value=${evens[0]}\n    min_index=0\n\
    \    i=1\n    while [ \"$i\" -lt \"${#evens[@]}\" ]; do\n        value=${evens[$i]}\n\
    \        if [ \"$value\" -lt \"$min_value\" ]; then\n            min_value=$value\n\
    \            min_index=$i\n        fi\n        i=$((i + 1))\n    done\n    index=0\n\
    \    i=0\n    while [ \"$i\" -lt \"$len\" ]; do\n        value=${nodes[$i]}\n\
    \        if [ \"$value\" -eq \"$min_value\" ]; then\n            if [ \"$index\"\
    \ -eq \"$min_index\" ]; then\n                echo \"[\\\"$value\\\", \\\"$i\\\
    \"]\"\n                return\n            fi\n            index=$((index + 1))\n\
    \        fi\n        i=$((i + 1))\n    done", "  local -a nodes=($1)\n  local\
    \ -a evens=()\n  local -a evens_index=()\n  local -a result=()\n  local i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n      evens+=($node)\n\
    \      evens_index+=($i)\n    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq\
    \ 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n    local\
    \ min_even_index=0\n    local i=0\n    for even in \"${evens[@]}\"; do\n     \
    \ if (( even < min_even )); then\n        min_even=$even\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n      ((i++))\n    done\n    result=($min_even $min_even_index)\n \
    \   echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local -a\
    \ nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i min_even=0\n  local -i min_even_index=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_min_even=0\n  local -i\
    \ is_min_index=0\n  local -i is_min_value=0\n  local -i is_min_even_index=0\n\
    \  local -i is_min_even_value=0\n  local -i is_min_even_index_value=0\n  local\
    \ -i is_min_even_index_value_even=0\n  local -i is_min_even_index_value_even_min=0\n\
    \  local -i is_min_even_index_value_even_min_index=0\n  local -i is_min_even_index_value_even_min_index_value=0\n\
    \  local -i is_min_even_index_value_even_min_index_value_even=0\n  local -i is_min_even_index_value_even_min_index_value_even_min=0\n\
    \  local -i is_min_even_index_value_even_min_index_value_even_min_index=0\n  local\
    \ -i is_min_even_index_value_even_min_index_value_even_min_index_value=0\n  local\
    \ -i is_min_even_index_value_even_min_index_value_even_min_index_value_even=0\n\
    \  local -i is_min_even_index_value_even_min_index_value_even_min_index_value_even_min=0\n\
    \  local -i is_min_even_index_value_even_min_index_value_even_min_index_value_even_min_index=0\n\
    \  local -i is_min_even_index_value_even_min_index_value_even_min_index_value_even",
  "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0\
    \ ]]; then\n      evens+=(0)\n      evens_index+=($i)\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ $((nodes[$i] % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      evens_index+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n    done\n    result+=($min_even)\n    result+=($min_even_index)\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local min_even_value=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=$node\n     \
    \   min_even_index=$i\n      elif [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n  done\n\
    \  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=(\"\
    $@\")\n  local min_even_value=\n  local min_even_index=\n  local index=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [[ $(( node % 2 )) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n \
    \   index=$(( index + 1 ))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($@)\n  local min_even_index=\n  local min_even_value=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n  local\
    \ -a even_values=()\n  local -a even_indices_sorted=()\n  local -a even_values_sorted=()\n\
    \  local -a even_indices_sorted_uniq=()\n  local -a even_values_sorted_uniq=()\n\
    \  local -a even_indices_sorted_uniq_sorted=()\n  local -a even_values_sorted_uniq_sorted=()\n\
    \  local -a even_indices_sorted_uniq_sorted_first=()\n  local -a even_values_sorted_uniq_sorted_first=()\n\
    \  local -a even_indices_sorted_uniq_sorted_first_index=()\n  local -a even_values_sorted_uniq_sorted_first_index=()\n\
    \  local -a even_indices_sorted_uniq_sorted_first_index_sorted=()\n  local -a\
    \ even_values_sorted_uniq_sorted_first_index_sorted=()\n  local -a even_indices_sorted_uniq_sorted_first_index_sorted_first=()\n\
    \  local -a even_values_sorted_uniq_sorted_first_index_sorted_first=()\n  local\
    \ -a even_indices_sorted_uniq_sorted_first_index_sorted_first_index=()\n  local\
    \ -a even_values_sorted_uniq_sorted_first_index_sorted_first_index=()\n  local\
    \ -a even_indices_sorted_uniq_sorted_first_index_sorted_first_index_sorted=()\n\
    \  local -a even_values_sorted_uniq_sorted_first_index_sorted_first_index_sorted=()\n\
    \  local -a even_indices_sorted_uniq_sorted_first_index_sorted_first_index_sorted_first=()\n\
    \  local -a even_values_", "  local nodes=($@)\n  local min_even_value=\n  local\
    \ min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=(\"$@\")\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2\
    \ == 0 )); then\n      evens+=( \"$node\" )\n    fi\n  done\n  if (( ${#evens[@]}\
    \ == 0 )); then\n    echo \"[]\"\n    return\n  fi\n  min_value=${evens[0]}\n\
    \  for (( i=1; i<${#evens[@]}; i++ )); do\n    if (( evens[i] < min_value ));\
    \ then\n      min_value=${evens[i]}\n      min_index=$i\n    fi\n  done\n  echo\
    \ \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"", "  local nodes=($@)\n  local\
    \ min_even_value=\n  local min_even_value_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n \
    \     min_even_value_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]]\
    \ && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_val=\n\
    \  local min_even_idx=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even_val=0\n      min_even_idx=$i\n      break\n \
    \   elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if\
    \ [[ -z $min_even_val ]] || [[ ${nodes[$i]} -lt $min_even_val ]]; then\n     \
    \   min_even_val=${nodes[$i]}\n        min_even_idx=$i\n      fi\n    fi\n  done\n\
    \  if [[ -z $min_even_val ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_val\\\", \\\"$min_even_idx\\\"]\"\n  fi", "  local nodes=$1\n  local\
    \ evens=$(echo \"$nodes\" | grep -Eo '[02468]')\n  local smallest_even=$(echo\
    \ \"$evens\" | sort -n | head -n 1)\n  local smallest_even_index=$(echo \"$nodes\"\
    \ | grep -bo \"$smallest_even\" | cut -d ':' -f 1)\n  if [ -z \"$smallest_even\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_value_index=\"\"\n  local index=0\n  for node in $nodes; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]];\
    \ then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      fi\n    fi\n    ((index++))\n\
    \  done\n  if [[ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "    local -a nodes=($1)\n    local -a\
    \ evens=()\n    local -a evens_idx=()\n    local -a evens_idx_sorted=()\n    local\
    \ -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local\
    \ -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n\
    \    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local\
    \ -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n\
    \    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local\
    \ -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n\
    \    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local\
    \ -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0",
  "  local nodes=($@)\n  local evens=()\n  local evens_indices=()\n  local evens_min=\n\
    \  local evens_min_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      evens+=(0)\n      evens_indices+=($i)\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n\
    \      evens_indices+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    evens_min=${evens[0]}\n    evens_min_index=${evens_indices[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $evens_min\
    \ ]]; then\n        evens_min=${evens[$i]}\n        evens_min_index=${evens_indices[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$evens_min\\\", \\\"$evens_min_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n    done\n    result+=($min_even)\n    result+=($min_even_index)\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "    local\
    \ nodes=(\"$@\")\n    local smallest_value=\n    local smallest_index=\n    for\
    \ (( i=0; i<${#nodes[@]}; i++ )); do\n        local node=${nodes[$i]}\n      \
    \  if [[ $node -eq 0 ]]; then\n            smallest_value=0\n            smallest_index=$i\n\
    \            break\n        elif [[ $node -gt 0 && $node%2 -eq 0 ]]; then\n  \
    \          if [[ -z $smallest_value || $node -lt $smallest_value ]]; then\n  \
    \              smallest_value=$node\n                smallest_index=$i\n     \
    \       fi\n        fi\n    done\n    if [[ -z $smallest_value ]]; then\n    \
    \    echo \"[]\"\n    else\n        echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n    fi", "  local -a nodes=($1)\n  local -i smallest_even_value=0\n  local\
    \ -i smallest_even_index=0\n  local -i smallest_even_count=0\n  local -i smallest_even_value_count=0\n\
    \  local -i smallest_even_index_count=0\n  local -i smallest_even_value_index=0\n\
    \  local -i smallest_even_index_index=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n\
    \  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i\
    \ ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n \
    \ local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i\
    \ ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n \
    \ local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i\
    \ ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n \
    \ local -i bf=0\n", "  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_value=0\n      smallest_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ ${nodes[$i]} -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n\
    \        smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi", "  declare -a nodes\n  nodes=($@)\n  declare -a\
    \ evens\n  declare -a evens_index\n  declare -a evens_index_sorted\n  declare\
    \ -a evens_sorted\n  declare -a evens_sorted_index\n  declare -a evens_sorted_index_sorted\n\
    \  declare -a evens_sorted_sorted\n  declare -a evens_sorted_sorted_index\n  declare\
    \ -a evens_sorted_sorted_index_sorted\n  declare -a evens_sorted_sorted_sorted\n\
    \  declare -a evens_sorted_sorted_sorted_index\n  declare -a evens_sorted_sorted_sorted_index_sorted\n\
    \  declare -a evens_sorted_sorted_sorted_sorted\n  declare -a evens_sorted_sorted_sorted_sorted_index\n\
    \  declare -a evens_sorted_sorted_sorted_sorted_index_sorted\n  declare -a evens_sorted_sorted_sorted_sorted_sorted\n\
    \  declare -a evens_sorted_sorted_sorted_sorted_sorted_index\n  declare -a evens_sorted_sorted_sorted_sorted_sorted_index_sorted\n\
    \  declare -a evens_sorted_sorted_sorted_sorted_sorted_sorted\n  declare -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index\n\
    \  declare -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n \
    \ declare -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  declare\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index\n  declare -a\
    \ evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n  declare\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_", "  local -a nodes=($1)\n  local\
    \ -a evens\n  local -a odds\n  local -a sorted_evens\n  local -a sorted_odds\n\
    \  local -a result\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n \
    \ local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local\
    \ -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n\
    \  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local\
    \ -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i\
    \ hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n\
    \  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n \
    \ local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local\
    \ -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local\
    \ -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local\
    \ -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local\
    \ -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local\
    \ -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n  local\
    \ -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -", "  local\
    \ -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n  local -a result=()\n\
    \  local i=0\n  local node=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=($node)\n      even_indices+=($i)\n    fi\n\
    \    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\
    \n  else\n    local min_even=${evens[0]}\n    local min_even_index=0\n    local\
    \ j=0\n    for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min_even ]];\
    \ then\n        min_even=$even\n        min_even_index=${even_indices[$j]}\n \
    \     fi\n      j=$((j + 1))\n    done\n    result+=($min_even)\n    result+=($min_even_index)\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local -a\
    \ nodes=($1)\n  local -a evens=()\n  local -a evens_indexes=()\n  local -a result=()\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      evens+=($node)\n      evens_indexes+=($i)\n    fi\n    ((i++))\n\
    \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local\
    \ min_even=${evens[0]}\n    local min_even_index=${evens_indexes[0]}\n    for\
    \ ((i = 1; i < ${#evens[@]}; i++)); do\n      if [[ ${evens[i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[i]}\n        min_even_index=${evens_indexes[i]}\n\
    \      fi\n    done\n    result+=($min_even)\n    result+=($min_even_index)\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local smallest_even_value=\n  local smallest_even_value_index=\n  for i in\
    \ \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_even_value=0\n\
    \      smallest_even_value_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt\
    \ 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $smallest_even_value ]]; then\n        smallest_even_value=${nodes[$i]}\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -a evens=()\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i node_value=0\n  for node in \"${nodes[@]}\"; do\n    node_value=$node\n\
    \    if [[ $((node_value % 2)) -eq 0 ]]; then\n      evens+=($node_value)\n  \
    \  fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  min_value=${evens[0]}\n  for even in \"${evens[@]}\"; do\n    if [[ $even\
    \ -lt $min_value ]]; then\n      min_value=$even\n    fi\n  done\n  for node in\
    \ \"${nodes[@]}\"; do\n    node_value=$node\n    if [[ $node_value -eq $min_value\
    \ ]]; then\n      echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n      return\n\
    \    fi\n    ((min_index++))\n  done", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n    local\
    \ node=${nodes[$i]}\n    if [[ $(( node % 2 )) -eq 0 ]]; then\n      if [[ -z\
    \ $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo '[]'\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      if [[ -z\
    \ $min_even_value ]]; then\n        min_even_value=${nodes[i]}\n        min_even_index=$i\n\
    \      elif ((nodes[i] < min_even_value)); then\n        min_even_value=${nodes[i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  declare -a nodes=($@)\n  declare -i min_even_value=10000000000\n\
    \  declare -i min_even_index=10000000000\n  declare -i index=0\n  for node in\
    \ \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq\
    \ 10000000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local smallest_value=\n\
    \  local smallest_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $node -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ -z $smallest_value\
    \ ]]; then\n      smallest_value=$node\n      smallest_index=$i\n    elif [[ $node\
    \ -gt 0 ]] && [[ $node%2 -eq 0 ]] && [[ $node -lt $smallest_value ]]; then\n \
    \     smallest_value=$node\n      smallest_index=$i\n    fi\n  done\n  if [[ -z\
    \ $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  local index=0\n  for node in $nodes; do\n \
    \   if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_value\" ] || [\
    \ $node -lt $smallest_value ]; then\n        smallest_value=$node\n        smallest_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=10000\n\
    \  local min_even_index=10000\n  local index=0\n  local node\n  for node in $nodes;\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "    local nodes=($@)\n    local min_even_index=\n\
    \    local min_even_value=\n    for ((i=0; i<${#nodes[@]}; i++)); do\n       \
    \ if [[ ${nodes[$i]} -eq 0 ]]; then\n            if [[ -z $min_even_value ]];\
    \ then\n                min_even_value=0\n                min_even_index=$i\n\
    \            fi\n        elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq\
    \ 0 ]]; then\n            if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n                min_even_value=${nodes[$i]}\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_indexes=()\n  local -a evens_indexes_sorted=()\n  local -a evens_sorted=()\n\
    \  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i", "  local nodes=($@)\n  local\
    \ evens=()\n  local evens_indices=()\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      evens+=(\"${nodes[$i]}\")\n      evens_indices+=(\"$i\")\n    elif [[ $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      evens_indices+=(\"\
    $i\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n\
    \  else\n    min_even=${evens[0]}\n    min_even_index=${evens_indices[0]}\n  \
    \  for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[$i]}\n        min_even_index=${evens_indices[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "    local -a nodes=(\"$@\")\n    local -i min_index=0\n    local -i\
    \ min_value=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i value=0\n\
    \    local -i found=0\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n\
    \        if ((value % 2 == 0)); then\n            if ((found == 0)); then\n  \
    \              min_value=$value\n                min_index=$i\n              \
    \  found=1\n            elif ((value < min_value)); then\n                min_value=$value\n\
    \                min_index=$i\n            fi\n        fi\n    done\n    if ((found\
    \ == 0)); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n    fi", "  local nodes=\"$1\"\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  local index=0\n  for node in $nodes; do\n \
    \   if [[ $(( node % 2 )) -eq 0 ]]; then\n      if [[ -z $smallest_value ]] ||\
    \ [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n      \
    \  smallest_index=$index\n      fi\n    fi\n    (( index++ ))\n  done\n  if [[\
    \ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ ((nodes[i] % 2 == 0)); then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=${nodes[i]}\n        smallest_even_index=$i\n   \
    \   elif ((nodes[i] < smallest_even_value)); then\n        smallest_even_value=${nodes[i]}\n\
    \        smallest_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local evens=()\n\
    \  local smallest_even=\n  local smallest_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ $((nodes[i] % 2)) -eq 0 ]]; then\n      evens+=(${nodes[i]})\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    smallest_even=${evens[0]}\n    smallest_even_index=0\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if [[ ${evens[i]} -lt $smallest_even ]]; then\n        smallest_even=${evens[i]}\n\
    \        smallest_even_index=$i\n      fi\n    done\n    echo \"[\\\"$smallest_even\\\
    \", \\\"$smallest_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i\
    \ min_even_value=10000000\n  local -i min_even_index=10000000\n  local -i i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node < min_even_value\
    \ )); then\n      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((\
    \ i++ ))\n  done\n  if (( min_even_value == 10000000 )); then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($@)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n\
    \      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -a evens\n  local -a odds\n  local -a even_indexes\n  local -a odd_indexes\n\
    \  local -a even_indexes_sorted\n  local -a odd_indexes_sorted\n  local -a even_indexes_sorted_uniq\n\
    \  local -a odd_indexes_sorted_uniq\n  local -a even_indexes_sorted_uniq_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted\n  local -a even_indexes_sorted_uniq_sorted_uniq\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq\n  local -a even_indexes_sorted_uniq_sorted_uniq_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted\n  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq\n  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n  local -a\
    \ even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq\n  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq",
  "  local nodes=\"$1\"\n  local smallest_value=\"\"\n  local smallest_index=\"\"\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value ]];\
    \ then\n        smallest_value=$node\n        smallest_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi", "    local -n arr=$1\n    local -i min_even_value=10000\n    local\
    \ -i min_even_index=10000\n    local -i i=0\n    for value in \"${arr[@]}\"; do\n\
    \        if [[ $((value % 2)) -eq 0 ]]; then\n            if [[ $value -lt $min_even_value\
    \ ]]; then\n                min_even_value=$value\n                min_even_index=$i\n\
    \            fi\n        fi\n        ((i++))\n    done\n    if [[ $min_even_value\
    \ -eq 10000 ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if (( node % 2 == 0 )); then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      elif (( node < min_even_value\
    \ )); then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i\
    \ min_even_index=10000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -lt $min_even_value && ${nodes[$i]}%2 -eq 0 ]]; then\n\
    \      min_even_value=${nodes[$i]}\n      min_even_index=$i\n    fi\n  done\n\
    \  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local min_even_value=\n  local min_even_value_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n \
    \     min_even_value_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]]\
    \ && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local nodes=(\"$@\")\n  local evens=()\n\
    \  local even_indexes=()\n  local even_index=0\n  local node_index=0\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=(\"\
    $node\")\n      even_indexes+=(\"$node_index\")\n    fi\n    ((node_index++))\n\
    \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local\
    \ min_even=${evens[0]}\n    local min_even_index=0\n    local even_index=0\n \
    \   for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min_even ]]; then\n\
    \        min_even=$even\n        min_even_index=${even_indexes[$even_index]}\n\
    \      fi\n      ((even_index++))\n    done\n    echo \"[\\\"$min_even\\\", \\\
    \"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node\n  local -i has_even=0\n  for ((i=0; i<n; i++)); do\n    node=${nodes[i]}\n\
    \    if ((node % 2 == 0)); then\n      has_even=1\n      if ((node < min_even_value));\
    \ then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if ((has_even)); then\n    echo \"[\\\"$min_even_value\\\", \\\
    \"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local nodes=\"$1\"\
    \n  local min_even_value=\n  local min_even_index=\n  local i=0\n  for node in\
    \ $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($@)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=", "  local nodes=($@)\n  local min_even_value=\n \
    \ local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      elif [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local smallest_value=\n    local smallest_index=\n\
    \    local index=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n            if [[ -z $smallest_value ]] || [[ $node -lt\
    \ $smallest_value ]]; then\n                smallest_value=$node\n           \
    \     smallest_index=$index\n            fi\n        fi\n        index=$((index\
    \ + 1))\n    done\n    if [[ -z $smallest_value ]]; then\n        echo \"[]\"\n\
    \    else\n        echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\
    \n    fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n\
    \      min_even_value=$node\n      min_even_index=$i\n    fi\n    i+=1\n  done\n\
    \  if [[ $min_even_value -eq 1000000000 ]]; then\n    echo \"[]\"\n  else\n  \
    \  echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  declare\
    \ -a nodes=($1)\n  declare -a evens=()\n  declare -a evens_index=()\n  for ((\
    \ i=0; i<${#nodes[@]}; i++ )); do\n    if [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]];\
    \ then\n      evens+=(${nodes[$i]})\n      evens_index+=($i)\n    fi\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    smallest_even_index=$(echo\
    \ \"${evens[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n    smallest_even_index=$(echo\
    \ \"${evens[@]}\" | tr ' ' '\\n' | grep -n $smallest_even_index | cut -d: -f1)\n\
    \    echo \"[\\\"${evens[$smallest_even_index]}\\\", \\\"${evens_index[$smallest_even_index]}\\\
    \"]\"\n  fi", "  local nodes=($@)\n  local evens=()\n  local even_indexes=()\n\
    \  local even_values=()\n  local smallest_even_value\n  local smallest_even_index\n\
    \  local smallest_even_index_value\n  local smallest_even_index_index\n  local\
    \ smallest_even_index_index_value\n  local smallest_even_index_index_index\n \
    \ local smallest_even_index_index_index_value\n  local smallest_even_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_value\n  local smallest_even_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_value\n  local smallest_even_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_value\n  local smallest_even_index_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_index_value\n  local\
    \ smallest_even_index_index_index_index_index_index_index_index\n  local smallest_even_index_index_index_index_index_index_index_index_value\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_value\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_index_value\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_index_index_value\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local smallest_even_index_index_index_index_index_index_index_index_index",
  "  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_value=0\n\
    \      smallest_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ ${nodes[$i]}\
    \ -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n        smallest_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local -i min_value=1000000000\n    local -i min_index=1000000000\n\
    \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i value\n    local\
    \ -i index\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n       \
    \ if ((value % 2 == 0 && value < min_value)); then\n            min_value=$value\n\
    \            min_index=$i\n        fi\n    done\n    if ((min_value == 1000000000));\
    \ then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_value\\\", \\\"\
    $min_index\\\"]\"\n    fi", "  local nodes=($@)\n  local evens=()\n  local even\n\
    \  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n      evens+=($node)\n\
    \    fi\n  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n  else\n\
    \    even=$(printf \"%s\\n\" \"${evens[@]}\" | sort -n | head -n 1)\n    echo\
    \ \"[\\\"$even\\\", \\\"$((${nodes[@]/$even/}))\\\"]\"\n  fi", "  local nodes=($@)\n\
    \  local smallest_even_value=\n  local smallest_even_value_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node %\
    \ 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n \
    \     min_even_value=$node\n      min_even_index=$i\n    fi\n    i+=1\n  done\n\
    \  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local smallest_value=\"\"\n  local smallest_index=\"\"\n  local index=0\n\
    \  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if [ -z\
    \ \"$smallest_value\" ] || [ $node -lt $smallest_value ]; then\n        smallest_value=$node\n\
    \        smallest_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [ -z \"$smallest_value\" ]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local -a nodes=(\"\
    $@\")\n  local -i smallest_value=100000000\n  local -i smallest_index=100000000\n\
    \  local -i index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2))\
    \ -eq 0 ]] && [[ $node -lt $smallest_value ]]; then\n      smallest_value=$node\n\
    \      smallest_index=$index\n    fi\n    ((index++))\n  done\n  if [[ $smallest_value\
    \ -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=($1)\n  local evens=()\n\
    \  local evens_indexes=()\n  local smallest_even=\n  local smallest_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}%2 -eq 0 ]]; then\n\
    \      evens+=(${nodes[$i]})\n      evens_indexes+=($i)\n    fi\n  done\n  if\
    \ [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    smallest_even=${evens[0]}\n\
    \    smallest_even_index=${evens_indexes[0]}\n    for ((i=1; i<${#evens[@]}; i++));\
    \ do\n      if [[ ${evens[$i]} -lt $smallest_even ]]; then\n        smallest_even=${evens[$i]}\n\
    \        smallest_even_index=${evens_indexes[$i]}\n      fi\n    done\n    echo\
    \ \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "  local\
    \ nodes=(\"$@\")\n  local evens=()\n  local smallest_even\n  local smallest_even_index\n\
    \n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ $((${nodes[$i]} % 2)) -eq\
    \ 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n    fi\n  done\n\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  smallest_even=${evens[0]}\n\
    \  smallest_even_index=0\n\n  for ((i=1; i<${#evens[@]}; i++)); do\n    if [[\
    \ ${evens[$i]} -lt $smallest_even ]]; then\n      smallest_even=${evens[$i]}\n\
    \      smallest_even_index=$i\n    fi\n  done\n\n  echo \"[\\\"$smallest_even\\\
    \", \\\"$smallest_even_index\\\"]\"", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i is_even\n  local -i\
    \ is_first_even=1\n  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n \
    \   is_even=$((node_value % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if [[\
    \ $is_first_even -eq 1 ]]; then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \        is_first_even=0\n      else\n        if [[ $node_value -lt $min_even_value\
    \ ]]; then\n          min_even_value=$node_value\n          min_even_index=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ $is_first_even -eq 1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even=\"\"\n  local smallest_even_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ];\
    \ then\n      if [ -z \"$smallest_even\" ] || [ $node -lt $smallest_even ]; then\n\
    \        smallest_even=$node\n        smallest_even_index=$index\n      fi\n \
    \   fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_even\" ]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=100001\n  local min_even_value_index=100001\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_value_index=$i\n      break\n    elif\
    \ [[ ${nodes[$i]} -lt $min_even_value && ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ min_even_value=${nodes[$i]}\n      min_even_value_index=$i\n    fi\n  done\n\
    \  if [[ $min_even_value -eq 100001 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi", "    local\
    \ nodes=(\"$@\")\n    local min_even_value=10000000000\n    local min_even_value_index=-1\n\
    \    for ((i=0; i<${#nodes[@]}; i++)); do\n        local node=${nodes[$i]}\n \
    \       if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ $node -lt $min_even_value\
    \ ]]; then\n                min_even_value=$node\n                min_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ $min_even_value_index -eq -1\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_value_index\\\"]\"\n    fi", "  local nodes=($@)\n  local evens=()\n\
    \  local evens_indexes=()\n  local evens_indexes_sorted=()\n  local min_even=()\n\
    \  local min_even_index=()\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[\
    \ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n      evens_indexes+=($i)\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    evens_indexes_sorted=($(printf \"%s\\n\" \"${evens_indexes[@]}\" | sort -n))\n\
    \    min_even_index=${evens_indexes_sorted[0]}\n    min_even=${evens[$min_even_index]}\n\
    \    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local\
    \ nodes=($1)\n    local min_even_value=\n    local min_even_index=\n    for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n     \
    \       min_even_value=0\n            min_even_index=$i\n            break\n \
    \       elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n  \
    \          if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n                min_even_value=${nodes[$i]}\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n    fi", "  local nodes=(\"$@\")\n  local smallest_even_value=\"\
    \"\n  local smallest_even_value_index=\"\"\n  for i in \"${!nodes[@]}\"; do\n\
    \    local node=\"${nodes[$i]}\"\n    if [[ \"$node\" =~ ^[0-9]+$ ]]; then\n \
    \     if [[ \"$node\" -eq 0 ]]; then\n        if [[ -z \"$smallest_even_value\"\
    \ ]]; then\n          smallest_even_value=\"$node\"\n          smallest_even_value_index=\"\
    $i\"\n        fi\n      elif [[ \"$node\" -gt 0 ]]; then\n        if [[ \"$((node\
    \ % 2))\" -eq 0 ]]; then\n          if [[ -z \"$smallest_even_value\" ]]; then\n\
    \            smallest_even_value=\"$node\"\n            smallest_even_value_index=\"\
    $i\"\n          elif [[ \"$node\" -lt \"$smallest_even_value\" ]]; then\n    \
    \        smallest_even_value=\"$node\"\n            smallest_even_value_index=\"\
    $i\"\n          fi\n        fi\n      fi\n    fi\n  done\n  if [[ -z \"$smallest_even_value\"\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=(\"$@\")\n \
    \ local -i min_value=100000000\n  local -i min_index=100000000\n  local -i i=0\n\
    \  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n  local -i found=0\n\
    \  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0 &&\
    \ value < min_value)); then\n      min_value=$value\n      min_index=$i\n    \
    \  found=1\n    fi\n  done\n  if ((found)); then\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "    local -a nodes=($1)\n\
    \    local -a evens\n    local -a evens_index\n    local -a odds\n    local -a\
    \ odds_index\n    local -a result\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local aa\n    local bb\n    local\
    \ cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n \
    \   local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local\
    \ nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n \
    \   local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local\
    \ yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n\
    \    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n \
    \   local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n  \
    \  local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n   \
    \ local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local\
    \ yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local\
    \ dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local\
    \ iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local\
    \ nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local\
    \ ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local\
    \ xxxx\n    local yyyy\n    local z", "  local nodes=($@)\n  local smallest_even_value=\n\
    \  local smallest_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]\
    \ || [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[\
    \ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "    local -a\
    \ nodes=($1)\n    local -i min_even_value=10000\n    local -i min_even_index=10000\n\
    \    local -i i=0\n    local -i n=${#nodes[@]}\n    for ((i=0; i<n; i++)); do\n\
    \        local -i node=${nodes[$i]}\n        if ((node % 2 == 0 && node < min_even_value));\
    \ then\n            min_even_value=$node\n            min_even_index=$i\n    \
    \    fi\n    done\n    if ((min_even_value < 10000)); then\n        echo \"[\\\
    \"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    else\n        echo \"[]\"\
    \n    fi"]
stop_tokens:
- "\n}"
