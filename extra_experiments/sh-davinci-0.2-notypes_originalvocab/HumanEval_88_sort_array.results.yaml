language: sh
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local\
    \ -i temp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i flag48=0\n    local -i flag49=0\n    local -i flag50\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i n=${#array[@]}\n  local -i sum=0\n\
    \  local -i temp=0\n  local -i min=0\n  local -i max=0\n  local -i index=0\n \
    \ local -i flag=0\n  for ((i=0; i<n; i++)); do\n    min=${array[i]}\n    index=i\n\
    \    for ((j=i+1; j<n; j++)); do\n      if ((min > ${array[j]})); then\n     \
    \   min=${array[j]}\n        index=j\n      fi\n    done\n    temp=${array[i]}\n\
    \    array[i]=${array[index]}\n    array[index]=$temp\n  done\n  sum=$(( ${array[0]}\
    \ + ${array[n-1]} ))\n  if ((sum % 2 == 0)); then\n    for ((i=n-1; i>=0; i--));\
    \ do\n      sorted_array[flag]=${array[i]}\n      flag=$((flag+1))\n    done\n\
    \  else\n    for ((i=0; i<n; i++)); do\n      sorted_array[flag]=${array[i]}\n\
    \      flag=$((flag+1))\n    done\n  fi\n  echo ${sorted_array[@]}\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=($1)\n    local -a res\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local\
    \ -i sum=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n \
    \   local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -i flag48=0\n    local\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i tmp=0\n    local -i sum=0\n\
    \    local -i flag=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if ((sum%2==0)); then\n                if ((arr[i]<arr[j]));\
    \ then\n                    tmp=${arr[i]}\n                    arr[i]=${arr[j]}\n\
    \                    arr[j]=$tmp\n                fi\n            else\n     \
    \           if ((arr[i]>arr[j])); then\n                    tmp=${arr[i]}\n  \
    \                  arr[i]=${arr[j]}\n                    arr[j]=$tmp\n       \
    \         fi\n            fi\n        done\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        if ((i==0)); then\n            echo -n \"[\\\"${arr[i]}\\\"\"\n\
    \        elif ((i==len-1)); then\n            echo -n \", \\\"${arr[i]}\\\"]\"\
    \n        else\n            echo -n \", \\\"${arr[i]}\\\"\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  if (( ${#array[@]} ==\
    \ 0 )); then\n    echo \"[]\"\n  elif (( ${#array[@]} == 1 )); then\n    echo\
    \ \"[\\\"${array[0]}\\\"]\"\n  else\n    local -a sorted_array\n    if (( (${array[0]}\
    \ + ${array[-1]}) % 2 == 0 )); then\n      sorted_array=($(printf \"%s\\n\" \"\
    ${array[@]}\" | sort -nr))\n    else\n      sorted_array=($(printf \"%s\\n\" \"\
    ${array[@]}\" | sort -n))\n    fi\n    echo \"[\\\"${sorted_array[@]}\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=${array[0]}+${array[-1]}\n\
    \  if (( sum % 2 == 0 )); then\n    printf '%s\\n' \"${array[@]}\" | sort -nr\n\
    \  else\n    printf '%s\\n' \"${array[@]}\" | sort -n\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxudmvo2n.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpxudmvo2n.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i n=${#array[@]}\n\
    \    local -i sum\n    local -i odd\n    local -i even\n    local -i temp\n  \
    \  local -i temp_index\n    local -i temp_index_2\n    local -i temp_index_3\n\
    \    local -i temp_index_4\n    local -i temp_index_5\n    local -i temp_index_6\n\
    \    local -i temp_index_7\n    local -i temp_index_8\n    local -i temp_index_9\n\
    \    local -i temp_index_10\n    local -i temp_index_11\n    local -i temp_index_12\n\
    \    local -i temp_index_13\n    local -i temp_index_14\n    local -i temp_index_15\n\
    \    local -i temp_index_16\n    local -i temp_index_17\n    local -i temp_index_18\n\
    \    local -i temp_index_19\n    local -i temp_index_20\n    local -i temp_index_21\n\
    \    local -i temp_index_22\n    local -i temp_index_23\n    local -i temp_index_24\n\
    \    local -i temp_index_25\n    local -i temp_index_26\n    local -i temp_index_27\n\
    \    local -i temp_index_28\n    local -i temp_index_29\n    local -i temp_index_30\n\
    \    local -i temp_index_31\n    local -i temp_index_32\n    local -i temp_index_33\n\
    \    local -i temp_index_34\n    local -i temp_index_35\n    local -i temp_index_36\n\
    \    local -i temp_index_37\n    local -i temp_index_38\n    local -i temp_index_39\n\
    \    local -i temp_index_40\n    local -i temp_index_41\n    local -i temp_index_42\n\
    \    local -i temp_index_43\n    local -i temp_index_44\n   \n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local length=${#array[@]}\n\
    \  local sum=$((array[0] + array[$((length - 1))]))\n  local sorted_array=()\n\
    \  if ((sum % 2 == 0)); then\n    for ((i = length - 1; i >= 0; i--)); do\n  \
    \    sorted_array+=(\"${array[$i]}\")\n    done\n  else\n    for ((i = 0; i <\
    \ length; i++)); do\n      sorted_array+=(\"${array[$i]}\")\n    done\n  fi\n\
    \  echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmplf0a2hpf.sh: line 19: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i nnn=\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted_array=()\n\
    \    local -a odd_array=()\n    local -a even_array=()\n    local -i i=0\n   \
    \ local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ len=${#array[@]}\n  local -i mid=0\n  local -i temp=0\n  local -i flag=0\n \
    \ local -i flag1=0\n  local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n\
    \  local -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n\
    \  local -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n\
    \  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n\
    \  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n\
    \  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n\
    \  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n\
    \  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n\
    \  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n\
    \  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n\
    \  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n\
    \  local -i flag45=0\n  local -i flag46=0\n  local -i flag47=0\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local -a _sorted_array\n\
    \    local _sum=0\n    local _index=0\n    local _length=${#_array[@]}\n    local\
    \ _first_index=${_array[0]}\n    local _last_index=${_array[-1]}\n    _sum=$((_first_index\
    \ + _last_index))\n    if [[ $_sum -eq 0 ]]; then\n        echo \"[]\"\n    else\n\
    \        if [[ $_sum%2 -eq 0 ]]; then\n            for _index in $(seq 0 $((_length-1)));\
    \ do\n                _sorted_array[$_index]=${_array[$((_length-1-_index))]}\n\
    \            done\n        else\n            _sorted_array=(\"${_array[@]}\")\n\
    \        fi\n        echo \"[\\\"${_sorted_array[*]}\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0zvzzp1a.sh: line 17: local: `'': not a valid identifier\n/tmp/tmp0zvzzp1a.sh:
    line 23: _array: bad array subscript\n"'
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=$((array[0]\
    \ + array[-1]))\n    if ((sum % 2 == 0)); then\n        printf '%s\\n' \"${array[@]}\"\
    \ | sort -r\n    else\n        printf '%s\\n' \"${array[@]}\" | sort\n    fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyqika723.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r array=($@)\n  local -r first=${array[0]}\n\
    \  local -r last=${array[-1]}\n  local -r sum=$((first + last))\n  local -r is_even=$((sum\
    \ % 2))\n  local -r sort_order=$((is_even == 0 ? 1 : 0))\n  local -r sorted=($(printf\
    \ \"%s\\n\" \"${array[@]}\" | sort -n -r))\n  local -r result=$(printf \"%s\"\
    \ \"${sorted[@]}\")\n  echo \"${result}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpy_vp01u3.sh: line 19: array: bad array subscript\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if ((sum%2==0)); then\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ -r | tr '\\n' ' '\n    else\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fgdpp31.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -i sum_of_first_and_last_index_value\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n\
    \  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local\
    \ -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n\
    \  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n \
    \ local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local\
    \ -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i\
    \ qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n\
    \  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n\
    \  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n\
    \  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n\
    \  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n\
    \  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n\
    \  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n\
    \  local -i aaaa\n  local -i bbb\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=${array[0]}+${array[-1]}\n\
    \  if (( sum % 2 == 0 )); then\n    printf '%s\\n' \"${array[@]}\" | sort -nr\n\
    \  else\n    printf '%s\\n' \"${array[@]}\" | sort -n\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxudmvo2n.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpxudmvo2n.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local -a _sorted\n   \
    \ local _sum=0\n    local _i=0\n    local _j=0\n    local _tmp=0\n    local _len=${#_array[@]}\n\
    \    if [ $_len -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n \
    \   for ((_i=0; _i<$_len; _i++)); do\n        _sum=$((${_array[0]} + ${_array[$_len-1]}))\n\
    \        _sorted[$_i]=${_array[$_i]}\n    done\n    if [ $((_sum % 2)) -eq 0 ];\
    \ then\n        for ((_i=0; _i<$_len; _i++)); do\n            for ((_j=$_i; _j<$_len;\
    \ _j++)); do\n                if [ ${_sorted[$_i]} -lt ${_sorted[$_j]} ]; then\n\
    \                    _tmp=${_sorted[$_i]}\n                    _sorted[$_i]=${_sorted[$_j]}\n\
    \                    _sorted[$_j]=$_tmp\n                fi\n            done\n\
    \        done\n    else\n        for ((_i=0; _i<$_len; _i++)); do\n          \
    \  for ((_j=$_i; _j<$_len; _j++)); do\n                if [ ${_sorted[$_i]} -gt\
    \ ${_sorted[$_j]} ]; then\n                    _tmp=${_sorted[$_i]}\n        \
    \            _sorted[$_i]=${_sorted[$_j]}\n                    _sorted[$_j]=$_tmp\n\
    \                fi\n            done\n        done\n    fi\n    echo \"[\"$(printf\
    \ '\"%s\", ' \"${_sorted[@]}\")\"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpwp9wqrjs.sh: line 17: local: `'': not a valid identifier\n"'
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a arr=($1)\n  local -a result=()\n  local\
    \ -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n\
    \  local -i mid=0\n  local -i mid_index=0\n  local -i is_odd=0\n  local -i is_even=0\n\
    \  local -i is_asc=0\n  local -i is_desc=0\n  local -i is_swap=0\n  local -i is_swap_done=0\n\
    \  local -i is_swap_done_count=0\n  local -i is_swap_done_count_max=0\n  local\
    \ -i is_swap_done_count_max_index=0\n  local -i is_swap_done_count_max_index_prev=0\n\
    \  local -i is_swap_done_count_max_index_next=0\n  local -i is_swap_done_count_max_index_prev_value=0\n\
    \  local -i is_swap_done_count_max_index_next_value=0\n  local -i is_swap_done_count_max_index_prev_value_sum=0\n\
    \  local -i is_swap_done_count_max_index_next_value_sum=0\n  local -i is_swap_done_count_max_index_prev_value_sum_is_odd=0\n\
    \  local -i is_swap_done_count_max_index_next_value_sum_is_odd=0\n  local -i is_swap_done_count_max_index_prev_value_sum_is_even=0\n\
    \  local -i is_swap_done_count_max_index_next_value_sum_is_even=0\n  local -i\
    \ is_swap_done_count_max_index_prev_value_sum_is_asc=0\n  local -i is_swap_done_count_max_index_next_value_sum_is_asc=0\n\
    \  local -\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i first=${array[0]}\n\
    \  local -i last=${array[-1]}\n  local -i sum=$((first + last))\n  if ((sum %\
    \ 2 == 0)); then\n    printf '%s\\n' \"${array[@]}\" | sort -r\n  else\n    printf\
    \ '%s\\n' \"${array[@]}\" | sort\n  fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzpd_8g_.sh: line 18: local: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local _sum=0\n    local\
    \ _tmp=0\n    local _i=0\n    local _j=0\n    local _len=${#_array[@]}\n    for\
    \ (( _i=0; _i<_len; _i++ )); do\n        _sum=$(( ${_array[_i]} + ${_array[-1-_i]}\
    \ ))\n        if [[ $_sum -gt 0 ]]; then\n            if [[ $_sum % 2 -eq 0 ]];\
    \ then\n                _tmp=${_array[_i]}\n                _array[_i]=${_array[-1-_i]}\n\
    \                _array[-1-_i]=$_tmp\n            fi\n        else\n         \
    \   break\n        fi\n    done\n    echo \"${_array[@]}\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpb38_fgq0.sh: line 26: conditional binary operator expected\n/tmp/tmpb38_fgq0.sh:
    line 26: syntax error near `%''\n/tmp/tmpb38_fgq0.sh: line 26: `            if
    [[ $_sum % 2 -eq 0 ]]; then''\n"'
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -i sum_first_last_index\n  local -i first_index=0\n  local -i last_index=$((${#array[@]}\
    \ - 1))\n  sum_first_last_index=$((array[first_index] + array[last_index]))\n\
    \  if ((sum_first_last_index % 2 == 0)); then\n    for ((i = last_index; i >=\
    \ first_index; i--)); do\n      sorted_array+=(\"${array[i]}\")\n    done\n  else\n\
    \    for ((i = first_index; i <= last_index; i++)); do\n      sorted_array+=(\"\
    ${array[i]}\")\n    done\n  fi\n  echo \"${sorted_array[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6_k298nw.sh: line 22: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i sum=$((array[0]\
    \ + array[len-1]))\n  local -i odd=1\n  local -i even=0\n  local -i order=$((sum\
    \ % 2))\n  if [[ $order -eq $odd ]]; then\n    for ((i=0; i<len; i++)); do\n \
    \     sorted_array[i]=${array[i]}\n    done\n  else\n    for ((i=len-1; i>=0;\
    \ i--)); do\n      sorted_array[j]=${array[i]}\n      ((j++))\n    done\n  fi\n\
    \  echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_hf3q4lh.sh: line 22: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result\n\
    \    local -i i=0\n    local -i sum\n    local -i length=${#array[@]}\n    local\
    \ -i last_index=$((length - 1))\n    local -i first_index=0\n    local -i middle_index=$((length\
    \ / 2))\n    local -i middle_index_plus_one=$((middle_index + 1))\n    local -i\
    \ middle_index_minus_one=$((middle_index - 1))\n    local -i middle_index_plus_two=$((middle_index\
    \ + 2))\n    local -i middle_index_minus_two=$((middle_index - 2))\n    local\
    \ -i middle_index_plus_three=$((middle_index + 3))\n    local -i middle_index_minus_three=$((middle_index\
    \ - 3))\n    local -i middle_index_plus_four=$((middle_index + 4))\n    local\
    \ -i middle_index_minus_four=$((middle_index - 4))\n    local -i middle_index_plus_five=$((middle_index\
    \ + 5))\n    local -i middle_index_minus_five=$((middle_index - 5))\n    local\
    \ -i middle_index_plus_six=$((middle_index + 6))\n    local -i middle_index_minus_six=$((middle_index\
    \ - 6))\n    local -i middle_index_plus_seven=$((middle_index + 7))\n    local\
    \ -i middle_index_minus_seven=$((middle_index - 7))\n    local -i middle_index_plus_eight=$((middle_index\
    \ + 8))\n    local -i middle_index_minus_eight=$((middle_index - 8))\n    local\
    \ -i middle_index_plus_nine=$((middle_index + 9))\n    local -i middle_index_minus_nine=$((middle_index\
    \ - 9))\n    local -i middle_index_plus_ten=$((middle_index + 10))\n    local\
    \ -i middle_index_minus_ten=$((middle_index - 10))\n    local -i middle_index_plus_eleven=$((middle_index\
    \ + 11))\n    local -i middle_index_\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local sum=$(( ${array[0]}\
    \ + ${array[-1]} ))\n  if (( sum % 2 == 0 )); then\n    echo \"${array[@]}\" |\
    \ tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1i35bqrq.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i sum=0\n  local -i len=${#array[@]}\n  local -i mid=0\n\
    \  local -i temp=0\n  local -i temp1=0\n  local -i temp2=0\n  local -i temp3=0\n\
    \  local -i temp4=0\n  local -i temp5=0\n  local -i temp6=0\n  local -i temp7=0\n\
    \  local -i temp8=0\n  local -i temp9=0\n  local -i temp10=0\n  local -i temp11=0\n\
    \  local -i temp12=0\n  local -i temp13=0\n  local -i temp14=0\n  local -i temp15=0\n\
    \  local -i temp16=0\n  local -i temp17=0\n  local -i temp18=0\n  local -i temp19=0\n\
    \  local -i temp20=0\n  local -i temp21=0\n  local -i temp22=0\n  local -i temp23=0\n\
    \  local -i temp24=0\n  local -i temp25=0\n  local -i temp26=0\n  local -i temp27=0\n\
    \  local -i temp28=0\n  local -i temp29=0\n  local -i temp30=0\n  local -i temp31=0\n\
    \  local -i temp32=0\n  local -i temp33=0\n  local -i temp34=0\n  local -i temp35=0\n\
    \  local -i temp36=0\n  local -i temp37=0\n  local -i temp38=0\n  local -i temp39=0\n\
    \  local -i temp40=0\n  local -i temp41=0\n  local -i temp42=0\n  local -i temp43=0\n\
    \  local -i temp44=0\n  local -i temp45=0\n  local\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted_array=()\n\
    \    local -a odd_array=()\n    local -a even_array=()\n    local -a odd_sorted_array=()\n\
    \    local -a even_sorted_array=()\n    local -a result_array=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i sum=0\n    local -i length=0\n    local -i odd_length=0\n    local -i even_length=0\n\
    \    local -i odd_sorted_length=0\n    local -i even_sorted_length=0\n    local\
    \ -i result_length=0\n    local -i temp=0\n    local -i temp_length=0\n    local\
    \ -i temp_sorted_length=0\n    local -i temp_odd_length=0\n    local -i temp_even_length=0\n\
    \    local -i temp_odd_sorted_length=0\n    local -i temp_even_sorted_length=0\n\
    \    local -i temp_result_length=0\n    local -i temp_odd_sorted_length=0\n  \
    \  local -i temp_even_sorted_length=0\n    local -i temp_result_length=0\n   \
    \ local -i temp_odd_sorted_length=0\n    local -i temp_even_sorted_length=0\n\
    \    local -i temp_result_length=0\n    local -i temp_odd_sorted_length=0\n  \
    \  local -i temp_even_sorted_length=0\n    local -i temp_result_length=\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -r array=($1)\n    local -r length=${#array[@]}\n\
    \    local -r first_index=${array[0]}\n    local -r last_index=${array[$((length\
    \ - 1))]}\n    local -r sum=$((first_index + last_index))\n    local -r is_odd=$((sum\
    \ % 2))\n    local -r is_even=$((1 - is_odd))\n    local -r sort_order=($is_odd\
    \ $is_even)\n    local -r sort_order_index=$((sum % 2))\n    local -r sort_order_value=${sort_order[$sort_order_index]}\n\
    \    local -r sort_order_string=$(if [[ $sort_order_value -eq 0 ]]; then echo\
    \ \"r\"; else echo \"\"; fi)\n    local -r sorted_array=($(printf \"%s\\n\" \"\
    ${array[@]}\" | sort -n$sort_order_string))\n    local -r sorted_array_string=$(printf\
    \ \"[%s]\" \"$(printf '\"%s\", ' \"${sorted_array[@]}\" | sed 's/, $//')\")\n\
    \    echo \"$sorted_array_string\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpy10t0pud.sh: line 20: array: bad array subscript\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r array=\"$1\"\n  local -r sum=$((${array[0]}\
    \ + ${array[-1]}))\n  local -r sorted_array=$(echo \"$array\" | tr ' ' '\\n' |\
    \ sort -n)\n  if ((sum % 2 == 0)); then\n    echo \"$sorted_array\" | tr '\\n'\
    \ ' ' | rev\n  else\n    echo \"$sorted_array\" | tr '\\n' ' '\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1eziepm3.sh: line 18: array: bad array subscript\n/tmp/tmp1eziepm3.sh:
    line 18: + : syntax error: operand expected (error token is "+ ")\n/tmp/tmp1eziepm3.sh:
    line 18: array: bad array subscript\n/tmp/tmp1eziepm3.sh: line 18: 5 + : syntax
    error: operand expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if (( sum % 2 == 0 )); then\n        printf '%s\\n' \"${array[@]}\" | sort\
    \ -nr\n    else\n        printf '%s\\n' \"${array[@]}\" | sort -n\n    fi\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpit16gnaw.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpit16gnaw.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n  \
    \  local -i length=${#array[@]}\n    local -i temp=0\n    for ((i=0; i<length;\
    \ i++)); do\n        sorted_array[i]=${array[i]}\n    done\n    sum=$((sorted_array[0]\
    \ + sorted_array[length-1]))\n    if ((sum % 2 == 0)); then\n        for ((i=0;\
    \ i<length; i++)); do\n            for ((j=i+1; j<length; j++)); do\n        \
    \        if ((sorted_array[i] < sorted_array[j])); then\n                    temp=${sorted_array[i]}\n\
    \                    sorted_array[i]=${sorted_array[j]}\n                    sorted_array[j]=$temp\n\
    \                fi\n            done\n        done\n    else\n        for ((i=0;\
    \ i<length; i++)); do\n            for ((j=i+1; j<length; j++)); do\n        \
    \        if ((sorted_array[i] > sorted_array[j])); then\n                    temp=${sorted_array[i]}\n\
    \                    sorted_array[i]=${sorted_array[j]}\n                    sorted_array[j]=$temp\n\
    \                fi\n            done\n        done\n    fi\n    for ((k=0; k<length;\
    \ k++)); do\n        echo -n '\"'${sorted_array[k]}'\"'\n        if ((k < length-1));\
    \ then\n            echo -n ', '\n        fi\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r array=($1)\n  local -r sum=$((${array[0]}\
    \ + ${array[-1]}))\n  local -r sorted_array=($(printf \"%s\\n\" \"${array[@]}\"\
    \ | sort -n))\n  if ((sum % 2 == 0)); then\n    echo \"${sorted_array[@]}\" |\
    \ tac\n  else\n    echo \"${sorted_array[@]}\"\n  fi\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxth_as7a.sh: line 18: array: bad array subscript\n/tmp/tmpxth_as7a.sh:
    line 18: + : syntax error: operand expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local first_index=${array[0]}\n\
    \  local last_index=${array[-1]}\n  local sum=$(( first_index + last_index ))\n\
    \  if [[ $(( sum % 2 )) -eq 0 ]]; then\n    echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort -nr | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -a odd_array=()\n  local -a even_array=()\n  local -i odd_sum=0\n  local\
    \ -i even_sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
    \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n \
    \ local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n\
    \  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local\
    \ -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n \n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local input=(\"$@\")\n    local output=()\n  \
    \  local first=${input[0]}\n    local last=${input[-1]}\n    local sum=$((first\
    \ + last))\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n\
    \    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#array[@]}\n \
    \ local -i sum=0\n  local -i temp=0\n  local -i flag=0\n  local -i flag1=0\n \
    \ local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n\
    \  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n\
    \  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n\
    \  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n\
    \  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n\
    \  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n\
    \  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n\
    \  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n\
    \  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n\
    \  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n\
    \  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n\
    \  local -i flag46=0\n  local -i flag47=0\n  local -i flag48\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n array=$1\n    local -a sorted_array\n\
    \    local -i i\n    local -i j\n    local -i sum\n    local -i temp\n    local\
    \ -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        sorted_array[i]=${array[i]}\n\
    \    done\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++));\
    \ do\n            sum=$i+$j\n            if ((sum%2==0)); then\n             \
    \   if ((sorted_array[i]<sorted_array[j])); then\n                    temp=${sorted_array[i]}\n\
    \                    sorted_array[i]=${sorted_array[j]}\n                    sorted_array[j]=$temp\n\
    \                fi\n            else\n                if ((sorted_array[i]>sorted_array[j]));\
    \ then\n                    temp=${sorted_array[i]}\n                    sorted_array[i]=${sorted_array[j]}\n\
    \                    sorted_array[j]=$temp\n                fi\n            fi\n\
    \        done\n    done\n    for ((i=0; i<len; i++)); do\n        echo -n '\"\
    '${sorted_array[i]}'\"'\n        if ((i<len-1)); then\n            echo -n ',\
    \ '\n        fi\n    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp7p4g5x5o.sh: line 17: local: `'': not a valid identifier\n/tmp/tmp7p4g5x5o.sh:
    line 17: local: `5'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i n\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum_first_last_index=0\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n\
    \  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i\
    \ ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n \
    \ local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i\
    \ rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \
    \ local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i\
    \ aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n\
    \  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local\
    \ -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i length=${#array[@]}\n\
    \  local -i temp=0\n  local -i temp2=0\n  if [ $length -eq 0 ]; then\n    echo\
    \ \"[]\"\n  elif [ $length -eq 1 ]; then\n    echo \"[\\\"${array[0]}\\\"]\"\n\
    \  else\n    for ((i=0; i<$length; i++)); do\n      for ((j=0; j<$length; j++));\
    \ do\n        if [ ${array[$i]} -lt ${array[$j]} ]; then\n          temp=${array[$i]}\n\
    \          array[$i]=${array[$j]}\n          array[$j]=$temp\n        fi\n   \
    \   done\n    done\n    sum=$(( ${array[0]} + ${array[$((length-1))]} ))\n   \
    \ if [ $((sum%2)) -eq 0 ]; then\n      for ((k=0; k<$length; k++)); do\n     \
    \   sorted[$k]=${array[$((length-1-k))]}\n      done\n    else\n      for ((k=0;\
    \ k<$length; k++)); do\n        sorted[$k]=${array[$k]}\n      done\n    fi\n\
    \    echo \"[\\\"${sorted[*]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted\n  local\
    \ -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n \
    \ local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i\
    \ af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n \
    \ local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i\
    \ ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n \
    \ local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i\
    \ ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n \
    \ local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i\
    \ bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n \
    \ local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r input=\"$1\"\n  local -a array=()\n  local\
    \ -a sorted_array=()\n  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n\
    \  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i\
    \ ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n \
    \ local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i\
    \ rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \
    \ local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i\
    \ aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n\
    \  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local\
    \ -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result\n  local\
    \ first_index=0\n  local last_index=$((${#array[@]} - 1))\n  local sum=$((array[$first_index]\
    \ + array[$last_index]))\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n array=$1\n    local -a sorted_array\n\
    \    local -i sum_index\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i length\n    local -i temp\n    local -i swap\n    local -i index\n    local\
    \ -i index_1\n    local -i index_2\n    local -i index_3\n    local -i index_4\n\
    \    local -i index_5\n    local -i index_6\n    local -i index_7\n    local -i\
    \ index_8\n    local -i index_9\n    local -i index_10\n    local -i index_11\n\
    \    local -i index_12\n    local -i index_13\n    local -i index_14\n    local\
    \ -i index_15\n    local -i index_16\n    local -i index_17\n    local -i index_18\n\
    \    local -i index_19\n    local -i index_20\n    local -i index_21\n    local\
    \ -i index_22\n    local -i index_23\n    local -i index_24\n    local -i index_25\n\
    \    local -i index_26\n    local -i index_27\n    local -i index_28\n    local\
    \ -i index_29\n    local -i index_30\n    local -i index_31\n    local -i index_32\n\
    \    local -i index_33\n    local -i index_34\n    local -i index_35\n    local\
    \ -i index_36\n    local -i index_37\n    local -i index_38\n    local -i index_39\n\
    \    local -i index_40\n    local -i index_41\n    local -i index_42\n    local\
    \ -i index_43\n    local -i index_44\n    local -i index_45\n    local -i index_46\n\
    \    local -i index_47\n    local -i index_48\n    local -i index_49\n    local\
    \ -i index_50\n    local -i index_51\n    local -i index_52\n    local -i index_53\n\
    \    local -i index_54\n    local -i index_55\n    local -i index\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp_ggynfr3.sh: line 17: local: `'': not a valid identifier\n/tmp/tmp_ggynfr3.sh:
    line 17: local: `5'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  local -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n\
    \  local -i temp=0\n  if ((sum % 2 == 0)); then\n    for ((i = 0; i < len - 1;\
    \ i++)); do\n      for ((j = 0; j < len - i - 1; j++)); do\n        if ((array[j]\
    \ < array[j + 1])); then\n          temp=${array[j]}\n          array[j]=${array[j\
    \ + 1]}\n          array[j + 1]=$temp\n        fi\n      done\n    done\n  else\n\
    \    for ((i = 0; i < len - 1; i++)); do\n      for ((j = 0; j < len - i - 1;\
    \ j++)); do\n        if ((array[j] > array[j + 1])); then\n          temp=${array[j]}\n\
    \          array[j]=${array[j + 1]}\n          array[j + 1]=$temp\n        fi\n\
    \      done\n    done\n  fi\n  echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu_um2a5l.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i temp=0\n  for\
    \ ((i=0; i<len; i++)); do\n    sum=$((array[i]+array[len-i-1]))\n    if ((sum%2==0));\
    \ then\n      for ((j=0; j<len-i-1; j++)); do\n        if ((array[j]<array[j+1]));\
    \ then\n          temp=${array[j]}\n          array[j]=${array[j+1]}\n       \
    \   array[j+1]=$temp\n        fi\n      done\n    else\n      for ((j=0; j<len-i-1;\
    \ j++)); do\n        if ((array[j]>array[j+1])); then\n          temp=${array[j]}\n\
    \          array[j]=${array[j+1]}\n          array[j+1]=$temp\n        fi\n  \
    \    done\n    fi\n  done\n  echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprknrv034.sh: line 24: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i temp=0\n  local\
    \ -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local -i flag3=0\n  local\
    \ -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local\
    \ -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n \
    \ local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n\
    \  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n\
    \  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n\
    \  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n\
    \  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n\
    \  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n\
    \  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n\
    \  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n\
    \  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n  local -i flag47=0\n\
    \  local -i flag48=0\n  local -i flag49=0\n  local -i flag50\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r array=\"$1\"\n  local -r sum=$((${array[0]}\
    \ + ${array[-1]}))\n  local -r is_odd=$((sum % 2))\n  local -r is_even=$((1 -\
    \ is_odd))\n  local -r sort_order=$(($is_odd * 2 - 1))\n  local -r sorted_array=($(printf\
    \ \"%s\\n\" \"${array[@]}\" | sort -n -r))\n  local -r sorted_array_str=$(printf\
    \ '\"%s\" ' \"${sorted_array[@]}\")\n  echo \"[${sorted_array_str:0:$((${#sorted_array_str}\
    \ - 1))}]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyow5a6bv.sh: line 18: array: bad array subscript\n/tmp/tmpyow5a6bv.sh:
    line 18: + : syntax error: operand expected (error token is "+ ")\n/tmp/tmpyow5a6bv.sh:
    line 18: array: bad array subscript\n/tmp/tmpyow5a6bv.sh: line 18: 5 + : syntax
    error: operand expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i len=${#array[@]}\n\
    \  local -i mid=0\n  local -i left=0\n  local -i right=0\n  local -i tmp=0\n \
    \ local -i flag=0\n  if [[ $len -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  if [[ $len -eq 1 ]]; then\n    echo \"[\\\"${array[0]}\\\"]\"\n    return\n\
    \  fi\n  sum=$((array[0] + array[len-1]))\n  if [[ $((sum % 2)) -eq 0 ]]; then\n\
    \    flag=1\n  fi\n  mid=$((len / 2))\n  left=0\n  right=$((len - 1))\n  while\
    \ [[ $left -lt $mid ]]; do\n    if [[ $flag -eq 0 ]]; then\n      if [[ ${array[left]}\
    \ -gt ${array[right]} ]]; then\n        tmp=${array[left]}\n        array[left]=${array[right]}\n\
    \        array[right]=$tmp\n      fi\n    else\n      if [[ ${array[left]} -lt\
    \ ${array[right]} ]]; then\n        tmp=${array[left]}\n        array[left]=${array[right]}\n\
    \        array[right]=$tmp\n      fi\n    fi\n    left=$((left + 1))\n    right=$((right\
    \ - 1))\n  done\n  result[0]=\"\\\"${array[0]}\\\"\"\n  for ((i=1; i<len; i++));\
    \ do\n    result[i]=\", \\\"${array[i]}\\\"\"\n  done\n  echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  for ((i=0; i<${#array[@]};\
    \ i++)); do\n    sum=$((array[i] + array[${#array[@]}-1-i]))\n    if ((sum % 2\
    \ == 0)); then\n      result[i]=${array[${#array[@]}-1-i]}\n    else\n      result[i]=${array[i]}\n\
    \    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmppway_c4a.sh: line 23: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=$((\
    \ ${array[0]} + ${array[-1]} ))\n    if (( sum % 2 == 0 )); then\n        echo\
    \ \"$(printf \"%s\\n\" \"${array[@]}\" | sort -rn)\"\n    else\n        echo \"\
    $(printf \"%s\\n\" \"${array[@]}\" | sort -n)\"\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcc5lg03u.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\n/tmp/tmpcc5lg03u.sh: line 18: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -i sum=0\n  \
    \  local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i temp=0\n\
    \    for ((i=0; i<len; i++)); do\n        sum=$((sum + arr[i]))\n    done\n  \
    \  if ((sum % 2 == 0)); then\n        for ((i=0; i<len; i++)); do\n          \
    \  for ((j=i+1; j<len; j++)); do\n                if ((arr[i] < arr[j])); then\n\
    \                    temp=${arr[i]}\n                    arr[i]=${arr[j]}\n  \
    \                  arr[j]=$temp\n                fi\n            done\n      \
    \  done\n    else\n        for ((i=0; i<len; i++)); do\n            for ((j=i+1;\
    \ j<len; j++)); do\n                if ((arr[i] > arr[j])); then\n           \
    \         temp=${arr[i]}\n                    arr[i]=${arr[j]}\n             \
    \       arr[j]=$temp\n                fi\n            done\n        done\n   \
    \ fi\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwv_x_8fl.sh: line 24: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a arr=(\"$@\")\n  local -a sorted_arr\n \
    \ local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\
    \  local -i mid=0\n  local -i left=0\n  local -i right=0\n  local -i tmp=0\n \
    \ local -i flag=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i\
    \ n=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n\
    \  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n \
    \ local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i\
    \ qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n \
    \ local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i\
    \ zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n\
    \  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2)); then\n    echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' ' '\\n' |\
    \ sort -nr | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local arr=($1)\n    local len=${#arr[@]}\n   \
    \ local first=${arr[0]}\n    local last=${arr[$len-1]}\n    local sum=$((first+last))\n\
    \    if [[ $((sum%2)) -eq 0 ]]; then\n        echo -n \"[\"\n        for ((i=len-1;\
    \ i>=0; i--)); do\n            echo -n '\"'${arr[$i]}'\"'\n            [[ $i -ne\
    \ 0 ]] && echo -n \", \"\n        done\n        echo \"]\"\n    else\n       \
    \ echo -n \"[\"\n        for ((i=0; i<len; i++)); do\n            echo -n '\"\
    '${arr[$i]}'\"'\n            [[ $i -ne $((len-1)) ]] && echo -n \", \"\n     \
    \   done\n        echo \"]\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpqkep_ex4.sh: line 20: arr: bad array subscript\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local sum=$(( ${array[0]}\
    \ + ${array[-1]} ))\n  if [[ $(( sum % 2 )) -eq 0 ]]; then\n    echo $(echo \"\
    ${array[@]}\" | tr ' ' '\\n' | sort -r)\n  else\n    echo $(echo \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort)\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn82f42qe.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\n/tmp/tmpn82f42qe.sh: line 18: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum=0\n    local -i length=${#array[@]}\n\
    \    local -i temp=0\n    for ((i=0; i<length; i++)); do\n        sorted_array[i]=${array[i]}\n\
    \    done\n    sum=$(( ${array[0]} + ${array[length-1]} ))\n    if (( sum % 2\
    \ == 0 )); then\n        for ((i=0; i<length; i++)); do\n            for ((j=i+1;\
    \ j<length; j++)); do\n                if (( ${sorted_array[i]} < ${sorted_array[j]}\
    \ )); then\n                    temp=${sorted_array[i]}\n                    sorted_array[i]=${sorted_array[j]}\n\
    \                    sorted_array[j]=$temp\n                fi\n            done\n\
    \        done\n    else\n        for ((i=0; i<length; i++)); do\n            for\
    \ ((j=i+1; j<length; j++)); do\n                if (( ${sorted_array[i]} > ${sorted_array[j]}\
    \ )); then\n                    temp=${sorted_array[i]}\n                    sorted_array[i]=${sorted_array[j]}\n\
    \                    sorted_array[j]=$temp\n                fi\n            done\n\
    \        done\n    fi\n    echo ${sorted_array[@]}\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpweenaod0.sh: line 27: +  : syntax error: operand expected (error
    token is "+  ")\n/tmp/tmpweenaod0.sh: line 27: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  local -i length=${#array[@]}\n  local -i i\n  local -i j\n\
    \  local -i temp\n  if [[ $length -eq 0 ]]; then\n    echo \"[]\"\n  elif [[ $length\
    \ -eq 1 ]]; then\n    echo \"[\\\"${array[0]}\\\"]\"\n  else\n    if [[ $((sum\
    \ % 2)) -eq 0 ]]; then\n      for ((i = 0; i < length - 1; i++)); do\n       \
    \ for ((j = 0; j < length - i - 1; j++)); do\n          if [[ ${array[j]} -lt\
    \ ${array[j + 1]} ]]; then\n            temp=${array[j]}\n            array[j]=${array[j\
    \ + 1]}\n            array[j + 1]=$temp\n          fi\n        done\n      done\n\
    \    else\n      for ((i = 0; i < length - 1; i++)); do\n        for ((j = 0;\
    \ j < length - i - 1; j++)); do\n          if [[ ${array[j]} -gt ${array[j + 1]}\
    \ ]]; then\n            temp=${array[j]}\n            array[j]=${array[j + 1]}\n\
    \            array[j + 1]=$temp\n          fi\n        done\n      done\n    fi\n\
    \    echo \"[\\\"${array[@]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i n=${#array[@]}\n    local -i m=0\n    local -i temp=0\n    local -i\
    \ flag=0\n    if [[ $n -eq 0 ]]; then\n        echo \"[]\"\n        return\n \
    \   fi\n    if [[ $n -eq 1 ]]; then\n        echo \"[\\\"${array[0]}\\\"]\"\n\
    \        return\n    fi\n    sum=$((array[0] + array[n-1]))\n    if [[ $((sum\
    \ % 2)) -eq 0 ]]; then\n        for ((i=0; i<n; i++)); do\n            result[i]=${array[i]}\n\
    \        done\n        for ((i=0; i<n; i++)); do\n            for ((j=i+1; j<n;\
    \ j++)); do\n                if [[ ${result[i]} -gt ${result[j]} ]]; then\n  \
    \                  temp=${result[i]}\n                    result[i]=${result[j]}\n\
    \                    result[j]=$temp\n                fi\n            done\n \
    \       done\n    else\n        for ((i=0; i<n; i++)); do\n            result[i]=${array[i]}\n\
    \        done\n        for ((i=0; i<n; i++)); do\n            for ((j=i+1; j<n;\
    \ j++)); do\n                if [[ ${result[i]} -lt ${result[j]} ]]; then\n  \
    \                  temp=${result[i]}\n                    result[i]=${result[j]}\n\
    \                    result[j]=$temp\n                fi\n            done\n \
    \       done\n    fi\n    echo -n \"[\"\n    for ((i=0; i<n; i++)); do\n     \
    \   if [[ $i -eq 0 ]]; then\n            echo -n \"\\\"${result[i]}\\\"\"\n  \
    \      else\n            echo -n \", \\\"${result[i]}\\\"\"\n        fi\n    done\n\
    \    echo \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local sum=$((array[0] +\
    \ array[-1]))\n  if ((sum % 2 == 0)); then\n    echo \"${array[@]}\" | tr ' '\
    \ '\\n' | sort -r | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array\n  local -i i=0\n  local -i sum\n\
    \  local -i len\n  local -i odd\n  local -i even\n  local -i mid\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i\
    \ mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n \
    \ local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i\
    \ vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n \
    \ local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local\
    \ -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n\
    \  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n}\n\ncandidate() {\n  \
    \  sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local length=${#array[@]}\n\
    \  local sum=$(( ${array[0]} + ${array[$((length-1))]} ))\n  if [[ $((sum % 2))\
    \ -eq 0 ]]; then\n    echo \"$(printf '\"%s\" ' \"${array[@]}\" | sort -r)\"\n\
    \  else\n    echo \"$(printf '\"%s\" ' \"${array[@]}\" | sort)\"\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxuh8li1.sh: line 19: +  : syntax error: operand expected (error
    token is "+  ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i length=${#array[@]}\n\
    \  local -i temp=0\n  if [[ $length -eq 0 ]]; then\n    echo \"[]\"\n  elif [[\
    \ $length -eq 1 ]]; then\n    echo \"[\\\"${array[0]}\\\"]\"\n  else\n    sum=$((\
    \ ${array[0]} + ${array[-1]} ))\n    if [[ $(( sum % 2 )) -eq 0 ]]; then\n   \
    \   for (( i = 0; i < $length; i++ )); do\n        for (( j = 0; j < $length;\
    \ j++ )); do\n          if [[ ${array[$i]} -gt ${array[$j]} ]]; then\n       \
    \     temp=${array[$i]}\n            array[$i]=${array[$j]}\n            array[$j]=$temp\n\
    \          fi\n        done\n      done\n    else\n      for (( i = 0; i < $length;\
    \ i++ )); do\n        for (( j = 0; j < $length; j++ )); do\n          if [[ ${array[$i]}\
    \ -lt ${array[$j]} ]]; then\n            temp=${array[$i]}\n            array[$i]=${array[$j]}\n\
    \            array[$j]=$temp\n          fi\n        done\n      done\n    fi\n\
    \    for (( i = 0; i < $length; i++ )); do\n      sorted_array[$i]=\"\\\"${array[$i]}\\\
    \"\"\n    done\n    echo \"[${sorted_array[@]}]\"\n  fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#array[@]}\n  local\
    \ -i tmp=0\n  local -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local\
    \ -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local\
    \ -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local\
    \ -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n\
    \  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n\
    \  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n\
    \  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n\
    \  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n\
    \  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n\
    \  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n\
    \  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n\
    \  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n\
    \  local -i flag47=0\n  local -i flag48=0\n  local -i flag49=\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#array[@]}\n  local -i\
    \ temp=0\n  local -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local -i\
    \ flag3=0\n  local -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local\
    \ -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local\
    \ -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n\
    \  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n\
    \  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n\
    \  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n\
    \  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n\
    \  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n\
    \  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n\
    \  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n\
    \  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n\
    \  local -i flag47=0\n  local -i flag48=0\n  local -i flag49=\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local\
    \ -i temp=0\n    for ((i=0; i<len; i++)); do\n        sum=$((sum + ${array[i]}))\n\
    \    done\n    if ((sum % 2 == 0)); then\n        for ((i=0; i<len; i++)); do\n\
    \            for ((j=i+1; j<len; j++)); do\n                if ((${array[i]} <\
    \ ${array[j]})); then\n                    temp=${array[i]}\n                \
    \    array[i]=${array[j]}\n                    array[j]=$temp\n              \
    \  fi\n            done\n        done\n    else\n        for ((i=0; i<len; i++));\
    \ do\n            for ((j=i+1; j<len; j++)); do\n                if ((${array[i]}\
    \ > ${array[j]})); then\n                    temp=${array[i]}\n              \
    \      array[i]=${array[j]}\n                    array[j]=$temp\n            \
    \    fi\n            done\n        done\n    fi\n    echo \"${array[@]}\"\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0mr1b0p.sh: line 24: sum + : syntax error: operand expected
    (error token is "+ ")\n/tmp/tmpf0mr1b0p.sh: line 24: sum + 2 4 3 0 1 5: syntax
    error in expression (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array\n    local -i sum\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    array=($@)\n\
    \    sum=$((${array[0]} + ${array[-1]}))\n    n=${#array[@]}\n    if ((sum % 2\
    \ == 0)); then\n        for ((i = 0; i < n - 1; i++)); do\n            for ((j\
    \ = 0; j < n - i - 1; j++)); do\n                if ((${array[j]} < ${array[j\
    \ + 1]})); then\n                    temp=${array[j]}\n                    array[j]=${array[j\
    \ + 1]}\n                    array[j + 1]=$temp\n                fi\n        \
    \    done\n        done\n    else\n        for ((i = 0; i < n - 1; i++)); do\n\
    \            for ((j = 0; j < n - i - 1; j++)); do\n                if ((${array[j]}\
    \ > ${array[j + 1]})); then\n                    temp=${array[j]}\n          \
    \          array[j]=${array[j + 1]}\n                    array[j + 1]=$temp\n\
    \                fi\n            done\n        done\n    fi\n    echo -n \"[\"\
    \n    for ((k = 0; k < n; k++)); do\n        echo -n '\"'${array[k]}'\"'\n   \
    \     if ((k < n - 1)); then\n            echo -n \", \"\n        fi\n    done\n\
    \    echo \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpndn5b5xb.sh: line 25: array: bad array subscript\n/tmp/tmpndn5b5xb.sh:
    line 25: + : syntax error: operand expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#array[@]}\n\
    \    local -i sum=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -i flag48=0\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n  else\n\
    \    local -a array=($1)\n    local -a sorted_array=()\n    local -i first_index=0\n\
    \    local -i last_index=$((${#array[@]} - 1))\n    local -i sum=$((${array[$first_index]}\
    \ + ${array[$last_index]}))\n    if [ $((sum % 2)) -eq 0 ]; then\n      for ((i\
    \ = $last_index; i >= 0; i--)); do\n        sorted_array+=(\"\\\"${array[$i]}\\\
    \"\")\n      done\n    else\n      for ((i = $first_index; i <= $last_index; i++));\
    \ do\n        sorted_array+=(\"\\\"${array[$i]}\\\"\")\n      done\n    fi\n \
    \   echo \"[${sorted_array[@]}]\"\n  fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local array=(\"$@\")\n    local len=${#array[@]}\n\
    \    if [[ $len -eq 0 ]]; then\n        echo \"[]\"\n    elif [[ $len -eq 1 ]];\
    \ then\n        echo \"[\\\"${array[0]}\\\"]\"\n    else\n        local sum=$((\
    \ ${array[0]} + ${array[-1]} ))\n        if [[ $(( sum % 2 )) -eq 0 ]]; then\n\
    \            echo \"[\\\"${array[@]}\\\"]\" | sort -r | tr ' ' ',' | sed 's/,/\"\
    , \"/g'\n        else\n            echo \"[\\\"${array[@]}\\\"]\" | sort | tr\
    \ ' ' ',' | sed 's/,/\", \"/g'\n        fi\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2 == 0)); then\n    echo \"${array[@]}\" | tr '\
    \ ' '\\n' | sort -r | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' '\
    \ '\\n' | sort | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i len=${#array[@]}\n\
    \  local -i mid=0\n  local -i tmp=0\n  local -i flag=0\n  if [ $len -eq 0 ]; then\n\
    \    echo \"[]\"\n    return\n  fi\n  if [ $len -eq 1 ]; then\n    echo \"[\\\"\
    ${array[0]}\\\"]\"\n    return\n  fi\n  sum=$((array[0] + array[len-1]))\n  if\
    \ [ $((sum % 2)) -eq 0 ]; then\n    flag=1\n  fi\n  for ((i=0; i<len; i++)); do\n\
    \    result[i]=${array[i]}\n  done\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1;\
    \ j<len; j++)); do\n      if [ $flag -eq 0 ]; then\n        if [ ${result[i]}\
    \ -gt ${result[j]} ]; then\n          tmp=${result[i]}\n          result[i]=${result[j]}\n\
    \          result[j]=$tmp\n        fi\n      else\n        if [ ${result[i]} -lt\
    \ ${result[j]} ]; then\n          tmp=${result[i]}\n          result[i]=${result[j]}\n\
    \          result[j]=$tmp\n        fi\n      fi\n    done\n  done\n  echo \"[\\\
    \"${result[@]}\\\"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#array[@]}\n\
    \    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i\
    \ flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n\
    \    local -i flag48=0\n    local -i flag49=\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i nnn=\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=($@)\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        sum=$((array[0] + array[${#array[@]}-1]))\n        if ((sum % 2\
    \ == 0)); then\n            sorted_array+=(${array[$i]})\n        else\n     \
    \       sorted_array=(${array[$i]} ${sorted_array[@]})\n        fi\n    done\n\
    \n    echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted=()\n  \
    \  local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local\
    \ -i len=0\n    local -i mid=0\n    local -i start=0\n    local -i end=0\n   \
    \ local -i flag=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i\
    \ temp_index_2=0\n    local -i temp_index_3=0\n    local -i temp_index_4=0\n \
    \   local -i temp_index_5=0\n    local -i temp_index_6=0\n    local -i temp_index_7=0\n\
    \    local -i temp_index_8=0\n    local -i temp_index_9=0\n    local -i temp_index_10=0\n\
    \    local -i temp_index_11=0\n    local -i temp_index_12=0\n    local -i temp_index_13=0\n\
    \    local -i temp_index_14=0\n    local -i temp_index_15=0\n    local -i temp_index_16=0\n\
    \    local -i temp_index_17=0\n    local -i temp_index_18=0\n    local -i temp_index_19=0\n\
    \    local -i temp_index_20=0\n    local -i temp_index_21=0\n    local -i temp_index_22=0\n\
    \    local -i temp_index_23=0\n    local -i temp_index_24=0\n    local -i temp_index_25=0\n\
    \    local -i temp_index_26=0\n    local -i temp_index_27=0\n    local -i temp_index_28=0\n\
    \    local -i temp_index_29=0\n    local -i temp_index_30=0\n    local -i temp_index_31=0\n\
    \    local -i temp_index_32=0\n    local -i temp_index_33=0\n    local -i temp_index_34=0\n\
    \    local -i temp_index_35\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum=0\n    local -i length=${#array[@]}\n\
    \    local -i temp=0\n    local -i flag=0\n    if [[ $length -eq 0 ]]; then\n\
    \        echo \"[]\"\n    elif [[ $length -eq 1 ]]; then\n        echo \"[\\\"\
    ${array[0]}\\\"]\"\n    else\n        sum=$(( ${array[0]} + ${array[$((length-1))]}\
    \ ))\n        if [[ $((sum%2)) -eq 0 ]]; then\n            for ((i=0; i<length;\
    \ i++)); do\n                for ((j=i+1; j<length; j++)); do\n              \
    \      if [[ ${array[$i]} -lt ${array[$j]} ]]; then\n                        temp=${array[$i]}\n\
    \                        array[$i]=${array[$j]}\n                        array[$j]=$temp\n\
    \                    fi\n                done\n            done\n        else\n\
    \            for ((i=0; i<length; i++)); do\n                for ((j=i+1; j<length;\
    \ j++)); do\n                    if [[ ${array[$i]} -gt ${array[$j]} ]]; then\n\
    \                        temp=${array[$i]}\n                        array[$i]=${array[$j]}\n\
    \                        array[$j]=$temp\n                    fi\n           \
    \     done\n            done\n        fi\n        for ((i=0; i<length; i++));\
    \ do\n            if [[ $i -eq 0 ]]; then\n                sorted_array[$i]=\"\
    \\\"${array[$i]}\\\"\"\n            else\n                sorted_array[$i]=\"\
    , \\\"${array[$i]}\\\"\"\n            fi\n        done\n        echo \"[${sorted_array[@]}]\"\
    \n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n\
    \    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n\
    \    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n\
    \    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n\
    \    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n\
    \    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n\
    \    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n\
    \    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n\
    \    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n\
    \    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n\
    \    local -i bo=0\n    local -\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local array=(\"$@\")\n    local len=${#array[@]}\n\
    \    local sum=$(( ${array[0]} + ${array[-1]} ))\n    if (( sum % 2 == 0 )); then\n\
    \        for (( i = 0; i < len; i++ )); do\n            for (( j = i + 1; j <\
    \ len; j++ )); do\n                if (( ${array[i]} < ${array[j]} )); then\n\
    \                    local tmp=${array[i]}\n                    array[i]=${array[j]}\n\
    \                    array[j]=$tmp\n                fi\n            done\n   \
    \     done\n    else\n        for (( i = 0; i < len; i++ )); do\n            for\
    \ (( j = i + 1; j < len; j++ )); do\n                if (( ${array[i]} > ${array[j]}\
    \ )); then\n                    local tmp=${array[i]}\n                    array[i]=${array[j]}\n\
    \                    array[j]=$tmp\n                fi\n            done\n   \
    \     done\n    fi\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2i_2pdn.sh: line 19: +  : syntax error: operand expected (error
    token is "+  ")\n/tmp/tmph2i_2pdn.sh: line 19: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if (( sum % 2 == 0 )); then\n        echo \"${array[@]}\" | tr ' ' '\\n'\
    \ | sort -nr | tr '\\n' ' '\n    else\n        echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmuli1ztk.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local length=${#array[@]}\n\
    \  local first=${array[0]}\n  local last=${array[$((length - 1))]}\n  local sum=$((first\
    \ + last))\n  local result=()\n  if [[ $((sum % 2)) -eq 0 ]]; then\n    for ((i\
    \ = length - 1; i >= 0; i--)); do\n      result+=(\"${array[$i]}\")\n    done\n\
    \  else\n    for ((i = 0; i < length; i++)); do\n      result+=(\"${array[$i]}\"\
    )\n    done\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg06cbd18.sh: line 21: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n\
    \    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n\
    \    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n\
    \    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n\
    \    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n\
    \    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n\
    \    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n\
    \    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n\
    \    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n\
    \    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n\
    \    local -i bo=0\n    local -i b\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i\
    \ length=${#array[@]}\n  local -i temp=0\n  local -i temp_index=0\n  local -i\
    \ temp_index_2=0\n  local -i temp_index_3=0\n  local -i temp_index_4=0\n  local\
    \ -i temp_index_5=0\n  local -i temp_index_6=0\n  local -i temp_index_7=0\n  local\
    \ -i temp_index_8=0\n  local -i temp_index_9=0\n  local -i temp_index_10=0\n \
    \ local -i temp_index_11=0\n  local -i temp_index_12=0\n  local -i temp_index_13=0\n\
    \  local -i temp_index_14=0\n  local -i temp_index_15=0\n  local -i temp_index_16=0\n\
    \  local -i temp_index_17=0\n  local -i temp_index_18=0\n  local -i temp_index_19=0\n\
    \  local -i temp_index_20=0\n  local -i temp_index_21=0\n  local -i temp_index_22=0\n\
    \  local -i temp_index_23=0\n  local -i temp_index_24=0\n  local -i temp_index_25=0\n\
    \  local -i temp_index_26=0\n  local -i temp_index_27=0\n  local -i temp_index_28=0\n\
    \  local -i temp_index_29=0\n  local -i temp_index_30=0\n  local -i temp_index_31=0\n\
    \  local -i temp_index_32=0\n  local -i temp_index_33=0\n  local -i temp_index_34=0\n\
    \  local -i temp_index_35=0\n  local -i temp_index_36=0\n  local -i temp_index\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2 == 0)); then\n    printf '%s\\n' \"${array[@]}\"\
    \ | sort -nr\n  else\n    printf '%s\\n' \"${array[@]}\" | sort -n\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmptur3ewg_.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i length=${#array[@]}\n\
    \  local -i mid=0\n  local -i temp=0\n  if [[ $length -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  if [[ $length -eq 1 ]]; then\n    echo \"[\\\"${array[0]}\\\
    \"]\"\n    return\n  fi\n  sum=$(( ${array[0]} + ${array[$((length-1))]} ))\n\
    \  if [[ $((sum%2)) -eq 0 ]]; then\n    for ((i=0; i<length; i++)); do\n     \
    \ result[$i]=${array[$i]}\n    done\n    for ((i=0; i<length; i++)); do\n    \
    \  for ((j=i+1; j<length; j++)); do\n        if [[ ${result[$i]} -lt ${result[$j]}\
    \ ]]; then\n          temp=${result[$i]}\n          result[$i]=${result[$j]}\n\
    \          result[$j]=$temp\n        fi\n      done\n    done\n  else\n    for\
    \ ((i=0; i<length; i++)); do\n      result[$i]=${array[$i]}\n    done\n    for\
    \ ((i=0; i<length; i++)); do\n      for ((j=i+1; j<length; j++)); do\n       \
    \ if [[ ${result[$i]} -gt ${result[$j]} ]]; then\n          temp=${result[$i]}\n\
    \          result[$i]=${result[$j]}\n          result[$j]=$temp\n        fi\n\
    \      done\n    done\n  fi\n  echo \"[\\\"${result[@]}\\\"]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=${array[0]}+${array[-1]}\n\
    \  if (( sum % 2 == 0 )); then\n    printf '%s\\n' \"${array[@]}\" | sort -nr\n\
    \  else\n    printf '%s\\n' \"${array[@]}\" | sort -n\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxudmvo2n.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpxudmvo2n.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i first=${array[0]}\n\
    \    local -i last=${array[-1]}\n    if (( (first + last) % 2 == 0 )); then\n\
    \        echo \"${array[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n    else\n\
    \        echo \"${array[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n    fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a odd=()\n    local\
    \ -a even=()\n    local -a result=()\n    local -i i=0\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i\
    \ jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i\
    \ nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i\
    \ rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i\
    \ vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i\
    \ zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local\
    \ -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local\
    \ -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local\
    \ -i lll=0\n    local -\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=($1)\n    local -a result=()\n\
    \    local -i sum=$((array[0] + array[${#array[@]} - 1]))\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \   \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n   \
    \ [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpcfbt_2qz.sh: line 19: array: bad array subscript\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if ((sum%2==0)); then\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tr '\\n' ' '\n    else\n        echo \"${array[@]}\" | tr ' ' '\\n' |\
    \ sort -n | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf8kxkudv.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local array=(\"$@\")\n    local first=${array[0]}\n\
    \    local last=${array[-1]}\n    local sum=$((first + last))\n    local result=()\n\
    \    if ((sum % 2 == 0)); then\n        for ((i = ${#array[@]} - 1; i >= 0; i--));\
    \ do\n            result+=(\"${array[i]}\")\n        done\n    else\n        for\
    \ ((i = 0; i < ${#array[@]}; i++)); do\n            result+=(\"${array[i]}\")\n\
    \        done\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocrdj79.sh: line 20: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=$((array[0]\
    \ + array[-1]))\n    if ((sum % 2 == 0)); then\n        echo \"${array[@]}\" |\
    \ sort -nr\n    else\n        echo \"${array[@]}\" | sort -n\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmrhot7eg.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n array=$1\n    local -a new_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpt3gaej85.sh: line 17: local: `'': not a valid identifier\n/tmp/tmpt3gaej85.sh:
    line 17: local: `5'': invalid variable name for name reference\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2)); then\n    printf '%s\\n' \"${array[@]}\" |\
    \ sort -n\n  else\n    printf '%s\\n' \"${array[@]}\" | sort -nr\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv30ek9p3.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -r input=\"$1\"\n  local -a array=()\n  local\
    \ -a result=()\n  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n \n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local\
    \ -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n\
    \  local -i mid=0\n  local -i tmp=0\n  if [[ $len -eq 0 ]]; then\n    echo \"\
    []\"\n    return\n  fi\n  if [[ $len -eq 1 ]]; then\n    echo \"[\\\"${arr[0]}\\\
    \"]\"\n    return\n  fi\n  sum=$((arr[0] + arr[len-1]))\n  if [[ $((sum % 2))\
    \ -eq 0 ]]; then\n    for ((i=0; i<len; i++)); do\n      result[i]=${arr[i]}\n\
    \    done\n    for ((i=0; i<len; i++)); do\n      for ((j=i+1; j<len; j++)); do\n\
    \        if [[ ${result[i]} -lt ${result[j]} ]]; then\n          tmp=${result[i]}\n\
    \          result[i]=${result[j]}\n          result[j]=$tmp\n        fi\n    \
    \  done\n    done\n  else\n    mid=$((len / 2))\n    for ((i=0; i<mid; i++));\
    \ do\n      result[i]=${arr[i]}\n    done\n    for ((i=mid; i<len; i++)); do\n\
    \      result[i]=${arr[len-i-1]}\n    done\n  fi\n  echo -n \"[\"\n  for ((k=0;\
    \ k<len; k++)); do\n    echo -n \"\\\"${result[k]}\\\"\"\n    if [[ $k -ne $((len-1))\
    \ ]]; then\n      echo -n \", \"\n    fi\n  done\n  echo \"]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local -i cc\n\
    \  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n \
    \ local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n  local\
    \ -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i\
    \ ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n\
    \  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n\
    \  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local -i hhh\n\
    \  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n\
    \  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local -i rrr\n\
    \  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n\
    \  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -i aaaa\n  local -i bbbb\n\
    \  local -i cccc\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i mid=$((len /\
    \ 2))\n  local -i is_odd=$((len % 2))\n  local -i is_even=$((1 - is_odd))\n  local\
    \ -i is_ascending=0\n  local -i is_descending=0\n  local -i is_swapped=0\n  local\
    \ -i is_sorted=0\n  local -i is_not_sorted=0\n  local -i is_not_swapped=0\n  local\
    \ -i is_not_ascending=0\n  local -i is_not_descending=0\n  local -i is_not_swapped=0\n\
    \  local -i is_not_sorted=0\n  local -i is_not_swapped=0\n  local -i is_not_ascending=0\n\
    \  local -i is_not_descending=0\n  local -i is_not_swapped=0\n  local -i is_not_sorted=0\n\
    \  local -i is_not_swapped=0\n  local -i is_not_ascending=0\n  local -i is_not_descending=0\n\
    \  local -i is_not_swapped=0\n  local -i is_not_sorted=0\n  local -i is_not_swapped=0\n\
    \  local -i is_not_ascending=0\n  local -i is_not_descending=0\n  local -i is_not_swapped=0\n\
    \  local -i is_not_sorted=0\n  local -i is_not_swapped=0\n  local -i is_not_ascending=0\n\
    \  local -i is_not_descending=0\n  local -i is_not_swapped=0\n  local -i is_not_sorted=0\n\
    \  local -i is_not_swapped=0\n  local -i is_not_ascending=0\n  local -i is_not_descending=0\n\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -i i=0\n    local\
    \ -i sum=0\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n \
    \   local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n \
    \   local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n \
    \   local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n \
    \   local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n \
    \   local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n \
    \   local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n\
    \    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n\
    \    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n\
    \    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n\
    \    local\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$(( ${array[0]}\
    \ + ${array[-1]} ))\n  if (( sum % 2 == 0 )); then\n    echo \"${array[@]}\" |\
    \ tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmps2_qeujr.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#array[@]}\n\
    \    local -i temp=0\n    local -i flag=0\n    local -i flag2=0\n    local -i\
    \ flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n\
    \    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i\
    \ flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n\
    \    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local\
    \ -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n\
    \    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local\
    \ -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n\
    \    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local\
    \ -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n\
    \    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local\
    \ -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n\
    \    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local\
    \ -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n\
    \    local -i flag49=0\n    local -i flag50=\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2 == 0)); then\n    echo \"${array[@]}\" | tr '\
    \ ' '\\n' | sort -rn | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' '\
    \ '\\n' | sort -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#array[@]}\n\
    \    local -i sum=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -i flag48=0\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$((array[0]\
    \ + array[-1]))\n  if ((sum % 2 == 0)); then\n    printf '%s\\n' \"${array[@]}\"\
    \ | sort -nr\n  else\n    printf '%s\\n' \"${array[@]}\" | sort -n\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmptur3ewg_.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i tmp=0\n  local\
    \ -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local -i flag3=0\n  local\
    \ -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local\
    \ -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n \
    \ local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n\
    \  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n\
    \  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n\
    \  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n\
    \  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n\
    \  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n\
    \  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n\
    \  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n\
    \  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n  local -i flag47=0\n\
    \  local -i flag48=0\n  local -i flag49=0\n  local -i flag50\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n\
    \    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n\
    \    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n\
    \    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n\
    \    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n\
    \    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n\
    \    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n\
    \    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n\
    \    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n\
    \    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n\
    \    local -i bo=0\n    local -i bp=\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i sum\n    local -i\
    \ len=${#array[@]}\n    local -i min\n    local -i max\n    local -i temp\n  \
    \  if (( len == 0 )); then\n        echo \"[]\"\n        return\n    fi\n    if\
    \ (( len == 1 )); then\n        echo \"[\\\"${array[0]}\\\"]\"\n        return\n\
    \    fi\n    sum=$(( ${array[0]} + ${array[-1]} ))\n    if (( sum % 2 == 0 ));\
    \ then\n        for (( i = 0; i < len; i++ )); do\n            min=i\n       \
    \     for (( j = i + 1; j < len; j++ )); do\n                if (( ${array[j]}\
    \ > ${array[min]} )); then\n                    min=j\n                fi\n  \
    \          done\n            temp=${array[i]}\n            array[i]=${array[min]}\n\
    \            array[min]=$temp\n        done\n    else\n        for (( i = 0; i\
    \ < len; i++ )); do\n            max=i\n            for (( j = i + 1; j < len;\
    \ j++ )); do\n                if (( ${array[j]} < ${array[max]} )); then\n   \
    \                 max=j\n                fi\n            done\n            temp=${array[i]}\n\
    \            array[i]=${array[max]}\n            array[max]=$temp\n        done\n\
    \    fi\n    sorted_array[0]=\"\\\"${array[0]}\\\"\"\n    for (( k = 1; k < len;\
    \ k++ )); do\n        sorted_array[k]=\"\\\"${array[k]}\\\"\"\n    done\n    echo\
    \ \"[${sorted_array[@]}]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local sum=$((array[0] + array[-1]))\n    if ((sum % 2 == 0)); then\n    \
    \    sorted_array=($(printf \"%s\\n\" \"${array[@]}\" | sort -nr))\n    else\n\
    \        sorted_array=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n    fi\n\
    \    printf '[\"%s\"]' \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a new_array=()\n\
    \  local -i sum=0\n  for i in \"${array[@]}\"; do\n    sum=$((sum + i))\n  done\n\
    \  if ((sum % 2 == 0)); then\n    for ((i = ${#array[@]} - 1; i >= 0; i--)); do\n\
    \      new_array+=(\"${array[i]}\")\n    done\n  else\n    for ((i = 0; i < ${#array[@]};\
    \ i++)); do\n      new_array+=(\"${array[i]}\")\n    done\n  fi\n  echo \"${new_array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpymg59vv3.sh: line 21: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i nnn=\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i tmp=0\n  local\
    \ -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local -i flag3=0\n  local\
    \ -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local\
    \ -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n \
    \ local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n\
    \  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n\
    \  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n\
    \  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n\
    \  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n\
    \  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n\
    \  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n\
    \  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n\
    \  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n  local -i flag47=0\n\
    \  local -i flag48=0\n  local -i flag49=0\n  local -i flag50\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i temp=0\n  for\
    \ ((i=0; i<len; i++)); do\n    sum=$((sum + array[i]))\n  done\n  if ((sum % 2\
    \ == 0)); then\n    for ((i=0; i<len; i++)); do\n      for ((j=i+1; j<len; j++));\
    \ do\n        if ((array[i] < array[j])); then\n          temp=${array[i]}\n \
    \         array[i]=${array[j]}\n          array[j]=$temp\n        fi\n      done\n\
    \    done\n  else\n    for ((i=0; i<len; i++)); do\n      for ((j=i+1; j<len;\
    \ j++)); do\n        if ((array[i] > array[j])); then\n          temp=${array[i]}\n\
    \          array[i]=${array[j]}\n          array[j]=$temp\n        fi\n      done\n\
    \    done\n  fi\n  echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp66m_ftoh.sh: line 24: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local\
    \ -i mid=0\n    local -i tmp=0\n    local -i flag=0\n    local -i flag2=0\n  \
    \  local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i flag48=0\n    local -i flag49=0\n    local -i flag50=\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i length=${#array[@]}\n    local -i temp=0\n    local -i temp2=0\n \
    \   local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i\
    \ temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n\
    \    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local\
    \ -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n\
    \    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local\
    \ -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n\
    \    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local\
    \ -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n\
    \    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local\
    \ -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n\
    \    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local\
    \ -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n\
    \    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local\
    \ -i temp48=0\n    local -i temp49=0\n    local -i temp50=\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result\n  local\
    \ -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n \
    \ local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i\
    \ af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n \
    \ local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i\
    \ ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n \
    \ local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i\
    \ ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n \
    \ local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i\
    \ bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n \
    \ local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -a sorted\n \
    \   local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n\
    \    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n\
    \    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n\
    \    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n\
    \    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n\
    \    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n\
    \    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n\
    \    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n\
    \    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n\
    \    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n\
    \    local -i bo=0\n    local -i bp=\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i index=0\n  local -i length=${#array[@]}\n  local -i mid=$((length / 2))\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i temp=0\n  local -i\
    \ flag=0\n  local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local\
    \ -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local\
    \ -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n\
    \  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n\
    \  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n\
    \  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n\
    \  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n\
    \  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n\
    \  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n\
    \  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n\
    \  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n\
    \  local -i flag45=0\n  local -i flag46=0\n  local -i flag47=0\n  local -i flag\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=($1)\n    local -i sum=${arr[0]}+${arr[-1]}\n\
    \    if ((sum%2==0)); then\n        echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr\
    \ | tr '\\n' ' '\n    else\n        echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsljpzr89.sh: line 18: arr: bad array subscript\n/tmp/tmpsljpzr89.sh:
    line 18: local: +: syntax error: operand expected (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local sum=$((${array[0]}\
    \ + ${array[-1]}))\n  if [[ $((sum % 2)) -eq 0 ]]; then\n    echo \"$(echo \"\
    ${array[@]}\" | tr ' ' '\\n' | sort -nr)\"\n  else\n    echo \"$(echo \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort -n)\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sa4jgt2.sh: line 18: + : syntax error: operand expected (error
    token is "+ ")\n/tmp/tmp7sa4jgt2.sh: line 18: 2 4 3 0 1 5 + 2 4 3 0 1 5: syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n  \
    \  local -i len=0\n    local -i index=0\n    local -i temp=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  for i in \"${array[@]}\"; do\n    ((sum+=i))\n  done\n  if ((sum%2==0));\
    \ then\n    for j in \"${array[@]}\"; do\n      result[k++]=$j\n    done\n   \
    \ for ((l=0; l<k; l++)); do\n      for ((m=l+1; m<k; m++)); do\n        if ((result[l]<result[m]));\
    \ then\n          n=result[l]\n          result[l]=result[m]\n          result[m]=$n\n\
    \        fi\n      done\n    done\n  else\n    for o in \"${array[@]}\"; do\n\
    \      result[p++]=$o\n    done\n    for ((q=0; q<p; q++)); do\n      for ((r=q+1;\
    \ r<p; r++)); do\n        if ((result[q]>result[r])); then\n          s=result[q]\n\
    \          result[q]=result[r]\n          result[r]=$s\n        fi\n      done\n\
    \    done\n  fi\n  for t in \"${result[@]}\"; do\n    result[u++]=\"\\\"$t\\\"\
    \"\n  done\n  for v in \"${result[@]}\"; do\n    result[w++]=\"$v\"\n  done\n\
    \  for x in \"${result[@]}\"; do\n    result[y++]=\"$x\"\n  done\n  for z in \"\
    ${result[@]}\"; do\n    result[z++]=\"$z\"\n  done\n  echo \"${result[@]}\"\n\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfp7r55e2.sh: line 78: "": syntax error: operand expected (error
    token is """")\n/tmp/tmpfp7r55e2.sh: line 78: "5": syntax error: operand expected
    (error token is ""5"")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n arr=$1\n    local sum=$((${arr[0]} +\
    \ ${arr[-1]}))\n    if [[ $((sum % 2)) -eq 0 ]]; then\n        echo \"${arr[@]}\"\
    \ | tr \" \" \"\\n\" | sort -r | tr \"\\n\" \" \"\n    else\n        echo \"${arr[@]}\"\
    \ | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n    fi\n}\n\ncandidate() {\n \
    \   sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9feb4ke.sh: line 17: local: `\'': not a valid identifier\n/tmp/tmpq9feb4ke.sh:
    line 18: arr: bad array subscript\n/tmp/tmpq9feb4ke.sh: line 18: + : syntax error:
    operand expected (error token is "+ ")\n/tmp/tmpq9feb4ke.sh: line 17: local: `5\'':
    invalid variable name for name reference\n/tmp/tmpq9feb4ke.sh: line 18: arr: bad
    array subscript\n/tmp/tmpq9feb4ke.sh: line 18: + : syntax error: operand expected
    (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i temp=0\n    local -i len=${#array[@]}\n\
    \    local -i mid=0\n    local -i mid_left=0\n    local -i mid_right=0\n    local\
    \ -i mid_left_value=0\n    local -i mid_right_value=0\n    local -i mid_value=0\n\
    \    local -i left_value=0\n    local -i right_value=0\n    local -i left_index=0\n\
    \    local -i right_index=0\n    local -i left_index_value=0\n    local -i right_index_value=0\n\
    \    local -i index_value=0\n    local -i index=0\n    local -i index_value_temp=0\n\
    \    local -i index_temp=0\n    local -i index_value_temp_temp=0\n    local -i\
    \ index_temp_temp=0\n    local -i index_value_temp_temp_temp=0\n    local -i index_temp_temp_temp=0\n\
    \    local -i index_value_temp_temp_temp_temp=0\n    local -i index_temp_temp_temp_temp=0\n\
    \    local -i index_value_temp_temp_temp_temp_temp=0\n    local -i index_temp_temp_temp_temp_temp=0\n\
    \    local -i index_value_temp_temp_temp_temp_temp_temp=0\n    local -i index_temp_temp_temp_temp_temp_temp=0\n\
    \    local -i index_value_temp_temp_temp_temp_temp_temp_temp=0\n    local -i index_temp_temp_temp_temp_temp_temp_temp=0\n\
    \    local -i index_value_temp_temp_temp_temp_temp_temp_temp_temp=0\n    local\
    \ -i index_temp_temp_temp_temp_temp_temp_temp_temp=0\n    local -i index_value_temp_temp_temp_temp_temp_temp_temp_temp\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local _sum=$((${_array[0]}\
    \ + ${_array[-1]}))\n    local _sorted_array=()\n    if ((_sum % 2 == 0)); then\n\
    \        _sorted_array=($(printf \"%s\\n\" \"${_array[@]}\" | sort -nr))\n   \
    \ else\n        _sorted_array=($(printf \"%s\\n\" \"${_array[@]}\" | sort -n))\n\
    \    fi\n    printf \"%s\\n\" \"${_sorted_array[@]}\"\n}\n\ncandidate() {\n  \
    \  sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_6254m7v.sh: line 17: local: `\'': not a valid identifier\n/tmp/tmp_6254m7v.sh:
    line 18: _array: bad array subscript\n/tmp/tmp_6254m7v.sh: line 18: + : syntax
    error: operand expected (error token is "+ ")\n/tmp/tmp_6254m7v.sh: line 17: local:
    `5\'': invalid variable name for name reference\n/tmp/tmp_6254m7v.sh: line 18:
    _array: bad array subscript\n/tmp/tmp_6254m7v.sh: line 18: + : syntax error: operand
    expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  if (( ${#array[@]} == 0 )); then\n    echo \"[]\"\n  elif (( ${#array[@]} ==\
    \ 1 )); then\n    echo \"[\\\"${array[0]}\\\"]\"\n  else\n    local first=${array[0]}\n\
    \    local last=${array[-1]}\n    local sum=$(( first + last ))\n    if (( sum\
    \ % 2 == 0 )); then\n      for (( i = ${#array[@]} - 1; i >= 0; i-- )); do\n \
    \       result+=(${array[i]})\n      done\n    else\n      for (( i = 0; i < ${#array[@]};\
    \ i++ )); do\n        result+=(${array[i]})\n      done\n    fi\n    echo \"[\\\
    \"${result[@]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i len=${#array[@]}\n\
    \  local -i mid=0\n  local -i temp=0\n  local -i flag=0\n  if [ $len -eq 0 ];\
    \ then\n    echo \"[]\"\n    return\n  fi\n  if [ $len -eq 1 ]; then\n    echo\
    \ \"[\\\"${array[0]}\\\"]\"\n    return\n  fi\n  sum=$((${array[0]} + ${array[$((len\
    \ - 1))]}))\n  if [ $((sum % 2)) -eq 0 ]; then\n    flag=1\n  fi\n  for ((i =\
    \ 0; i < len; i++)); do\n    for ((j = i + 1; j < len; j++)); do\n      if [ $flag\
    \ -eq 0 ]; then\n        if [ ${array[$i]} -gt ${array[$j]} ]; then\n        \
    \  temp=${array[$i]}\n          array[$i]=${array[$j]}\n          array[$j]=$temp\n\
    \        fi\n      else\n        if [ ${array[$i]} -lt ${array[$j]} ]; then\n\
    \          temp=${array[$i]}\n          array[$i]=${array[$j]}\n          array[$j]=$temp\n\
    \        fi\n      fi\n    done\n  done\n  result=(\"${array[@]}\")\n  echo \"\
    [\\\"${result[@]}\\\"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n array=$1\n    local -a odd_array=()\n\
    \    local -a even_array=()\n    for ((i=0; i<${#array[@]}; i++)); do\n      \
    \  if [[ $((i%2)) -eq 0 ]]; then\n            odd_array+=(\"${array[i]}\")\n \
    \       else\n            even_array+=(\"${array[i]}\")\n        fi\n    done\n\
    \    if [[ $(((${#array[@]}-1)%2)) -eq 0 ]]; then\n        echo \"$(sort_array_descending\
    \ \"${odd_array[@]}\") $(sort_array_ascending \"${even_array[@]}\")\"\n    else\n\
    \        echo \"$(sort_array_ascending \"${odd_array[@]}\") $(sort_array_descending\
    \ \"${even_array[@]}\")\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpelz_k2pa.sh: line 17: local: `'': not a valid identifier\n/tmp/tmpelz_k2pa.sh:
    line 30: sort_array_ascending: command not found\n/tmp/tmpelz_k2pa.sh: line 30:
    sort_array_descending: command not found\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -a new_arr=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i\
    \ sum=0\n    local -i temp=0\n    local -i flag=0\n    local -i k=0\n    for ((i=0;\
    \ i<len; i++)); do\n        new_arr[i]=${arr[i]}\n    done\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [ $((new_arr[i]))\
    \ -gt $((new_arr[j])) ]; then\n                temp=${new_arr[i]}\n          \
    \      new_arr[i]=${new_arr[j]}\n                new_arr[j]=$temp\n          \
    \  fi\n        done\n    done\n    sum=$((new_arr[0]+new_arr[len-1]))\n    if\
    \ [ $((sum%2)) -eq 0 ]; then\n        for ((i=0; i<len/2; i++)); do\n        \
    \    temp=${new_arr[i]}\n            new_arr[i]=${new_arr[len-1-i]}\n        \
    \    new_arr[len-1-i]=$temp\n        done\n    fi\n    for ((i=0; i<len; i++));\
    \ do\n        if [ $i -eq 0 ]; then\n            echo -n \"[\"\n        fi\n \
    \       echo -n \"\\\"${new_arr[i]}\\\"\"\n        if [ $i -eq $((len-1)) ]; then\n\
    \            echo -n \"]\"\n        else\n            echo -n \", \"\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    for i in \"${array[@]}\"; do\n        sum=$((sum + i))\n    done\n    if\
    \ ((sum % 2 == 0)); then\n        echo \"$(printf '%s\\n' \"${array[@]}\" | sort\
    \ -nr)\"\n    else\n        echo \"$(printf '%s\\n' \"${array[@]}\" | sort -n)\"\
    \n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmwframdu.sh: line 20: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=($1)\n    local -a res=()\n    local\
    \ -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i mid=0\n    local -i left=0\n    local -i right=0\n    local -i tmp=0\n\
    \    if [ $len -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n  \
    \  if [ $len -eq 1 ]; then\n        echo \"[\\\"${arr[0]}\\\"]\"\n        return\n\
    \    fi\n    sum=$((arr[0] + arr[len-1]))\n    if [ $((sum % 2)) -eq 0 ]; then\n\
    \        for ((i=0; i<len; i++)); do\n            res[i]=${arr[i]}\n        done\n\
    \        for ((i=0; i<len; i++)); do\n            for ((j=i+1; j<len; j++)); do\n\
    \                if [ ${res[i]} -lt ${res[j]} ]; then\n                    tmp=${res[i]}\n\
    \                    res[i]=${res[j]}\n                    res[j]=$tmp\n     \
    \           fi\n            done\n        done\n    else\n        mid=$((len /\
    \ 2))\n        left=0\n        right=$((len - 1))\n        for ((i=0; i<len; i++));\
    \ do\n            if [ $((i % 2)) -eq 0 ]; then\n                res[i]=${arr[left]}\n\
    \                left=$((left + 1))\n            else\n                res[i]=${arr[right]}\n\
    \                right=$((right - 1))\n            fi\n        done\n    fi\n\
    \    echo \"[\\\"${res[@]}\\\"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i sum\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ n\n    local -i m\n    local -i temp\n    local -i flag\n    local -i len\n\
    \    len=${#array[@]}\n    if [ $len -eq 0 ]; then\n        echo \"[]\"\n    elif\
    \ [ $len -eq 1 ]; then\n        echo \"[\\\"${array[0]}\\\"]\"\n    else\n   \
    \     sum=$((array[0] + array[-1]))\n        if [ $((sum % 2)) -eq 0 ]; then\n\
    \            for ((i = 0; i < len; i++)); do\n                sorted_array[i]=${array[i]}\n\
    \            done\n            for ((i = 0; i < len - 1; i++)); do\n         \
    \       flag=0\n                for ((j = 0; j < len - 1 - i; j++)); do\n    \
    \                if [ ${sorted_array[j]} -gt ${sorted_array[j + 1]} ]; then\n\
    \                        temp=${sorted_array[j]}\n                        sorted_array[j]=${sorted_array[j\
    \ + 1]}\n                        sorted_array[j + 1]=$temp\n                 \
    \       flag=1\n                    fi\n                done\n               \
    \ if [ $flag -eq 0 ]; then\n                    break\n                fi\n  \
    \          done\n            echo \"[\\\"${sorted_array[0]}\\\"\"\n          \
    \  for ((k = 1; k < len; k++)); do\n                echo \", \\\"${sorted_array[k]}\\\
    \"\"\n            done\n            echo \"]\"\n        else\n            for\
    \ ((i = 0; i < len; i++)); do\n                sorted_array[i]=${array[i]}\n \
    \           done\n            for ((i = 0; i < len - 1; i++)); do\n          \
    \      flag=0\n                for ((j = 0; j < len - 1 - i; j++)); do\n     \
    \               if [ ${sorted_array[j]} -lt ${sorted_array[j + 1]} ]; then\n \
    \                       temp=${sorted_array[j]}\n                        sorted_array[j]=${sorted\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg02xwz8h.sh: line 86: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n   \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    for i in $@; do\n     \
    \   array+=(\"$i\")\n    done\n    local -a result=()\n    local -i sum=$((array[0]\
    \ + array[-1]))\n    if ((sum % 2 == 0)); then\n        for ((i = ${#array[@]}\
    \ - 1; i >= 0; i--)); do\n            result+=(\"${array[i]}\")\n        done\n\
    \    else\n        for ((i = 0; i < ${#array[@]}; i++)); do\n            result+=(\"\
    ${array[i]}\")\n        done\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp28y15shn.sh: line 22: array: bad array subscript\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if (( sum % 2 == 0 )); then\n        echo \"${array[@]}\" | tr ' ' '\\n'\
    \ | sort -r\n    else\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\n  \
    \  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5cyq8w6.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpl5cyq8w6.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local length=${#array[@]}\n\
    \  local sum=$((array[0] + array[length - 1]))\n  if ((sum % 2 == 0)); then\n\
    \    echo \"$(echo \"${array[@]}\" | tr ' ' '\\n' | sort -nr)\"\n  else\n    echo\
    \ \"$(echo \"${array[@]}\" | tr ' ' '\\n' | sort -n)\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1yibjjm.sh: line 19: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=${array[0]}+${array[-1]}\n\
    \  local -i i=0\n  local -i j=0\n  local -i n=${#array[@]}\n  local -i temp=0\n\
    \  if [ $((sum%2)) -eq 0 ]; then\n    for ((i=0; i<n-1; i++)); do\n      for ((j=0;\
    \ j<n-i-1; j++)); do\n        if [ ${array[j]} -lt ${array[j+1]} ]; then\n   \
    \       temp=${array[j]}\n          array[j]=${array[j+1]}\n          array[j+1]=$temp\n\
    \        fi\n      done\n    done\n  else\n    for ((i=0; i<n-1; i++)); do\n \
    \     for ((j=0; j<n-i-1; j++)); do\n        if [ ${array[j]} -gt ${array[j+1]}\
    \ ]; then\n          temp=${array[j]}\n          array[j]=${array[j+1]}\n    \
    \      array[j+1]=$temp\n        fi\n      done\n    done\n  fi\n  echo \"${array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8ibh3wm.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmpv8ibh3wm.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a new_array\n\
    \  local sum\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n\
    \  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local\
    \ ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n\
    \  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local\
    \ vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n\
    \  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n\
    \  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n\
    \  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n\
    \  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n\
    \  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local\
    \ ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n\
    \  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local\
    \ qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n\
    \  local wwww\n  local xxxx\n  local yyyy\n  local zzzz\n  local aaaaa\n  local\
    \ bbbbb\n  local ccccc\n  local d\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n  \
    \  local -i length=${#array[@]}\n    local -i temp=0\n    for ((i=0; i<length;\
    \ i++)); do\n        for ((j=i+1; j<length; j++)); do\n            if ((sum%2==0));\
    \ then\n                if ((array[i]<array[j])); then\n                    temp=${array[i]}\n\
    \                    array[i]=${array[j]}\n                    array[j]=$temp\n\
    \                fi\n            else\n                if ((array[i]>array[j]));\
    \ then\n                    temp=${array[i]}\n                    array[i]=${array[j]}\n\
    \                    array[j]=$temp\n                fi\n            fi\n    \
    \    done\n    done\n    for ((k=0; k<length; k++)); do\n        sorted_array[k]=\"\
    \\\"${array[k]}\\\"\"\n    done\n    echo \"[${sorted_array[@]}]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n arr=$1\n    local -a odd_arr=()\n   \
    \ local -a even_arr=()\n    local -a result=()\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            even_arr+=($i)\n       \
    \ else\n            odd_arr+=($i)\n        fi\n    done\n    if [[ $(((${arr[0]}\
    \ + ${arr[-1]}))) -eq 0 ]]; then\n        result=(\"${odd_arr[@]}\" \"${even_arr[@]}\"\
    )\n    else\n        result=(\"${even_arr[@]}\" \"${odd_arr[@]}\")\n    fi\n \
    \   echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphkagel4x.sh: line 17: local: `\'': not a valid identifier\n/tmp/tmphkagel4x.sh:
    line 28: arr: bad array subscript\n/tmp/tmphkagel4x.sh: line 28: ( + ): syntax
    error: operand expected (error token is ")")\n/tmp/tmphkagel4x.sh: line 17: local:
    `5\'': invalid variable name for name reference\n/tmp/tmphkagel4x.sh: line 28:
    arr: bad array subscript\n/tmp/tmphkagel4x.sh: line 28: ( + ): syntax error: operand
    expected (error token is ")")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if ((sum % 2)); then\n        echo \"$(printf \"%s\\n\" \"${array[@]}\" |\
    \ sort -n)\"\n    else\n        echo \"$(printf \"%s\\n\" \"${array[@]}\" | sort\
    \ -nr)\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ywbjw3p.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n/tmp/tmp9ywbjw3p.sh: line 18: local: 2 4 3 0 1 5+2 4 3 0
    1 5: syntax error in expression (error token is "4 3 0 1 5+2 4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local\
    \ -i mid=0\n    local -i tmp=0\n    local -i flag=0\n    local -i flag1=0\n  \
    \  local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -i flag48=0\n    local -i flag49=\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -i sum_first_last\n  local -i i\n  local -i j\n  local -i k\n  local\
    \ -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n\
    \  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local\
    \ -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n\
    \  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n \
    \ local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local\
    \ -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i\
    \ rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n\
    \  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n\
    \  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n\
    \  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n\
    \  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n\
    \  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n\
    \  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -i aaaa\n\
    \  local -i bbbb\n  local -i ccc\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local input=(\"$@\")\n  local output=()\n  local\
    \ sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n\
    \  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local\
    \ kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n\
    \  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local\
    \ vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n\
    \  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n \
    \ local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local\
    \ lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n\
    \  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n \
    \ local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n \
    \ local bbbb=0\n  local cccc=0\n  local dddd=\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=$((array[0]\
    \ + array[-1]))\n    if ((sum % 2 == 0)); then\n        printf '%s\\n' \"${array[@]}\"\
    \ | sort -nr\n    else\n        printf '%s\\n' \"${array[@]}\" | sort -n\n   \
    \ fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n   \
    \ [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0_jehlos.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result\n\
    \    local i\n    local j\n    local tmp\n    local sum\n    sum=$((array[0] +\
    \ array[-1]))\n    if [[ $((sum % 2)) -eq 0 ]]; then\n        for ((i = 0; i <\
    \ ${#array[@]}; i++)); do\n            for ((j = i + 1; j < ${#array[@]}; j++));\
    \ do\n                if [[ ${array[i]} -lt ${array[j]} ]]; then\n           \
    \         tmp=${array[i]}\n                    array[i]=${array[j]}\n        \
    \            array[j]=$tmp\n                fi\n            done\n        done\n\
    \    else\n        for ((i = 0; i < ${#array[@]}; i++)); do\n            for ((j\
    \ = i + 1; j < ${#array[@]}; j++)); do\n                if [[ ${array[i]} -gt\
    \ ${array[j]} ]]; then\n                    tmp=${array[i]}\n                \
    \    array[i]=${array[j]}\n                    array[j]=$tmp\n               \
    \ fi\n            done\n        done\n    fi\n    for ((i = 0; i < ${#array[@]};\
    \ i++)); do\n        result[i]=\"\\\"${array[i]}\\\"\"\n    done\n    echo \"\
    [${result[*]}]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -a odd_array\n  local -a even_array\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n\
    \  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local\
    \ -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n\
    \  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n \
    \ local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local\
    \ -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i\
    \ qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n\
    \  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n\
    \  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n\
    \  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n\
    \  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n\
    \  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n\
    \  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n\
    \  local -i aaaa\n  local -i bbbb\n\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array\n\
    \  local -i i\n  local -i j\n  local -i sum\n  local -i length\n  local -i temp\n\
    \  length=${#array[@]}\n  sum=$((array[0] + array[length-1]))\n  if [[ $((sum\
    \ % 2)) -eq 0 ]]; then\n    for ((i=0; i<length; i++)); do\n      for ((j=i+1;\
    \ j<length; j++)); do\n        if [[ ${array[i]} -lt ${array[j]} ]]; then\n  \
    \        temp=${array[i]}\n          array[i]=${array[j]}\n          array[j]=$temp\n\
    \        fi\n      done\n    done\n  else\n    for ((i=0; i<length; i++)); do\n\
    \      for ((j=i+1; j<length; j++)); do\n        if [[ ${array[i]} -gt ${array[j]}\
    \ ]]; then\n          temp=${array[i]}\n          array[i]=${array[j]}\n     \
    \     array[j]=$temp\n        fi\n      done\n    done\n  fi\n  for ((i=0; i<length;\
    \ i++)); do\n    sorted_array[i]=\"\\\"${array[i]}\\\"\"\n  done\n  echo \"${sorted_array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -a result\n \
    \   local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n arr=$1\n    local -a arr_copy=(\"${arr[@]}\"\
    )\n    local -i sum=0\n    for i in \"${arr[@]}\"; do\n        ((sum+=i))\n  \
    \  done\n    if ((sum%2==0)); then\n        sort_descending arr_copy\n    else\n\
    \        sort_ascending arr_copy\n    fi\n    echo \"${arr_copy[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpazd1ku3w.sh: line 17: local: `'': not a valid identifier\n/tmp/tmpazd1ku3w.sh:
    line 24: sort_descending: command not found\n/tmp/tmpazd1ku3w.sh: line 17: local:
    `5'': invalid variable name for name reference\n/tmp/tmpazd1ku3w.sh: line 24:
    sort_descending: command not found\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -r arr=($1)\n    local -r len=${#arr[@]}\n\
    \    local -r sum=$((arr[0] + arr[len - 1]))\n    local -r is_odd=$((sum % 2))\n\
    \    if [[ $is_odd -eq 0 ]]; then\n        sort_descending \"${arr[@]}\"\n   \
    \ else\n        sort_ascending \"${arr[@]}\"\n    fi\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpzs4lha3d.sh: line 19: arr: bad array subscript\n/tmp/tmpzs4lha3d.sh:
    line 22: sort_descending: command not found\n/tmp/tmpzs4lha3d.sh: line 22: sort_descending:
    command not found\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -a odd_array=()\n  local -a even_array=()\n  local -a odd_sorted_array=()\n\
    \  local -a even_sorted_array=()\n  local -a result_array=()\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i\
    \ cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n \
    \ local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local\
    \ -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n arr=$1\n    local -a sorted_arr\n   \
    \ local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n \
    \   local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n \
    \   local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n \
    \   local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n \
    \   local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n \
    \   local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n \
    \   local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n\
    \    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n\
    \    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n\
    \    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n\
    \    local\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpm95mddab.sh: line 17: local: `'': not a valid identifier\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -a result\n \
    \   local -i i=0 j=0\n    local -i len=${#arr[@]}\n    local -i sum=$((arr[0]\
    \ + arr[len-1]))\n    if ((sum % 2 == 0)); then\n        for ((i=len-1; i>=0;\
    \ i--)); do\n            result[j++]=${arr[i]}\n        done\n    else\n     \
    \   for ((i=0; i<len; i++)); do\n            result[j++]=${arr[i]}\n        done\n\
    \    fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyy48sr1u.sh: line 21: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a result=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n\
    \  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i\
    \ aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n \
    \ local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i\
    \ as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n \
    \ local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i\
    \ bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n \
    \ local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i\
    \ bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n    local\
    \ -i sum=0\n    local -i tmp=0\n    local -i flag=0\n    if [[ $len -eq 0 ]];\
    \ then\n        echo \"[]\"\n        return 0\n    fi\n    if [[ $len -eq 1 ]];\
    \ then\n        echo \"[\\\"${array[0]}\\\"]\"\n        return 0\n    fi\n   \
    \ sum=$((array[0] + array[-1]))\n    if [[ $((sum % 2)) -eq 0 ]]; then\n     \
    \   flag=1\n    fi\n    for ((i = 0; i < len; i++)); do\n        for ((j = i +\
    \ 1; j < len; j++)); do\n            if [[ $flag -eq 0 ]]; then\n            \
    \    if [[ ${array[i]} -gt ${array[j]} ]]; then\n                    tmp=${array[i]}\n\
    \                    array[i]=${array[j]}\n                    array[j]=$tmp\n\
    \                fi\n            else\n                if [[ ${array[i]} -lt ${array[j]}\
    \ ]]; then\n                    tmp=${array[i]}\n                    array[i]=${array[j]}\n\
    \                    array[j]=$tmp\n                fi\n            fi\n     \
    \   done\n    done\n    for ((i = 0; i < len; i++)); do\n        result[i]=\"\\\
    \"${array[i]}\\\"\"\n    done\n    echo \"[${result[*]}]\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n  \
    \  local -i length=${#array[@]}\n    local -i temp=0\n    if [ $length -eq 0 ];\
    \ then\n        echo \"[]\"\n    elif [ $length -eq 1 ]; then\n        echo \"\
    [\\\"${array[0]}\\\"]\"\n    else\n        for ((i=0; i<$length; i++)); do\n \
    \           for ((j=i+1; j<$length; j++)); do\n                if [ $((array[i]\
    \ + array[j])) -eq 0 ]; then\n                    sum=0\n                    break\n\
    \                elif [ $((array[i] + array[j])) -gt 0 ]; then\n             \
    \       sum=1\n                    break\n                fi\n            done\n\
    \            if [ $sum -eq 0 ]; then\n                break\n            fi\n\
    \        done\n        if [ $sum -eq 0 ]; then\n            for ((i=0; i<$length;\
    \ i++)); do\n                for ((j=i+1; j<$length; j++)); do\n             \
    \       if [ ${array[i]} -gt ${array[j]} ]; then\n                        temp=${array[i]}\n\
    \                        array[i]=${array[j]}\n                        array[j]=$temp\n\
    \                    fi\n                done\n            done\n        else\n\
    \            for ((i=0; i<$length; i++)); do\n                for ((j=i+1; j<$length;\
    \ j++)); do\n                    if [ ${array[i]} -lt ${array[j]} ]; then\n  \
    \                      temp=${array[i]}\n                        array[i]=${array[j]}\n\
    \                        array[j]=$temp\n                    fi\n            \
    \    done\n            done\n        fi\n        sorted_array=(\"[\")\n      \
    \  for ((k=0; k<$length; k++)); do\n            sorted_array+=(\"\\\"${array[k]}\\\
    \"\")\n            if [ $k -lt $((length-1)) ]; then\n                sorted_array+=(\"\
    \ \")\n            fi\n        done\n        sorted_array\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpfush8nka.sh: line 73: syntax error near unexpected token `}''\n/tmp/tmpfush8nka.sh:
    line 73: `}''\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=$(( ${array[0]}\
    \ + ${array[-1]} ))\n  local -i len=${#array[@]}\n  local -i i=0\n  local -i j=0\n\
    \  local -i temp=0\n  if (( sum % 2 == 0 )); then\n    for (( i = 0; i < len -\
    \ 1; i++ )); do\n      for (( j = 0; j < len - i - 1; j++ )); do\n        if ((\
    \ ${array[j]} < ${array[j + 1]} )); then\n          temp=${array[j]}\n       \
    \   array[j]=${array[j + 1]}\n          array[j + 1]=$temp\n        fi\n     \
    \ done\n    done\n  else\n    for (( i = 0; i < len - 1; i++ )); do\n      for\
    \ (( j = 0; j < len - i - 1; j++ )); do\n        if (( ${array[j]} > ${array[j\
    \ + 1]} )); then\n          temp=${array[j]}\n          array[j]=${array[j + 1]}\n\
    \          array[j + 1]=$temp\n        fi\n      done\n    done\n  fi\n  echo\
    \ \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2747csk.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\n/tmp/tmpv2747csk.sh: line 18: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax
    error in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local _sum=$(( ${_array[0]}\
    \ + ${_array[-1]} ))\n    if [[ $_sum -eq 0 ]]; then\n        echo \"[]\"\n  \
    \  elif [[ $_sum -eq 1 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n   \
    \ elif [[ $_sum -eq 2 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n   \
    \ elif [[ $_sum -eq 3 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif\
    \ [[ $_sum -eq 4 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif\
    \ [[ $_sum -eq 5 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[\
    \ $_sum -eq 6 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[\
    \ $_sum -eq 7 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum\
    \ -eq 8 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[ $_sum\
    \ -eq 9 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 10 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 11 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 12 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 13 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 14 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 15 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 16 ]]; then\n        echo \"[\\\"${_array[-1]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 17 ]]; then\n        echo \"[\\\"${_array[0]}\\\"]\"\n    elif [[ $_sum -eq\
    \ 18 ]]; then\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp351st15i.sh: line 57: syntax error near unexpected token `}''\n/tmp/tmp351st15i.sh:
    line 57: `}''\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local arr=(\"$@\")\n    local len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    local sum=0\n    local ret=()\n\
    \    for ((i=0; i<len; i++)); do\n        ret[i]=${arr[i]}\n    done\n    for\
    \ ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n           \
    \ sum=$((${ret[i]}+${ret[j]}))\n            if [ $((sum%2)) -eq 0 ]; then\n  \
    \              tmp=${ret[i]}\n                ret[i]=${ret[j]}\n             \
    \   ret[j]=$tmp\n            fi\n        done\n    done\n    echo ${ret[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n _array=$1\n    local _sum=$((${_array[0]}\
    \ + ${_array[-1]}))\n    if (( _sum % 2 == 0 )); then\n        echo \"${_array[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n    else\n        echo \"${_array[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd9h7hsiv.sh: line 17: local: `\'': not a valid identifier\n/tmp/tmpd9h7hsiv.sh:
    line 18: _array: bad array subscript\n/tmp/tmpd9h7hsiv.sh: line 18: + : syntax
    error: operand expected (error token is "+ ")\n/tmp/tmpd9h7hsiv.sh: line 17: local:
    `5\'': invalid variable name for name reference\n/tmp/tmpd9h7hsiv.sh: line 18:
    _array: bad array subscript\n/tmp/tmpd9h7hsiv.sh: line 18: + : syntax error: operand
    expected (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local array=(\"$@\")\n    local first=${array[0]}\n\
    \    local last=${array[-1]}\n    local sum=$((first + last))\n    local is_odd=$((sum\
    \ % 2))\n    if [[ $is_odd -eq 0 ]]; then\n        echo \"${array[@]}\" | tr '\
    \ ' '\\n' | sort -nr | tr '\\n' ' '\n    else\n        echo \"${array[@]}\" |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted\n  local\
    \ -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n \
    \ local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i\
    \ af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n \
    \ local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i\
    \ ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n \
    \ local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i\
    \ ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n \
    \ local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i\
    \ bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n \
    \ local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=${array[0]}+${array[-1]}\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i m\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm7sjiw59.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local array=(\"$@\")\n  local sum=$(( ${array[0]}\
    \ + ${array[-1]} ))\n  local sort_order=asc\n  if (( sum % 2 == 0 )); then\n \
    \   sort_order=desc\n  fi\n  printf '%s\\n' \"${array[@]}\" | sort -n -t ' ' -k\
    \ 1.$sort_order\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzt713l23.sh: line 18: +  : syntax error: operand expected (error
    token is "+  ")\nsort: invalid number after \''.\'': invalid count at start of
    \xe2\x80\x98desc\xe2\x80\x99\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -i sum=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i length=${#array[@]}\n  local -i mid=0\n \
    \ local -i tmp=0\n  local -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n\
    \  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n\
    \  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n\
    \  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n\
    \  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n\
    \  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n\
    \  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n\
    \  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n\
    \  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n\
    \  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n\
    \  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n\
    \  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n  local -i flag46=0\n\
    \  local -i flag47=0\n  local -i flag48=0\n  local -i flag49=\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a result=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -n array=$1\n    local -a result\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i\
    \ length=${#array[@]}\n    local -i mid=$((length / 2))\n    local -i odd=$((length\
    \ % 2))\n    local -i last=$((length - 1))\n    local -i first=0\n    local -i\
    \ temp=0\n    for ((i = 0; i < length; i++)); do\n        result[i]=${array[i]}\n\
    \    done\n    sum=$((array[first] + array[last]))\n    if ((sum % 2 == 0)); then\n\
    \        for ((i = 0; i < mid; i++)); do\n            temp=${result[i]}\n    \
    \        result[i]=${result[last - i]}\n            result[last - i]=$temp\n \
    \       done\n    else\n        for ((i = 0; i < mid; i++)); do\n            for\
    \ ((j = i + 1; j < length - i; j++)); do\n                if ((result[i] > result[j]));\
    \ then\n                    temp=${result[i]}\n                    result[i]=${result[j]}\n\
    \                    result[j]=$temp\n                fi\n            done\n \
    \           for ((k = last - i; k > mid; k--)); do\n                if ((result[last\
    \ - i] < result[k])); then\n                    temp=${result[last - i]}\n   \
    \                 result[last - i]=${result[k]}\n                    result[k]=$temp\n\
    \                fi\n            done\n        done\n    fi\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpuu9r_b1n.sh: line 17: local: `'': not a valid identifier\n/tmp/tmpuu9r_b1n.sh:
    line 32: array: bad array subscript\n/tmp/tmpuu9r_b1n.sh: line 17: local: `5'':
    invalid variable name for name reference\n/tmp/tmpuu9r_b1n.sh: line 32: array:
    bad array subscript\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -i sum=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local\
    \ -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n   \n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=$((array[0] + array[-1]))\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i n=${#array[@]}\n  local -i m=0\n  local -i temp=0\n  if ((sum\
    \ % 2 == 0)); then\n    for ((i = 0; i < n; i++)); do\n      for ((j = 0; j <\
    \ n - i - 1; j++)); do\n        if ((array[j] < array[j + 1])); then\n       \
    \   temp=${array[j]}\n          array[j]=${array[j + 1]}\n          array[j +\
    \ 1]=$temp\n        fi\n      done\n    done\n  else\n    for ((i = 0; i < n;\
    \ i++)); do\n      for ((j = 0; j < n - i - 1; j++)); do\n        if ((array[j]\
    \ > array[j + 1])); then\n          temp=${array[j]}\n          array[j]=${array[j\
    \ + 1]}\n          array[j + 1]=$temp\n        fi\n      done\n    done\n  fi\n\
    \  for ((k = 0; k < n; k++)); do\n    sorted_array[m]=\"\\\"${array[k]}\\\"\"\n\
    \    ((m++))\n  done\n  echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted_array=()\n\
    \  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343569
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local input=(\"$@\")\n    local output=()\n  \
    \  local sum=0\n    local index=0\n    local length=${#input[@]}\n    local i=0\n\
    \    local j=0\n    local tmp=0\n    local tmp_index=0\n    local tmp_value=0\n\
    \    local tmp_value_index=0\n    if [ $length -eq 0 ]; then\n        echo \"\
    []\"\n        return\n    fi\n    for ((i=0; i<$length; i++)); do\n        sum=$((input[i]\
    \ + input[length-1-i]))\n        if [ $((sum % 2)) -eq 0 ]; then\n           \
    \ output[i]=${input[i]}\n        else\n            output[i]=${input[length-1-i]}\n\
    \        fi\n    done\n    for ((i=0; i<$length; i++)); do\n        tmp=${output[i]}\n\
    \        tmp_index=$i\n        for ((j=$i; j<$length; j++)); do\n            if\
    \ [ $tmp -gt ${output[j]} ]; then\n                tmp=${output[j]}\n        \
    \        tmp_index=$j\n            fi\n        done\n        tmp_value=${output[i]}\n\
    \        tmp_value_index=$tmp_index\n        output[i]=$tmp\n        output[tmp_index]=$tmp_value\n\
    \    done\n    echo \"[\"\n    for ((i=0; i<$length; i++)); do\n        echo \"\
    \\\"${output[i]}\\\"\"\n        if [ $i -lt $((length-1)) ]; then\n          \
    \  echo \",\"\n        fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a arr=(\"$@\")\n    local -a sorted_arr=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i\
    \ sum=0\n    local -i temp=0\n    local -i flag=0\n    if [[ $len -eq 0 ]]; then\n\
    \        echo \"[]\"\n        return\n    fi\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ $((arr[i])) -gt $((arr[j]))\
    \ ]]; then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    sum=$((arr[0]\
    \ + arr[len-1]))\n    if [[ $((sum % 2)) -eq 0 ]]; then\n        flag=1\n    fi\n\
    \    if [[ $flag -eq 0 ]]; then\n        for ((i=0; i<len; i++)); do\n       \
    \     sorted_arr[i]=\"\\\"${arr[i]}\\\"\"\n        done\n    else\n        for\
    \ ((i=len-1; i>=0; i--)); do\n            sorted_arr[len-1-i]=\"\\\"${arr[i]}\\\
    \"\"\n        done\n    fi\n    echo \"[${sorted_arr[@]}]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=()\n  local -a sorted_array=()\n\
    \  local -a odd_array=()\n  local -a even_array=()\n  local -a odd_sorted_array=()\n\
    \  local -a even_sorted_array=()\n  local -a result_array=()\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i sum=0\n  local -i odd_count=0\n  local -i even_count=0\n  local -i\
    \ odd_sorted_count=0\n  local -i even_sorted_count=0\n  local -i result_count=0\n\
    \  local -i array_count=0\n  local -i sorted_array_count=0\n  local -i array_length=0\n\
    \  local -i sorted_array_length=0\n  local -i odd_array_length=0\n  local -i even_array_length=0\n\
    \  local -i odd_sorted_array_length=0\n  local -i even_sorted_array_length=0\n\
    \  local -i result_array_length=0\n  local -i odd_index=0\n  local -i even_index=0\n\
    \  local -i odd_sorted_index=0\n  local -i even_sorted_index=0\n  local -i result_index=0\n\
    \  local -i index=0\n  local -i value=0\n  local -i min=0\n  local -i max=0\n\
    \  local -i temp=0\n  local -i temp_index=0\n  local -i temp_value=0\n  local\
    \ -i temp_min=0\n  local -i temp_max=0\n  local -i temp_odd_index=0\n  local -i\
    \ temp_even_index=0\n  local -i temp_odd_sorted_index=0\n  local -i temp_even_sorted_index=0\n\
    \  local -i temp_result_index=0\n  local -i temp_index=0\n  local -\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local array=(\"$@\")\n    local sum=$((array[0]\
    \ + array[${#array[@]} - 1]))\n    if ((sum % 2 == 0)); then\n        echo \"\
    $(printf \"%s\\n\" \"${array[@]}\" | sort -nr)\"\n    else\n        echo \"$(printf\
    \ \"%s\\n\" \"${array[@]}\" | sort -n)\"\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwouqp9w4.sh: line 18: 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5")\n'''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -a sorted_array=()\n\
    \    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=()\n    local -a sorted=()\n  \
    \  local -i i=0\n    local -i j=0\n    local -i sum=0\n    local -i length=0\n\
    \    local -i temp=0\n    local -i index=0\n    local -i flag=0\n    local -i\
    \ flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n\
    \    local -i flag48=0\n    local -i flag49=0\n    local -i flag50=\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660343570
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n  local -a array=(\"$@\")\n  local -a sorted\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i temp=0\n\
    \  local -i length=${#array[@]}\n  for ((i=0; i<length; i++)); do\n    sorted[i]=${array[i]}\n\
    \  done\n  for ((i=0; i<length; i++)); do\n    for ((j=i+1; j<length; j++)); do\n\
    \      if ((sorted[i] > sorted[j])); then\n        temp=${sorted[i]}\n       \
    \ sorted[i]=${sorted[j]}\n        sorted[j]=$temp\n      fi\n    done\n  done\n\
    \  for ((k=0; k<length; k++)); do\n    for ((l=k+1; l<length; l++)); do\n    \
    \  if ((sorted[k] < sorted[l])); then\n        temp=${sorted[k]}\n        sorted[k]=${sorted[l]}\n\
    \        sorted[l]=$temp\n      fi\n    done\n  done\n  for ((m=0; m<length; m++));\
    \ do\n    for ((n=m+1; n<length; n++)); do\n      if ((sorted[m] > sorted[n]));\
    \ then\n        temp=${sorted[m]}\n        sorted[m]=${sorted[n]}\n        sorted[n]=$temp\n\
    \      fi\n    done\n  done\n  for ((o=0; o<length; o++)); do\n    for ((p=o+1\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmps6f7ojdn.sh: line 71: unexpected EOF while looking for matching
    `)''\n/tmp/tmps6f7ojdn.sh: line 90: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660343570
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\nsort_array() {\n    local -a array=(\"$@\")\n    local -i sum=${array[0]}+${array[-1]}\n\
    \    if ((sum%2==0)); then\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ -r | tr '\\n' ' '\n    else\n        echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ | tr '\\n' ' '\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fgdpp31.sh: line 18: local: +: syntax error: operand expected
    (error token is "+")\n'''
  stdout: b''
  timestamp: 1660343569
