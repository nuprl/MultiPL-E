language: ts
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // Your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo22k3h9x.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo22k3h9x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let result: boolean = false;\n    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i]\
    \ + l[j] === 0) {\n                result = true;\n            }\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.includes(-l[i])) {\n            return true;\n        }\n \
    \       s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set<number>();\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6r5js5xy.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6r5js5xy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // your code here\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3euym4yn.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3euym4yn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j\
    \ < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n \
    \     }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 2
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let i: number = 0;\n  let j: number = 0;\n  let k: number = 0;\n\
    \  let m: number = 0;\n  let n: number = 0;\n  let o: number = 0;\n  let p: number\
    \ = 0;\n  let q: number = 0;\n  let r: number = 0;\n  let s: number = 0;\n  let\
    \ t: number = 0;\n  let u: number = 0;\n  let v: number = 0;\n  let w: number\
    \ = 0;\n  let x: number = 0;\n  let y: number = 0;\n  let z: number = 0;\n  let\
    \ aa: number = 0;\n  let ab: number = 0;\n  let ac: number = 0;\n  let ad: number\
    \ = 0;\n  let ae: number = 0;\n  let af: number = 0;\n  let ag: number = 0;\n\
    \  let ah: number = 0;\n  let ai: number = 0;\n  let aj: number = 0;\n  let ak:\
    \ number = 0;\n  let al: number = 0;\n  let am: number = 0;\n  let an: number\
    \ = 0;\n  let ao: number = 0;\n  let ap: number = 0;\n  let aq: number = 0;\n\
    \  let ar: number = 0;\n  let as: number = 0;\n  let at: number = 0;\n  let au:\
    \ number = 0;\n  let av: number = 0;\n  let aw: number = 0;\n  let ax: number\
    \ = 0;\n  let ay: number = 0;\n  let az: number = 0;\n  let ba: number = 0;\n\
    \  let bb: number = 0;\n  let bc: number = 0;\n  let bd: number = 0;\n  let be:\
    \ number = 0;\n  let bf: number = 0;\n  let bg: number = 0;\n  let bh: number\
    \ = 0;\n  let bi: number = 0;\n  let bj: number = 0;\n  let bk: number = 0;\n\
    \  let bl: number = 0;\n  let b\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp5mzjnhe8.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number;\n    let j: number;\n    let k: number;\n    let\
    \ l_length: number = l.length;\n    for (i = 0; i < l_length; i++) {\n       \
    \ for (j = i + 1; j < l_length; j++) {\n            if (l[i] + l[j] === 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // TODO: implement this function\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7by1fep.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps7by1fep.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.includes(-l[i])) {\n            return true;\n        }\n \
    \       s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < l.length; i++)\
    \ {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j]\
    \ === 0) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set(l);\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(-l[i])) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplozg7cko.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplozg7cko.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let dict: { [key: number]: number } = {};\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (dict[-l[i]]) {\n            return true;\n\
    \        }\n        dict[l[i]] = 1;\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.indexOf(-l[i]) != -1) {\n            return true;\n       \
    \ }\n        s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.indexOf(-l[i]) != -1) {\n            return true;\n       \
    \ }\n        s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number\
    \ = 0;\n    let sum: number = 0;\n    let len: number = l.length;\n    for (i\
    \ = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            sum\
    \ = l[i] + l[j];\n            if (sum === 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = 0;\n    let sum = 0;\n    while (i <\
    \ l.length) {\n        j = i + 1;\n        while (j < l.length) {\n          \
    \  sum = l[i] + l[j];\n            if (sum === 0) {\n                return true;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] === 0) {\n      return true;\n    } else if (l[i] + l[j] > 0) {\n\
    \      j--;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1j3nxj5q.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1j3nxj5q.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number\
    \ = 0;\n    let l_length: number = l.length;\n    while (i < l_length) {\n   \
    \     j = i + 1;\n        while (j < l_length) {\n            if (l[i] + l[j]\
    \ === 0) {\n                return true;\n            }\n            j = j + 1;\n\
    \        }\n        i = i + 1;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // your code here\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3euym4yn.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3euym4yn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    while (i < l.length)\
    \ {\n        j = i + 1;\n        while (j < l.length) {\n            if (l[i]\
    \ + l[j] === 0) {\n                return true;\n            }\n            j\
    \ = j + 1;\n        }\n        i = i + 1;\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let pairs: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i]\
    \ + l[j] === 0) {\n                pairs.push(l[i]);\n                pairs.push(l[j]);\n\
    \            }\n        }\n    }\n    if (pairs.length === 0) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < l.length; i++)\
    \ {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j]\
    \ === 0) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j\
    \ < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n \
    \     }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let set = new Set<number>();\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (set.has(l[i])) {\n      return true;\n    }\n    set.add(-l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // your code here\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3euym4yn.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3euym4yn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i\
    \ < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n         \
    \   if (l[i] + l[j] === 0) {\n                return true;\n            }\n  \
    \      }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6r5js5xy.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6r5js5xy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.has(-l[i])) {\n            return true;\n        }\n\
    \        seen.add(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        let current = l[i];\n        if (seen.includes(-current)) {\n   \
    \         return true;\n        }\n        seen.push(current);\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    return false;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmf0h79as.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmf0h79as.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    // throw new Error(\"Method not implemented.\"\
    );\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n \
    \   let sum: number = 0;\n    let result: boolean = false;\n    for (i = 0; i\
    \ < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n         \
    \   sum = l[i] + l[j];\n            if (sum === 0) {\n                result =\
    \ true;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.includes(-l[i])) {\n            return true;\n        }\n \
    \       s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let result = false;\n  let i = 0;\n  while (i < l.length) {\n \
    \   let j = i + 1;\n    while (j < l.length) {\n      if (l[i] + l[j] === 0) {\n\
    \        result = true;\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n \
    \   for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        result = true;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return false;\n    }\n    let s\
    \ = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (s.has(l[i]))\
    \ {\n            return true;\n        }\n        s.add(-l[i]);\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // your code here\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3euym4yn.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3euym4yn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set<number>();\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.includes(-l[i])) {\n            return true;\n        }\n \
    \       s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = l.length - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] === 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] > 0) {\n            j--;\n        } else {\n            i++;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp471xrele.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp471xrele.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return false;\n  }\n  let seen: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (seen.includes(-l[i]))\
    \ {\n      return true;\n    }\n    seen.push(l[i]);\n  }\n  return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let set = new Set();\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (set.has(l[i])) {\n      return true;\n    }\n    set.add(-l[i]);\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  for (i\
    \ = 0; i < l.length; i++) {\n    for (j = i + 1; j < l.length; j++) {\n      sum\
    \ = l[i] + l[j];\n      if (sum === 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  const seen: number[] = [];\n  for (const n of l) {\n    if (seen.includes(-n))\
    \ {\n      return true;\n    }\n    seen.push(n);\n  }\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 2
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7i5trwei.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660348995
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i <\
    \ l.length; i++) {\n        for (let j: number = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                result = true;\n      \
    \      }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n \
    \   for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        result = true;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j\
    \ < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n \
    \     }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        let num = l[i];\n        if (seen.includes(-num)) {\n           \
    \ return true;\n        }\n        seen.push(num);\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmugbhow2.js:17\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmpmugbhow2.js:17:11)\n\
    \    at test (/tmp/tmpmugbhow2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmugbhow2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmugbhow2.js:17\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmpmugbhow2.js:17:11)\n\
    \    at test (/tmp/tmpmugbhow2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmugbhow2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // TODO: implement this function\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7by1fep.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps7by1fep.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmugbhow2.js:17\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmpmugbhow2.js:17:11)\n\
    \    at test (/tmp/tmpmugbhow2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmugbhow2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // your code here\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3euym4yn.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3euym4yn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    const set = new Set();\n    for (const n of l) {\n        if\
    \ (set.has(n)) {\n            return true;\n        }\n        set.add(-n);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let set: Set<number> = new Set();\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (set.has(l[i])) {\n      return true;\n    }\n    set.add(-l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // Your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo22k3h9x.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo22k3h9x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmugbhow2.js:17\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmpmugbhow2.js:17:11)\n\
    \    at test (/tmp/tmpmugbhow2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmugbhow2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6r5js5xy.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6r5js5xy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (seen.includes(-l[i])) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmugbhow2.js:17\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmpmugbhow2.js:17:11)\n\
    \    at test (/tmp/tmpmugbhow2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmugbhow2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    return false;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmf0h79as.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmf0h79as.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen = new Set();\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (seen.has(-l[i])) {\n      return true;\n    }\n    seen.add(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i <\
    \ l.length; i++) {\n        for (let j: number = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                result = true;\n      \
    \      }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (seen.includes(-l[i])) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n \
    \   for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        result = true;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let dict: { [key: number]: number } = {};\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (dict[l[i]]) {\n      return true;\n    } else {\n\
    \      dict[-l[i]] = 1;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    const s = new Set();\n    for (const i of l) {\n        if (s.has(-i))\
    \ {\n            return true;\n        }\n        s.add(i);\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n \
    \   for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        result = true;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let set = new Set(l);\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (set.has(-l[i])) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf_uk1wg8.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf_uk1wg8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] === 0) {\n      return true;\n    } else if (l[i] + l[j] > 0) {\n\
    \      j -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpli3ac_ya.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpli3ac_ya.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set(l);\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(-l[i])) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplozg7cko.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplozg7cko.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 2
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions.\n  // You may not use\
    \ any built-in functions.\n  // You may not use any built-in functions.\n  //\
    \ You may not use any built-in functions.\n  // You may not use any built-in functions.\n\
    \  // You may not use any built-in functions.\n  // You may not use any built-in\
    \ functions.\n  // You may not use any built-in functions\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7i5trwei.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660348995
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (seen.includes(-l[i])) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // TODO: implement this function\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7by1fep.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps7by1fep.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.includes(-l[i])) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_faw27gf.js:17\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmp_faw27gf.js:17:11)\n\
    \    at test (/tmp/tmp_faw27gf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_faw27gf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return undefined;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfr_v0kah.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfr_v0kah.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let sum = 0;\n\
    \    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++)\
    \ {\n            sum = l[i] + l[j];\n            if (sum === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i = 0;\n    let j = l.length - 1;\n    l.sort();\n    while\
    \ (i < j) {\n        if (l[i] + l[j] === 0) {\n            return true;\n    \
    \    } else if (l[i] + l[j] > 0) {\n            j -= 1;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeu9ujowh.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeu9ujowh.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348997
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let hash: { [key: number]: number } = {};\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (hash[l[i]]) {\n            return true;\n\
    \        } else {\n            hash[-l[i]] = 1;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 2
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number\
    \ = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n\
    \    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let\
    \ s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number\
    \ = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n\
    \    let z: number = 0;\n    let aa: number = 0;\n    let ab: number = 0;\n  \
    \  let ac: number = 0;\n    let ad: number = 0;\n    let ae: number = 0;\n   \
    \ let af: number = 0;\n    let ag: number = 0;\n    let ah: number = 0;\n    let\
    \ ai: number = 0;\n    let aj: number = 0;\n    let ak: number = 0;\n    let al:\
    \ number = 0;\n    let am: number = 0;\n    let an: number = 0;\n    let ao: number\
    \ = 0;\n    let ap: number = 0;\n    let aq: number = 0;\n    let ar: number =\
    \ 0;\n    let as: number = 0;\n    let at: number = 0;\n    let au: number = 0;\n\
    \    let av: number = 0;\n    let aw: number = 0;\n    let ax: number = 0;\n \
    \   let ay: number = 0;\n    let az: number = 0;\n    let ba: number = 0;\n  \
    \  let bb: number = 0;\n    let bc: number = 0;\n    let bd: number = 0;\n   \
    \ let be: number = 0;\n    let bf: number = 0;\n    let bg: number = 0;\n    let\
    \ bh: number = 0;\n    let bi: number = 0;\n    let bj: number = 0;\n    let bk:\
    \ number = 0;\n    let bl: number = 0;\n    let b\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpasilntq2.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660348997
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    let num = l[i];\n    if (seen.includes(-num)) {\n      return true;\n\
    \    } else {\n      seen.push(num);\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(l[i])) {\n            return true;\n        }\n     \
    \   set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let sum: number\
    \ = 0;\n    let result: boolean = false;\n    for (i = 0; i < l.length; i++) {\n\
    \        for (j = 0; j < l.length; j++) {\n            if (i !== j) {\n      \
    \          sum = l[i] + l[j];\n                if (sum === 0) {\n            \
    \        result = true;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let set = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (set.has(l[i])) {\n            return true;\n        }\n\
    \        set.add(-l[i]);\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  // TODO: implement this function\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7by1fep.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps7by1fep.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  const seen: Set<number> = new Set();\n  for (const n of l) {\n\
    \    if (seen.has(-n)) {\n      return true;\n    }\n    seen.add(n);\n  }\n \
    \ return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (seen.includes(-l[i])) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j\
    \ < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n \
    \     }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let s: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.includes(-l[i])) {\n            return true;\n        }\n \
    \       s.push(l[i]);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphdkv698t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphdkv698t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number\
    \ = 0;\n    let sum: number = 0;\n    for (i = 0; i < l.length; i++) {\n     \
    \   for (j = i + 1; j < l.length; j++) {\n            sum = l[i] + l[j];\n   \
    \         if (sum === 0) {\n                return true;\n            }\n    \
    \    }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348997
- exit_code: 1
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    // your code here\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8rx40eby.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8rx40eby.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let s = new Set();\n  for (let i = 0; i < l.length; i++) {\n  \
    \  if (s.has(l[i])) {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (seen.includes(-l[i])) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348996
- exit_code: 0
  program: "// @ts-nocheck\n\n//pairs_sum_to_zero takes an array of integers as an\
    \ input.\n// it returns true if there are two distinct elements in the array that\n\
    // sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n\
    // false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n\
    // >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]):\
    \ boolean {\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i\
    \ < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n         \
    \   if (l[i] + l[j] === 0) {\n                return true;\n            }\n  \
    \      }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
