language: ts
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let index = 0;\n  while (index < string.length)\
    \ {\n    if (string.substring(index, index + substring.length) === substring)\
    \ {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp9_5_hlyc.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_5_hlyc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index == -1)\
    \ {\n            break;\n        }\n        count++;\n        index++;\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.slice(i, i + substring.length) === substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.slice(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpviue3k_j.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpviue3k_j.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index == -1) {\n  \
    \          break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index != -1) {\n\
    \        index = string.indexOf(substring, index);\n        if (index != -1) {\n\
    \            count++;\n            index += substring.length;\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmprqk2ff9s.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk2ff9s.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let index = string.indexOf(substring, start);\n        if (index == -1) {\n\
    \            break;\n        }\n        count++;\n        start = index + 1;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index == -1)\
    \ {\n            break;\n        }\n        count++;\n        index++;\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let startIndex = 0;\n    while (true) {\n\
    \        let index = string.indexOf(substring, startIndex);\n        if (index\
    \ == -1) {\n            break;\n        }\n        count++;\n        startIndex\
    \ = index + 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let position = string.indexOf(substring, start);\n        if (position ===\
    \ -1) {\n            break;\n        }\n        count++;\n        start = position\
    \ + 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        index += substring.length;\n \
    \       count++;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp5vf8f2j_.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5vf8f2j_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpay9qavgk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpay9qavgk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.slice(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let index = string.indexOf(substring, start);\n        if (index == -1) {\n\
    \            break;\n        }\n        count++;\n        start = index + 1;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let start = 0;\n  while (true) {\n    let found\
    \ = string.indexOf(substring, start);\n    if (found === -1) {\n      break;\n\
    \    }\n    count++;\n    start = found + 1;\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index == -1) {\n  \
    \          break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let found = string.indexOf(substring, start);\n        if (found == -1) {\n\
    \            break;\n        }\n        count++;\n        start = found + 1;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index != -1) {\n\
    \        index = string.indexOf(substring, index);\n        if (index != -1) {\n\
    \            count++;\n            index += substring.length;\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmprqk2ff9s.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk2ff9s.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index >= 0) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    if (substring.length === 0) {\n        return 0;\n    }\n    let\
    \ count = 0;\n    let i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) === substring) {\n            count++;\n            i\
    \ += substring.length;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmphn54krli.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphn54krli.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.slice(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let index = 0;\n  while (index < string.length)\
    \ {\n    if (string.slice(index, index + substring.length) === substring) {\n\
    \      count++;\n      index += substring.length;\n    } else {\n      index++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp8ghp7rv2.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ghp7rv2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index >= 0) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index != -1) {\n\
    \        index = string.indexOf(substring, index);\n        if (index != -1) {\n\
    \            count++;\n            index += substring.length;\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmprqk2ff9s.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk2ff9s.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n  \
    \  if (string.slice(i, i + substring.length) === substring) {\n      count++;\n\
    \      i += substring.length;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmplw4rf35u.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplw4rf35u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index !== -1) {\n\
    \        index = string.indexOf(substring, index);\n        if (index !== -1)\
    \ {\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let position = string.indexOf(substring, start);\n        if (position >=\
    \ 0) {\n            count++;\n            start = position + 1;\n        } else\
    \ {\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let index = string.indexOf(substring, start);\n        if (index == -1) break;\n\
    \        count++;\n        start = index + 1;\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index !== -1) {\n\
    \        index = string.indexOf(substring, index);\n        if (index !== -1)\
    \ {\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index < 0)\
    \ {\n            break;\n        }\n        count++;\n        index++;\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let index = string.indexOf(substring, start);\n        if (index === -1) {\n\
    \            break;\n        }\n        count++;\n        start = index + 1;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let index = 0;\n  while (index < string.length)\
    \ {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n\
    \      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpay9qavgk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpay9qavgk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index =\
    \ string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n \
    \   }\n    count++;\n    index++;\n  }\n  return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index >= 0) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  let index = 0;\n  while (index < string.length)\
    \ {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n\
    \      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index == -1)\
    \ {\n            break;\n        }\n        count++;\n        index++;\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let startIndex = 0;\n    while (true) {\n\
    \        let index = string.indexOf(substring, startIndex);\n        if (index\
    \ == -1) {\n            break;\n        }\n        count++;\n        startIndex\
    \ = index + 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        let found = string.indexOf(substring, index);\n        if (found\
    \ === -1) {\n            break;\n        }\n        count++;\n        index =\
    \ found + 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let start = 0;\n    while (true) {\n     \
    \   let found = string.indexOf(substring, start);\n        if (found == -1) {\n\
    \            break;\n        }\n        count++;\n        start = found + 1;\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index == -1) {\n  \
    \          break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        let found = string.indexOf(substring, index);\n        if (found\
    \ == -1) {\n            break;\n        }\n        count++;\n        index = found\
    \ + 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = string.indexOf(substring);\n \
    \   while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (true) {\n     \
    \   index = string.indexOf(substring, index);\n        if (index === -1) {\n \
    \           break;\n        }\n        count++;\n        index++;\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n  \
    \  if (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n            i += substring.length;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpul0sdq3g.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul0sdq3g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
- exit_code: 0
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.substr(i, substring.length) === substring) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348990
- exit_code: 1
  program: "// @ts-nocheck\n\n//Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n// >>> how_many_times(\"\"\
    , \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"\
    aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string):\
    \ number {\n    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        if (string.substring(index, index + substring.length) === substring)\
    \ {\n            count++;\n            index += substring.length;\n        } else\
    \ {\n            index++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1njopmuv.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1njopmuv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348990
