language: ts
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpajholb2b.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpajholb2b.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    true

    false

    '
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a == 0) {\n        return true;\n    }\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i < a; i++) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3azxerdc.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3azxerdc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqcgj10ag.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqcgj10ag.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfedo74wd.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfedo74wd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfedo74wd.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfedo74wd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbfdjaib.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsbfdjaib.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 0;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiuqqn6us.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiuqqn6us.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x = Math.cbrt(a);\n    return Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.cbrt(a);\n    if (cube % 1 ==\
    \ 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    return (cube % 1 === 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a == 0) {\n        return true;\n    }\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 0;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiuqqn6us.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiuqqn6us.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.cbrt(a);\n    if (cube % 1 ===\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.cbrt(a);\n    if (cube % 1 ===\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 1; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqkw5k47m.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqkw5k47m.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 1; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqkw5k47m.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqkw5k47m.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    let i: number = 1;\n\
    \    while (i * i * i <= a) {\n        if (i * i * i == a) {\n            result\
    \ = true;\n        }\n        i++;\n    }\n    return result;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpftd75kih.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpftd75kih.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result = false;\n    for (let i = 1; i <= a; i++)\
    \ {\n        if (i * i * i === a) {\n            result = true;\n        }\n \
    \   }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0jkjsac5.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jkjsac5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8c66y8e1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8c66y8e1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    var i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsiviv9uz.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsiviv9uz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.cbrt(a);\n    return Number.isInteger(b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.cbrt(a);\n    if (cube % 1 ===\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b = Math.cbrt(a);\n    if (b % 1 === 0) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfedo74wd.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfedo74wd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8c66y8e1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8c66y8e1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x: number = Math.cbrt(a);\n    if (x % 1 == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqcgj10ag.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqcgj10ag.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a == 0) {\n        return true;\n    }\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfi8vh37w.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfi8vh37w.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.pow(a, 1 / 3);\n    return Number.isInteger(b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpczm_rg2s.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpczm_rg2s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result = false;\n    for (let i = 1; i <= a; i++)\
    \ {\n        if (i * i * i === a) {\n            result = true;\n        }\n \
    \   }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0jkjsac5.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jkjsac5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 === 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i < a; i++) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3azxerdc.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3azxerdc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x = Math.cbrt(a);\n    return Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x = Math.cbrt(a);\n    return Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i < a; i++) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3azxerdc.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3azxerdc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.abs(a);\n    let c: number = Math.cbrt(b);\n\
    \    if (c % 1 === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbfdjaib.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsbfdjaib.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpajholb2b.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpajholb2b.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    true

    false

    '
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    let i = 0;\n\
    \    while (i * i * i <= a) {\n        if (i * i * i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.pow(a, 1 / 3);\n    return Number.isInteger(b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpczm_rg2s.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpczm_rg2s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a == 0) {\n        return true;\n    }\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i < a; i++) {\n     \
    \   if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8j8_hifs.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8j8_hifs.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.abs(a);\n    let c: number = Math.cbrt(b);\n\
    \    if (c % 1 === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x: number = Math.cbrt(a);\n    if (x % 1 === 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return (Math.pow(a, 1 / 3) % 1) === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1wyquupg.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1wyquupg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.pow(a, 1 / 3);\n    if (Number.isInteger(cube))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgro3k_wd.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgro3k_wd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x = Math.cbrt(a);\n    if (x % 1 === 0) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8c66y8e1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8c66y8e1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a ===\
    \ 0) {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    let i = 0;\n\
    \    while (i * i * i <= a) {\n        if (i * i * i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i < a; i++) {\n     \
    \   if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8j8_hifs.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8j8_hifs.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    if (a === 0) {\n \
    \       result = true;\n    } else if (a > 0) {\n        for (let i = 1; i <=\
    \ a; i++) {\n            if (i * i * i === a) {\n                result = true;\n\
    \            }\n        }\n    } else {\n        for (let i = -1; i >= a; i--)\
    \ {\n            if (i * i * i === a) {\n                result = true;\n    \
    \        }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 1; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqkw5k47m.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqkw5k47m.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb8d_m1yd.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb8d_m1yd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return (Math.cbrt(a) % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a === 0) {\n        return true;\n    }\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    let i = 1;\n    while (i * i * i <= a)\
    \ {\n        if (i * i * i === a) {\n            return true;\n        }\n   \
    \     i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= Math.sqrt(a); i++)\
    \ {\n        if (i * i * i == a) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result = false;\n    for (let i = 0; i < a; i++)\
    \ {\n        if (i * i * i === a) {\n            result = true;\n        }\n \
    \   }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprs9yc7ys.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprs9yc7ys.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8c66y8e1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8c66y8e1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i *\
    \ i === a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfoy0kxoq.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfoy0kxoq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    true

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    let i: number = 1;\n\
    \    while (i * i * i <= a) {\n        if (i * i * i == a) {\n            result\
    \ = true;\n        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp25406spm.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp25406spm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 0;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps_cj3fxm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_cj3fxm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b = Math.cbrt(a);\n    if (b % 1 === 0) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    let i: number = 1;\n\
    \    while (i * i * i <= a) {\n        if (i * i * i == a) {\n            result\
    \ = true;\n        }\n        i++;\n    }\n    return result;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpftd75kih.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpftd75kih.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.abs(a);\n    let c: number = Math.cbrt(b);\n\
    \    if (c % 1 == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.cbrt(a);\n    if (cube % 1 ===\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x: number = Math.cbrt(a);\n    return Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x: number = Math.cbrt(a);\n    return Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348871
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.pow(a, 1 / 3);\n    return Number.isInteger(cube);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu02z037_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu02z037_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i\
    \ === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    console.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa2qts93f.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa2qts93f.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b = Math.cbrt(a);\n    return Number.isInteger(b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result = false;\n    for (let i = 1; i <= a; i++)\
    \ {\n        if (i * i * i === a) {\n            result = true;\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube: number = Math.pow(a, 1 / 3);\n    return Number.isInteger(cube);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3zxlc458.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3zxlc458.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb8d_m1yd.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb8d_m1yd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 1; i\
    \ <= a; i++) {\n        if (i * i * i === a) {\n            result = true;\n \
    \       }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqrusci0_.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqrusci0_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i === a) {\n            return true;\n        }\n        i++;\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8c66y8e1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8c66y8e1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb8d_m1yd.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb8d_m1yd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a == 0) {\n        return true;\n    }\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let x = Math.cbrt(a);\n    if (x % 1 == 0) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Number.isInteger(Math.cbrt(a));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 === 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    for (let i = 1; i <= a; i++) {\n       \
    \ if (i * i * i == a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ui63lfd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ui63lfd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfi8vh37w.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfi8vh37w.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660348871
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    if (a < 0) {\n        a = -a;\n    }\n    for (let i\
    \ = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbfdjaib.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsbfdjaib.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 0
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let b = Math.abs(a);\n    let c = Math.cbrt(b);\n  \
    \  return Number.isInteger(c);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348874
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n \
    \       if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszdz1oo1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszdz1oo1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348867
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes an integer a and returns\
    \ true \n// if this ingeger is a cube of some integer number.\n// Note: you may\
    \ assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n\
    // >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n//\
    \ true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a:\
    \ number): boolean {\n    return Math.sqrt(a) % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpog82ehdz.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpog82ehdz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348874
