language: ts
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => e % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25326) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpg_6fr0h6.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 !== 0 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25410) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmplsj9z6yz.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25330) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpawixo_b4.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25411) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpqs6em54q.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25411) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpqs6em54q.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25294) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpdo2cxq7h.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ cur) => acc + cur, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25325) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpo5_ykikb.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25410) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmplsj9z6yz.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((el, i) => i % 2 === 0 && el % 2 !== 0).reduce((a, b)\
    \ => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25579) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp07y649a0.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348936
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 == 0 && x % 2 != 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25601) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp37y65hwq.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25326) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpg_6fr0h6.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25631) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbnah13xu.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25672) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp00hp6hi_.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25673) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpogzg_fwg.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25410) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmplsj9z6yz.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 !== 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp8vcvga2u.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8vcvga2u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25579) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp07y649a0.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348936
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25330) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpawixo_b4.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 !== 0 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25411) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpqs6em54q.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25625) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp_v_54b0y.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25620) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpma0mbxfh.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25631) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbnah13xu.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 && i % 2).reduce((a, b) => a + b, 0);\n\
    }\n\nexport default solution;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25639) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp28iu8uu_.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    return lst.filter((val, index) => index % 2 === 0 && val % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25330) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpawixo_b4.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25330) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpawixo_b4.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25601) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp37y65hwq.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25601) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp37y65hwq.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i %\
    \ 2 === 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25692) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp2cheppcz.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25727) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpmsr0kpf0.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25817) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp3s6qnsrv.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348940
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25631) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbnah13xu.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25631) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbnah13xu.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25673) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpogzg_fwg.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25620) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpma0mbxfh.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25620) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpma0mbxfh.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25727) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpmsr0kpf0.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25601) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp37y65hwq.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25829) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbim0wib4.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348940
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !==\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpj_b8y95t.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj_b8y95t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25849) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpb3_yj66f.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => e % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348941
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25411) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpqs6em54q.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25631) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpbnah13xu.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348930
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348941
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:25620) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpma0mbxfh.js:13\nexport default\
    \ solution;\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348937
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348931
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !==\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpj_b8y95t.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj_b8y95t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660348941
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660348938
