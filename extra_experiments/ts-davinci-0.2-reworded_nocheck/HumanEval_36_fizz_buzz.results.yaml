language: ts
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str:\
    \ string = i.toString();\n            for (let j: number = 0; j < str.length;\
    \ j++) {\n                if (str[j] === '7') {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let\
    \ j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str:\
    \ string = i.toString();\n            for (let j: number = 0; j < str.length;\
    \ j++) {\n                if (str[j] === '7') {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count_digit(i,\
    \ 7);\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0846klib.js:13\n            count += count_digit(i, 7);\n     \
    \       ^\n\nReferenceError: count_digit is not defined\n    at fizz_buzz (/tmp/tmp0846klib.js:13:13)\n\
    \    at test (/tmp/tmp0846klib.js:21:22)\n    at Object.<anonymous> (/tmp/tmp0846klib.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let\
    \ j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for\
    \ (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n      \
    \    count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += (i + '').split('').filter(x\
    \ => x === '7').length;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      count += i.toString().split(\"\").filter(x\
    \ => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += (i + '').split('').filter(x\
    \ => x === '7').length;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += countDigit(i,\
    \ 7);\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprf_frfvj.js:13\n            count += countDigit(i, 7);\n      \
    \      ^\n\nReferenceError: countDigit is not defined\n    at fizz_buzz (/tmp/tmprf_frfvj.js:13:13)\n\
    \    at test (/tmp/tmprf_frfvj.js:21:22)\n    at Object.<anonymous> (/tmp/tmprf_frfvj.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count_7(i);\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2hmtrac4.js:13\n            count += count_7(i);\n            ^\n\
    \nReferenceError: count_7 is not defined\n    at fizz_buzz (/tmp/tmp2hmtrac4.js:13:13)\n\
    \    at test (/tmp/tmp2hmtrac4.js:21:22)\n    at Object.<anonymous> (/tmp/tmp2hmtrac4.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let\
    \ j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count_digit(i,\
    \ 7);\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpq4fpem0k.js:13\n            count += count_digit(i, 7);\n     \
    \       ^\n\nReferenceError: count_digit is not defined\n    at fizz_buzz (/tmp/tmpq4fpem0k.js:13:13)\n\
    \    at test (/tmp/tmpq4fpem0k.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq4fpem0k.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if\
    \ (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let\
    \ j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count7(i);\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqh6odhr4.js:13\n            count += count7(i);\n            ^\n\
    \nReferenceError: count7 is not defined\n    at fizz_buzz (/tmp/tmpqh6odhr4.js:13:13)\n\
    \    at test (/tmp/tmpqh6odhr4.js:21:22)\n    at Object.<anonymous> (/tmp/tmpqh6odhr4.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n\
    \        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count_sevens(i);\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsr8_2awe.js:13\n            count += count_sevens(i);\n       \
    \     ^\n\nReferenceError: count_sevens is not defined\n    at fizz_buzz (/tmp/tmpsr8_2awe.js:13:13)\n\
    \    at test (/tmp/tmpsr8_2awe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsr8_2awe.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str:\
    \ string = i.toString();\n            for (let j: number = 0; j < str.length;\
    \ j++) {\n                if (str[j] === '7') {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7'))\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxdb9lpvd.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxdb9lpvd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            count += count_sevens(i);\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsr8_2awe.js:13\n            count += count_sevens(i);\n       \
    \     ^\n\nReferenceError: count_sevens is not defined\n    at fizz_buzz (/tmp/tmpsr8_2awe.js:13:13)\n\
    \    at test (/tmp/tmpsr8_2awe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsr8_2awe.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i;\n      \
    \      while (num > 0) {\n                if (num % 10 === 7) {\n            \
    \        count++;\n                }\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n\
    \            for (let j = 0; j < num.length; j++) {\n                if (num[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let s = i.toString();\n\
    \            for (let j = 0; j < s.length; j++) {\n                if (s[j] ===\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349056
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            const str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349056
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count: number = 0;\n    for (let i: number = 1; i\
    \ < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num:\
    \ number = i;\n            while (num > 0) {\n                if (num % 10 ===\
    \ 7) {\n                    count++;\n                }\n                num =\
    \ Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n\
    // 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n:\
    \ number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n\
    \            for (let j = 0; j < str.length; j++) {\n                if (str[j]\
    \ === '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349054
