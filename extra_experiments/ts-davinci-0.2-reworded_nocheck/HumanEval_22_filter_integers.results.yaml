language: ts
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp0bsej0yr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0bsej0yr.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(is_integer);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvv5t0g07.js:8\n    return values.filter(is_integer);\n        \
    \                 ^\n\nReferenceError: is_integer is not defined\n    at filter_integers\
    \ (/tmp/tmpvv5t0g07.js:8:26)\n    at test (/tmp/tmpvv5t0g07.js:13:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpvv5t0g07.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp0bsej0yr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0bsej0yr.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp0bsej0yr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0bsej0yr.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(is_integer);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvv5t0g07.js:8\n    return values.filter(is_integer);\n        \
    \                 ^\n\nReferenceError: is_integer is not defined\n    at filter_integers\
    \ (/tmp/tmpvv5t0g07.js:8:26)\n    at test (/tmp/tmpvv5t0g07.js:13:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpvv5t0g07.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    let result: number[] = [];\n    for (let i = 0; i < values.length;\
    \ i++) {\n        if (typeof values[i] === \"number\") {\n            result.push(values[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpnq6jr_8e.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnq6jr_8e.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value: any): boolean {\n    \
    \    return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => Number.isInteger(value));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp0bsej0yr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0bsej0yr.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Math.floor(v)\
    \ === v);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp0bsej0yr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0bsej0yr.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && v % 1 ===\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !Number.isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpw3erfl95.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw3erfl95.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptjzjg04l.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjzjg04l.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348991
