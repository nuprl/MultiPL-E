language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n      \
    \  let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newIndex = (index + 2) % 5;\n            result += vowels[newIndex];\n     \
    \   } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph65lzijj.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph65lzijj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeqwgdt3v.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeqwgdt3v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            if (index === 4) {\n                index = -1;\n            }\n\
    \            encodedMessage += vowels[index + 2];\n        } else {\n        \
    \    encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8sjle7c7.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8sjle7c7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode:\
    \ number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90)\
    \ {\n            encodedMessage += String.fromCharCode(charCode + 32);\n     \
    \   } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage\
    \ += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage\
    \ += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2ek9ckxm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ek9ckxm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i])\
    \ !== -1) {\n            result += alphabet[(alphabet.indexOf(message[i]) + 2)\
    \ % 26];\n        } else if (message[i] === message[i].toUpperCase()) {\n    \
    \        result += message[i].toLowerCase();\n        } else {\n            result\
    \ += message[i].toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1pj1qgzm.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1pj1qgzm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            encodedMessage += currentLetter.toLowerCase();\n        } else {\n\
    \            encodedMessage += currentLetter.toUpperCase();\n        }\n     \
    \   if (alphabet.indexOf(currentLetter) !== -1) {\n            let index: number\
    \ = alphabet.indexOf(currentLetter);\n            if (index + 2 > alphabet.length\
    \ - 1) {\n                encodedMessage += alphabet[index + 2 - alphabet.length];\n\
    \            } else {\n                encodedMessage += alphabet[index + 2];\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7g80z90z.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7g80z90z.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char) > -1) {\n            let index:\
    \ number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n\
    \        } else if (alphabet.indexOf(char) > -1) {\n            let index: number\
    \ = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n    \
    \    } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwypqmpcu.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwypqmpcu.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newChar = vowels[(index + 2) % 5];\n            encoded += newChar.toUpperCase();\n\
    \        } else {\n            encoded += char.toUpperCase();\n        }\n   \
    \ }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcihb5th3.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcihb5th3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else if (currentChar === currentChar.toUpperCase()) {\n           \
    \ encodedMessage += alphabet[currentCharIndex].toUpperCase();\n        } else\
    \ if (vowels.indexOf(currentChar) !== -1) {\n            encodedMessage += alphabet[(currentCharIndex\
    \ + 2) % 26];\n        } else {\n            encodedMessage += alphabet[currentCharIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp09llgtuz.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp09llgtuz.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n       \
    \     let index: number = alphabet.indexOf(letter);\n            let newIndex:\
    \ number = index + 2;\n            if (newIndex > 25) {\n                newIndex\
    \ = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        } else if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptanl5voa.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptanl5voa.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp0aoupuew.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0aoupuew.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        let index: number = alphabet.indexOf(letter.toLowerCase());\n       \
    \ if (index === -1) {\n            encodedMessage += letter;\n        } else {\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > alphabet.length\
    \ - 1) {\n                newIndex -= alphabet.length;\n            }\n      \
    \      if (letter === letter.toUpperCase()) {\n                encodedMessage\
    \ += alphabet[newIndex].toUpperCase();\n            } else {\n               \
    \ encodedMessage += alphabet[newIndex];\n            }\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpstctuw93.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpstctuw93.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    for (let i\
    \ = 0; i < message.length; i++) {\n        const char: string = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            const index:\
    \ number = vowels.indexOf(char.toLowerCase());\n            const newIndex: number\
    \ = (index + 2) % vowels.length;\n            encodedMessage += char.toUpperCase()\
    \ === char ? vowels[newIndex].toUpperCase() : vowels[newIndex];\n        } else\
    \ {\n            encodedMessage += char.toUpperCase() === char ? char.toLowerCase()\
    \ : char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg07faym5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg07faym5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'ToST

    tHuS uS i MoSSiGo

    '
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            result += currentChar.toLowerCase();\n        } else {\n    \
    \        result += currentChar.toUpperCase();\n        }\n        if (vowels.includes(currentChar))\
    \ {\n            let index: number = alphabet.indexOf(currentChar);\n        \
    \    result = result.slice(0, result.length - 1) + alphabet[index + 2];\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaojum1fa.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaojum1fa.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        let letterIndex: number = alphabet.indexOf(letter.toLowerCase());\n \
    \       if (letterIndex === -1) {\n            encodedMessage += letter;\n   \
    \     } else {\n            let encodedLetter: string = alphabet[(letterIndex\
    \ + 2) % alphabet.length];\n            if (letter === letter.toUpperCase()) {\n\
    \                encodedLetter = encodedLetter.toUpperCase();\n            }\n\
    \            encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaw5kigex.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaw5kigex.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n       \
    \     let index: number = alphabet.indexOf(letter);\n            let newIndex:\
    \ number = index + 2;\n            if (newIndex > 25) {\n                newIndex\
    \ = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        } else if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptanl5voa.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptanl5voa.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let result: string = '';\n  const\
    \ vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (vowels.includes(message[i].toLowerCase())) {\n      result +=\
    \ String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else {\n      result\
    \ += message[i];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6jwpij_g.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6jwpij_g.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage\
    \ = encodedMessage.replace(encodedMessage[i], alphabet[alphabet.indexOf(encodedMessage[i])\
    \ + 2]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpdxni8nvf.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdxni8nvf.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgxaqx50s.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgxaqx50s.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            encodedMessage += alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmputa3n3ni.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmputa3n3ni.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        if (letter === letter.toUpperCase()) {\n            encodedMessage +=\
    \ letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (alphabet.indexOf(letter) > -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            let newIndex: number = (index\
    \ + 2) % 26;\n            encodedMessage += alphabet[newIndex];\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa_frxvn1.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa_frxvn1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let newLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (newLetterIndex > 25) {\n                newLetterIndex\
    \ -= 26;\n            }\n            let newLetter: string = alphabet[newLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      newLetter = newLetter.toUpperCase();\n            }\n            encodedMessage\
    \ += newLetter;\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpms_l3eqk.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpms_l3eqk.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'vguv

    Vjku ku c oguucig

    '
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n        if (vowels.includes(encodedMessage[i]))\
    \ {\n            encodedMessage = encodedMessage.slice(0, i) + vowels[(vowels.indexOf(encodedMessage[i])\
    \ + 2) % 5] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmply8usd1z.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmply8usd1z.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgxaqx50s.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgxaqx50s.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let char: string = message[i];\n        let charIndex: number = alphabet.indexOf(char.toLowerCase());\n\
    \        if (charIndex === -1) {\n            encodedMessage += char;\n      \
    \  } else {\n            let newCharIndex: number = charIndex + 2;\n         \
    \   if (newCharIndex > alphabet.length - 1) {\n                newCharIndex -=\
    \ alphabet.length;\n            }\n            let newChar: string = alphabet[newCharIndex];\n\
    \            if (vowels.indexOf(newChar) !== -1) {\n                newChar =\
    \ newChar.toUpperCase();\n            }\n            encodedMessage += newChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcqg3jfrb.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcqg3jfrb.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentLetter: string = message[i];\n  \
    \      if (vowels.indexOf(currentLetter) > -1) {\n            let index: number\
    \ = vowels.indexOf(currentLetter);\n            let nextIndex: number = index\
    \ + 2;\n            if (nextIndex > vowels.length - 1) {\n                nextIndex\
    \ = nextIndex - vowels.length;\n            }\n            encodedMessage += vowels[nextIndex];\n\
    \        } else {\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedMessage += currentLetter.toLowerCase();\n        \
    \    } else {\n                encodedMessage += currentLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc8awxtc3.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc8awxtc3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp0aoupuew.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0aoupuew.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let currentLetter: string = message[i];\n        if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n\
    \            encodedMessage += currentLetter;\n        } else {\n            currentLetter\
    \ = currentLetter.toUpperCase();\n            encodedMessage += currentLetter;\n\
    \        }\n        if (vowels.includes(currentLetter)) {\n            let index:\
    \ number = alphabet.indexOf(currentLetter);\n            let newIndex: number\
    \ = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex\
    \ - 26;\n            }\n            encodedMessage = encodedMessage.replace(currentLetter,\
    \ alphabet[newIndex]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpsf1evo33.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsf1evo33.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 4)\
    \ {\n                newIndex = newIndex - 5;\n            }\n            if (char\
    \ === char.toUpperCase()) {\n                encodedMessage += vowels[newIndex].toUpperCase();\n\
    \            } else {\n                encodedMessage += vowels[newIndex];\n \
    \           }\n        } else {\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += char.toLowerCase();\n            } else\
    \ {\n                encodedMessage += char.toUpperCase();\n            }\n  \
    \      }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfk1i5bd1.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfk1i5bd1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else if (currentLetter === currentLetter.toUpperCase()) {\n       \
    \     encodedMessage += alphabet[currentLetterIndex].toUpperCase();\n        }\
    \ else if (vowels.indexOf(currentLetter) !== -1) {\n            encodedMessage\
    \ += alphabet[(currentLetterIndex + 2) % 26];\n        } else {\n            encodedMessage\
    \ += alphabet[currentLetterIndex];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2q02vh9j.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2q02vh9j.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            const index = vowels.indexOf(char.toLowerCase());\n         \
    \   const newIndex = (index + 2) % vowels.length;\n            encodedMessage\
    \ += vowels[newIndex];\n        } else {\n            encodedMessage += char;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfuan7wyy.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfuan7wyy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentChar: string = message[i];\n    \
    \    if (vowels.indexOf(currentChar) !== -1) {\n            let index: number\
    \ = vowels.indexOf(currentChar);\n            let newIndex: number = index + 2;\n\
    \            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n \
    \           }\n            encodedMessage += vowels[newIndex];\n        } else\
    \ {\n            if (currentChar === currentChar.toUpperCase()) {\n          \
    \      encodedMessage += currentChar.toLowerCase();\n            } else {\n  \
    \              encodedMessage += currentChar.toUpperCase();\n            }\n \
    \       }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe9lhl0gy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe9lhl0gy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            encodedMessage += currentLetter.toLowerCase();\n        } else {\n\
    \            encodedMessage += currentLetter.toUpperCase();\n        }\n     \
    \   if (currentLetter === 'a' || currentLetter === 'e' || currentLetter === 'i'\
    \ || currentLetter === 'o' || currentLetter === 'u') {\n            let indexOfLetter:\
    \ number = alphabet.indexOf(currentLetter);\n            encodedMessage += alphabet[indexOfLetter\
    \ + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuvqn6v2l.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuvqn6v2l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1ndumci7.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ndumci7.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result = '';\n    for (let\
    \ i = 0; i < message.length; i++) {\n        let char = message[i];\n        if\
    \ (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n\
    \        } else {\n            result += char.toUpperCase();\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvc1i9d80.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvc1i9d80.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"test\"));\n\
    console.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdqwjsdfs.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdqwjsdfs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex >= vowels.length) {\n  \
    \              newIndex = newIndex - vowels.length;\n            }\n         \
    \   encodedMessage += vowels[newIndex];\n        } else {\n            if (char\
    \ === char.toUpperCase()) {\n                encodedMessage += char.toLowerCase();\n\
    \            } else {\n                encodedMessage += char.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgtx1okp1.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgtx1okp1.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentLetter = message[i];\n        if (vowels.includes(currentLetter))\
    \ {\n            let index = vowels.indexOf(currentLetter);\n            let newIndex\
    \ = index + 2;\n            if (newIndex > 4) {\n                newIndex = newIndex\
    \ - 5;\n            }\n            encodedMessage += vowels[newIndex];\n     \
    \   } else {\n            encodedMessage += currentLetter;\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp56dh8gqx.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp56dh8gqx.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let letter: string = message[i];\n        let letterIndex: number = alphabet.indexOf(letter.toLowerCase());\n\
    \        if (letterIndex === -1) {\n            encodedMessage += letter;\n  \
    \      } else {\n            let isUpperCase: boolean = letter === letter.toUpperCase();\n\
    \            let newLetterIndex: number = letterIndex + 2;\n            if (newLetterIndex\
    \ > alphabet.length - 1) {\n                newLetterIndex -= alphabet.length;\n\
    \            }\n            let newLetter: string = alphabet[newLetterIndex];\n\
    \            if (vowels.indexOf(newLetter) !== -1) {\n                newLetter\
    \ = newLetter.toUpperCase();\n            }\n            if (isUpperCase) {\n\
    \                newLetter = newLetter.toUpperCase();\n            }\n       \
    \     encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpskiav8ln.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpskiav8ln.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let encodedLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex\
    \ -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      encodedLetter = encodedLetter.toUpperCase();\n            }\n         \
    \   encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplpda9e0o.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplpda9e0o.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            encodedMessage += char.toLowerCase();\n        } else {\n       \
    \     encodedMessage += char.toUpperCase();\n        }\n        if (vowels.includes(char))\
    \ {\n            let index = vowels.indexOf(char);\n            encodedMessage\
    \ += vowels[(index + 2) % 5];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzr4nnxpg.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzr4nnxpg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n  \
    \          let index: number = alphabet.indexOf(char.toLowerCase());\n       \
    \     if (index + 2 > alphabet.length - 1) {\n                index = index +\
    \ 2 - alphabet.length;\n            } else {\n                index += 2;\n  \
    \          }\n            encodedMessage += alphabet[index];\n        } else {\n\
    \            if (char === char.toUpperCase()) {\n                encodedMessage\
    \ += char.toLowerCase();\n            } else {\n                encodedMessage\
    \ += char.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpi1hor57a.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi1hor57a.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            index\
    \ += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n\
    \            }\n            encoded += vowels[index];\n        } else {\n    \
    \        encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6hcu9d7z.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6hcu9d7z.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = '';\n \
    \   let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (vowels.includes(char)) {\n            let index: number = alphabet.indexOf(char);\n\
    \            result += alphabet[index + 2];\n        } else if (alphabet.includes(char))\
    \ {\n            let index: number = alphabet.indexOf(char);\n            result\
    \ += alphabet[index + 2];\n        } else {\n            result += char;\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk3u6m23z.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk3u6m23z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % 26].toUpperCase();\n\
    \        } else {\n            encodedMessage += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_2usv3bc.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_2usv3bc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnxvp63ky.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxvp63ky.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase()))\
    \ {\n            encoded += String.fromCharCode(message.charCodeAt(i) + 2);\n\
    \        } else {\n            encoded += String.fromCharCode(message.charCodeAt(i));\n\
    \        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvekghjf3.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvekghjf3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            if (vowels.includes(char))\
    \ {\n                char = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n\
    \            }\n            char = char.toUpperCase();\n        } else {\n   \
    \         if (vowels.includes(char)) {\n                char = vowels[(vowels.indexOf(char)\
    \ + 2) % vowels.length];\n            }\n        }\n        encodedMessage +=\
    \ char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0jy073h1.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jy073h1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels: string[] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let encodedMessage: string = \"\";\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let index:\
    \ number = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n\
    \                encodedMessage += vowels[0];\n            } else {\n        \
    \        encodedMessage += vowels[index + 2];\n            }\n        } else {\n\
    \            if (char === char.toUpperCase()) {\n                encodedMessage\
    \ += char.toLowerCase();\n            } else {\n                encodedMessage\
    \ += char.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz3tva81a.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz3tva81a.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"\
    ));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4m9ah9oz.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4m9ah9oz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpae62e8vu.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpae62e8vu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode:\
    \ number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90)\
    \ {\n            encodedMessage += String.fromCharCode(charCode + 32);\n     \
    \   } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage\
    \ += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage\
    \ += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2ek9ckxm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ek9ckxm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (vowels.indexOf(letter) >= 0) {\n         \
    \   let index: number = alphabet.indexOf(letter);\n            let newIndex: number\
    \ = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex\
    \ - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n  \
    \      } else {\n            if (letter === letter.toUpperCase()) {\n        \
    \        encodedMessage += letter.toLowerCase();\n            } else {\n     \
    \           encodedMessage += letter.toUpperCase();\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzk8m7l5a.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzk8m7l5a.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TgST

    tHkS kS c MgSScGg

    '
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n\
    \        } else {\n            result += char.toUpperCase();\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5bn68hwn.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5bn68hwn.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex > 4) {\n               \
    \ newIndex = newIndex - 5;\n            }\n            encodedMessage += vowels[newIndex];\n\
    \        } else {\n            encodedMessage += char;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq_tzpv4f.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq_tzpv4f.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (letter === letter.toUpperCase()) {\n     \
    \       letter = letter.toLowerCase();\n            encodedMessage += letter;\n\
    \        } else {\n            letter = letter.toUpperCase();\n            encodedMessage\
    \ += letter;\n        }\n        if (vowels.includes(letter)) {\n            let\
    \ index: number = alphabet.indexOf(letter);\n            encodedMessage = encodedMessage.slice(0,\
    \ -1);\n            encodedMessage += alphabet[index + 2];\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpqkir5wn_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqkir5wn_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentChar: string =\
    \ message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            let newCharIndex: number = currentCharIndex + 2;\n\
    \            if (newCharIndex > 25) {\n                newCharIndex -= 26;\n \
    \           }\n            let newChar: string = alphabet[newCharIndex];\n   \
    \         if (currentChar === currentChar.toUpperCase()) {\n                newChar\
    \ = newChar.toUpperCase();\n            }\n            encodedMessage += newChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbo6xe4d7.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbo6xe4d7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        const letter\
    \ = message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n      \
    \      const index = alphabet.indexOf(letter.toLowerCase());\n            encodedMessage\
    \ += alphabet[index + 2];\n        } else {\n            encodedMessage += letter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5g7_ec1_.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5g7_ec1_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n  \
    \          let currentIndex: number = alphabet.indexOf(currentChar);\n       \
    \     let newIndex: number = currentIndex + 2;\n            if (newIndex > 25)\
    \ {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage\
    \ += alphabet[newIndex];\n        } else if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_v3ohpz0.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_v3ohpz0.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        if (letter === letter.toUpperCase()) {\n            encodedMessage +=\
    \ letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (alphabet.indexOf(letter) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            if (index + 2 > alphabet.length\
    \ - 1) {\n                encodedMessage += alphabet[index + 2 - alphabet.length];\n\
    \            } else {\n                encodedMessage += alphabet[index + 2];\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppyh2njcm.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppyh2njcm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n\
    \        } else {\n            result += char.toUpperCase();\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp31hezki4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp31hezki4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4yfd6bf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4yfd6bf7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \            encodedMessage += char;\n        } else {\n            char = char.toUpperCase();\n\
    \            encodedMessage += char;\n        }\n        if (alphabet.indexOf(char)\
    \ !== -1) {\n            let index: number = alphabet.indexOf(char);\n       \
    \     index += 2;\n            if (index > 25) {\n                index -= 26;\n\
    \            }\n            encodedMessage += alphabet[index];\n        }\n  \
    \  }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tvegsutv'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjj955j92.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjj955j92.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tvegsutv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encoded += char;\n    }\n    return encoded;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpq1lj7aou.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq1lj7aou.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char = message[i];\n        let charCode = char.charCodeAt(0);\n\
    \        if (charCode >= 65 && charCode <= 90) {\n            charCode += 32;\n\
    \        } else if (charCode >= 97 && charCode <= 122) {\n            charCode\
    \ -= 32;\n        }\n        if (vowels.indexOf(char) !== -1) {\n            charCode\
    \ += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n\
    \            }\n        }\n        encodedMessage += String.fromCharCode(charCode);\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_hk36ltj.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_hk36ltj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        let index: number = alphabet.indexOf(letter.toLowerCase());\n       \
    \ if (index === -1) {\n            encodedMessage += letter;\n        } else {\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 25)\
    \ {\n                newIndex -= 26;\n            }\n            let newLetter:\
    \ string = alphabet[newIndex];\n            if (letter === letter.toUpperCase())\
    \ {\n                newLetter = newLetter.toUpperCase();\n            }\n   \
    \         encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph0ggxnk1.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph0ggxnk1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let currentLetter: string = message[i];\n        let currentLetterIndex:\
    \ number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex\
    \ === -1) {\n            encodedMessage += currentLetter;\n        } else {\n\
    \            let newLetterIndex: number = currentLetterIndex + 2;\n          \
    \  if (newLetterIndex > 25) {\n                newLetterIndex -= 26;\n       \
    \     }\n            let newLetter: string = alphabet[newLetterIndex];\n     \
    \       if (vowels.indexOf(newLetter) !== -1) {\n                newLetter = newLetter.toUpperCase();\n\
    \            }\n            encodedMessage += newLetter;\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_aikg5in.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_aikg5in.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = '';\n \
    \   for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char == char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char == 'a') {\n            char = 'c';\n        } else if (char == 'e')\
    \ {\n            char = 'g';\n        } else if (char == 'i') {\n            char\
    \ = 'k';\n        } else if (char == 'o') {\n            char = 'q';\n       \
    \ } else if (char == 'u') {\n            char = 'y';\n        }\n        result\
    \ += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpd65eymvh.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd65eymvh.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let currentLetterIndex: number = alphabet.indexOf(currentLetter);\n\
    \            let newLetterIndex: number = (currentLetterIndex + 2) % alphabet.length;\n\
    \            let newLetter: string = alphabet[newLetterIndex];\n            encodedMessage\
    \ += newLetter;\n        } else {\n            encodedMessage += currentLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8y6wtoqk.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8y6wtoqk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (char === char.toUpperCase()) {\n     \
    \       char = char.toLowerCase();\n            encoded += char;\n        } else\
    \ if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            encoded += char;\n        }\n        if (vowels.includes(char)) {\n\
    \            let index = vowels.indexOf(char);\n            if (index === 4) {\n\
    \                encoded += vowels[0];\n            } else {\n               \
    \ encoded += vowels[index + 2];\n            }\n        }\n    }\n    return encoded;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxjj7ojca.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxjj7ojca.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let encodedMessage = \"\";\n    for (let i = 0; i\
    \ < message.length; i++) {\n        const currentLetter = message[i];\n      \
    \  if (vowels.includes(currentLetter.toLowerCase())) {\n            const indexOfVowel\
    \ = vowels.indexOf(currentLetter.toLowerCase());\n            const nextVowel\
    \ = vowels[(indexOfVowel + 2) % vowels.length];\n            encodedMessage +=\
    \ nextVowel;\n        } else {\n            encodedMessage += currentLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp858p_bvw.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp858p_bvw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpxksns6h0.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxksns6h0.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = \"aeiou\";\n\
    \    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n    \
    \    const char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            const index = vowels.indexOf(char.toLowerCase());\n         \
    \   const newIndex = (index + 2) % vowels.length;\n            result += vowels[newIndex];\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpktk6tlas.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpktk6tlas.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n  \
    \          let index: number = alphabet.indexOf(currentChar);\n            encodedMessage\
    \ += alphabet[index + 2];\n        } else {\n            encodedMessage += currentChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpakb72cy0.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpakb72cy0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349012
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let char = message[i];\n   \
    \     if (char == char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char == \"a\") {\n            char = \"c\";\n        } else if (char ==\
    \ \"e\") {\n            char = \"g\";\n        } else if (char == \"i\") {\n \
    \           char = \"k\";\n        } else if (char == \"o\") {\n            char\
    \ = \"q\";\n        } else if (char == \"u\") {\n            char = \"y\";\n \
    \       }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpudm9qxlc.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpudm9qxlc.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentLetter: string = message[i];\n  \
    \      if (vowels.indexOf(currentLetter) !== -1) {\n            let nextLetter:\
    \ string = message[i + 1];\n            let nextNextLetter: string = message[i\
    \ + 2];\n            if (nextLetter === undefined) {\n                encodedMessage\
    \ += nextNextLetter;\n            } else if (nextNextLetter === undefined) {\n\
    \                encodedMessage += nextLetter;\n            } else {\n       \
    \         encodedMessage += nextNextLetter;\n            }\n        } else {\n\
    \            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq2_okjli.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq2_okjli.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"\
    ));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxvr2skxk.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxvr2skxk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode:\
    \ number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90)\
    \ {\n            encodedMessage += String.fromCharCode(charCode + 32);\n     \
    \   } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage\
    \ += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage\
    \ += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2ek9ckxm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ek9ckxm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newIndex = (index + 2) % 5;\n            if (char === char.toUpperCase()) {\n\
    \                encoded += vowels[newIndex].toUpperCase();\n            } else\
    \ {\n                encoded += vowels[newIndex];\n            }\n        } else\
    \ {\n            if (char === char.toUpperCase()) {\n                encoded +=\
    \ char.toLowerCase();\n            } else {\n                encoded += char.toUpperCase();\n\
    \            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeuxnu3vr.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeuxnu3vr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let newLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (newLetterIndex > 25) {\n                newLetterIndex\
    \ -= 26;\n            }\n            let newLetter: string = alphabet[newLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      newLetter = newLetter.toUpperCase();\n            }\n            encodedMessage\
    \ += newLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp94z2va7x.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp94z2va7x.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  const vowels = \"aeiou\";\n  const\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let result = \"\";\n  for (let\
    \ i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase()))\
    \ {\n      const index = alphabet.indexOf(char.toLowerCase());\n      const newChar\
    \ = alphabet[index + 2];\n      result += newChar;\n    } else {\n      result\
    \ += char;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk8zwpvto.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk8zwpvto.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += char;\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6zwaunqu.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6zwaunqu.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let encodedLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex\
    \ -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      encodedLetter = encodedLetter.toUpperCase();\n            }\n         \
    \   encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplpda9e0o.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplpda9e0o.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            encoded\
    \ += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i]\
    \ === message[i].toUpperCase()) {\n            encoded += message[i].toLowerCase();\n\
    \        } else {\n            encoded += message[i].toUpperCase();\n        }\n\
    \    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprn6uomql.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprn6uomql.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let indexOfVowel: number = vowels.indexOf(currentLetter);\n     \
    \       let nextVowel: string = vowels[(indexOfVowel + 2) % 5];\n            encodedMessage\
    \ += nextVowel;\n        } else if (alphabet.indexOf(currentLetter) !== -1) {\n\
    \            let indexOfLetter: number = alphabet.indexOf(currentLetter);\n  \
    \          let nextLetter: string = alphabet[(indexOfLetter + 2) % 26];\n    \
    \        encodedMessage += nextLetter;\n        } else {\n            encodedMessage\
    \ += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp90zws7bl.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp90zws7bl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n        if\
    \ (vowels.includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.replace(encodedMessage[i],\
    \ vowels[(vowels.indexOf(encodedMessage[i]) + 2) % 5]);\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk5qmt2x0.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk5qmt2x0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            encodedMessage += alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % alphabet.length].toUpperCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn14r2xh6.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn14r2xh6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkrm165i7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkrm165i7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n      \
    \  let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newIndex = (index + 2) % 5;\n            result += vowels[newIndex].toUpperCase();\n\
    \        } else {\n            result += char.toUpperCase();\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwttdxn0l.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwttdxn0l.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpedzz2t9f.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpedzz2t9f.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode:\
    \ number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90)\
    \ {\n            charCode += 32;\n        } else if (charCode >= 97 && charCode\
    \ <= 122) {\n            charCode -= 32;\n        }\n        if (charCode ===\
    \ 97) {\n            charCode = 99;\n        } else if (charCode === 101) {\n\
    \            charCode = 103;\n        } else if (charCode === 105) {\n       \
    \     charCode = 107;\n        } else if (charCode === 111) {\n            charCode\
    \ = 113;\n        } else if (charCode === 117) {\n            charCode = 119;\n\
    \        }\n        encodedMessage += String.fromCharCode(charCode);\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpbb2fer8d.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbb2fer8d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const currentLetter = message[i];\n    if (vowels.includes(currentLetter.toLowerCase()))\
    \ {\n      const indexOfVowel = vowels.indexOf(currentLetter.toLowerCase());\n\
    \      const nextVowel = vowels[(indexOfVowel + 2) % vowels.length];\n      encodedMessage\
    \ += currentLetter.toUpperCase() === currentLetter ? nextVowel.toUpperCase() :\
    \ nextVowel;\n    } else {\n      encodedMessage += currentLetter.toUpperCase()\
    \ === currentLetter ? currentLetter.toLowerCase() : currentLetter.toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9eabsf_p.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9eabsf_p.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex > 4) {\n               \
    \ newIndex = newIndex - 5;\n            }\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += vowels[newIndex].toUpperCase();\n     \
    \       } else {\n                encodedMessage += vowels[newIndex];\n      \
    \      }\n        } else {\n            if (char === char.toUpperCase()) {\n \
    \               encodedMessage += char.toLowerCase();\n            } else {\n\
    \                encodedMessage += char.toUpperCase();\n            }\n      \
    \  }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiue2ljfv.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiue2ljfv.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char.toLowerCase() == \"a\") {\n            encoded += \"c\";\n \
    \       } else if (char.toLowerCase() == \"e\") {\n            encoded += \"g\"\
    ;\n        } else if (char.toLowerCase() == \"i\") {\n            encoded += \"\
    k\";\n        } else if (char.toLowerCase() == \"o\") {\n            encoded +=\
    \ \"q\";\n        } else if (char.toLowerCase() == \"u\") {\n            encoded\
    \ += \"y\";\n        } else if (char.toLowerCase() == char) {\n            encoded\
    \ += char.toUpperCase();\n        } else {\n            encoded += char.toLowerCase();\n\
    \        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpozsflbd1.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpozsflbd1.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let currentIndex: number = alphabet.indexOf(currentLetter);\n   \
    \         let newIndex: number = currentIndex + 2;\n            if (newIndex >\
    \ 25) {\n                newIndex = newIndex - 26;\n            }\n          \
    \  encodedMessage += alphabet[newIndex];\n        } else if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1skncyul.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1skncyul.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentLetter: string = message[i];\n  \
    \      if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel:\
    \ number = vowels.indexOf(currentLetter);\n            let nextVowel: string =\
    \ vowels[(indexOfVowel + 2) % 5];\n            encodedMessage += nextVowel;\n\
    \        } else {\n            encodedMessage += currentLetter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp21af4k51.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp21af4k51.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4yfd6bf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4yfd6bf7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8a9l72kx.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8a9l72kx.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349019
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newIndex = (index + 2) % 5;\n            encoded += vowels[newIndex];\n    \
    \    } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk01w6f4o.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk01w6f4o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        let index: number = alphabet.indexOf(letter.toLowerCase());\n       \
    \ if (index === -1) {\n            encodedMessage += letter;\n        } else {\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 25)\
    \ {\n                newIndex -= 26;\n            }\n            let newLetter:\
    \ string = alphabet[newIndex];\n            if (letter === letter.toUpperCase())\
    \ {\n                newLetter = newLetter.toUpperCase();\n            }\n   \
    \         encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph0ggxnk1.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph0ggxnk1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentChar: string =\
    \ message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n    \
    \        encodedMessage += currentChar.toLowerCase();\n        } else {\n    \
    \        encodedMessage += currentChar.toUpperCase();\n        }\n        if (currentChar\
    \ === \"a\" || currentChar === \"e\" || currentChar === \"i\" || currentChar ===\
    \ \"o\" || currentChar === \"u\") {\n            let indexOfVowel: number = alphabet.indexOf(currentChar);\n\
    \            encodedMessage += alphabet[indexOfVowel + 2];\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5i_3m0d0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5i_3m0d0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349019
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode:\
    \ number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90)\
    \ {\n            encodedMessage += String.fromCharCode(charCode + 32);\n     \
    \   } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage\
    \ += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage\
    \ += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2ek9ckxm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ek9ckxm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n        \
    \    let index: number = vowels.indexOf(char.toLowerCase());\n            if (index\
    \ + 2 > 4) {\n                index = (index + 2) % 5;\n            } else {\n\
    \                index += 2;\n            }\n            char = vowels[index];\n\
    \        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6imzcm7g.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6imzcm7g.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let result: string = \"\";\n \
    \ let vowels: string = \"aeiou\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i: number = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i])\
    \ !== -1) {\n      result += alphabet[(alphabet.indexOf(message[i]) + 2) % 26];\n\
    \    } else if (message[i] === message[i].toUpperCase()) {\n      result += alphabet[alphabet.indexOf(message[i].toLowerCase())].toUpperCase();\n\
    \    } else {\n      result += alphabet[alphabet.indexOf(message[i])];\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpixom4i_w.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpixom4i_w.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4yfd6bf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4yfd6bf7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i])\
    \ !== -1) {\n            let index: number = alphabet.indexOf(message[i]);\n \
    \           encodedMessage += alphabet[index + 2];\n        } else {\n       \
    \     encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfccwby5r.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfccwby5r.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        const currentLetter = message[i];\n        const currentLetterIndex\
    \ = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex\
    \ === -1) {\n            encodedMessage += currentLetter;\n        } else if (vowels.includes(currentLetter.toLowerCase()))\
    \ {\n            const nextVowelIndex = (currentLetterIndex + 2) % alphabet.length;\n\
    \            const nextVowel = alphabet[nextVowelIndex];\n            encodedMessage\
    \ += currentLetter.toUpperCase() === currentLetter ? nextVowel.toUpperCase() :\
    \ nextVowel;\n        } else {\n            encodedMessage += currentLetter.toUpperCase()\
    \ === currentLetter ? alphabet[currentLetterIndex].toUpperCase() : alphabet[currentLetterIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkwq570ov.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkwq570ov.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let encoded = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex > 4) {\n               \
    \ newIndex = newIndex - 5;\n            }\n            if (char === char.toUpperCase())\
    \ {\n                encoded += vowels[newIndex].toUpperCase();\n            }\
    \ else {\n                encoded += vowels[newIndex];\n            }\n      \
    \  } else {\n            if (char === char.toUpperCase()) {\n                encoded\
    \ += char.toLowerCase();\n            } else {\n                encoded += char.toUpperCase();\n\
    \            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwdvql4uf.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwdvql4uf.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4yfd6bf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4yfd6bf7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let letter = message[i];\n        if (vowels.includes(letter)) {\n       \
    \     let index = vowels.indexOf(letter);\n            let newIndex = (index +\
    \ 2) % vowels.length;\n            encoded += vowels[newIndex];\n        } else\
    \ if (letter === letter.toUpperCase()) {\n            encoded += letter.toLowerCase();\n\
    \        } else {\n            encoded += letter.toUpperCase();\n        }\n \
    \   }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd6kppd5q.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd6kppd5q.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let char = message[i];\n   \
    \     if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n\
    \        } else {\n            encoded += char.toUpperCase();\n        }\n   \
    \ }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1s7hj40f.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1s7hj40f.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n   \
    \ if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1ndumci7.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ndumci7.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            let\
    \ index: number = alphabet.indexOf(encodedMessage[i]);\n            encodedMessage\
    \ = encodedMessage.slice(0, i) + alphabet[index + 2] + encodedMessage.slice(i\
    \ + 1);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpxdfpt5ic.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxdfpt5ic.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let alphabetUpper: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i])\
    \ !== -1) {\n            if (message[i] === \"u\") {\n                encodedMessage\
    \ += \"a\";\n            } else if (message[i] === \"U\") {\n                encodedMessage\
    \ += \"A\";\n            } else {\n                encodedMessage += alphabet[alphabet.indexOf(message[i])\
    \ + 2];\n            }\n        } else if (alphabet.indexOf(message[i]) !== -1)\
    \ {\n            encodedMessage += alphabetUpper[alphabet.indexOf(message[i])];\n\
    \        } else if (alphabetUpper.indexOf(message[i]) !== -1) {\n            encodedMessage\
    \ += alphabet[alphabetUpper.indexOf(message[i])];\n        } else {\n        \
    \    encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpku0oh42y.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpku0oh42y.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n       \
    \     let index: number = alphabet.indexOf(letter);\n            let newIndex:\
    \ number = index + 2;\n            if (newIndex > 25) {\n                newIndex\
    \ = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        } else if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptanl5voa.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptanl5voa.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ let vowels = \"aeiou\";\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ currentChar = message[i];\n    if (vowels.includes(currentChar.toLowerCase()))\
    \ {\n      let index = vowels.indexOf(currentChar.toLowerCase());\n      let newIndex\
    \ = index + 2;\n      if (newIndex > 4) {\n        newIndex = newIndex - 5;\n\
    \      }\n      if (currentChar === currentChar.toUpperCase()) {\n        encodedMessage\
    \ += vowels[newIndex].toUpperCase();\n      } else {\n        encodedMessage +=\
    \ vowels[newIndex];\n      }\n    } else {\n      if (currentChar === currentChar.toUpperCase())\
    \ {\n        encodedMessage += currentChar.toLowerCase();\n      } else {\n  \
    \      encodedMessage += currentChar.toUpperCase();\n      }\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppbntzcdp.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppbntzcdp.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        let charCode: number\
    \ = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n   \
    \         result += String.fromCharCode(charCode + 32);\n        } else if (charCode\
    \ >= 97 && charCode <= 122) {\n            result += String.fromCharCode(charCode\
    \ - 32);\n        } else {\n            result += char;\n        }\n    }\n  \
    \  for (let i: number = 0; i < result.length; i++) {\n        let char: string\
    \ = result[i];\n        let charCode: number = char.charCodeAt(0);\n        if\
    \ (vowels.indexOf(char) !== -1) {\n            if (charCode === 97) {\n      \
    \          result = result.replace(char, \"c\");\n            } else if (charCode\
    \ === 101) {\n                result = result.replace(char, \"f\");\n        \
    \    } else if (charCode === 105) {\n                result = result.replace(char,\
    \ \"k\");\n            } else if (charCode === 111) {\n                result\
    \ = result.replace(char, \"r\");\n            } else if (charCode === 117) {\n\
    \                result = result.replace(char, \"w\");\n            } else {\n\
    \                result = result.replace(char, String.fromCharCode(charCode +\
    \ 2));\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tfst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsjrp3_a6.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsjrp3_a6.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tfst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentLetter = message[i];\n        if (vowels.includes(currentLetter))\
    \ {\n            let index = vowels.indexOf(currentLetter);\n            let newIndex\
    \ = (index + 2) % 5;\n            encodedMessage += vowels[newIndex];\n      \
    \  } else {\n            encodedMessage += currentLetter;\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9xwgwax9.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xwgwax9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === 'a' || char === 'A') {\n            encodedMessage +=\
    \ 'c';\n        } else if (char === 'e' || char === 'E') {\n            encodedMessage\
    \ += 'g';\n        } else if (char === 'i' || char === 'I') {\n            encodedMessage\
    \ += 'k';\n        } else if (char === 'o' || char === 'O') {\n            encodedMessage\
    \ += 'q';\n        } else if (char === 'u' || char === 'U') {\n            encodedMessage\
    \ += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq9vt4tai.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq9vt4tai.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n  \
    \          let index: number = alphabet.indexOf(currentChar);\n            result\
    \ += alphabet[index + 2];\n        } else {\n            result += currentChar;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9400qtzn.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9400qtzn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349021
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnxvp63ky.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxvp63ky.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \            result += char;\n        } else {\n            char = char.toUpperCase();\n\
    \            result += char;\n        }\n        if (vowels.includes(char)) {\n\
    \            let index: number = vowels.indexOf(char);\n            if (index\
    \ === 4) {\n                result = result.substring(0, result.length - 1) +\
    \ vowels[0];\n            } else {\n                result = result.substring(0,\
    \ result.length - 1) + vowels[index + 2];\n            }\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq2podg7d.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq2podg7d.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char == char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char == \"a\") {\n            char = \"c\";\n        } else if (char ==\
    \ \"e\") {\n            char = \"g\";\n        } else if (char == \"i\") {\n \
    \           char = \"k\";\n        } else if (char == \"o\") {\n            char\
    \ = \"q\";\n        } else if (char == \"u\") {\n            char = \"y\";\n \
    \       }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpemf4p8y8.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpemf4p8y8.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349021
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            let\
    \ newIndex = (index + 2) % 5;\n            encoded += vowels[newIndex];\n    \
    \    } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk01w6f4o.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk01w6f4o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (vowels.includes(char))\
    \ {\n            let index = vowels.indexOf(char);\n            encodedMessage\
    \ += vowels[(index + 2) % 5];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdanzkddi.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdanzkddi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            encodedMessage += char;\n\
    \        } else if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            encodedMessage += char;\n        }\n        if (vowels.includes(char))\
    \ {\n            let index: number = alphabet.indexOf(char);\n            let\
    \ newIndex: number = index + 2;\n            if (newIndex > 25) {\n          \
    \      newIndex = newIndex - 26;\n            }\n            encodedMessage +=\
    \ alphabet[newIndex];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5t5vq4n3.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5t5vq4n3.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349021
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let nextIndex = index + 2;\n            if (nextIndex > 4) {\n             \
    \   nextIndex = nextIndex - 5;\n            }\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += vowels[nextIndex].toUpperCase();\n    \
    \        } else {\n                encodedMessage += vowels[nextIndex];\n    \
    \        }\n        } else {\n            if (char === char.toUpperCase()) {\n\
    \                encodedMessage += char.toLowerCase();\n            } else {\n\
    \                encodedMessage += char.toUpperCase();\n            }\n      \
    \  }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdei36r0y.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdei36r0y.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentLetter: string = message[i];\n  \
    \      if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfLetter:\
    \ number = vowels.indexOf(currentLetter);\n            let newIndex: number =\
    \ indexOfLetter + 2;\n            if (newIndex > 4) {\n                newIndex\
    \ = newIndex - 5;\n            }\n            encodedMessage += vowels[newIndex];\n\
    \        } else {\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedMessage += currentLetter.toLowerCase();\n        \
    \    } else {\n                encodedMessage += currentLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt8ucss4x.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt8ucss4x.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            encodedMessage += currentLetter.toLowerCase();\n        } else {\n\
    \            encodedMessage += currentLetter.toUpperCase();\n        }\n     \
    \   if (alphabet.indexOf(currentLetter) !== -1) {\n            let index: number\
    \ = alphabet.indexOf(currentLetter);\n            if (index === 25) {\n      \
    \          encodedMessage += alphabet[1];\n            } else if (index === 24)\
    \ {\n                encodedMessage += alphabet[0];\n            } else {\n  \
    \              encodedMessage += alphabet[index + 2];\n            }\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk0x8pkix.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk0x8pkix.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349026
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    const vowels = 'aeiou';\n  \
    \  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n\
    \    for (let i = 0; i < message.length; i++) {\n        const currentLetter =\
    \ message[i];\n        if (vowels.includes(currentLetter)) {\n            const\
    \ index = alphabet.indexOf(currentLetter);\n            const newIndex = (index\
    \ + 2) % alphabet.length;\n            encodedMessage += alphabet[newIndex];\n\
    \        } else {\n            encodedMessage += currentLetter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\nconst encodedMessage = encode('test');\n\
    console.log(encodedMessage);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2jzonzis.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2jzonzis.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tgst

    '
  timestamp: 1660349026
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = '';\n \
    \   let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        let nextLetterIndex: number = currentLetterIndex + 2;\n        if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n            if (vowels.indexOf(currentLetter.toLowerCase())\
    \ !== -1) {\n                result += alphabet[nextLetterIndex].toUpperCase();\n\
    \            } else {\n                result += alphabet[nextLetterIndex].toUpperCase();\n\
    \            }\n        } else {\n            if (vowels.indexOf(currentLetter)\
    \ !== -1) {\n                result += alphabet[nextLetterIndex];\n          \
    \  } else {\n                result += alphabet[nextLetterIndex];\n          \
    \  }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnyxvckw0.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyxvckw0.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349026
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === 'a') {\n            char = 'c';\n        } else\
    \ if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i')\
    \ {\n            char = 'k';\n        } else if (char === 'o') {\n           \
    \ char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n \
    \       }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp2b4ntll7.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2b4ntll7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349026
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    let currentChar = message[i];\n\
    \    if (currentChar === currentChar.toUpperCase()) {\n      currentChar = currentChar.toLowerCase();\n\
    \    } else {\n      currentChar = currentChar.toUpperCase();\n    }\n    if (currentChar\
    \ === \"a\") {\n      currentChar = \"c\";\n    } else if (currentChar === \"\
    e\") {\n      currentChar = \"g\";\n    } else if (currentChar === \"i\") {\n\
    \      currentChar = \"k\";\n    } else if (currentChar === \"o\") {\n      currentChar\
    \ = \"q\";\n    } else if (currentChar === \"u\") {\n      currentChar = \"y\"\
    ;\n    }\n    encodedMessage += currentChar;\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpophprzki.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpophprzki.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let currentChar: string = message[i];\n        let currentCharIndex:\
    \ number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex\
    \ === -1) {\n            encodedMessage += currentChar;\n        } else {\n  \
    \          let newCharIndex: number = currentCharIndex + 2;\n            if (newCharIndex\
    \ > alphabet.length - 1) {\n                newCharIndex -= alphabet.length;\n\
    \            }\n            let newChar: string = alphabet[newCharIndex];\n  \
    \          if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n         \
    \       newChar = newChar.toUpperCase();\n            }\n            encodedMessage\
    \ += newChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vGuv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1matnkcs.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1matnkcs.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vGuv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n \
    \ let vowels = \"aeiou\";\n  for (let i = 0; i < message.length; i++) {\n    if\
    \ (vowels.includes(message[i].toLowerCase())) {\n      encodedMessage +=\n   \
    \     vowels[(vowels.indexOf(message[i].toLowerCase()) + 2) % 5];\n    } else\
    \ {\n      encodedMessage += message[i];\n    }\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp17qhxbj8.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp17qhxbj8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            result += message[i].toLowerCase();\n\
    \        } else {\n            result += message[i].toUpperCase();\n        }\n\
    \        if (vowels.includes(result[i])) {\n            let index: number = alphabet.indexOf(result[i]);\n\
    \            result = result.slice(0, i) + alphabet[index + 2] + result.slice(i\
    \ + 1);\n        }\n    }\n    return result;\n}\nconsole.log(encode(\"This is\
    \ a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpilhwmt4j.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpilhwmt4j.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tHIS IS A MESSAGE

    '
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentChar: string =\
    \ message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            let encodedCharIndex: number = currentCharIndex\
    \ + 2;\n            if (encodedCharIndex > 25) {\n                encodedCharIndex\
    \ -= 26;\n            }\n            let encodedChar: string = alphabet[encodedCharIndex];\n\
    \            if (currentChar === currentChar.toUpperCase()) {\n              \
    \  encodedChar = encodedChar.toUpperCase();\n            }\n            encodedMessage\
    \ += encodedChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy08gf3h1.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy08gf3h1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage\
    \ = encodedMessage.slice(0, i) + vowels[(vowels.indexOf(encodedMessage[i]) + 2)\
    \ % 5] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp29f4iww9.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp29f4iww9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels: string[] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let encodedMessage: string = \"\";\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (vowels.includes(char.toLowerCase())) {\n            let index:\
    \ number = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n\
    \                encodedMessage += vowels[0];\n            } else {\n        \
    \        encodedMessage += vowels[index + 2];\n            }\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8opsbupx.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8opsbupx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let encoded: string = \"\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let letter: string = message[i];\n        let index: number\
    \ = alphabet.indexOf(letter.toLowerCase());\n        if (index === -1) {\n   \
    \         encoded += letter;\n        } else {\n            let newIndex: number\
    \ = index + 2;\n            if (newIndex > alphabet.length - 1) {\n          \
    \      newIndex -= alphabet.length;\n            }\n            let newLetter:\
    \ string = alphabet[newIndex];\n            if (letter === letter.toUpperCase())\
    \ {\n                newLetter = newLetter.toUpperCase();\n            }\n   \
    \         encoded += newLetter;\n        }\n    }\n    return encoded;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq4ciggvt.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq4ciggvt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (alphabet.indexOf(char) !== -1) {\n            let index: number\
    \ = alphabet.indexOf(char);\n            let newIndex: number = index + 2;\n \
    \           if (newIndex > alphabet.length - 1) {\n                newIndex =\
    \ newIndex - alphabet.length;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0enopcbt.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0enopcbt.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) > -1) {\n  \
    \          let indexOfVowel: number = vowels.indexOf(currentLetter);\n       \
    \     let indexOfEncodedVowel: number = (indexOfVowel + 2) % 5;\n            encodedMessage\
    \ += vowels[indexOfEncodedVowel];\n        } else if (alphabet.indexOf(currentLetter)\
    \ > -1) {\n            let indexOfLetter: number = alphabet.indexOf(currentLetter);\n\
    \            let indexOfEncodedLetter: number = (indexOfLetter + 2) % 26;\n  \
    \          encodedMessage += alphabet[indexOfEncodedLetter];\n        } else {\n\
    \            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnxtkah0v.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxtkah0v.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (vowels.indexOf(letter) != -1) {\n        \
    \    let index: number = alphabet.indexOf(letter);\n            let nextLetter:\
    \ string = alphabet[index + 2];\n            encodedMessage += nextLetter;\n \
    \       } else {\n            encodedMessage += letter;\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsjg9yj46.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsjg9yj46.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentChar: string = message[i];\n    \
    \    if (vowels.indexOf(currentChar) !== -1) {\n            let index: number\
    \ = vowels.indexOf(currentChar);\n            let newIndex: number = index + 2;\n\
    \            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n \
    \           }\n            encodedMessage += vowels[newIndex];\n        } else\
    \ if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage\
    \ += currentChar.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe82ajw6h.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe82ajw6h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            result += char;\n   \
    \     } else {\n            char = char.toUpperCase();\n            result +=\
    \ char;\n        }\n        if (vowels.indexOf(char) !== -1) {\n            let\
    \ index: number = vowels.indexOf(char);\n            result = result.slice(0,\
    \ -1);\n            result += vowels[(index + 2) % 5];\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr4q39zi9.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr4q39zi9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encoded += message[i].toLowerCase();\n\
    \        } else {\n            encoded += message[i].toUpperCase();\n        }\n\
    \        if (vowels.includes(encoded[i])) {\n            encoded = encoded.slice(0,\
    \ i) + alphabet[alphabet.indexOf(encoded[i]) + 2] + encoded.slice(i + 1);\n  \
    \      }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp9yf3vsqh.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9yf3vsqh.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let encodedMessage = \"\";\n    for (let i = 0; i\
    \ < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex > 4) {\n               \
    \ newIndex = newIndex - 5;\n            }\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += vowels[newIndex].toUpperCase();\n     \
    \       } else {\n                encodedMessage += vowels[newIndex];\n      \
    \      }\n        } else {\n            if (char === char.toUpperCase()) {\n \
    \               encodedMessage += char.toLowerCase();\n            } else {\n\
    \                encodedMessage += char.toUpperCase();\n            }\n      \
    \  }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptmb8emus.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptmb8emus.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char.match(/[a-z]/i)) {\n            if (char === char.toUpperCase())\
    \ {\n                char = char.toLowerCase();\n            } else {\n      \
    \          char = char.toUpperCase();\n            }\n            if (char ===\
    \ \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\"\
    ) {\n                let code = char.charCodeAt(0);\n                char = String.fromCharCode(code\
    \ + 2);\n            }\n        }\n        result += char;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpw17botsn.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw17botsn.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            encodedMessage += alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmputa3n3ni.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmputa3n3ni.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else if (currentLetter === currentLetter.toUpperCase()) {\n       \
    \     encodedMessage += alphabet[currentLetterIndex].toUpperCase();\n        }\
    \ else if (vowels.indexOf(currentLetter) !== -1) {\n            encodedMessage\
    \ += alphabet[(currentLetterIndex + 2) % 26];\n        } else {\n            encodedMessage\
    \ += alphabet[currentLetterIndex];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2q02vh9j.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2q02vh9j.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348999
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        let index: number = alphabet.indexOf(letter.toLowerCase());\n       \
    \ if (index === -1) {\n            encodedMessage += letter;\n        } else {\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 25)\
    \ {\n                newIndex -= 26;\n            }\n            let newLetter:\
    \ string = alphabet[newIndex];\n            if (letter === letter.toUpperCase())\
    \ {\n                newLetter = newLetter.toUpperCase();\n            }\n   \
    \         encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph0ggxnk1.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph0ggxnk1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char.match(/[a-z]/i)) {\n            let charCode: number = char.charCodeAt(0);\n\
    \            let newCharCode: number = charCode + 2;\n            if (charCode\
    \ >= 65 && charCode <= 90) {\n                if (newCharCode > 90) {\n      \
    \              newCharCode = newCharCode - 26;\n                }\n          \
    \  } else if (charCode >= 97 && charCode <= 122) {\n                if (newCharCode\
    \ > 122) {\n                    newCharCode = newCharCode - 26;\n            \
    \    }\n            }\n            result += String.fromCharCode(newCharCode);\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe0cgrn0p.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe0cgrn0p.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (char === char.toUpperCase()) {\n     \
    \       char = char.toLowerCase();\n            encoded += char;\n        } else\
    \ if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            encoded += char;\n        }\n        if (vowels.includes(char)) {\n\
    \            let index = vowels.indexOf(char);\n            let newIndex = index\
    \ + 2;\n            if (newIndex > 4) {\n                newIndex = newIndex -\
    \ 5;\n            }\n            encoded += vowels[newIndex];\n        }\n   \
    \ }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjfwanlq3.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjfwanlq3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n    \
    \        encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter\
    \ === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter\
    \ === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n   \
    \     } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage\
    \ += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp86w4iq90.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp86w4iq90.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n    \
    \        encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter\
    \ === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter\
    \ === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n   \
    \     } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage\
    \ += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp86w4iq90.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp86w4iq90.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This\
    \ is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpujynewbp.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpujynewbp.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349031
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentLetter: string = message[i];\n  \
    \      if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel:\
    \ number = vowels.indexOf(currentLetter);\n            let nextVowel: string =\
    \ vowels[(indexOfVowel + 2) % 5];\n            encodedMessage += nextVowel;\n\
    \        } else {\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedMessage += currentLetter.toLowerCase();\n        \
    \    } else {\n                encodedMessage += currentLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnu23cpg2.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnu23cpg2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349032
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n\
    \        }\n        if (char === \"a\") {\n            char = \"c\";\n       \
    \ } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char\
    \ === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\")\
    \ {\n            char = \"q\";\n        } else if (char === \"u\") {\n       \
    \     char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpung5s0xw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpung5s0xw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n \
    \           encodedMessage += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n\
    \        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage\
    \ += message[i].toLowerCase();\n        } else {\n            encodedMessage +=\
    \ message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0dacmmug.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dacmmug.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349032
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        let charIndex: number = alphabet.indexOf(char.toLowerCase());\n     \
    \   if (charIndex > -1) {\n            let encodedChar: string = alphabet[(charIndex\
    \ + 2) % alphabet.length];\n            encodedMessage += char.toUpperCase() ===\
    \ char ? encodedChar.toUpperCase() : encodedChar;\n        } else {\n        \
    \    encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8hxq6xz7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8hxq6xz7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            encodedMessage += char;\n\
    \        } else if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            encodedMessage += char;\n        }\n        for (let j: number =\
    \ 0; j < vowels.length; j++) {\n            if (char === vowels[j]) {\n      \
    \          encodedMessage += alphabet[j + 2];\n            }\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tedst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp0o3k7gh.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp0o3k7gh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tedst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let newMessage: string = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] ===\
    \ message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n    }\n    return newMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfi2138gy.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfi2138gy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n \
    \       let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            letter = letter.toLowerCase();\n            let index = alphabet.indexOf(letter);\n\
    \            let newLetter = alphabet[(index + 2) % alphabet.length];\n      \
    \      encoded += newLetter.toUpperCase();\n        } else {\n            let\
    \ index = alphabet.indexOf(letter);\n            let newLetter = alphabet[(index\
    \ + 2) % alphabet.length];\n            encoded += newLetter;\n        }\n   \
    \ }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmq7inp8l.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmq7inp8l.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === 'a' || char === 'A') {\n            encodedMessage +=\
    \ 'c';\n        } else if (char === 'e' || char === 'E') {\n            encodedMessage\
    \ += 'g';\n        } else if (char === 'i' || char === 'I') {\n            encodedMessage\
    \ += 'k';\n        } else if (char === 'o' || char === 'O') {\n            encodedMessage\
    \ += 'q';\n        } else if (char === 'u' || char === 'U') {\n            encodedMessage\
    \ += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq9vt4tai.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq9vt4tai.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349020
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let newLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (newLetterIndex > alphabet.length - 1) {\n            \
    \    newLetterIndex -= alphabet.length;\n            }\n            let newLetter:\
    \ string = alphabet[newLetterIndex];\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                newLetter = newLetter.toUpperCase();\n            }\n   \
    \         encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp41r7md7_.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp41r7md7_.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let encodedLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex\
    \ -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      encodedLetter = encodedLetter.toUpperCase();\n            }\n         \
    \   encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplpda9e0o.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplpda9e0o.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9cbpdwp.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9cbpdwp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let currentChar: string = message[i];\n    \
    \    if (vowels.indexOf(currentChar) !== -1) {\n            let indexOfVowel:\
    \ number = vowels.indexOf(currentChar);\n            let nextVowel: string = vowels[(indexOfVowel\
    \ + 2) % 5];\n            encodedMessage += nextVowel;\n        } else if (currentChar\
    \ === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentChar.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcbpzemtn.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcbpzemtn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let character:\
    \ string = message[i];\n        let index: number = alphabet.indexOf(character.toLowerCase());\n\
    \        if (index === -1) {\n            result += character;\n        } else\
    \ {\n            let newIndex: number = index + 2;\n            if (newIndex >=\
    \ alphabet.length) {\n                newIndex -= alphabet.length;\n         \
    \   }\n            let newCharacter: string = alphabet[newIndex];\n          \
    \  if (character === character.toUpperCase()) {\n                newCharacter\
    \ = newCharacter.toUpperCase();\n            }\n            result += newCharacter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphiy_1gv6.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphiy_1gv6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let result = \"\";\n    let\
    \ vowels = \"aeiou\";\n    for (let i = 0; i < message.length; i++) {\n      \
    \  let char = message[i];\n        if (char === char.toUpperCase()) {\n      \
    \      char = char.toLowerCase();\n            result += char;\n        } else\
    \ if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            result += char;\n        }\n        if (vowels.includes(char)) {\n\
    \            let index = vowels.indexOf(char);\n            result += vowels[index\
    \ + 2];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2iab_q8m.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2iab_q8m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char.toLowerCase()) > -1) {\n    \
    \        let index: number = alphabet.indexOf(char.toLowerCase());\n         \
    \   if (index + 2 > alphabet.length - 1) {\n                index = index - alphabet.length\
    \ + 2;\n            } else {\n                index += 2;\n            }\n   \
    \         encodedMessage += alphabet[index];\n        } else {\n            if\
    \ (char === char.toUpperCase()) {\n                encodedMessage += char.toLowerCase();\n\
    \            } else {\n                encodedMessage += char.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpfiuw9q3f.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfiuw9q3f.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels:\
    \ string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let letter: string = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            letter = letter.toLowerCase();\n            let index: number\
    \ = alphabet.indexOf(letter);\n            let encodedLetter: string = alphabet[index\
    \ + 2];\n            encodedLetter = encodedLetter.toUpperCase();\n          \
    \  encodedMessage += encodedLetter;\n        } else {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            let encodedLetter: string =\
    \ alphabet[index + 2];\n            if (vowels.indexOf(letter) !== -1) {\n   \
    \             encodedLetter = encodedLetter.toUpperCase();\n            }\n  \
    \          encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp241ge8ju.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp241ge8ju.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encoded: string = \"\";\n\
    \    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let current:\
    \ string = message[i];\n        if (vowels.indexOf(current.toLowerCase()) >= 0)\
    \ {\n            let index: number = alphabet.indexOf(current.toLowerCase());\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 25)\
    \ {\n                newIndex = newIndex - 26;\n            }\n            encoded\
    \ += alphabet[newIndex];\n        } else {\n            if (current === current.toUpperCase())\
    \ {\n                encoded += current.toLowerCase();\n            } else {\n\
    \                encoded += current.toUpperCase();\n            }\n        }\n\
    \    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmputqd7t57.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmputqd7t57.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n\
    \        if (letter === letter.toUpperCase()) {\n            encodedMessage +=\
    \ letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (alphabet.indexOf(letter) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            if (index === 25) {\n      \
    \          encodedMessage += alphabet[1];\n            } else if (index === 24)\
    \ {\n                encodedMessage += alphabet[0];\n            } else {\n  \
    \              encodedMessage += alphabet[index + 2];\n            }\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd4papjmg.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd4papjmg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage\
    \ += currentLetter;\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n        if (vowels.includes(currentLetter)) {\n            let index:\
    \ number = alphabet.indexOf(currentLetter);\n            encodedMessage += alphabet[index\
    \ + 2];\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphi2nrn1r.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphi2nrn1r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tHIkS IkS Ac MEgSSAcGEg

    '
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n\
    \            let index = vowels.indexOf(char.toLowerCase());\n            if (index\
    \ === 4) {\n                index = -1;\n            }\n            encoded +=\
    \ vowels[index + 2];\n        } else if (char === char.toUpperCase()) {\n    \
    \        encoded += char.toLowerCase();\n        } else {\n            encoded\
    \ += char.toUpperCase();\n        }\n    }\n    return encoded;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7l53eu86.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7l53eu86.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let newMessage: string = \"\"\
    ;\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i])\
    \ !== -1) {\n            let index: number = alphabet.indexOf(message[i]);\n \
    \           newMessage += alphabet[index + 2];\n        } else {\n           \
    \ newMessage += message[i];\n        }\n    }\n    return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnhb88obo.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnhb88obo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 4)\
    \ {\n                newIndex = newIndex - 5;\n            }\n            if (char\
    \ === char.toUpperCase()) {\n                encodedMessage += vowels[newIndex].toUpperCase();\n\
    \            } else {\n                encodedMessage += vowels[newIndex];\n \
    \           }\n        } else {\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += char.toLowerCase();\n            } else\
    \ {\n                encodedMessage += char.toUpperCase();\n            }\n  \
    \      }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfk1i5bd1.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfk1i5bd1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349000
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ > -1) {\n            let index: number = vowels.indexOf(message[i].toLowerCase());\n\
    \            if (index + 2 > 4) {\n                index = index - 3;\n      \
    \      } else {\n                index = index + 2;\n            }\n         \
    \   encodedMessage += vowels[index];\n        } else {\n            if (message[i]\
    \ === message[i].toUpperCase()) {\n                encodedMessage += message[i].toLowerCase();\n\
    \            } else {\n                encodedMessage += message[i].toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7bwfsh_g.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7bwfsh_g.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = index + 2;\n            if (newIndex >= vowels.length) {\n  \
    \              newIndex = newIndex - vowels.length;\n            }\n         \
    \   char = vowels[newIndex];\n        }\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzoxif6du.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzoxif6du.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpae62e8vu.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpae62e8vu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n  \
    \  let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n      \
    \  let char = message[i];\n        let index = vowels.indexOf(char.toLowerCase());\n\
    \        if (index >= 0) {\n            result += vowels[(index + 2) % vowels.length];\n\
    \        } else {\n            result += char.toUpperCase() === char ? char.toLowerCase()\
    \ : char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpszzv990p.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszzv990p.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349033
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that takes a message, and encodes\
    \ in such a \n// way that it swaps case of all letters, replaces all vowels in\
    \ \n// the message with the letter that appears 2 places ahead of that \n// vowel\
    \ in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"\
    test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\
    \nfunction encode(message: string): string {\n    let encodedMessage: string =\
    \ \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            encodedMessage += alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmputa3n3ni.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmputa3n3ni.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348993
