language: ts
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    // check if dict is empty\n    if (Object.keys(dict).length ===\
    \ 0) {\n        return false;\n    }\n    // check if all keys are lower case\n\
    \    if (Object.keys(dict).every(key => key === key.toLowerCase())) {\n      \
    \  return true;\n    }\n    // check if all keys are upper case\n    if (Object.keys(dict).every(key\
    \ => key === key.toUpperCase())) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa98v7wxo.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa98v7wxo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key)\
    \ {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let upper = keys.every(key\
    \ => key.toUpperCase() === key);\n    let lower = keys.every(key => key.toLowerCase()\
    \ === key);\n    return upper || lower;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpigrt938g.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpigrt938g.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys: string[] = Object.keys(dict);\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let i: number = 0; i < keys.length;\
    \ i++) {\n        if (keys[i] !== keys[i].toLowerCase()) {\n            lower\
    \ = false;\n        }\n        if (keys[i] !== keys[i].toUpperCase()) {\n    \
    \        upper = false;\n        }\n    }\n    return lower || upper;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6kvozyx8.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6kvozyx8.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowercase = true;\n    let uppercase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowercase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            uppercase\
    \ = false;\n        }\n    }\n    return lowercase || uppercase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp69be7tsd.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp69be7tsd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper = true;\n    let lower = true;\n    for (let key in\
    \ dict) {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbxgu9bmh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbxgu9bmh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let key of keys) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnzv0w42h.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnzv0w42h.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let upper = true;\n    let lower = true;\n    for (let key in dict)\
    \ {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n  \
    \      }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy1l7oiie.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy1l7oiie.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let upperCase = true;\n    let lowerCase = true;\n    for (let key\
    \ in dict) {\n        if (key !== key.toUpperCase()) {\n            upperCase\
    \ = false;\n        }\n        if (key !== key.toLowerCase()) {\n            lowerCase\
    \ = false;\n        }\n    }\n    return upperCase || lowerCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf6guyuor.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf6guyuor.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            upper = false;\n\
    \        } else if (key.toUpperCase() === key) {\n            lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi3t612p4.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi3t612p4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLower = false;\n    let isUpper = false;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            isLower = true;\n\
    \        } else if (key.toUpperCase() === key) {\n            isUpper = true;\n\
    \        } else {\n            return false;\n        }\n    }\n    return isLower\
    \ || isUpper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr7_z8qxf.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr7_z8qxf.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lowerCase = keys.every(key => key.toLowerCase()\
    \ === key);\n    let upperCase = keys.every(key => key.toUpperCase() === key);\n\
    \    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4x_qsjcv.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4x_qsjcv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpniwnje2w.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpniwnje2w.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLowerCase: boolean = true;\n    let isUpperCase: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            isLowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            isUpperCase = false;\n        }\n    }\n    return isLowerCase\
    \ || isUpperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsdb4pmo7.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsdb4pmo7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf50173rf.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf50173rf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key\
    \ in dict) {\n    if (key.toLowerCase() !== key) {\n      lowerCase = false;\n\
    \    }\n    if (key.toUpperCase() !== key) {\n      upperCase = false;\n    }\n\
    \  }\n  return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojadr6u9.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpojadr6u9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            upper = false;\n\
    \        } else if (key.toUpperCase() === key) {\n            lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi3t612p4.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi3t612p4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key)\
    \ {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper = true;\n    let lower = true;\n    for (let key in\
    \ dict) {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbxgu9bmh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbxgu9bmh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf50173rf.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf50173rf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let all_lower = true;\n    let all_upper = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            all_lower\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            all_upper\
    \ = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp194vrczf.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp194vrczf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf50173rf.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf50173rf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07bs3vfh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp07bs3vfh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let result: boolean = true;\n    let lowerCase: boolean = false;\n\
    \    let upperCase: boolean = false;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() === key) {\n            lowerCase = true;\n        } else\
    \ if (key.toUpperCase() === key) {\n            upperCase = true;\n        } else\
    \ {\n            result = false;\n        }\n    }\n    if (lowerCase && upperCase)\
    \ {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy75k6vtm.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy75k6vtm.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLowerCase = Object.keys(dict)[0] === Object.keys(dict)[0].toLowerCase();\n\
    \    for (let key in dict) {\n        if (isLowerCase && key !== key.toLowerCase())\
    \ {\n            return false;\n        }\n        if (!isLowerCase && key !==\
    \ key.toUpperCase()) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcfh1ff6s.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcfh1ff6s.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n\
    \            upperCase = false;\n        } else {\n            lowerCase = false;\n\
    \        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphwgg0v0a.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphwgg0v0a.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpperCase = true;\n    let isLowerCase = true;\n    for\
    \ (let key in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpperCase\
    \ = false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLowerCase\
    \ = false;\n        }\n    }\n    return isUpperCase || isLowerCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt4jskwfw.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt4jskwfw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp426fhdiw.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp426fhdiw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower_case = true;\n    let upper_case = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2_qfb31a.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2_qfb31a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf50173rf.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf50173rf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLowerCase = keys[0] === keys[0].toLowerCase();\n\
    \    for (let i = 1; i < keys.length; i++) {\n        if (isLowerCase && keys[i]\
    \ !== keys[i].toLowerCase()) {\n            return false;\n        }\n       \
    \ if (!isLowerCase && keys[i] !== keys[i].toUpperCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptpo0ilz7.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptpo0ilz7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptpe4d3yp.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptpe4d3yp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length == 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() == keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper) {\n            if (key.toUpperCase()\
    \ != key) {\n                return false;\n            }\n        } else {\n\
    \            if (key.toLowerCase() != key) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper: boolean = false;\n    let lower: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return upper !== lower;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let result: boolean = true;\n    let lowerCase: boolean = true;\n\
    \    let upperCase: boolean = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upperCase = false;\n        }\n    }\n    if (lowerCase\
    \ === false && upperCase === false) {\n        result = false;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeadw943k.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeadw943k.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let is_lower = keys[0].toLowerCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (is_lower && key.toLowerCase() !== key)\
    \ {\n            return false;\n        }\n        if (!is_lower && key.toUpperCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphllranm3.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphllranm3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLower = keys[0] === keys[0].toLowerCase();\n\
    \    for (let key of keys) {\n        if (isLower) {\n            if (key !==\
    \ key.toLowerCase()) {\n                return false;\n            }\n       \
    \ } else {\n            if (key !== key.toUpperCase()) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vbqvue8.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0vbqvue8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let is_lower = false;\n    let is_upper = false;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() === key) {\n            is_lower =\
    \ true;\n        } else if (key.toUpperCase() === key) {\n            is_upper\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return is_lower || is_upper;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp63uvkz5b.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp63uvkz5b.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key === key.toLowerCase());\n    let upperCase = keys.every(key => key ===\
    \ key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp527snhuk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp527snhuk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLower = true;\n    let isUpper = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            isLower =\
    \ false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpper\
    \ = false;\n        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz0vnfv9e.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz0vnfv9e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2i4lugd.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2i4lugd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (keys[i] !== keys[i].toLowerCase())\
    \ {\n            lower = false;\n        }\n        if (keys[i] !== keys[i].toUpperCase())\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy78ukxqh.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy78ukxqh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLower = true;\n    let isUpper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            isLower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            isUpper = false;\n\
    \        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwv3cte0s.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwv3cte0s.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (isUpper && keys[i].toUpperCase()\
    \ !== keys[i]) {\n            return false;\n        }\n        if (!isUpper &&\
    \ keys[i].toLowerCase() !== keys[i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptpe4d3yp.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptpe4d3yp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let first = keys[0];\n   \
    \ let isUpper = first.toUpperCase() === first;\n    for (let key of keys) {\n\
    \        if (isUpper && key.toUpperCase() !== key) {\n            return false;\n\
    \        }\n        if (!isUpper && key.toLowerCase() !== key) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbjqsqpf9.js:19\n    let isUpper = first.toUpperCase() === first;\n\
    \                        ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'toUpperCase')\n    at check_dict_case (/tmp/tmpbjqsqpf9.js:19:25)\n    at test\
    \ (/tmp/tmpbjqsqpf9.js:39:22)\n    at Object.<anonymous> (/tmp/tmpbjqsqpf9.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upperCase = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsgl2xm9u.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsgl2xm9u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2i4lugd.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2i4lugd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07bs3vfh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp07bs3vfh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpniwnje2w.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpniwnje2w.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjefudh93.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjefudh93.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2i4lugd.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2i4lugd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key === key.toLowerCase());\n    let upperCase = keys.every(key => key ===\
    \ key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4v_vf_55.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4v_vf_55.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let key of keys) {\n        if (key.toLowerCase() !==\
    \ key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnvo3orvk.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnvo3orvk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpper = true;\n    let isLower = true;\n    for (let key\
    \ in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpper =\
    \ false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLower\
    \ = false;\n        }\n    }\n    return isUpper || isLower;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaql_19yo.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaql_19yo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            upper_case = false;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            lower_case = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq12sgv3a.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq12sgv3a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isLower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let isUpper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return isLower || isUpper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxchp9mc.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxchp9mc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = keys.every(key => key === key.toLowerCase());\n\
    \    let upper = keys.every(key => key === key.toUpperCase());\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuuhesss_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuhesss_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isLower = keys.every(key\
    \ => key === key.toLowerCase());\n    let isUpper = keys.every(key => key ===\
    \ key.toUpperCase());\n    return isLower || isUpper;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjz432wt_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjz432wt_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    return keys.every(key => key.toUpperCase() === key === isUpper);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0gkhfvsh.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0gkhfvsh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower: boolean = false;\n    let upper: boolean = false;\n   \
    \ for (let key in dict) {\n        if (key.toLowerCase() === key) {\n        \
    \    lower = true;\n        } else if (key.toUpperCase() === key) {\n        \
    \    upper = true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return lower !== upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6wlzlrmo.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wlzlrmo.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (isUpper) {\n        \
    \    if (key.toUpperCase() !== key) {\n                return false;\n       \
    \     }\n        } else {\n            if (key.toLowerCase() !== key) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv2eek_6f.js:18\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \                          ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'toUpperCase')\n    at check_dict_case (/tmp/tmpv2eek_6f.js:18:27)\n\
    \    at test (/tmp/tmpv2eek_6f.js:42:22)\n    at Object.<anonymous> (/tmp/tmpv2eek_6f.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptpe4d3yp.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptpe4d3yp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpper = true;\n    let isLower = true;\n    for (let key\
    \ in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpper =\
    \ false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLower\
    \ = false;\n        }\n    }\n    return isUpper || isLower;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaql_19yo.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaql_19yo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerKeys: string[] = [];\n    let upperKeys: string[] =\
    \ [];\n    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n\
    \            lowerKeys.push(key);\n        } else {\n            upperKeys.push(key);\n\
    \        }\n    }\n    return lowerKeys.length === Object.keys(dict).length ||\
    \ upperKeys.length === Object.keys(dict).length;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp098zi3mp.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp098zi3mp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp426fhdiw.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp426fhdiw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2i4lugd.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2i4lugd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLowerCase = true;\n    let isUpperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            isLowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpperCase\
    \ = false;\n        }\n    }\n    return isLowerCase || isUpperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpafa3iijr.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpafa3iijr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let key of keys) {\n        if (key.toLowerCase() !==\
    \ key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnvo3orvk.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnvo3orvk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (isUpper && key.toUpperCase()\
    \ !== key) {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm1cr5f02.js:18\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \                          ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'toUpperCase')\n    at check_dict_case (/tmp/tmpm1cr5f02.js:18:27)\n\
    \    at test (/tmp/tmpm1cr5f02.js:38:22)\n    at Object.<anonymous> (/tmp/tmpm1cr5f02.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07bs3vfh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp07bs3vfh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            upper_case = false;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            lower_case = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq12sgv3a.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq12sgv3a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() != key) {\n      \
    \      lower = false;\n        }\n        if (key.toUpperCase() != key) {\n  \
    \          upper = false;\n        }\n    }\n    return lower || upper;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp486sdmi_.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp486sdmi_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = true;\n  \
    \  let upperCase = true;\n    for (let i = 0; i < keys.length; i++) {\n      \
    \  if (keys[i] !== keys[i].toLowerCase()) {\n            lowerCase = false;\n\
    \        }\n        if (keys[i] !== keys[i].toUpperCase()) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7_dwk8j4.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7_dwk8j4.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowercase = true;\n    let uppercase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() === key) {\n            uppercase\
    \ = false;\n        } else if (key.toUpperCase() === key) {\n            lowercase\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return lowercase || uppercase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplmoali58.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplmoali58.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let is_all_lower = true;\n    let is_all_upper = true;\n    for\
    \ (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            is_all_lower\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            is_all_upper\
    \ = false;\n        }\n    }\n    return is_all_lower || is_all_upper;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwc25nhlj.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwc25nhlj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLower = keys[0] === keys[0].toLowerCase();\n\
    \    for (let key of keys) {\n        if (isLower && key !== key.toLowerCase())\
    \ {\n            return false;\n        }\n        if (!isLower && key !== key.toUpperCase())\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwe2g2owo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwe2g2owo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (lower_case && key.toLowerCase() !== key) {\n   \
    \         lower_case = false;\n        }\n        if (upper_case && key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp65h54009.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp65h54009.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    const lowerCase = Object.keys(dict).every(key => key === key.toLowerCase());\n\
    \    const upperCase = Object.keys(dict).every(key => key === key.toUpperCase());\n\
    \    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8gwsld6l.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8gwsld6l.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp426fhdiw.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp426fhdiw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = false;\n    let upper_case: boolean\
    \ = false;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            lower_case = true;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            upper_case = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7k4g6554.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7k4g6554.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    let isLower = keys[0].toLowerCase() === keys[0];\n    for\
    \ (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key) {\n \
    \           return false;\n        }\n        if (isLower && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660349059
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLowerCase = keys[0] === keys[0].toLowerCase();\n\
    \    for (let i = 1; i < keys.length; i++) {\n        if (isLowerCase) {\n   \
    \         if (keys[i] !== keys[i].toLowerCase()) {\n                return false;\n\
    \            }\n        } else {\n            if (keys[i] !== keys[i].toUpperCase())\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzb3wou7v.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzb3wou7v.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349060
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp648jjt7m.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp648jjt7m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLower = true;\n    let isUpper = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            isLower =\
    \ false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpper\
    \ = false;\n        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz0vnfv9e.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz0vnfv9e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    // TODO: Implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp81r9n_ve.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp81r9n_ve.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349060
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (isUpper) {\n       \
    \     if (keys[i].toUpperCase() !== keys[i]) {\n                return false;\n\
    \            }\n        } else {\n            if (keys[i].toLowerCase() !== keys[i])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349060
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2i4lugd.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2i4lugd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349055
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let allUpper = true;\n    let allLower = true;\n    for (let\
    \ key in dict) {\n        if (key.toUpperCase() === key) {\n            allLower\
    \ = false;\n        } else if (key.toLowerCase() === key) {\n            allUpper\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return allUpper || allLower;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3fa1rw9_.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3fa1rw9_.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349061
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpirx93q71.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirx93q71.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let key of keys) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnzv0w42h.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnzv0w42h.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07bs3vfh.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp07bs3vfh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa1kummlo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1kummlo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349054
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let upper = keys.every(key\
    \ => key.toUpperCase() === key);\n    let lower = keys.every(key => key.toLowerCase()\
    \ === key);\n    return upper || lower;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpigrt938g.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpigrt938g.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let is_lower = keys[0].toLowerCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (is_lower) {\n            if (key.toLowerCase()\
    \ !== key) {\n                return false;\n            }\n        } else {\n\
    \            if (key.toUpperCase() !== key) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp27t5_0kw.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp27t5_0kw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349060
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCaseKeys = Object.keys(dict).filter(key => key.toLowerCase()\
    \ === key);\n    let upperCaseKeys = Object.keys(dict).filter(key => key.toUpperCase()\
    \ === key);\n    return lowerCaseKeys.length === Object.keys(dict).length || upperCaseKeys.length\
    \ === Object.keys(dict).length;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoaa0dti3.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoaa0dti3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349061
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = keys.every(key => key === key.toLowerCase());\n\
    \    let upper = keys.every(key => key === key.toUpperCase());\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuuhesss_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuhesss_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzfqnrgc8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfqnrgc8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpve5twfm8.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpve5twfm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjefudh93.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjefudh93.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349058
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr_x_mch.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr_x_mch.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349051
