name: HumanEval_120_maximum
language: notypes.py
prompt: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
  \ a positive integer k, return a sorted list \n    of length k with the maximum\
  \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4,\
  \ -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n   \
  \ Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n\
  \        1. The length of the array will be in the range of [1, 1000].\n       \
  \ 2. The elements in the array will be in the range of [-1000, 1000].\n        3.\
  \ 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n \
    \   heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1]\
    \ for _ in range(k)]\n", "    # Time complexity: O(n log k)\n    # Space complexity:\
    \ O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n\n", "    # Time complexity: O(n log k)\n    # Space complexity:\
    \ O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n\n", "    if k == 0:\n        return []\n    if k == 1:\n   \
    \     return [max(arr)]\n    if k == len(arr):\n        return sorted(arr)\n \
    \   return sorted(arr)[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    # Sort the array in descending order\n    arr.sort(reverse=True)\n\
    \    # Return the first k elements\n    return arr[:k]\n", "    # Time complexity:\
    \ O(n log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n      \
    \      heapq.heappop(heap)\n    return [num for _, num in heap]\n\n", "    # return\
    \ sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "   \
    \ # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, (-num, num))\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return [num for _, num in heap]\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap,\
    \ arr[i])\n        else:\n            heapq.heappushpop(heap, arr[i])\n    return\
    \ sorted(heap, reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n\n",
  "    arr.sort()\n    return arr[-k:]\n\n", "    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", "    # return sorted(arr,\
    \ reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "    # Time complexity:\
    \ O(n log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\n", "    # Solution 1:\n    # Time: O(nlogk)\n\
    \    # Space: O(k)\n    # heap = []\n    # for num in arr:\n    #     heapq.heappush(heap,\
    \ num)\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n    #\
    \ return sorted(heap, reverse=True)\n\n    # Solution 2:\n    # Time: O(nlogk)\n\
    \    # Space: O(k)\n    # return sorted(arr, reverse=True)[:k]\n\n    # Solution\
    \ 3:\n    # Time: O(nlogk)\n    # Space: O(k)\n    # return heapq.nlargest(k,\
    \ arr)\n\n    # Solution 4:\n    # Time: O(n)\n    # Space: O(k)\n    # return\
    \ sorted(arr)[-k:]\n\n    # Solution 5:\n    # Time: O(n)\n    # Space: O(k)\n\
    \    # return sorted(arr, reverse=True)[:k]\n\n    # Solution 6:\n    # Time:\
    \ O(n)\n    # Space: O(k)\n    # return sorted(arr, reverse=True)[-k:]\n\n   \
    \ # Solution 7:\n    # Time: O(n)\n    # Space: O(k)\n    # return sorted(arr,\
    \ key=lambda x: -x)[:k]\n\n    # Solution 8:\n    # Time: O(n)\n    # Space: O(k)\n\
    \    # return sorted(arr, key=lambda x: -x)[-k:]\n\n    # Solution 9:\n    # Time:\
    \ O(n)\n    # Space: O(k)\n    # return sorted(arr, key=lambda x: -x)[:k]\n\n\
    \    # Solution 10:\n    # Time: O(n)\n    # Space: O(k)\n    # return sorted(arr,\
    \ key=lambda x: -x)[-k:]\n\n    # Solution 11:\n    # Time: O(n)\n    # Space:\
    \ O(k)\n    # return sorted(arr, key=lambda x: -x)[:k]\n\n    # Solution 12:\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, (-num, num))\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return [num for _, num in heap]\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, (-num, num))\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return [num for _, num in heap]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    # Time complexity: O(n log n)\n  \
    \  # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n", "    if len(arr)\
    \ <= k:\n        return sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n\
    \ log n)\n    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log\
    \ k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n     \
    \   heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n           \
    \ heapq.heappop(heap)\n    return [num for _, num in heap]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n\
    \ log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n \
    \       heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    arr.sort()\n    return arr[-k:]\n\n", "    arr.sort()\n    return arr[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap\
    \ = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n           \
    \ heapq.heappush(heap, arr[i])\n        else:\n            heapq.heappushpop(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", "    if k == 0:\n       \
    \ return []\n    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n\
    \        return sorted(arr)\n    if k > len(arr):\n        return None\n\n   \
    \ max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n   \
    \     arr.remove(max(arr))\n    return sorted(max_arr)\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", "  \
    \  return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log\
    \ k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n     \
    \   heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n", "    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n", "    # Time complexity: O(n\
    \ log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n \
    \       heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n       \
    \     heapq.heappop(heap)\n    return [num for _, num in heap]\n", "    # Time\
    \ complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n    for\
    \ num in arr:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n\
    \            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n", " \
    \   return sorted(arr, reverse=True)[:k]\n\n", "    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n", "    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n\n", "   \
    \ # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\
    \n", "    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    return\
    \ sorted(arr)[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log k)\n   \
    \ # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [heapq.heappop(heap)[1] for _ in range(k)]\n", "    # Time complexity:\
    \ O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", " \
    \   return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    # Solution 1:\n    #\
    \ Time: O(n log k)\n    # Space: O(k)\n    # heap = []\n    # for num in arr:\n\
    \    #     heapq.heappush(heap, num)\n    #     if len(heap) > k:\n    #     \
    \    heapq.heappop(heap)\n    # return sorted(heap, reverse=True)\n\n    # Solution\
    \ 2:\n    # Time: O(n)\n    # Space: O(k)\n    # return sorted(arr, reverse=True)[:k]\n\
    \n    # Solution 3:\n    # Time: O(n)\n    # Space: O(k)\n    return sorted(arr)[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # Time complexity: O(n * log(k))\n    # Space complexity: O(k)\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return [num for\
    \ _, num in heap]\n", "    # Time complexity: O(n log n)\n    # Space complexity:\
    \ O(n)\n    return sorted(arr)[-k:]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # Sort the array in descending order\n    arr.sort(reverse=True)\n \
    \   # Return the first k elements\n    return arr[:k]\n\n", "    arr.sort()\n\
    \    return arr[-k:]\n\n", "    # return sorted(arr, reverse=True)[:k]\n    return\
    \ heapq.nlargest(k, arr)\n\n", "    return sorted(arr, reverse=True)[:k]\n\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, (-num, num))\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return [num for _, num in heap]\n\
    \n", "    arr.sort()\n    return arr[-k:]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    arr.sort()\n    return\
    \ arr[-k:]\n\n", "    return sorted(arr, reverse=True)[:k]\n", "    # Time complexity:\
    \ O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    if k == 0:\n       \
    \ return []\n    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n\
    \        return sorted(arr)\n    if k > len(arr):\n        return arr\n    arr\
    \ = sorted(arr)\n    return arr[-k:]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap\
    \ = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n\
    \    return sorted(arr)[-k:]\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n", "    # Solution 1\n    # arr.sort()\n    # return\
    \ arr[-k:]\n\n    # Solution 2\n    # heapq.heapify(arr)\n    # return heapq.nlargest(k,\
    \ arr)\n\n    # Solution 3\n    return sorted(arr)[-k:]\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", "  \
    \  return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    # Time complexity: O(n log n)\n    # Space complexity:\
    \ O(n)\n    arr.sort()\n    return arr[len(arr) - k:]\n", "    # Time complexity:\
    \ O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", " \
    \   arr.sort()\n    return arr[-k:]\n\n", "    # Solution 1\n    # return sorted(arr,\
    \ reverse=True)[:k]\n\n    # Solution 2\n    # return sorted(arr, key=lambda x:\
    \ -x)[:k]\n\n    # Solution 3\n    # return heapq.nlargest(k, arr)\n\n    # Solution\
    \ 4\n    return sorted(arr)[-k:]\n\n", "    if not arr:\n        return []\n \
    \   if len(arr) == 1:\n        return arr\n    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n   \
    \     return sorted(arr)\n    if k == 1:\n        return [max(arr)]\n    if k\
    \ == 2:\n        return sorted(arr)[-2:]\n    if k == 3:\n        return sorted(arr)[-3:]\n\
    \    if k == 4:\n        return sorted(arr)[-4:]\n    if k == 5:\n        return\
    \ sorted(arr)[-5:]\n    if k == 6:\n        return sorted(arr)[-6:]\n    if k\
    \ == 7:\n        return sorted(arr)[-7:]\n    if k == 8:\n        return sorted(arr)[-8:]\n\
    \    if k == 9:\n        return sorted(arr)[-9:]\n    if k == 10:\n        return\
    \ sorted(arr)[-10:]\n    if k == 11:\n        return sorted(arr)[-11:]\n    if\
    \ k == 12:\n        return sorted(arr)[-12:]\n    if k == 13:\n        return\
    \ sorted(arr)[-13:]\n    if k == 14:\n        return sorted(arr)[-14:]\n    if\
    \ k == 15:\n        return sorted(arr)[-15:]\n    if k == 16:\n        return\
    \ sorted(arr)[-16:]\n    if k == 17:\n        return sorted(arr)[-17:]\n    if\
    \ k == 18:\n        return sorted(arr)[-18:]\n    if k == 19:\n        return\
    \ sorted(arr)[-19:]\n    if k == 20:\n        return sorted(arr)[-20:]\n    if\
    \ k == 21:\n        return sorted(arr)[-21:]\n    if k == 22:\n        return\
    \ sorted(arr)[-22:]\n    if k == 23:\n        return sorted(arr)[-23:]\n    if\
    \ k == 24:\n        return sorted(arr)[-24:]\n    if k == 25:\n        return\
    \ sorted(arr)[-25:]\n    if k == 26:\n        return sorted(arr)[-26:]\n    if\
    \ k ==", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", "  \
    \  # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\
    \n", "    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    return\
    \ sorted(arr)[-k:]\n", "    # return sorted(arr, reverse=True)[:k]\n    return\
    \ heapq.nlargest(k, arr)\n\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for i in range(len(arr)):\n        if len(heap)\
    \ < k:\n            heapq.heappush(heap, arr[i])\n        else:\n            heapq.heappushpop(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", "    # return sorted(arr,\
    \ reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    # Time complexity: O(n log k)\n    # Space complexity:\
    \ O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n\n", "    # Time complexity: O(n log n)\n    # Space complexity:\
    \ O(n)\n    return sorted(arr)[-k:]\n", "    arr.sort()\n    return arr[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", "    if len(arr)\
    \ == k:\n        return sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\
    \n", "    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    return\
    \ sorted(arr)[-k:]\n\n", "    # Time complexity: O(n log n)\n    # Space complexity:\
    \ O(n)\n    return sorted(arr)[-k:]\n\n", "    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    return sorted(arr)[-k:]\n\n", "    # Time complexity: O(n log\
    \ n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", "    # Time\
    \ complexity: O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log\
    \ n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n)\n    # Space\
    \ complexity: O(n)\n    if not arr:\n        return []\n    if len(arr) == 1:\n\
    \        return arr\n    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n\
    \        return sorted(arr)\n    if k > len(arr):\n        return None\n    heap\
    \ = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for\
    \ i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap)\n", "    arr.sort()\n\
    \    return arr[-k:]\n\n", "    return sorted(arr, reverse=True)[:k]\n\n", " \
    \   # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    heap = []\n    for num\
    \ in arr:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n    \
    \        heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\n", "  \
    \  return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log\
    \ n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", "    heap\
    \ = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n", "    # Time complexity: O(n log k)\n    # Space\
    \ complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log\
    \ k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n     \
    \   heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    if len(arr) == k:\n       \
    \ return sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n\n", "    # Time complexity: O(n log k)\n   \
    \ # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n", "    if len(arr) == k:\n        return sorted(arr)\n\
    \    else:\n        return sorted(arr)[-k:]\n\n", "    # Time complexity: O(n\
    \ log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n \
    \       heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n       \
    \     heapq.heappop(heap)\n    return [num for _, num in heap]\n", "    # return\
    \ sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "   \
    \ arr.sort()\n    return arr[-k:]\n\n", "    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n", "    # Solution 1\n    # arr.sort()\n\
    \    # return arr[-k:]\n\n    # Solution 2\n    return sorted(arr)[-k:]\n\n",
  "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap,\
    \ arr[i])\n        else:\n            heapq.heappushpop(heap, arr[i])\n    return\
    \ sorted(heap, reverse=True)\n", "    # Time complexity: O(n log n)\n    # Space\
    \ complexity: O(n)\n    return sorted(arr)[-k:]\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    # Time complexity: O(n log k)\n    # Space complexity:\
    \ O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n\n", "    # return sorted(arr, reverse=True)[:k]\n    # return heapq.nlargest(k,\
    \ arr)\n    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n", "    if k == 0:\n        return []\n    if k == 1:\n\
    \        return [max(arr)]\n    return sorted(arr)[-k:]\n\n", "    # return sorted(arr,\
    \ reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "    # Time complexity:\
    \ O(n log n)\n    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n", " \
    \   return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k,\
    \ arr)\n", "    # Time complexity: O(n log k)\n    # Space complexity: O(k)\n\
    \    heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1]\
    \ for _ in range(k)]\n", "    return sorted(arr, reverse=True)[:k]\n\n", "   \
    \ # Time complexity: O(n log k)\n    # Space complexity: O(k)\n    heap = []\n\
    \    for num in arr:\n        heapq.heappush(heap, num)\n        if len(heap)\
    \ > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
  "    return sorted(arr, reverse=True)[:k]\n\n", "    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n\
    \    if k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n   \
    \     return sorted(arr)\n\n    # create a heap\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n\n    for i in range(k, len(arr)):\n  \
    \      if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n\n    return sorted(heap)\n", "    arr.sort()\n    return arr[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    return sorted(arr, reverse=True)[:k]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n\n", "    # return sorted(arr,\
    \ reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
