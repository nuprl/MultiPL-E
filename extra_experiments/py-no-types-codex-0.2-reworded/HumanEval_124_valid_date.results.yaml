language: notypes.py
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    date_list = date.split('-')\n\n    if len(date_list)\
    \ != 3:\n        return False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_split = date.split(\"-\")\n\n\
    \    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ your code here\n    if len(date) == 0:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if int(date[0:2]) > 12 or int(date[0:2]) < 1:\n      \
    \  return False\n    if int(date[3:5]) > 31 or int(date[3:5]) < 1:\n        return\
    \ False\n    if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5])\
    \ > 31:\n            return False\n    if int(date[0:2]) in [4, 6, 9, 11]:\n \
    \       if int(date[3:5]) > 30:\n            return False\n    if int(date[0:2])\
    \ == 2:\n        if int(date[3:5]) > 29:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day > 31 or day < 1:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day > 30 or day < 1:\n            return False\n\
    \    elif month == 2:\n        if day > 29 or day < 1:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return\
    \ False\n\n    if month in (4, 6, 9, 11) and day > 30:\n        return False\n\
    \n    if month == 2 and day > 29:\n        return False\n\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day\
    \ > 29:\n                return False\n        else:\n            if day < 1 or\
    \ day > 28:\n                return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day\
    \ > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n\
    \        return False\n\n    if month == 2 and day > 29:\n        return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month not\
    \ in range(1, 13):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day not in range(1, 32):\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return\
    \ False\n    elif month == 2:\n        if day not in range(1, 30):\n         \
    \   return False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    if '/' in date:\n        return False\n\
    \n    if len(date) != 10:\n        return False\n\n    month, day, year = date.split('-')\n\
    \n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n   \
    \         return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day)\
    \ < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n\
    \        if int(day) < 1 or int(day) > 29:\n            return False\n\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ Check if the date is in the correct format\n    if not re.match(r'^\\d{2}-\\\
    d{2}-\\d{4}$', date):\n        return False\n\n    # Check if the date is valid\n\
    \    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n\
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaiz4h9e7.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpaiz4h9e7.py\", line 58,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpaiz4h9e7.py\", line 40,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpaiz4h9e7.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return\
    \ False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\
    \n    if month == 2 and day > 29:\n        return False\n\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    if len(date_list[0])\
    \ != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n\
    \n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month == 2:\n        if day >\
    \ 29 or day < 1:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day > 30 or day < 1:\n            return False\n    else:\n      \
    \  if day > 31 or day < 1:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    if date.count('-') != 2:\n        return\
    \ False\n\n    if date.count('/') != 0:\n        return False\n\n    date_list\
    \ = date.split('-')\n\n    if len(date_list[0]) != 2 or len(date_list[1]) != 2\
    \ or len(date_list[2]) != 4:\n        return False\n\n    if int(date_list[0])\
    \ not in range(1, 13):\n        return False\n\n    if int(date_list[0]) in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) not in range(1, 32):\n  \
    \          return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n      \
    \  if int(date_list[1]) not in range(1, 31):\n            return False\n    elif\
    \ int(date_list[0]) == 2:\n        if int(date_list[1]) not in range(1, 30):\n\
    \            return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    else:\n      \
    \  if day < 1 or day > 31:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != '-' or date[5] != '-':\n\
    \        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day\
    \ > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n\
    \        return False\n\n    if month == 2 and day > 29:\n        return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_split = date.split('-')\n\
    \    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return\
    \ False\n\n    if month in (4, 6, 9, 11) and day > 30:\n        return False\n\
    \n    if month == 2 and day > 29:\n        return False\n\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day > 31 or day < 1:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day > 30 or day < 1:\n            return False\n\
    \    elif month == 2:\n        if day > 29 or day < 1:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    if date[2] != '-' or date[5] != '-':\n\
    \        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    try:\n\
    \        month = int(date_list[0])\n        day = int(date_list[1])\n        year\
    \ = int(date_list[2])\n    except ValueError:\n        return False\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != \"-\" or date[5] !=\
    \ \"-\":\n        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if the date is empty\n    if not date:\n        return False\n\n    #\
    \ check if the date is in the correct format\n    if not re.match(r'^\\d{2}-\\\
    d{2}-\\d{4}$', date):\n        return False\n\n    # split the date into month,\
    \ day and year\n    month, day, year = date.split('-')\n\n    # check if the month\
    \ is valid\n    if not 1 <= int(month) <= 12:\n        return False\n\n    # check\
    \ if the day is valid\n    if not 1 <= int(day) <= 31:\n        return False\n\
    \n    # check if the year is valid\n    if not 1 <= int(year) <= 9999:\n     \
    \   return False\n\n    # check if the day is valid for the month\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12] and not 1 <= int(day) <= 31:\n        return False\n\
    \n    if int(month) in [4, 6, 9, 11] and not 1 <= int(day) <= 30:\n        return\
    \ False\n\n    if int(month) == 2 and not 1 <= int(day) <= 29:\n        return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrnh_vis.py\", line\
    \ 83, in <module>\n    test_check()\n  File \"/tmp/tmpjrnh_vis.py\", line 81,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpjrnh_vis.py\", line 63,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpjrnh_vis.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    if int(date_list[0]) >\
    \ 12 or int(date_list[0]) < 1:\n        return False\n\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != \"-\" or date[5] !=\
    \ \"-\":\n        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    elif month ==\
    \ 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n\
    \            return False\n    else:\n        if day < 1 or day > 31:\n      \
    \      return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    elif month in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    else:\n        if day < 1 or day > 30:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return\
    \ False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\
    \n    if month == 2 and day > 29:\n        return False\n\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != \"-\" or date[5] !=\
    \ \"-\":\n        return False\n\n    if int(date[0:2]) > 12 or int(date[0:2])\
    \ < 1:\n        return False\n\n    if int(date[3:5]) > 31 or int(date[3:5]) <\
    \ 1:\n        return False\n\n    if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[3:5]) > 31:\n            return False\n\n    if int(date[0:2])\
    \ in [4, 6, 9, 11]:\n        if int(date[3:5]) > 30:\n            return False\n\
    \n    if int(date[0:2]) == 2:\n        if int(date[3:5]) > 29:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if date == '':\n        return False\n\n    # check\
    \ if date is in correct format\n    if len(date) != 10:\n        return False\n\
    \    if date[2] != '-' or date[5] != '-':\n        return False\n\n    # check\
    \ if month is valid\n    month = int(date[0:2])\n    if month < 1 or month > 12:\n\
    \        return False\n\n    # check if day is valid\n    day = int(date[3:5])\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n\n    # check if year is valid\n\
    \    year = int(date[6:10])\n    if year < 1:\n        return False\n\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    month, day, year = date.split('-')\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibephbc9.py\", line\
    \ 75, in <module>\n    test_check()\n  File \"/tmp/tmpibephbc9.py\", line 73,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpibephbc9.py\", line 66,\
    \ in check\n    assert candidate('04122003') == False\n  File \"/tmp/tmpibephbc9.py\"\
    , line 29, in valid_date\n    month, day, year = date.split('-')\nValueError:\
    \ not enough values to unpack (expected 3, got 1)\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not (month.isdigit()\
    \ and day.isdigit() and year.isdigit()):\n        return False\n\n    month =\
    \ int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    elif month in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    else:\n        if day < 1 or day > 30:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    date_list = date.split('-')\n\n    if len(date_list)\
    \ != 3:\n        return False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return\
    \ False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\
    \n    if month == 2 and day > 29:\n        return False\n\n    return True\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if len(year) != 4:\n    \
    \    return False\n\n    if int(month) not in range(1, 13):\n        return False\n\
    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) not in range(1,\
    \ 32):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n    \
    \    if int(day) not in range(1, 31):\n            return False\n    elif int(month)\
    \ == 2:\n        if int(day) not in range(1, 30):\n            return False\n\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    if '/' in date:\n        return False\n\
    \n    month, day, year = date.split('-')\n\n    if int(month) < 1 or int(month)\
    \ > 12:\n        return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(day) < 1 or int(day) > 31:\n            return False\n    elif\
    \ int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n  \
    \          return False\n    elif int(month) == 2:\n        if int(day) < 1 or\
    \ int(day) > 29:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_5klmrm.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpn_5klmrm.py\", line 69,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpn_5klmrm.py\", line 62,\
    \ in check\n    assert candidate('04122003') == False\n  File \"/tmp/tmpn_5klmrm.py\"\
    , line 32, in valid_date\n    month, day, year = date.split('-')\nValueError:\
    \ not enough values to unpack (expected 3, got 1)\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    months\
    \ = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n      \
    \  5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n  \
    \      10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if not date:\n \
    \       return False\n\n    if date.count('-') != 2:\n        return False\n\n\
    \    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit()\
    \ or not year.isdigit():\n        return False\n\n    month = int(month)\n   \
    \ day = int(day)\n    year = int(year)\n\n    if month not in months:\n      \
    \  return False\n\n    if day < 1 or day > months[month]:\n        return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if '/' in date:\n        return False\n\
    \n    date_list = date.split('-')\n\n    if len(date_list) != 3:\n        return\
    \ False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n\n    if month > 12 or month < 1:\n        return False\n\
    \n    if day > 31 or day < 1:\n        return False\n\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n  \
    \  elif month == 2:\n        if day > 29:\n            return False\n\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if date == '':\n        return False\n\n    # check\
    \ if date is in correct format\n    if date.count('-') != 2:\n        return False\n\
    \n    # split date into month, day, year\n    date_split = date.split('-')\n \
    \   month = int(date_split[0])\n    day = int(date_split[1])\n    year = int(date_split[2])\n\
    \n    # check if month is valid\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    # check if day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if the date is empty\n    if date == '':\n        return False\n\n   \
    \ # check if the date is in the correct format\n    if not re.match(r'^\\d{2}-\\\
    d{2}-\\d{4}$', date):\n        return False\n\n    # split the date into month,\
    \ day, and year\n    month, day, year = date.split('-')\n\n    # check if the\
    \ month is valid\n    if not (1 <= int(month) <= 12):\n        return False\n\n\
    \    # check if the day is valid\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month)\
    \ in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return\
    \ False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 29):\n  \
    \          return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5b8zv_g.py\", line\
    \ 76, in <module>\n    test_check()\n  File \"/tmp/tmpa5b8zv_g.py\", line 74,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpa5b8zv_g.py\", line 56,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpa5b8zv_g.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month == 2:\n        if day >\
    \ 29 or day < 1:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day > 30 or day < 1:\n            return False\n    else:\n      \
    \  if day > 31 or day < 1:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    if len(date_list[0])\
    \ != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month > 12 or month < 1:\n        return\
    \ False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31 or day\
    \ < 1:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day > 30 or day < 1:\n            return False\n    elif month == 2:\n     \
    \   if day > 29 or day < 1:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$',\
    \ date):\n        return False\n\n    month, day, year = date.split('-')\n   \
    \ month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month\
    \ < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_2klxoe.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmpp_2klxoe.py\", line 72,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpp_2klxoe.py\", line 54,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpp_2klxoe.py\"\
    , line 29, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month == 2:\n        if day >\
    \ 29 or day < 1:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day > 30 or day < 1:\n            return False\n    else:\n      \
    \  if day > 31 or day < 1:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day > 31 or day < 1:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day > 30 or day < 1:\n            return False\n\
    \    elif month == 2:\n        if day > 29 or day < 1:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    elif month ==\
    \ 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n\
    \            return False\n    else:\n        if day < 1 or day > 31:\n      \
    \      return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_split = date.split('-')\n\
    \    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if the date is empty\n    if not date:\n        return False\n\n    #\
    \ check if the date is in the correct format\n    if not re.match(r'^\\d{2}-\\\
    d{2}-\\d{4}$', date):\n        return False\n\n    # split the date into month,\
    \ day and year\n    month, day, year = date.split('-')\n\n    # check if the month\
    \ is between 1 and 12\n    if not 1 <= int(month) <= 12:\n        return False\n\
    \n    # check if the day is between 1 and 31\n    if not 1 <= int(day) <= 31:\n\
    \        return False\n\n    # check if the year is between 1 and 9999\n    if\
    \ not 1 <= int(year) <= 9999:\n        return False\n\n    # check if the day\
    \ is between 1 and 30 for months 4,6,9,11\n    if int(month) in [4, 6, 9, 11]\
    \ and not 1 <= int(day) <= 30:\n        return False\n\n    # check if the day\
    \ is between 1 and 29 for month 2\n    if int(month) == 2 and not 1 <= int(day)\
    \ <= 29:\n        return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2yhaebt.py\", line\
    \ 81, in <module>\n    test_check()\n  File \"/tmp/tmpo2yhaebt.py\", line 79,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpo2yhaebt.py\", line 61,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpo2yhaebt.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_split = date.split('-')\n\
    \    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month, day, year = date_split\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    if '/' in date:\n        return False\n\
    \n    date_list = date.split('-')\n\n    if len(date_list) != 3:\n        return\
    \ False\n\n    if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2])\
    \ != 4:\n        return False\n\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if date == '':\n        return False\n\n    # check\
    \ if date is in the correct format\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$',\
    \ date):\n        return False\n\n    # split date into day, month and year\n\
    \    day, month, year = date.split('-')\n\n    # check if day is valid\n    if\
    \ int(day) < 1 or int(day) > 31:\n        return False\n\n    # check if month\
    \ is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n\
    \    # check if year is valid\n    if int(year) < 1:\n        return False\n\n\
    \    # check if day is valid for the month\n    if int(month) in [1, 3, 5, 7,\
    \ 8, 10, 12] and int(day) > 31:\n        return False\n    elif int(month) in\
    \ [4, 6, 9, 11] and int(day) > 30:\n        return False\n    elif int(month)\
    \ == 2 and int(day) > 29:\n        return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2g1d0rp.py\", line\
    \ 81, in <module>\n    test_check()\n  File \"/tmp/tmpq2g1d0rp.py\", line 79,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpq2g1d0rp.py\", line 61,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpq2g1d0rp.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    if len(date_list[0]) !=\
    \ 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    try:\n\
    \        datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n \
    \   except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5olkn5w7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp5olkn5w7.py\", line 52,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp5olkn5w7.py\", line 34,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp5olkn5w7.py\"\
    , line 27, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month > 12\
    \ or month < 1:\n        return False\n\n    if month == 2:\n        if day >\
    \ 29 or day < 1:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day > 30 or day < 1:\n           \
    \ return False\n    else:\n        if day > 31 or day < 1:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if not 1 <= month <= 12:\n        return False\n\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if not date:\n        return False\n\n    # check\
    \ if date is in correct format\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$',\
    \ date):\n        return False\n\n    # check if date is valid\n    month, day,\
    \ year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year\
    \ = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n   \
    \ if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n    \
    \        return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7gu6i9v.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmph7gu6i9v.py\", line 75,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7gu6i9v.py\", line 57,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7gu6i9v.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month == 4 or month == 6\
    \ or month == 9 or month == 11:\n        if day < 1 or day > 30:\n           \
    \ return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    try:\n        month, day, year\
    \ = date.split('-')\n    except ValueError:\n        return False\n\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n\
    \    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = [int(i)\
    \ for i in date.split('-')]\n    except ValueError:\n        return False\n\n\
    \    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != '-' or date[5] != '-':\n\
    \        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ Check if the date is empty\n    if date == '':\n        return False\n\n   \
    \ # Check if the date is in the correct format\n    if '-' not in date:\n    \
    \    return False\n\n    # Split the date into month, day, and year\n    month,\
    \ day, year = date.split('-')\n\n    # Check if the month is between 1 and 12\n\
    \    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check\
    \ if the day is between 1 and 31\n    if int(day) < 1 or int(day) > 31:\n    \
    \    return False\n\n    # Check if the year is between 1 and 9999\n    if int(year)\
    \ < 1 or int(year) > 9999:\n        return False\n\n    # Check if the day is\
    \ between 1 and 30 for months 4,6,9,11\n    if int(month) in [4, 6, 9, 11] and\
    \ int(day) > 30:\n        return False\n\n    # Check if the day is between 1\
    \ and 29 for month 2\n    if int(month) == 2 and int(day) > 29:\n        return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjhb8kqw.py\", line\
    \ 81, in <module>\n    test_check()\n  File \"/tmp/tmpvjhb8kqw.py\", line 79,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpvjhb8kqw.py\", line 74,\
    \ in check\n    assert candidate('2003-04') == False\n  File \"/tmp/tmpvjhb8kqw.py\"\
    , line 35, in valid_date\n    month, day, year = date.split('-')\nValueError:\
    \ not enough values to unpack (expected 3, got 2)\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month, day, year = date_split\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    if len(date_list[0])\
    \ != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$',\
    \ date):\n        return False\n\n    month, day, year = date.split('-')\n   \
    \ month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month\
    \ < 1 or month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8,\
    \ 10, 12):\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i1uxbax.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp6i1uxbax.py\", line 72,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp6i1uxbax.py\", line 54,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp6i1uxbax.py\"\
    , line 29, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    date_list = date.split('-')\n\n    if len(date_list)\
    \ != 3:\n        return False\n\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if date == '':\n        return False\n\n    # check\
    \ if date is in correct format\n    if len(date) != 10:\n        return False\n\
    \    if date[2] != '-' or date[5] != '-':\n        return False\n\n    # check\
    \ if month is valid\n    month = int(date[0:2])\n    if month < 1 or month > 12:\n\
    \        return False\n\n    # check if day is valid\n    day = int(date[3:5])\n\
    \    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    else:\n        if day < 1 or day > 31:\n            return\
    \ False\n\n    # check if year is valid\n    year = int(date[6:10])\n    if year\
    \ < 1:\n        return False\n\n    return True\n\n\ndef check(candidate):\n \
    \   assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date.count(\"-\") != 2:\n    \
    \    return False\n\n    if date.count(\"/\") != 0:\n        return False\n\n\
    \    if date.count(\" \") != 0:\n        return False\n\n    if date.count(\"\
    .\") != 0:\n        return False\n\n    if date.count(\",\") != 0:\n        return\
    \ False\n\n    date_list = date.split(\"-\")\n\n    if len(date_list[0]) != 2:\n\
    \        return False\n\n    if len(date_list[1]) != 2:\n        return False\n\
    \n    if len(date_list[2]) != 4:\n        return False\n\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n\n    if int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n\n    if int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month not in\
    \ range(1, 13):\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day not in range(1, 32):\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day not in range(1, 31):\n            return False\n\
    \    elif month == 2:\n        if day not in range(1, 30):\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$',\
    \ date):\n        return False\n\n    month, day, year = date.split('-')\n   \
    \ month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month\
    \ < 1 or month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8,\
    \ 10, 12):\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i1uxbax.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp6i1uxbax.py\", line 72,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp6i1uxbax.py\", line 54,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp6i1uxbax.py\"\
    , line 29, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    if len(date_list[0]) !=\
    \ 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n\n    if int(date_list[0]) > 12 or int(date_list[0]) <\
    \ 1:\n        return False\n\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if date is empty\n    if date == '':\n        return False\n\n    # check\
    \ if date is in correct format\n    if date.count('-') != 2:\n        return False\n\
    \n    # check if date is in correct format\n    if date.count('/') != 0:\n   \
    \     return False\n\n    # check if date is in correct format\n    if date.count('\
    \ ') != 0:\n        return False\n\n    # check if date is in correct format\n\
    \    if len(date) != 10:\n        return False\n\n    # check if date is in correct\
    \ format\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n \
    \   # check if date is in correct format\n    if date[0:2].isdigit() is False\
    \ or date[3:5].isdigit() is False or date[6:10].isdigit() is False:\n        return\
    \ False\n\n    # check if date is in correct format\n    if int(date[0:2]) < 1\
    \ or int(date[0:2]) > 12:\n        return False\n\n    # check if date is in correct\
    \ format\n    if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n\
    \n    # check if date is in correct format\n    if int(date[6:10]) < 1:\n    \
    \    return False\n\n    # check if date is in correct format\n    if int(date[0:2])\
    \ == 2 and int(date[3:5]) > 29:\n        return False\n\n    # check if date is\
    \ in correct format\n    if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5])\
    \ > 30:\n        return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    #\
    \ check if the date is empty\n    if not date:\n        return False\n\n    #\
    \ check if the date is in the correct format\n    if not re.match(r'^\\d{2}-\\\
    d{2}-\\d{4}$', date):\n        return False\n\n    # check if the date is valid\n\
    \    date_list = date.split('-')\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return\
    \ False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeo5ni8s.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmpdeo5ni8s.py\", line 75,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpdeo5ni8s.py\", line 57,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpdeo5ni8s.py\"\
    , line 31, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    try:\n        month, day, year = date.split('-')\n\
    \    except ValueError:\n        return False\n\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    date_list = date.split('-')\n\n    if len(date_list)\
    \ != 3:\n        return False\n\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n    \
    \    return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n\n    month\
    \ = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or\
    \ month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n\n    month, day, year = date_split\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    if len(date_list[0])\
    \ != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n\
    \n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    if len(date) != 10:\n        return\
    \ False\n\n    if date[2] != '-' or date[5] != '-':\n        return False\n\n\
    \    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    if month > 12 or month < 1:\n        return False\n\n    if month == 1 or\
    \ month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12:\n        if day > 31 or day < 1:\n            return False\n    elif\
    \ month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 30\
    \ or day < 1:\n            return False\n    elif month == 2:\n        if day\
    \ > 29 or day < 1:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == '':\n        return False\n\n    date_list = date.split('-')\n\n   \
    \ if len(date_list) != 3:\n        return False\n\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1\
    \ or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if len(date) != 10:\n        return False\n\
    \n    if date[2] != '-' or date[5] != '-':\n        return False\n\n    month\
    \ = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n\n    if\
    \ month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date.count(\"-\") != 2:\n    \
    \    return False\n\n    date_list = date.split(\"-\")\n\n    if len(date_list)\
    \ != 3:\n        return False\n\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    date_list = date.split('-')\n\n    if\
    \ len(date_list) != 3:\n        return False\n\n    month, day, year = date_list\n\
    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n   \
    \     return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \n    if month < 1 or month > 12:\n        return False\n\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ not date:\n        return False\n\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}',\
    \ date):\n        return False\n\n    month, day, year = date.split('-')\n   \
    \ month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month\
    \ < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_hgr39m.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp5_hgr39m.py\", line 72,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp5_hgr39m.py\", line 54,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp5_hgr39m.py\"\
    , line 29, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    if date[2] != '-' or date[5] != '-':\n\
    \        return False\n\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ date == \"\":\n        return False\n\n    date_list = date.split(\"-\")\n\n\
    \    if len(date_list) != 3:\n        return False\n\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return False\n\
    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def valid_date(date):\n    \"\"\"You have to write a function which validates\
    \ a given date string and\n    returns True if the date is valid otherwise False.\n\
    \    The date is valid if all of the following rules are satisfied:\n    1. The\
    \ date string is not empty.\n    2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    3. The months should\
    \ not be less than 1 or higher than 12.\n    4. The date should be in the format:\
    \ mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
    \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
    \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n\n    if\
    \ len(date) == 0:\n        return False\n\n    date_split = date.split('-')\n\
    \    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n\
    \    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month <\
    \ 1 or month > 12:\n        return False\n\n    if month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
