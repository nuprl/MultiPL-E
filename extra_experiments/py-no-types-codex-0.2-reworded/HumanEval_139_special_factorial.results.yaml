language: notypes.py
name: HumanEval_139_special_factorial
results:
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6ofe_mo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt6ofe_mo.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpt6ofe_mo.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\n\
    def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgm8i6goe.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgm8i6goe.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpgm8i6goe.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\n\
    def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgm8i6goe.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgm8i6goe.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpgm8i6goe.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n\
    \    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8t_8qls.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz8t_8qls.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpz8t_8qls.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n-1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexr6gi6h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpexr6gi6h.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpexr6gi6h.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwn7ht2nv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwn7ht2nv.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwn7ht2nv.py\"\
    , line 17, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo4gpf0j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyo4gpf0j.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyo4gpf0j.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6ofe_mo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt6ofe_mo.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpt6ofe_mo.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wugu0xs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8wugu0xs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8wugu0xs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The\
    \ function will receive an integer as input and should return the special\n  \
    \  factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr80xr3iv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr80xr3iv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr80xr3iv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
