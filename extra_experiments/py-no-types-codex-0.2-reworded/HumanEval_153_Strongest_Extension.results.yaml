language: notypes.py
name: HumanEval_153_Strongest_Extension
results:
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76m60bp8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp76m60bp8.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp76m60bp8.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower_case(string)\n    # that you\
    \ implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87krom0p.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmp87krom0p.py\", line 67,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp87krom0p.py\"\
    , line 56, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72yge0s6.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmp72yge0s6.py\", line 61,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp72yge0s6.py\"\
    , line 50, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwjy8jha.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfwjy8jha.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpfwjy8jha.py\"\
    , line 26, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjsm8kma.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjsm8kma.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzjsm8kma.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: x.count(x.upper())\
    \ - x.count(x.lower()))\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcx3w5pu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptcx3w5pu.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmptcx3w5pu.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   # return 'my_class.AA'\n    # pass\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    strength = 0\n        for char in extension:\n            if char.isupper():\n\
    \                strength += 1\n            elif char.islower():\n           \
    \     strength -= 1\n        if strength > strongest_extension_strength:\n   \
    \         strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevi7vann.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpevi7vann.py\", line 48,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpevi7vann.py\"\
    , line 39, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   strength = 0\n    strongest = ''\n    for ext in extensions:\n        CAP\
    \ = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n\
    \        if CAP - SM > strength:\n            strength = CAP - SM\n          \
    \  strongest = ext\n    return class_name + '.' + strongest\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bf1m7_p.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9bf1m7_p.py\", line 42,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp9bf1m7_p.py\"\
    , line 33, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4xelb13.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpt4xelb13.py\", line 58,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpt4xelb13.py\"\
    , line 47, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return '{}.{}'.format(class_name, max(extensions, key=lambda x: (sum(1 for\
    \ c in x if c.isupper()), x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi5fnqz1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzi5fnqz1.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzi5fnqz1.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (len(re.findall('[A-Z]',\
    \ x)), x))\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqn_ucjsn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqn_ucjsn.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpqn_ucjsn.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpqn_ucjsn.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: (len(re.findall('[A-Z]',\
    \ x)), x))\n  File \"/tmp/tmpqn_ucjsn.py\", line 20, in <lambda>\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (len(re.findall('[A-Z]', x)), x))\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return None\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rv554kz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3rv554kz.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp3rv554kz.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v506iyy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4v506iyy.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4v506iyy.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(s)\n    # that you have already\
    \ implemented\n    # You can also use the function is_stronger(s1, s2)\n    #\
    \ that you have already implemented\n    # You can also use the function is_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_weaker(s1, s2)\n    # that you have already implemented\n    # You can also\
    \ use the function is_stronger_or_equal(s1, s2)\n    # that you have already implemented\n\
    \    # You can also use the function is_weaker_or_equal(s1, s2)\n    # that you\
    \ have already implemented\n    # You can also use the function is_stronger_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_weaker_or_equal(s1, s2)\n    # that you have already implemented\n    # You\
    \ can also use the function is_stronger_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_weaker_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_stronger_or_equal(s1, s2)\n    # that you have already implemented\n    #\
    \ You can also use the function is_weaker_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_stronger_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_weaker_or_equal(s1, s2)\n    # that you have already implemented\n    # You\
    \ can also use the function is_stronger_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_weaker_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_stronger_or\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15mvmwbu.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp15mvmwbu.py\", line 65,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp15mvmwbu.py\"\
    , line 54, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v506iyy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4v506iyy.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4v506iyy.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjsm8kma.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjsm8kma.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzjsm8kma.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzqmxjfb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwzqmxjfb.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpwzqmxjfb.py\"\
    , line 28, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    # You can also use the function count_upper_lower(string)\n    # which returns\
    \ a tuple of the number of uppercase and lowercase letters\n    # in the string.\n\
    \    #\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsnsr0u3.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmptsnsr0u3.py\", line 69,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmptsnsr0u3.py\"\
    , line 58, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return None\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfss3rnkk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfss3rnkk.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpfss3rnkk.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower_case(string)\n    # which returns\
    \ a tuple of the number of upper case and lower case letters\n    # in the string.\n\
    \    # You can also use the function is_upper(char) which returns True if char\n\
    \    # is an upper case letter, and False otherwise.\n    # You can also use the\
    \ function is_lower(char) which returns True if char\n    # is a lower case letter,\
    \ and False otherwise.\n    # You can also use the function is_letter(char) which\
    \ returns True if char\n    # is a letter, and False otherwise.\n    # You can\
    \ also use the function is_digit(char) which returns True if char\n    # is a\
    \ digit, and False otherwise.\n    # You can also use the function is_space(char)\
    \ which returns True if char\n    # is a space, and False otherwise.\n    # You\
    \ can also use the function is_punctuation(char) which returns True if char\n\
    \    # is a punctuation, and False otherwise.\n    # You can also use the function\
    \ is_alnum(char) which returns True if char\n    # is a letter or a digit, and\
    \ False otherwise.\n    # You can also use the function is_alpha(char) which returns\
    \ True if char\n    # is a letter, and False otherwise.\n    # You can also use\
    \ the function is_decimal(char) which returns True if char\n    # is a decimal\
    \ digit, and False otherwise.\n    # You can also use the function is_digit(char)\
    \ which returns True if char\n    # is a digit, and False otherwise.\n    # You\
    \ can also use the function is_numeric(char) which returns True if char\n    #\
    \ is a numeric character, and False otherwise.\n    # You can also use the function\
    \ is_printable(char) which returns True if char\n    # is a printable character,\
    \ and False otherwise.\n    # You can also use the function is_whitespace(char)\
    \ which returns True if char\n    # is a whitespace character, and False otherwise.\n\
    \    # You can also use the function ord(char) which returns the Unicode code\
    \ point\n    # for a one-character string.\n    # You can also use the function\
    \ ch\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbtwy5wp.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpsbtwy5wp.py\", line 64,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpsbtwy5wp.py\"\
    , line 53, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   # return 'my_class.AA'\n    pass\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86on0i9k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp86on0i9k.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp86on0i9k.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Write your code here\n\
    \    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9hxvmmx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd9hxvmmx.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpd9hxvmmx.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the first letter of the class name is capitalized\n   \
    \ # while the first letter of the extension name is not.\n    # You may find the\
    \ string method isupper() useful.\n    # You may assume that the class name and\
    \ the extension names are non-empty strings.\n    # You may assume that the extension\
    \ names are unique.\n    # You may assume that the list of extensions is non-empty.\n\
    \    # You may assume that the class name and the extension names contain only\
    \ letters.\n    # You may assume that the class name and the extension names do\
    \ not contain any spaces.\n    # You may assume that the class name and the extension\
    \ names do not contain any digits.\n    # You may assume that the class name and\
    \ the extension names do not contain any special characters.\n    # You may assume\
    \ that the class name and the extension names do not contain any uppercase letters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any lowercase letters.\n    # You may assume that the class name and the extension\
    \ names do not contain any punctuation marks.\n    # You may assume that the class\
    \ name and the extension names do not contain any symbols.\n    # You may assume\
    \ that the class name and the extension names do not contain any control characters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any whitespace characters.\n    # You may assume that the class name and the\
    \ extension names do not contain any non-printable characters.\n    # You may\
    \ assume that the class name and the extension names do not contain any non-ASCII\
    \ characters.\n    # You may assume that the class name and the extension names\
    \ do not contain any non-Latin characters.\n    # You may assume that the class\
    \ name and the extension names do not contain any non-Roman characters.\n    #\
    \ You may assume that the class name and the extension names do not contain any\
    \ non-Greek characters.\n    # You may assume that the class name and the extension\
    \ names do not contain any non-Cyrillic characters.\n    # You may assume that\
    \ the class name and the extension names do not contain any non-Arabic characters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any non-Hebrew characters.\n    # You may assume that the class name and the\
    \ extension\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhto2bs8.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpvhto2bs8.py\", line 57,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpvhto2bs8.py\"\
    , line 46, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return \n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexe7xg3m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpexe7xg3m.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpexe7xg3m.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall(r'[A-Z]',\
    \ x)) - len(re.findall(r'[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8sy4qgp7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8sy4qgp7.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp8sy4qgp7.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmp8sy4qgp7.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall(r'[A-Z]',\
    \ x)) - len(re.findall(r'[a-z]', x)))\n  File \"/tmp/tmp8sy4qgp7.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall(r'[A-Z]',\
    \ x)) - len(re.findall(r'[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the first line of the code stub is not included in the\n\
    \    # autograder submission. You will need to add it yourself for testing.\n\
    \    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6gmu7ii.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm6gmu7ii.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpm6gmu7ii.py\"\
    , line 27, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwjy8jha.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfwjy8jha.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpfwjy8jha.py\"\
    , line 26, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # +++your code here+++\n\
    \    return\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh2biuew.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsh2biuew.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpsh2biuew.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower_case(string)\n    # to count\
    \ the number of uppercase and lowercase letters in a string.\n    # You can also\
    \ use the function is_upper_case(string) to check if a string\n    # is all uppercase.\n\
    \    # You can use the function is_lower_case(string) to check if a string\n \
    \   # is all lowercase.\n    # You can use the function is_upper_lower_case(string)\
    \ to check if a string\n    # is all uppercase or all lowercase.\n    # You can\
    \ use the function is_alpha(string) to check if a string\n    # is all alphabetic.\n\
    \    # You can use the function is_digit(string) to check if a string\n    # is\
    \ all digits.\n    # You can use the function is_alpha_digit(string) to check\
    \ if a string\n    # is all alphabetic or all digits.\n    # You can use the function\
    \ is_alpha_digit_space(string) to check if a string\n    # is all alphabetic,\
    \ all digits, or all spaces.\n    # You can use the function is_alpha_digit_space_punctuation(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, or all\
    \ punctuation.\n    # You can use the function is_alpha_digit_space_punctuation_newline(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ or all newlines.\n    # You can use the function is_alpha_digit_space_punctuation_newline_tab(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ all newlines, or all tabs.\n    # You can use the function is_alpha_digit_space_punctuation_newline_tab_carriage(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ all newlines, all tabs, or all carriage returns.\n    # You can use the function\
    \ is_alpha_digit_space_punctuation_new\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2o7k5zvo.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp2o7k5zvo.py\", line 57,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp2o7k5zvo.py\"\
    , line 46, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzqmxjfb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwzqmxjfb.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpwzqmxjfb.py\"\
    , line 28, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the first line of the code stub is not included in the\n\
    \    # autograder\n    pass\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6nn05m_f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6nn05m_f.py\", line 37,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp6nn05m_f.py\"\
    , line 26, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjsm8kma.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjsm8kma.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzjsm8kma.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwjy8jha.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfwjy8jha.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpfwjy8jha.py\"\
    , line 26, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() to check if a character is uppercase.\n\
    \    # You can use the function islower() to check if a character is lowercase.\n\
    \    # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function ord() to get the ASCII code of a character.\n    # You\
    \ can use the function chr() to get the character from its ASCII code.\n    #\
    \ You can use the function str() to convert a number to a string.\n    # You can\
    \ use the function int() to convert a string to a number.\n    # You can use the\
    \ function float() to convert a string to a floating point number.\n    # You\
    \ can use the function round() to round a floating point number.\n    # You can\
    \ use the function max() to find the maximum value in a list.\n    # You can use\
    \ the function min() to find the minimum value in a list.\n    # You can use the\
    \ function sum() to find the sum of the values in a list.\n    # You can use the\
    \ function sorted() to sort a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    # You can use the function enumerate() to get the index\
    \ and value of each item in a list.\n    # You can use the function zip() to combine\
    \ two lists into a list of tuples.\n    # You can use the function range() to\
    \ create a list of numbers.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function all() to check if all items\
    \ in a list are True.\n    # You can use the function any() to check if any item\
    \ in a list is True.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function reversed() to reverse a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function reversed() to reverse a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    #\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt654o3_8.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpt654o3_8.py\", line 61,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpt654o3_8.py\"\
    , line 50, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() to check if a letter is uppercase.\n\
    \    # You can use the function islower() to check if a letter is lowercase.\n\
    \    # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function ord() to get the ASCII code of a letter.\n    # You can\
    \ use the function chr() to get the letter from its ASCII code.\n    # You can\
    \ use the function range() to get a list of numbers.\n    # You can use the function\
    \ str() to convert a number to a string.\n    # You can use the function int()\
    \ to convert a string to a number.\n    # You can use the function float() to\
    \ convert a string to a float.\n    # You can use the function max() to get the\
    \ maximum value from a list.\n    # You can use the function min() to get the\
    \ minimum value from a list.\n    # You can use the function sum() to get the\
    \ sum of all the values in a list.\n    # You can use the function abs() to get\
    \ the absolute value of a number.\n    # You can use the function pow() to get\
    \ the power of a number.\n    # You can use the function round() to round a number.\n\
    \    # You can use the function divmod() to get the quotient and the remainder\
    \ of a division.\n    # You can use the function sorted() to sort a list.\n  \
    \  # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function enumerate() to get the index and the value of each element in a\
    \ list.\n    # You can use the function zip() to combine two lists.\n    # You\
    \ can use the function all() to check if all the elements in a list are True.\n\
    \    # You can use the function any() to check if any of the elements in a list\
    \ are True.\n    # You can use the function filter() to filter a list.\n    #\
    \ You can use the function map() to map a list.\n    # You can use the function\
    \ reduce() to reduce a list.\n    # You can use the function str.join() to join\
    \ a list of strings.\n    # You can use the function str.split() to split a string.\n\
    \    # You can use\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8fehby0.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpt8fehby0.py\", line 60,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpt8fehby0.py\"\
    , line 49, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Hint: Use the function isupper() to check if a character is uppercase.\n\
    \    # Hint: Use the function islower() to check if a character is lowercase.\n\
    \    # Hint: Use the function ord() to get the integer value of a character.\n\
    \    # Hint: Use the function chr() to get the character from its integer value.\n\
    \    # Hint: Use the function len() to get the length of a string.\n    # Hint:\
    \ Use the function range() to get a list of integers.\n    # Hint: Use the function\
    \ enumerate() to get the index of an element in a list.\n    # Hint: Use the function\
    \ zip() to combine two lists into a list of tuples.\n    # Hint: Use the function\
    \ max() to get the maximum value of a list.\n    # Hint: Use the function min()\
    \ to get the minimum value of a list.\n    # Hint: Use the function abs() to get\
    \ the absolute value of a number.\n    # Hint: Use the function sum() to get the\
    \ sum of a list.\n    # Hint: Use the function divmod() to get the quotient and\
    \ remainder of a division.\n    # Hint: Use the function pow() to get the power\
    \ of a number.\n    # Hint: Use the function round() to round a number.\n    #\
    \ Hint: Use the function sorted() to sort a list.\n    # Hint: Use the function\
    \ reversed() to reverse a list.\n    # Hint: Use the function filter() to filter\
    \ a list.\n    # Hint: Use the function map() to map a list.\n    # Hint: Use\
    \ the function reduce() to reduce a list.\n    # Hint: Use the function all()\
    \ to check if all elements in a list are True.\n    # Hint: Use the function any()\
    \ to check if any element in a list is True.\n    # Hint: Use the function any()\
    \ to check if any element in a list is True.\n    # Hint: Use the function any()\
    \ to check if any element in a list is True.\n    # Hint: Use the function any()\
    \ to check if any element in a list is True.\n    # Hint: Use the function any()\
    \ to check\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_5akqm1.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmph_5akqm1.py\", line 58,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmph_5akqm1.py\"\
    , line 47, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7s51erx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc7s51erx.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpc7s51erx.py\"\
    , line 25, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the solution is not unique\n    # You can write your own\
    \ code to test the correctness of your solution\n    # Hint: You can use the function\
    \ isupper() and islower()\n    # Hint: You can use the function ord() to get the\
    \ ASCII code of a character\n    # Hint: You can use the function chr() to get\
    \ the character from ASCII code\n    # Hint: You can use the function len() to\
    \ get the length of a string\n    # Hint: You can use the function range() to\
    \ generate a list of integers\n    # Hint: You can use the function enumerate()\
    \ to get the index of an item in a list\n    # Hint: You can use the function\
    \ max() to get the maximum value in a list\n    # Hint: You can use the function\
    \ min() to get the minimum value in a list\n    # Hint: You can use the function\
    \ abs() to get the absolute value of a number\n    # Hint: You can use the function\
    \ round() to round a number\n    # Hint: You can use the function sum() to get\
    \ the sum of a list\n    # Hint: You can use the function sorted() to sort a list\n\
    \    # Hint: You can use the function reversed() to reverse a list\n    # Hint:\
    \ You can use the function join() to join a list of strings\n    # Hint: You can\
    \ use the function split() to split a string into a list of strings\n    # Hint:\
    \ You can use the function strip() to remove the leading and trailing spaces of\
    \ a string\n    # Hint: You can use the function replace() to replace a substring\
    \ with another substring\n    # Hint: You can use the function find() to find\
    \ the index of a substring in a string\n    # Hint: You can use the function count()\
    \ to count the number of occurrences of a substring in a string\n    # Hint: You\
    \ can use the function index() to get the index of an item in a list\n    # Hint:\
    \ You can use the function append() to add an item to the end of a list\n    #\
    \ Hint: You can use the function insert() to insert an item at a specific index\
    \ of a list\n    # Hint: You can use the function remove() to remove an\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z1bh_3c.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp1z1bh_3c.py\", line 57,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp1z1bh_3c.py\"\
    , line 46, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # that you have\
    \ written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_\n\
    def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rmrqmao.py\", line\
    \ 73, in <module>\n    test_check()\n  File \"/tmp/tmp4rmrqmao.py\", line 71,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4rmrqmao.py\"\
    , line 60, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzqmxjfb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwzqmxjfb.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpwzqmxjfb.py\"\
    , line 28, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   strongest = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            elif letter.islower():\n         \
    \       strength -= 1\n        if strength > strongest:\n            strongest\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7ajbwd7.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpu7ajbwd7.py\", line 46,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpu7ajbwd7.py\"\
    , line 37, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for i in x\
    \ if i.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y3b7ryv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6y3b7ryv.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp6y3b7ryv.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjsm8kma.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjsm8kma.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzjsm8kma.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Hint: You can use the function 'count' to count the number of \n    #  \
    \     occurrences of a character in a string.\n    #       For example:\n    #\
    \       >>> 'hello'.count('l')\n    #       2\n    #       >>> 'hello'.count('e')\n\
    \    #       1\n    #       >>> 'hello'.count('o')\n    #       1\n    #     \
    \  >>> 'hello'.count('h')\n    #       1\n    #       >>> 'hello'.count('z')\n\
    \    #       0\n    #       >>> 'hello'.count('H')\n    #       0\n    #     \
    \  >>> 'hello'.count('L')\n    #       0\n    #       >>> 'hello'.count('E')\n\
    \    #       0\n    #       >>> 'hello'.count('O')\n    #       0\n    #     \
    \  >>> 'hello'.count('Z')\n    #       0\n    #       >>> 'hello'.count('H')\n\
    \    #       0\n    #       >>> 'hello'.count('L')\n    #       0\n    #     \
    \  >>> 'hello'.count('E')\n    #       0\n    #       >>> 'hello'.count('O')\n\
    \    #       0\n    #       >>> 'hello'.count('Z')\n    #       0\n    #     \
    \  >>> 'hello'.count('H')\n    #       0\n    #       >>> 'hello'.count('L')\n\
    \    #       0\n    #       >>> 'hello'.count('E')\n    #       0\n    #     \
    \  >>> 'hello'.count('O')\n    #       0\n    #       >>> 'hello'.count('Z')\n\
    \    #       0\n    #       >>> 'hello'.count('H')\n    #       0\n    #     \
    \  >>> 'hello'.count('L')\n    #       0\n    #       >>> 'hello'.count('E')\n\
    \    #       0\n    #       >>> 'hello'.count('O')\n    #       0\n    #     \
    \  >>> 'hello'.count('Z')\n    #       0\n    #       >>> 'hello'.count('H')\n\
    \    #       0\n    #       >>> 'hello'.count('L')\n    #       0\n    #     \
    \  >>> 'hello'.\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2q16f9p.py\", line\
    \ 92, in <module>\n    test_check()\n  File \"/tmp/tmpl2q16f9p.py\", line 90,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpl2q16f9p.py\"\
    , line 79, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Write your code here\n\
    \    # Hint: You may use the function 'isupper' to check if a character is uppercase.\n\
    \    # Hint: You may use the function 'islower' to check if a character is lowercase.\n\
    \    # Hint: You may use the function 'ord' to get the ASCII value of a character.\n\
    \    # Hint: You may use the function 'chr' to get the character of a given ASCII\
    \ value.\n    # Hint: You may use the function 'len' to get the length of a string.\n\
    \    # Hint: You may use the function 'range' to get a list of numbers.\n    #\
    \ Hint: You may use the function 'max' to get the maximum value in a list.\n \
    \   # Hint: You may use the function 'min' to get the minimum value in a list.\n\
    \    # Hint: You may use the function 'index' to get the index of an element in\
    \ a list.\n    # Hint: You may use the function 'append' to add an element to\
    \ a list.\n    # Hint: You may use the function 'pop' to remove an element from\
    \ a list.\n    # Hint: You may use the function 'remove' to remove an element\
    \ from a list.\n    # Hint: You may use the function 'split' to split a string\
    \ into a list of strings.\n    # Hint: You may use the function 'join' to join\
    \ a list of strings into a string.\n    # Hint: You may use the function 'sort'\
    \ to sort a list.\n    # Hint: You may use the function 'sorted' to sort a list.\n\
    \    # Hint: You may use the function 'reverse' to reverse a list.\n    # Hint:\
    \ You may use the function 'reversed' to reverse a list.\n    # Hint: You may\
    \ use the function 'count' to count the number of occurrences of an element in\
    \ a list.\n    # Hint: You may use the function 'sum' to sum the elements of a\
    \ list.\n    # Hint: You may use the function 'map' to map a function to a list.\n\
    \    # Hint: You may use the function 'filter' to filter a list.\n    # Hint:\
    \ You may use the function\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpregwqwo6.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpregwqwo6.py\", line 55,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpregwqwo6.py\"\
    , line 44, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v506iyy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4v506iyy.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4v506iyy.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # to count the number\
    \ of uppercase and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uu2o4zg.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp2uu2o4zg.py\", line 58,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp2uu2o4zg.py\"\
    , line 47, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjsm8kma.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjsm8kma.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpzjsm8kma.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + \".\" + max(extensions, key=lambda x: (sum(1 for c in\
    \ x if c.isupper()), -sum(1 for c in x if c.islower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptk8arfz2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptk8arfz2.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmptk8arfz2.py\"\
    , line 28, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for i in x\
    \ if i.isupper()), -sum(1 for i in x if i.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oikwbv4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7oikwbv4.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp7oikwbv4.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v506iyy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4v506iyy.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4v506iyy.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return None\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rv554kz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3rv554kz.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp3rv554kz.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return None\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rv554kz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3rv554kz.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp3rv554kz.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm38081g.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpqm38081g.py\", line 64,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpqm38081g.py\"\
    , line 53, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # to count the number\
    \ of uppercase and lowercase letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of uppercase and lowercase\
    \ letters in a string\n    def count_upper_lower(string):\n        upper = 0\n\
    \        lower = 0\n        for char in string:\n            if char.isupper():\n\
    \                upper += 1\n            elif char.islower():\n              \
    \  lower += 1\n        return upper, lower\n    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        upper, lower = count_upper_lower(extension)\n\
    \        if upper - lower > strongest:\n            strongest = upper - lower\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\
    \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknnwxvqd.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpknnwxvqd.py\", line 54,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpknnwxvqd.py\"\
    , line 45, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n    \n    \ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjvl3vg6b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjvl3vg6b.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpjvl3vg6b.py\"\
    , line 26, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   # return 'my_class.AA'\n    pass\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86on0i9k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp86on0i9k.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp86on0i9k.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + \".\" + max(extensions, key=lambda x: (sum(1 for c in\
    \ x if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtbirxau.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxtbirxau.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpxtbirxau.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function Count_Upper_Lower_Case(string)\n    # that you\
    \ have written in the previous question\n    pass\n\ndef check(candidate):\n \
    \   assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa09do3e7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpa09do3e7.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpa09do3e7.py\"\
    , line 25, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the autograder will not call this function, so do not change\
    \ its name\n    # You may create other functions as needed\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjctolvm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsjctolvm.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpsjctolvm.py\"\
    , line 25, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the first letter of the class name is always capital\n\
    \    # and the extension names are always in lowercase.\n    # You can assume\
    \ that the class name is always a string and the list of\n    # extensions is\
    \ always a list of strings.\n    # You can also assume that the list of extensions\
    \ is never empty.\n    # You can also assume that the class name is never empty.\n\
    \    # You can also assume that the class name and the extension names will\n\
    \    # never contain any spaces.\n    # You can also assume that the class name\
    \ and the extension names will\n    # always contain at least one letter.\n  \
    \  # You can also assume that the class name and the extension names will\n  \
    \  # always contain only letters.\n    # You can also assume that the class name\
    \ and the extension names will\n    # always contain only letters and numbers.\n\
    \    # You can also assume that the class name and the extension names will\n\
    \    # always contain only letters, numbers and underscores.\n    # You can also\
    \ assume that the class name and the extension names will\n    # always contain\
    \ only letters, numbers, underscores and dots.\n    # You can also assume that\
    \ the class name and the extension names will\n    # always contain only letters,\
    \ numbers, underscores, dots and dashes.\n    # You can also assume that the class\
    \ name and the extension names will\n    # always contain only letters, numbers,\
    \ underscores, dots, dashes and\n    # spaces.\n    # You can also assume that\
    \ the class name and the extension names will\n    # always contain only letters,\
    \ numbers, underscores, dots, dashes, spaces\n    # and parentheses.\n    # You\
    \ can also assume that the class name and the extension names will\n    # always\
    \ contain only letters, numbers, underscores, dots, dashes, spaces,\n    # parentheses\
    \ and brackets.\n    # You can also assume that the class name and the extension\
    \ names will\n    # always contain only letters, numbers, underscores, dots, dashes,\
    \ spaces,\n    # parentheses, brackets and curly braces.\n    # You can also assume\
    \ that the class name and the extension names will\n    # always contain only\
    \ letters, numbers, underscores, dots, dashes, spaces,\n    # parentheses, brackets,\
    \ curly braces and commas.\n    # You can also assume that the class name and\
    \ the\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobtt6krp.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpobtt6krp.py\", line 68,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpobtt6krp.py\"\
    , line 57, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower(string)\n    # which returns\
    \ a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n    # for\
    \ a given string\n    # You can use the function count_upper_lower(string)\n \
    \   # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple (number_of_uppercase_letters, number_of_lowercase_letters)\n\
    \    # for a given string\n    # You can use\ndef check(candidate):\n    assert\
    \ candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8uwb_3z.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpk8uwb_3z.py\", line 63,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpk8uwb_3z.py\"\
    , line 52, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Hint: You can use the function 'isupper' to check if a character is uppercase.\n\
    \    #       You can use the function 'islower' to check if a character is lowercase.\n\
    \    #       You can use the function 'ord' to get the ASCII value of a character.\n\
    \    #       You can use the function 'chr' to get the character from its ASCII\
    \ value.\n    #       You can use the function 'len' to get the length of a string.\n\
    \    #       You can use the function 'range' to get a list of numbers.\n    #\
    \       You can use the function 'sorted' to sort a list.\n    #       You can\
    \ use the function 'enumerate' to get the index of an element in a list.\n   \
    \ #       You can use the function 'zip' to combine two lists.\n    #       You\
    \ can use the function 'max' to get the maximum value of a list.\n    #      \
    \ You can use the function 'min' to get the minimum value of a list.\n    #  \
    \     You can use the function 'sum' to get the sum of a list.\n    #       You\
    \ can use the function 'all' to check if all elements of a list are True.\n  \
    \  #       You can use the function 'any' to check if any element of a list is\
    \ True.\n    #       You can use the function 'reversed' to get a reversed list.\n\
    \    #       You can use the function 'filter' to filter a list.\n    #      \
    \ You can use the function 'map' to map a list.\n    #       You can use the function\
    \ 'reduce' to reduce a list.\n    #       You can use the function 'abs' to get\
    \ the absolute value of a number.\n    #       You can use the function 'round'\
    \ to round a number.\n    #       You can use the function 'divmod' to get the\
    \ quotient and remainder of a division.\n    #       You can use the function\
    \ 'pow' to get the power of a number.\n    #       You can use the function 'bin'\
    \ to get the binary representation of a number.\n    #       You can use the function\
    \ 'hex' to get the hexadecimal representation of a number.\n    #       You can\
    \ use the function\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqps2ued.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpgqps2ued.py\", line 57,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpgqps2ued.py\"\
    , line 46, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() to check if a character is uppercase.\n\
    \    # You can use the function islower() to check if a character is lowercase.\n\
    \    # You can use the function ord() to get the ASCII value of a character.\n\
    \    # You can use the function chr() to get the character of a given ASCII value.\n\
    \    # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function range() to get a list of numbers.\n    # You can use the\
    \ function str() to convert a number to a string.\n    # You can use the function\
    \ int() to convert a string to a number.\n    # You can use the function float()\
    \ to convert a string to a float.\n    # You can use the function max() to get\
    \ the maximum value of a list.\n    # You can use the function min() to get the\
    \ minimum value of a list.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function sum() to get the sum of a\
    \ list.\n    # You can use the function round() to round a number.\n    # You\
    \ can use the function sorted() to sort a list.\n    # You can use the function\
    \ reversed() to reverse a list.\n    # You can use the function enumerate() to\
    \ get the index and value of a list.\n    # You can use the function zip() to\
    \ combine two lists.\n    # You can use the function filter() to filter a list.\n\
    \    # You can use the function map() to map a list.\n    # You can use the function\
    \ reduce() to reduce a list.\n    # You can use the function any() to check if\
    \ any of the elements in a list are True.\n    # You can use the function all()\
    \ to check if all of the elements in a list are True.\n    # You can use the function\
    \ isinstance() to check if an object is an instance of a class.\n    # You can\
    \ use the function issubclass() to check if a class is a subclass of another class.\n\
    \    # You can use the function hasattr() to check if an object has an attribute.\n\
    \    # You can use the function getattr() to get the value of an attribute.\n\
    \    #\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzwn1s5a.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpvzwn1s5a.py\", line 60,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpvzwn1s5a.py\"\
    , line 49, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + \".\" + max(extensions, key=lambda x: (sum(1 for c in\
    \ x if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvhuemqb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkvhuemqb.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkvhuemqb.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower_letters(word)\n    # to count\
    \ the number of uppercase and lowercase letters in a word\n    # You can use the\
    \ function count_upper_lower_letters(word)\n    # to count the number of uppercase\
    \ and lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n   \ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ym4chs5.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmp_ym4chs5.py\", line 61,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp_ym4chs5.py\"\
    , line 50, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7s51erx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc7s51erx.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpc7s51erx.py\"\
    , line 25, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function count_upper_lower from the previous problem\n \
    \   # to count the number of uppercase and lowercase letters in a string\n   \
    \ # You can also use the function count_upper_lower_dict from the previous\n \
    \   # problem to count the number of uppercase and lowercase letters in a string\n\
    \    # and return a dictionary with the counts\n    # You can also use the function\
    \ count_upper_lower_dict_list from the previous\n    # problem to count the number\
    \ of uppercase and lowercase letters in a list\n    # of strings and return a\
    \ list of dictionaries with the counts\n    # You can also use the function count_upper_lower_dict_list_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a dictionary of dictionaries\
    \ with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a list of dictionaries of dictionaries\
    \ with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a dictionary of dictionaries\
    \ of dictionaries with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict_list\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a list of dictionaries of dictionaries\
    \ of dictionaries with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict_list_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a dictionary of dictionaries\
    \ of dictionaries of dictionaries with the counts\n    # You can also use the\
    \ function count_upper_lower_dict_list_dict_list_dict_list_dict_list from the\
    \ previous\n    # problem to count the number of uppercase\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3n84l5wb.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp3n84l5wb.py\", line 57,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp3n84l5wb.py\"\
    , line 46, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + \".\" + max(extensions, key=lambda x: (sum(1 for c in\
    \ x if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvhuemqb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkvhuemqb.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkvhuemqb.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirluv5cg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirluv5cg.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpirluv5cg.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpirluv5cg.py\", line 20, in Strongest_Extension\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n  File \"/tmp/tmpirluv5cg.py\", line 20,\
    \ in <lambda>\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7o45ume.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy7o45ume.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpy7o45ume.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() and islower() to check if a character\
    \ is uppercase or lowercase.\n    # You can use the function ord() to get the\
    \ ASCII value of a character.\n    # You can use the function chr() to get the\
    \ character from the ASCII value.\n    # You can use the function len() to get\
    \ the length of a string.\n    # You can use the function range() to get a list\
    \ of numbers.\n    # You can use the function sum() to sum a list of numbers.\n\
    \    # You can use the function zip() to zip two lists into a list of tuples.\n\
    \    # You can use the function max() to get the maximum value from a list.\n\
    \    # You can use the function min() to get the minimum value from a list.\n\
    \    # You can use the function sorted() to sort a list.\n    # You can use the\
    \ function reversed() to reverse a list.\n    # You can use the function enumerate()\
    \ to get a list of tuples with the index and the value.\n    # You can use the\
    \ function str() to convert an integer to a string.\n    # You can use the function\
    \ int() to convert a string to an integer.\n    # You can use the function float()\
    \ to convert a string to a float.\n    # You can use the function abs() to get\
    \ the absolute value of a number.\n    # You can use the function all() to check\
    \ if all the values in a list are true.\n    # You can use the function any()\
    \ to check if any of the values in a list are true.\n    # You can use the function\
    \ map() to apply a function to all the values in a list.\n    # You can use the\
    \ function filter() to filter a list based on a function.\n    # You can use the\
    \ function reduce() to reduce a list to a single value.\n    # You can use the\
    \ function round() to round a number.\n    # You can use the function pow() to\
    \ raise a number to a power.\n    # You can use the function divmod() to get the\
    \ quotient and the remainder of a division.\n    # You can use the function pow()\
    \ to raise a number to a power.\n    # You can use the function divmod() to get\
    \ the quotient and the remainder of a\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vagmg4w.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp_vagmg4w.py\", line 58,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp_vagmg4w.py\"\
    , line 47, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkw6m29g.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmkw6m29g.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpmkw6m29g.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    #your code here\n  \
    \  pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprc27ewnn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprc27ewnn.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmprc27ewnn.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Hint: You can use the function count_uppercase_letters(s)\n    #       and\
    \ count_lowercase_letters(s)\n    #       that you have already written in the\
    \ previous exercise.\n    strongest_extension = extensions[0]\n    strongest_strength\
    \ = count_uppercase_letters(extensions[0]) - count_lowercase_letters(extensions[0])\n\
    \    for extension in extensions:\n        strength = count_uppercase_letters(extension)\
    \ - count_lowercase_letters(extension)\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps202vf0z.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps202vf0z.py\", line 44,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmps202vf0z.py\"\
    , line 33, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmps202vf0z.py\", line 24, in Strongest_Extension\n\
    \    strongest_strength = count_uppercase_letters(extensions[0]) - count_lowercase_letters(extensions[0])\n\
    NameError: name 'count_uppercase_letters' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   # return 'my_class.AA'\n    pass\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86on0i9k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp86on0i9k.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp86on0i9k.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() to check if a character is uppercase\n\
    \    # and the function islower() to check if a character is lowercase.\n    #\
    \ You can use the function ord() to get the ASCII code of a character.\n    #\
    \ You can use the function chr() to get the character from its ASCII code.\n \
    \   # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function range() to get a list of numbers.\n    # You can use the\
    \ function enumerate() to get the index and value of a list.\n    # You can use\
    \ the function zip() to combine two lists.\n    # You can use the function max()\
    \ to get the maximum value of a list.\n    # You can use the function min() to\
    \ get the minimum value of a list.\n    # You can use the function sum() to get\
    \ the sum of a list.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function pow() to get the power of\
    \ a number.\n    # You can use the function round() to round a number.\n    #\
    \ You can use the function sorted() to sort a list.\n    # You can use the function\
    \ reversed() to reverse a list.\n    # You can use the function join() to join\
    \ a list of strings.\n    # You can use the function split() to split a string\
    \ into a list of strings.\n    # You can use the function replace() to replace\
    \ a substring with another string.\n    # You can use the function strip() to\
    \ remove the whitespaces from the beginning and end of a string.\n    # You can\
    \ use the function lstrip() to remove the whitespaces from the beginning of a\
    \ string.\n    # You can use the function rstrip() to remove the whitespaces from\
    \ the end of a string.\n    # You can use the function find() to find the index\
    \ of a substring in a string.\n    # You can use the function count() to count\
    \ the number of occurrences of a substring in a string.\n    # You can use the\
    \ function index() to get the index of an element in a list.\n    # You can use\
    \ the function append() to add an element to the end of a list.\n    # You can\
    \ use\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2smoqnt8.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp2smoqnt8.py\", line 59,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp2smoqnt8.py\"\
    , line 48, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Get the strength of\
    \ each extension\n    strengths = [Extension_Strength(ext) for ext in extensions]\n\
    \    # Get the index of the strongest extension\n    strongest_index = strengths.index(max(strengths))\n\
    \    # Return the strongest extension\n    return class_name + '.' + extensions[strongest_index]\n\
    \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2jq9veo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpx2jq9veo.py\", line 38,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpx2jq9veo.py\"\
    , line 27, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpx2jq9veo.py\", line 20, in Strongest_Extension\n\
    \    strengths = [Extension_Strength(ext) for ext in extensions]\n  File \"/tmp/tmpx2jq9veo.py\"\
    , line 20, in <listcomp>\n    strengths = [Extension_Strength(ext) for ext in\
    \ extensions]\nNameError: name 'Extension_Strength' is not defined\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # Please note that the first letter of the class name is capitalized.\n  \
    \  # Please note that the first letter of the extension name is capitalized.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppr9d1ggq.py\", line\
    \ 73, in <module>\n    test_check()\n  File \"/tmp/tmppr9d1ggq.py\", line 71,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppr9d1ggq.py\"\
    , line 60, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # Your code here\n \
    \   # You can use the function isupper() and islower() from the string module\n\
    \    # to check if a character is uppercase or lowercase.\n    # You can use the\
    \ function ord() to get the ASCII code of a character.\n    # You can use the\
    \ function chr() to get the character from its ASCII code.\n    # You can use\
    \ the function len() to get the length of a string.\n    # You can use the function\
    \ range() to get a list of numbers.\n    # You can use the function zip() to combine\
    \ two lists into a list of pairs.\n    # You can use the function enumerate()\
    \ to get a list of pairs (index, element).\n    # You can use the function max()\
    \ to get the maximum value of a list.\n    # You can use the function min() to\
    \ get the minimum value of a list.\n    # You can use the function sum() to get\
    \ the sum of the elements of a list.\n    # You can use the function sorted()\
    \ to sort a list.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function filter() to filter a list.\n    # You can use\
    \ the function map() to map a function to a list.\n    # You can use the function\
    \ reduce() to reduce a list.\n    # You can use the function any() to check if\
    \ any element of a list is True.\n    # You can use the function all() to check\
    \ if all elements of a list are True.\n    # You can use the function str() to\
    \ convert a number to a string.\n    # You can use the function int() to convert\
    \ a string to a number.\n    # You can use the function float() to convert a string\
    \ to a float.\n    # You can use the function chr() to convert an integer to a\
    \ character.\n    # You can use the function ord() to convert a character to an\
    \ integer.\n    # You can use the function bin() to convert an integer to a binary\
    \ string.\n    # You can use the function hex() to convert an integer to a hexadecimal\
    \ string.\n    # You can use the function oct() to convert an integer to an octal\
    \ string.\n    # You can use the function pow() to raise a number to a power.\n\
    \    # You can use\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ymjd90y.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp4ymjd90y.py\", line 60,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp4ymjd90y.py\"\
    , line 49, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkld9l1oj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkld9l1oj.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpkld9l1oj.py\"\
    , line 24, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwjy8jha.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfwjy8jha.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpfwjy8jha.py\"\
    , line 26, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   pass\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiw0j2bp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppiw0j2bp.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmppiw0j2bp.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzqmxjfb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwzqmxjfb.py\", line 35,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpwzqmxjfb.py\"\
    , line 28, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), x))\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4rr84vm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4rr84vm.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpw4rr84vm.py\"\
    , line 25, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be\
    \ given the name of a class (a string) and a list of extensions.\n    The extensions\
    \ are to be used to load additional classes to the class. The\n    strength of\
    \ the extension is as follows: Let CAP be the number of the uppercase\n    letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n  \
    \  in the extension's name, the strength is given by the fraction CAP - SM. \n\
    \    You should find the strongest extension and return a string in this \n  \
    \  format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau298tqr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpau298tqr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpau298tqr.py\"\
    , line 27, in check\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-'])\
    \ == '__HAHA.123'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
