language: notypes.py
name: HumanEval_92_any_int
results:
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvkxiwd6.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmppvkxiwd6.py\", line 280,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppvkxiwd6.py\", line 270,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnmh9kc9.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpsnmh9kc9.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsnmh9kc9.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpospgcf__.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpospgcf__.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpospgcf__.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x + y == z or x + z\
    \ == y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvkxiwd6.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmppvkxiwd6.py\", line 280,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppvkxiwd6.py\", line 270,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (x == int(x) and y == int(y) and z == int(z)):\n      \
    \  return True\n    else:\n        return False\n\ndef check(candidate):\n   \
    \ assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4q992d_f.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp4q992d_f.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4q992d_f.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnmh9kc9.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpsnmh9kc9.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsnmh9kc9.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    # Your code here\n    if type(x)\
    \ == int and type(y) == int and type(z) == int:\n        if x == y + z or y ==\
    \ x + z or z == x + y:\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x + y == z or x + z == y\
    \ or y + z == x:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdavsvq3j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdavsvq3j.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdavsvq3j.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvkxiwd6.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmppvkxiwd6.py\", line 280,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppvkxiwd6.py\", line 270,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpospgcf__.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpospgcf__.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpospgcf__.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n\
    print(any_int(3.6, -2.2, 2))\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae8rti0z.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpae8rti0z.py\", line 46,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpae8rti0z.py\", line 36,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x + y == z or x + z == y or y + z ==\
    \ x:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x + y == z or x + z == y or y + z ==\
    \ x:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    # YOUR CODE HERE\n    if (isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)):\n        if (x == y + z\
    \ or y == x + z or z == x + y):\n            return True\n        else:\n    \
    \        return False\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpospgcf__.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpospgcf__.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpospgcf__.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnmh9kc9.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpsnmh9kc9.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsnmh9kc9.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    # Your code here\n    if (x\
    \ + y == z or x + z == y or y + z == x) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)):\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int):\n        return True\n    else:\n        return False\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x + y == z or x + z\
    \ == y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n    \n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x + y == z or x + z == y or y + z ==\
    \ x:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return x == y + z or y == x\
    \ + z or z == x + y and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8d61v6b8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8d61v6b8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8d61v6b8.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x + y == z or x + z == y or y + z ==\
    \ x:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x + y == z or x + z == y\
    \ or y + z == x:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdavsvq3j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdavsvq3j.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdavsvq3j.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpospgcf__.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpospgcf__.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpospgcf__.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvkxiwd6.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmppvkxiwd6.py\", line 280,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppvkxiwd6.py\", line 270,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    # Your code here\n    if isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or\
    \ y == x + z or z == x + y:\n            return True\n        else:\n        \
    \    return False\n    else:\n        return False\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    # YOUR CODE HERE\n    if isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or\
    \ y == x + z or z == x + y:\n            return True\n        else:\n        \
    \    return False\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    return (x == y + z or y ==\
    \ x + z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x\
    \ + y:\n            return True\n        else:\n            return False\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) != int or type(y)\
    \ != int or type(z) != int:\n        return False\n    elif x == y + z or y ==\
    \ x + z or z == x + y:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnmh9kc9.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpsnmh9kc9.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsnmh9kc9.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) != int or type(y)\
    \ != int or type(z) != int:\n        return False\n    elif x == y + z or y ==\
    \ x + z or z == x + y:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnmh9kc9.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmpsnmh9kc9.py\", line 277,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsnmh9kc9.py\", line 267,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z or x + z ==\
    \ y or y + z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x + y == z or x + z == y or y + z ==\
    \ x:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z) or (y == x\
    \ + z) or (z == x + y):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz65dvn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgz65dvn5.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgz65dvn5.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if x == y + z or y == x + z\
    \ or z == x + y:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfnfb370.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfnfb370.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptfnfb370.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x == y + z or y == x +\
    \ z or z == x + y) and (type(x) == int and type(y) == int and type(z) == int):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if (x + y == z) or (x + z ==\
    \ y) or (y + z == x):\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrwvqo7z.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrwvqo7z.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgrwvqo7z.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3,\
    \ 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6,\
    \ -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n    if type(x) == int and type(y)\
    \ == int and type(z) == int:\n        if x == y + z or y == x + z or z == x +\
    \ y:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
