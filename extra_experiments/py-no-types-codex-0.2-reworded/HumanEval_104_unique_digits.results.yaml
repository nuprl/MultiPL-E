language: notypes.py
name: HumanEval_104_unique_digits
results:
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    return [i for i in x if not any(j in str(i) for j in '02468')]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlninihs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjlninihs.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpjlninihs.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: int(x) % 2 == 0, str(i)))])\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    x = [i for i in x if not any(int(j) % 2 == 0 for j in str(i))]\n    return\
    \ sorted(x)\n\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe8gzun3s.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    lst = []\n    for i in x:\n        if i % 2 == 0:\n            lst.append(i)\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cm2bmdq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_cm2bmdq.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp_cm2bmdq.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Write your code here\n    return\
    \ [i for i in x if not any(int(j) % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsasp778g.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsasp778g.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpsasp778g.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe8gzun3s.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(j in\
    \ str(i) for j in '02468')]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9scjp44v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9scjp44v.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9scjp44v.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(d in\
    \ '02468' for d in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1f2pnyp6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1f2pnyp6.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1f2pnyp6.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe8gzun3s.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpe8gzun3s.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(map(lambda\
    \ x: int(x) % 2 == 0, str(i)))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74r4y_j5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp74r4y_j5.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp74r4y_j5.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(str(i).count(str(j)) for j in range(0, 10, 2))])\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(j in\
    \ str(i) for j in '02468')]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9scjp44v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9scjp44v.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9scjp44v.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpillyeqgg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpillyeqgg.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpillyeqgg.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0kl3_z55.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0kl3_z55.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp0kl3_z55.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh6jv8j8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnh6jv8j8.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnh6jv8j8.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(str(i).count(str(j)) for j in range(0, 10, 2))])\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    lst = []\n    for i in x:\n        if i % 2 == 0:\n            lst.append(i)\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cm2bmdq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_cm2bmdq.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp_cm2bmdq.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(j in\
    \ str(i) for j in '02468')]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgs24kkm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpfgs24kkm.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfgs24kkm.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(str(i).count(str(j))\
    \ for j in range(0, 10, 2))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzf7_qhbv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzf7_qhbv.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzf7_qhbv.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: int(x) % 2 == 0, str(i)))])\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, [int(j) for j in str(i)]))])\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    result = []\n\
    \    for i in x:\n        if not any(int(j) % 2 == 0 for j in str(i)):\n     \
    \       result.append(i)\n    return sorted(result)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(c in '02468' for c in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Write your code here\n    return\
    \ [i for i in x if not any(int(j) % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsasp778g.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsasp778g.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpsasp778g.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    unique_list =\
    \ []\n    for i in x:\n        if i % 2 != 0:\n            unique_list.append(i)\n\
    \    return sorted(unique_list)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm822nvuc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm822nvuc.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm822nvuc.py\", line\
    \ 22, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(map(lambda\
    \ x: int(x) % 2 == 0, str(i)))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74r4y_j5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp74r4y_j5.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp74r4y_j5.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(d)\
    \ % 2 == 0 for d in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt33lw7kp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpt33lw7kp.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpt33lw7kp.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0kl3_z55.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0kl3_z55.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp0kl3_z55.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: int(x) % 2 == 0, str(i)))])\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for i in x:\n\
    \        if i % 2 != 0:\n            unique_list.append(i)\n    return sorted(unique_list)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7et12wcy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7et12wcy.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7et12wcy.py\", line\
    \ 21, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    unique_list =\
    \ []\n    for i in x:\n        if '2' not in str(i) and '4' not in str(i) and\
    \ '6' not in str(i) and '8' not in str(i):\n            unique_list.append(i)\n\
    \    return sorted(unique_list)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7hs7cvxm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7hs7cvxm.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7hs7cvxm.py\", line\
    \ 22, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if all(int(j)\
    \ % 2 != 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu_bibrb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwu_bibrb.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwu_bibrb.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    result = []\n\
    \    for i in x:\n        if i % 2 != 0:\n            result.append(i)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgszewcm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxgszewcm.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxgszewcm.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([n for n in x if not\
    \ any(int(d) % 2 == 0 for d in str(n))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in \"02468\")])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9i9a02ga.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9i9a02ga.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in '02468' for j in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(str(i).count(str(j))\
    \ for j in range(0, 10, 2))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5oj_loru.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5oj_loru.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp5oj_loru.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: int(x) % 2 == 0, str(i)))])\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(d) % 2 == 0 for d in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu_bibrb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwu_bibrb.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwu_bibrb.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(d in '02468' for d in str(i))])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(d in\
    \ '02468' for d in str(i))]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjz8phpb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsjz8phpb.py\", line 23,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpsjz8phpb.py\", line\
    \ 17, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    return [i for i in x if not any(j in str(i) for j in '02468')]\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqlmdq3o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuqlmdq3o.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpuqlmdq3o.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(int(j)\
    \ % 2 == 0 for j in str(i))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkiumto.py\", line 22,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzvkiumto.py\", line\
    \ 16, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j % 2 == 0 for j in map(int, str(i)))])\n\n\ndef check(candidate):\n   \
    \ assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(map(lambda x: x % 2 == 0, map(int, str(i))))])\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(j in str(i) for j in '02468')])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any even digit.\n\n \
    \   Note: Returned list should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not\
    \ any(int(j) % 2 == 0 for j in str(i))])\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
